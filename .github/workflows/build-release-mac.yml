name: Builds - MacOS (release)

on:
  workflow_dispatch:
    inputs:
        version:
          description: "Version (x.xx.x)"
          required: true
          type: string
        createZip:
          description: "Create .zip file"
          default: true
          type: boolean
        createDmg:
          description: "Create .dmg file"
          default: true
          type: boolean

# concurrency:
#   group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
#   cancel-in-progress: true

jobs:
  macBuilder:
    name: Mac Build for v${{ inputs.version }}
    runs-on: macos-latest
    strategy:
      fail-fast: false
      matrix:
        # projectPath:
        #   - test-project
        unityVersion:
          - 2021.3.21f1
        targetPlatform:
          - StandaloneOSX

    steps:
      ###########################
      #         Checkout        #
      ###########################
      - name: "[Pre-install] Pull project"
        uses: actions/checkout@v3
        with:
          lfs: true

      ###########################
      #          Cache          #
      ###########################
      - name: "[Pre-install] Restore 'library' cache"
        uses: actions/cache@v3
        with:
          path: Library
          key: YARG-Library-macos-${{ matrix.targetPlatform }}
          restore-keys: |
            YARG-Library-macos-
            YARG-Library-

      ###########################
      #     Install Blender     #
      ###########################


      - name: "[Pre-install] Get Blender (3.4.1) from cache"
        id: blender
        uses: actions/cache@v3
        with: 
          path: Temp/BlenderInstall
          key: blender-3.4.1
          restore-keys: blender-

      - if: ${{ steps.blender.outputs.cache-hit != 'true' }}
        name: "[Pre-install] Download Blender (3.4.1)"
        continue-on-error: true
        run: mkdir -p Temp/BlenderInstall && curl -L -o "Temp/BlenderInstall/blender.dmg" https://download.blender.org/release/Blender3.4/blender-3.4.1-macos-x64.dmg

      # - name: "[Pre-install] Install Blender"
      #   run: brew install --cask blender

      - name: "[Pre-install] Install Blender (3.4.1)"
        run: >
          hdiutil attach Temp/BlenderInstall/blender.dmg && 
          cp -R /Volumes/Blender/Blender.app /Applications && 
          hdiutil unmount /Volumes/Blender &&
          chmod 555 Temp/BlenderInstall/blender.dmg

      ###########################
      #    Install Libraries    #
      ###########################
      - name: "[Pre-install] Install Libraries"
        run: pip3 install requests && python3 InstallLibraries/install.py
        
      ###########################
      #    Restore  Packages    #
      ###########################
      - name: "[Pre-install] Restoring NuGet Packages"
        run: dotnet tool install --global NuGetForUnity.Cli && nugetforunity restore

      ###########################
      #          Build          #
      ###########################
      - name: "[Build] Run Builder"
        uses: game-ci/unity-builder@v2.2.0
        continue-on-error: true
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        with:
          # projectPath: ${{ matrix.projectPath }}
          buildName: YARG
          unityVersion: ${{ matrix.unityVersion }}
          targetPlatform: ${{ matrix.targetPlatform }}
          cacheUnityInstallationOnMac: true

      ###########################
      #        Compress         #
      ###########################
      - if: ${{ inputs.createZip == true }}
        name: "[Post-build] Compress to a .zip"
        run: ditto -c -k --keepParent build/StandaloneOSX/YARG.app YARG_v${{ inputs.version }}-MacOS-Universal.zip
        
      - if: ${{ inputs.createZip == true }}
        name: "[Post-build] Upload .zip to artifacts"
        uses: actions/upload-artifact@v3
        with:
          name: YARG_v${{ inputs.version }}-MacOS-Universal.zip
          path: YARG_v${{ inputs.version }}-MacOS-Universal.zip

      ###########################
      #       Create .DMG       #
      ###########################
      - if: ${{ inputs.createDmg == true }}
        name: "[Post-build] Create .dmg"
        continue-on-error: true
        run: >
          echo "- Installing create-dmg" &&
          brew install graphicsmagick imagemagick &&
          npm install --global create-dmg &&
          echo "- Creating DMG" &&
          create-dmg build/StandaloneOSX/YARG.app --dmg-title=YARG

      - if: ${{ inputs.createDmg == true }}
        name: "[Post-build] Rename .dmg"
        run: find . -name *.dmg -print -exec mv {} "YARG_v${{ inputs.version }}-MacOS-Universal.dmg" \;

      - if: ${{ inputs.createDmg == true }}
        name: "[Post-build] Upload .dmg to artifacts"
        uses: actions/upload-artifact@v3
        with:
          name: YARG_v${{ inputs.version }}-MacOS-Universal.dmg
          path: YARG_v${{ inputs.version }}-MacOS-Universal.dmg