<?xml version="1.0"?>
<doc>
    <assembly>
        <name>TagLibSharp</name>
    </assembly>
    <members>
        <member name="T:TagLib.Aac.AudioHeader">
            <summary>
               This structure implements <see cref="T:TagLib.IAudioCodec" /> and provides
               information about an ADTS AAC audio stream.
            </summary>
        </member>
        <member name="F:TagLib.Aac.AudioHeader.sample_rates">
            <summary>
               Contains a sample rate table for ADTS AAC audio.
            </summary>
        </member>
        <member name="F:TagLib.Aac.AudioHeader.channels">
            <summary>
               Contains a channel table for ADTS AAC audio.
            </summary>
        </member>
        <member name="F:TagLib.Aac.AudioHeader.stream_length">
            <summary>
               Contains the audio stream length.
            </summary>
        </member>
        <member name="F:TagLib.Aac.AudioHeader.duration">
            <summary>
               Contains the audio stream duration.
            </summary>
        </member>
        <member name="F:TagLib.Aac.AudioHeader.audiochannels">
            <summary>
               Contains the number of channels in the audio
            </summary>
        </member>
        <member name="F:TagLib.Aac.AudioHeader.audiobitrate">
            <summary>
               Contains the bitrate of the audio stream
            </summary>
        </member>
        <member name="F:TagLib.Aac.AudioHeader.audiosamplerate">
            <summary>
               Contains the samplerate of the audio stream
            </summary>
        </member>
        <member name="F:TagLib.Aac.AudioHeader.Unknown">
            <summary>
               An empty and unset header.
            </summary>
        </member>
        <member name="M:TagLib.Aac.AudioHeader.#ctor">
            <summary>
               Constructs and initializes a new empty instance of <see
               cref="T:TagLib.Aac.AudioHeader" />
            </summary>       
        </member>
        <member name="M:TagLib.Aac.AudioHeader.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Aac.AudioHeader" /> by populating it with specified
               values.
            </summary>
            <param name="channels">
               A <see cref="T:System.Int32" /> value indicating the number
               of channels in the audio stream
            </param>
            <param name="bitrate">
               A <see cref="T:System.Int32" /> value indicating the bitrate
               of  the audio stream
            </param>
            <param name="samplerate">
               A <see cref="T:System.Int32" /> value indicating the samplerate
               of  the audio stream
            </param>
            <param name="numberofsamples">
               A <see cref="T:System.Int32" /> value indicating the number
               of samples in the audio stream
            </param>
            <param name="numberofframes">
               A <see cref="T:System.Int32" /> value indicating the number
               of frames in the audio stream
            </param>
        </member>
        <member name="P:TagLib.Aac.AudioHeader.Description">
            <summary>
               Gets a text description of the media represented by the
               current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> object containing a description
               of the media represented by the current instance.
            </value>
        </member>
        <member name="P:TagLib.Aac.AudioHeader.MediaTypes">
            <summary>
               Gets the types of media represented by the current
               instance.
            </summary>
            <value>
               Always <see cref="F:TagLib.MediaTypes.Audio" />.
            </value>
        </member>
        <member name="P:TagLib.Aac.AudioHeader.Duration">
            <summary>
               Gets the duration of the media represented by the current
               instance.
            </summary>
            <value>
               A <see cref="T:System.TimeSpan" /> containing the duration of the
               media represented by the current instance.
            </value>
            <remarks>
               If <see cref="M:TagLib.Aac.AudioHeader.SetStreamLength(System.Int64)" /> has not been called, this 
               value will not be correct.
            </remarks>
        </member>
        <member name="P:TagLib.Aac.AudioHeader.AudioBitrate">
            <summary>
               Gets the bitrate of the audio represented by the current
               instance.
            </summary>
            <value>
               A <see cref="T:System.Int32" /> value containing a bitrate of the
               audio represented by the current instance.
            </value>
        </member>
        <member name="P:TagLib.Aac.AudioHeader.AudioSampleRate">
            <summary>
               Gets the sample rate of the audio represented by the
               current instance.
            </summary>
            <value>
               A <see cref="T:System.Int32" /> value containing the sample rate of
               the audio represented by the current instance.
            </value>
        </member>
        <member name="P:TagLib.Aac.AudioHeader.AudioChannels">
            <summary>
               Gets the number of channels in the audio represented by
               the current instance.
            </summary>
            <value>
               A <see cref="T:System.Int32" /> value containing the number of
               channels in the audio represented by the current
               instance.
            </value>
        </member>
        <member name="M:TagLib.Aac.AudioHeader.SetStreamLength(System.Int64)">
            <summary>
               Sets the length of the audio stream represented by the
               current instance.
            </summary>
            <param name="streamLength">
               A <see cref="T:System.Int64" /> value specifying the length in
               bytes of the audio stream represented by the current
               instance.
            </param>
            <remarks>
               The this value has been set, <see cref="P:TagLib.Aac.AudioHeader.Duration" /> will
               return an incorrect value.
            </remarks>
        </member>
        <member name="M:TagLib.Aac.AudioHeader.Find(TagLib.Aac.AudioHeader@,TagLib.File,System.Int64,System.Int32)">
            <summary>
               Searches for an audio header in a <see cref="T:TagLib.File"
               /> starting at a specified position and searching through
               a specified number of bytes.
            </summary>
            <param name="header">
               A <see cref="T:TagLib.Aac.AudioHeader" /> object in which the found
               header will be stored.
            </param>
            <param name="file">
               A <see cref="T:TagLib.File" /> object to search.
            </param>
            <param name="position">
               A <see cref="T:System.Int64" /> value specifying the seek position
               in <paramref name="file" /> at which to start searching.
            </param>
            <param name="length">
               A <see cref="T:System.Int32" /> value specifying the maximum number
               of bytes to search before aborting.
            </param>
            <returns>
               A <see cref="T:System.Boolean" /> value indicating whether or not a
               header was found.
            </returns>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="file" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:TagLib.Aac.AudioHeader.Find(TagLib.Aac.AudioHeader@,TagLib.File,System.Int64)">
            <summary>
               Searches for an audio header in a <see cref="T:TagLib.File"
               /> starting at a specified position and searching to the
               end of the file.
            </summary>
            <param name="header">
               A <see cref="T:TagLib.Aac.AudioHeader" /> object in which the found
               header will be stored.
            </param>
            <param name="file">
               A <see cref="T:TagLib.File" /> object to search.
            </param>
            <param name="position">
               A <see cref="T:System.Int64" /> value specifying the seek position
               in <paramref name="file" /> at which to start searching.
            </param>
            <returns>
               A <see cref="T:System.Boolean" /> value indicating whether or not a
               header was found.
            </returns>
            <remarks>
               Searching to the end of the file can be very, very slow
               especially for corrupt or non-MPEG files. It is
               recommended to use <see
               cref="M:AudioHeader.Find(AudioHeader,TagLib.File,long,int)" />
               instead.
            </remarks>
        </member>
        <member name="T:TagLib.Aac.BitStream">
            <summary>
               This class is used to help reading arbitary number of bits from
               a fixed array of bytes
            </summary>
        </member>
        <member name="M:TagLib.Aac.BitStream.#ctor(System.Byte[])">
            <summary>
               Construct a new <see cref="T:TagLib.Aac.BitStream"/>.
            </summary>
            <param name="buffer">
               A <see cref="T:System.Byte[]"/>, must be 7 bytes long.
            </param>
        </member>
        <member name="M:TagLib.Aac.BitStream.ReadInt32(System.Int32)">
            <summary>
               Reads an Int32 from the bitstream        
            </summary>
            <param name="numberOfBits">
               A <see cref="T:System.Int32" /> value containing the number
               of bits to read from the bitstream
            </param>
        </member>
        <member name="T:TagLib.Aac.File">
            <summary>
               This class extends <see cref="T:TagLib.NonContainer.File" /> to
               provide tagging and properties support for ADTS AAC audio files.
            </summary>
            <remarks>
               A <see cref="T:TagLib.Id3v1.Tag" /> and <see
               cref="T:TagLib.Id3v2.Tag" /> will be added automatically to any
               file that doesn't contain one. This change does not effect the
               file until it is saved and can be reversed using the following
               method:
               <code>file.RemoveTags (file.TagTypes &amp; ~file.TagTypesOnDisk);</code>
            </remarks>
        </member>
        <member name="F:TagLib.Aac.File.first_header">
            <summary>
               Contains the first audio header.
            </summary>
        </member>
        <member name="M:TagLib.Aac.File.#ctor(System.String,TagLib.ReadStyle)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Aac.File" /> for a specified path in the local
               file system and specified read style.
            </summary>
            <param name="path">
               A <see cref="T:System.String" /> object containing the path of the
               file to use in the new instance.
            </param>
            <param name="propertiesStyle">
               A <see cref="T:TagLib.ReadStyle" /> value specifying at what level
               of accuracy to read the media properties, or <see
               cref="F:TagLib.ReadStyle.None" /> to ignore the properties.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="path" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:TagLib.Aac.File.#ctor(System.String)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Aac.File" /> for a specified path in the local
               file system with an average read style.
            </summary>
            <param name="path">
               A <see cref="T:System.String" /> object containing the path of the
               file to use in the new instance.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="path" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:TagLib.Aac.File.#ctor(TagLib.File.IFileAbstraction,TagLib.ReadStyle)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Aac.File" /> for a specified file abstraction and
               specified read style.
            </summary>
            <param name="abstraction">
               A <see cref="T:TagLib.File.IFileAbstraction" /> object to use when
               reading from and writing to the file.
            </param>
            <param name="propertiesStyle">
               A <see cref="T:TagLib.ReadStyle" /> value specifying at what level
               of accuracy to read the media properties, or <see
               cref="F:TagLib.ReadStyle.None" /> to ignore the properties.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="abstraction" /> is <see langword="null"
               />.
            </exception>
        </member>
        <member name="M:TagLib.Aac.File.#ctor(TagLib.File.IFileAbstraction)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Aac.File" /> for a specified file abstraction with
               an average read style.
            </summary>
            <param name="abstraction">
               A <see cref="T:TagLib.File.IFileAbstraction" /> object to use when
               reading from and writing to the file.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="abstraction" /> is <see langword="null"
               />.
            </exception>
        </member>
        <member name="M:TagLib.Aac.File.GetTag(TagLib.TagTypes,System.Boolean)">
            <summary>
               Gets a tag of a specified type from the current instance,
               optionally creating a new tag if possible.
            </summary>
            <param name="type">
               A <see cref="T:TagLib.TagTypes" /> value indicating the
               type of tag to read.
            </param>
            <param name="create">
               A <see cref="T:System.Boolean" /> value specifying whether or not to
               try and create the tag if one is not found.
            </param>
            <returns>
               A <see cref="T:TagLib.Tag" /> object containing the tag that was
               found in or added to the current instance. If no
               matching tag was found and none was created, <see
               langword="null" /> is returned.
            </returns>
            <remarks>
               If a <see cref="T:TagLib.Id3v2.Tag" /> is added to the
               current instance, it will be placed at the start of the
               file. On the other hand, <see cref="T:TagLib.Id3v1.Tag" />
               <see cref="T:TagLib.Ape.Tag" /> will be added to the end of
               the file. All other tag types will be ignored.
            </remarks>
        </member>
        <member name="M:TagLib.Aac.File.ReadStart(System.Int64,TagLib.ReadStyle)">
            <summary>
               Reads format specific information at the start of the
               file.
            </summary>
            <param name="start">
               A <see cref="T:System.Int64" /> value containing the seek position
               at which the tags end and the media data begins.
            </param>
            <param name="propertiesStyle">
               A <see cref="T:TagLib.ReadStyle" /> value specifying at what level
               of accuracy to read the media properties, or <see
               cref="F:TagLib.ReadStyle.None" /> to ignore the properties.
            </param>
            <remarks>
               This method only searches for an audio header in the
               first 16384 bytes of code to avoid searching forever in
               corrupt files.
            </remarks>
        </member>
        <member name="M:TagLib.Aac.File.ReadEnd(System.Int64,TagLib.ReadStyle)">
            <summary>
               Reads format specific information at the end of the
               file.
            </summary>
            <param name="end">
               A <see cref="T:System.Int64" /> value containing the seek position
               at which the media data ends and the tags begin.
            </param>
            <param name="propertiesStyle">
               A <see cref="T:TagLib.ReadStyle" /> value specifying at what level
               of accuracy to read the media properties, or <see
               cref="F:TagLib.ReadStyle.None" /> to ignore the properties.
            </param>
        </member>
        <member name="M:TagLib.Aac.File.ReadProperties(System.Int64,System.Int64,TagLib.ReadStyle)">
            <summary>
               Reads the audio properties from the file represented by
               the current instance.
            </summary>
            <param name="start">
               A <see cref="T:System.Int64" /> value containing the seek position
               at which the tags end and the media data begins.
            </param>
            <param name="end">
               A <see cref="T:System.Int64" /> value containing the seek position
               at which the media data ends and the tags begin.
            </param>
            <param name="propertiesStyle">
               A <see cref="T:TagLib.ReadStyle" /> value specifying at what level
               of accuracy to read the media properties, or <see
               cref="F:TagLib.ReadStyle.None" /> to ignore the properties.
            </param>
            <returns>
               A <see cref="T:TagLib.Properties" /> object describing the
               media properties of the file represented by the current
               instance.
            </returns>
        </member>
        <member name="T:TagLib.Aiff.File">
            <summary>
               This class extends <see cref="T:TagLib.File" /> to provide
               support for reading and writing tags and properties for files
               using the AIFF file format.
            </summary>
        </member>
        <member name="F:TagLib.Aiff.File.header_block">
            <summary>
               Contains the address of the AIFF header block.
            </summary>
        </member>
        <member name="F:TagLib.Aiff.File.tag">
            <summary>
             Contains the Id3v2 tag.
            </summary>
        </member>
        <member name="F:TagLib.Aiff.File.properties">
            <summary>
             Contains the media properties.
            </summary>
        </member>
        <member name="F:TagLib.Aiff.File.FileIdentifier">
            <summary>
               The identifier used to recognize a AIFF files.
            </summary>
            <value>
               "FORM"
            </value>
        </member>
        <member name="F:TagLib.Aiff.File.CommIdentifier">
            <summary>
               The identifier used to recognize a AIFF Common chunk.
            </summary>
            <value>
               "COMM"
            </value>
        </member>
        <member name="F:TagLib.Aiff.File.SoundIdentifier">
            <summary>
               The identifier used to recognize a AIFF Sound Data Chunk.
            </summary>
            <value>
               "SSND"
            </value>
        </member>
        <member name="F:TagLib.Aiff.File.ID3Identifier">
            <summary>
               The identifier used to recognize a AIFF ID3 chunk.
            </summary>
            <value>
               "ID3 "
            </value>
        </member>
        <member name="F:TagLib.Aiff.File.AIFFFormType">
            <summary>
               The identifier used to recognize a AIFF Form type.
            </summary>
            <value>
               "AIFF"
            </value>
        </member>
        <member name="M:TagLib.Aiff.File.#ctor(System.String,TagLib.ReadStyle)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Aiff.File" /> for a specified path in the local file
               system and specified read style.
            </summary>
            <param name="path">
               A <see cref="T:System.String" /> object containing the path of the
               file to use in the new instance.
            </param>
            <param name="propertiesStyle">
               A <see cref="T:TagLib.ReadStyle" /> value specifying at what level
               of accuracy to read the media properties, or <see
               cref="F:TagLib.ReadStyle.None" /> to ignore the properties.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="path" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:TagLib.Aiff.File.#ctor(System.String)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Aiff.File" /> for a specified path in the local file
               system with an average read style.
            </summary>
            <param name="path">
               A <see cref="T:System.String" /> object containing the path of the
               file to use in the new instance.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="path" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:TagLib.Aiff.File.#ctor(TagLib.File.IFileAbstraction,TagLib.ReadStyle)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Aiff.File" /> for a specified file abstraction and
               specified read style.
            </summary>
            <param name="abstraction">
               A <see cref="T:TagLib.File.IFileAbstraction" /> object to use when
               reading from and writing to the file.
            </param>
            <param name="propertiesStyle">
               A <see cref="T:TagLib.ReadStyle" /> value specifying at what level
               of accuracy to read the media properties, or <see
               cref="F:TagLib.ReadStyle.None" /> to ignore the properties.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="abstraction" /> is <see langword="null"
               />.
            </exception>
        </member>
        <member name="M:TagLib.Aiff.File.#ctor(TagLib.File.IFileAbstraction)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Aiff.File" /> for a specified file abstraction with an
               average read style.
            </summary>
            <param name="abstraction">
               A <see cref="T:TagLib.File.IFileAbstraction" /> object to use when
               reading from and writing to the file.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="abstraction" /> is <see langword="null"
               />.
            </exception>
        </member>
        <member name="P:TagLib.Aiff.File.Tag">
            <summary>
               Gets a abstract representation of all tags stored in the
               current instance.
            </summary>
            <value>
               A <see cref="T:TagLib.Tag" /> object representing all tags
               stored in the current instance.
            </value>
        </member>
        <member name="P:TagLib.Aiff.File.Properties">
            <summary>
               Gets the media properties of the file represented by the
               current instance.
            </summary>
            <value>
               A <see cref="T:TagLib.Properties" /> object containing the
               media properties of the file represented by the current
               instance.
            </value>
        </member>
        <member name="M:TagLib.Aiff.File.Save">
            <summary>
               Saves the changes made in the current instance to the
               file it represents.
            </summary>
        </member>
        <member name="M:TagLib.Aiff.File.RemoveTags(TagLib.TagTypes)">
            <summary>
               Removes a set of tag types from the current instance.
            </summary>
            <param name="types">
               A bitwise combined <see cref="T:TagLib.TagTypes" /> value
               containing tag types to be removed from the file.
            </param>
            <remarks>
               In order to remove all tags from a file, pass <see
               cref="F:TagLib.TagTypes.AllTags" /> as <paramref name="types" />.
            </remarks>
        </member>
        <member name="M:TagLib.Aiff.File.GetTag(TagLib.TagTypes,System.Boolean)">
            <summary>
               Gets a tag of a specified type from the current instance,
               optionally creating a new tag if possible.
            </summary>
            <param name="type">
               A <see cref="T:TagLib.TagTypes" /> value indicating the
               type of tag to read.
            </param>
            <param name="create">
               A <see cref="T:System.Boolean" /> value specifying whether or not to
               try and create the tag if one is not found.
            </param>
            <returns>
               A <see cref="P:TagLib.Aiff.File.Tag" /> object containing the tag that was
               found in or added to the current instance. If no
               matching tag was found and none was created, <see
               langword="null" /> is returned.
            </returns>
        </member>
        <member name="M:TagLib.Aiff.File.FindChunk(TagLib.ByteVector,System.Int64)">
            <summary>
               Search the file for a chunk whose name is given by
               the chunkName parameter, starting from startPos.
               Note that startPos must be a valid position for a
               chunk, or else finding will fail.
            </summary>
            <param name="chunkName">Name of the chunk to search for</param>
            <param name="startPos">Position for starting the search</param>
            <returns>
               Position of the chunk in the stream, or -1
               if no chunk was found.
            </returns>
        </member>
        <member name="M:TagLib.Aiff.File.Read(System.Boolean,TagLib.ReadStyle,System.UInt32@,System.Int64@,System.Int64@)">
            <summary>
               Reads the contents of the current instance determining
               the size of the riff data, the area the tagging is in,
               and optionally reading in the tags and media properties.
            </summary>
            <param name="read_tags">
               If <see langword="true" />, any tags found will be read
               into the current instance.
            </param>
            <param name="style">
               A <see cref="T:TagLib.ReadStyle"/> value specifying how the media
               data is to be read into the current instance.
            </param>
            <param name="aiff_size">
               A <see cref="T:System.UInt32"/> value reference to be filled with
               the size of the RIFF data as read from the file.
            </param>
            <param name="tag_start">
               A <see cref="T:System.Int64" /> value reference to be filled with
               the absolute seek position at which the tagging data
               starts.
            </param>
            <param name="tag_end">
               A <see cref="T:System.Int64" /> value reference to be filled with
               the absolute seek position at which the tagging data
               ends.
            </param>
            <exception cref="T:TagLib.CorruptFileException">
               The file does not begin with <see cref="F:TagLib.Aiff.File.FileIdentifier"
               />.
            </exception>
        </member>
        <member name="T:TagLib.Aiff.StreamHeader">
            <summary>
               This struct implements <see cref="T:TagLib.IAudioCodec" /> to provide
               support for reading Apple's AIFF stream properties.
            </summary>
        </member>
        <member name="F:TagLib.Aiff.StreamHeader.channels">
            <summary>
               Contains the number of channels.
            </summary>
            <remarks>
               This value is stored in bytes (9,10).
               1 is monophonic, 2 is stereo, 4 means 4 channels, etc..
               any number of audio channels may be represented
            </remarks>
        </member>
        <member name="F:TagLib.Aiff.StreamHeader.total_frames">
            <summary>
               Contains the number of sample frames in the Sound Data chunk.
            </summary>
            <remarks>
               This value is stored in bytes (11-14).
            </remarks>
        </member>
        <member name="F:TagLib.Aiff.StreamHeader.bits_per_sample">
            <summary>
               Contains the number of bits per sample.
            </summary>
            <remarks>
               This value is stored in bytes (15,16).
               It can be any number from 1 to 32.
            </remarks>
        </member>
        <member name="F:TagLib.Aiff.StreamHeader.sample_rate">
            <summary>
               Contains the sample rate.
            </summary>
            <remarks>
               This value is stored in bytes (17-26).
               the sample rate at which the sound is to be played back,
               in sample frames per second
            </remarks>
        </member>
        <member name="F:TagLib.Aiff.StreamHeader.stream_length">
            <summary>
               Contains the length of the audio stream.
            </summary>
            <remarks>
               This value is provided by the constructor.
            </remarks>
        </member>
        <member name="F:TagLib.Aiff.StreamHeader.Size">
            <summary>
               The size of an AIFF Common chunk
            </summary>
        </member>
        <member name="F:TagLib.Aiff.StreamHeader.FileIdentifier">
            <summary>
               The identifier used to recognize a AIFF file.
               Altough an AIFF file start with "FORM2, we're interested
               in the Common chunk only, which contains the properties we need.
            </summary>
            <value>
               "COMM"
            </value>
        </member>
        <member name="M:TagLib.Aiff.StreamHeader.#ctor(TagLib.ByteVector,System.Int64)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Aiff.StreamHeader" /> for a specified header block and
               stream length.
            </summary>
            <param name="data">
               A <see cref="T:TagLib.ByteVector" /> object containing the stream
               header data.
            </param>
            <param name="streamLength">
               A <see cref="T:System.Int64" /> value containing the length of the
               AIFF Audio stream in bytes.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="data" /> is <see langword="null" />.
            </exception>
            <exception cref="T:TagLib.CorruptFileException">
               <paramref name="data" /> does not begin with <see
               cref="F:TagLib.Aiff.StreamHeader.FileIdentifier" />
            </exception>
        </member>
        <member name="P:TagLib.Aiff.StreamHeader.Duration">
            <summary>
               Gets the duration of the media represented by the current
               instance.
            </summary>
            <value>
               A <see cref="T:System.TimeSpan" /> containing the duration of the
               media represented by the current instance.
            </value>
        </member>
        <member name="P:TagLib.Aiff.StreamHeader.MediaTypes">
            <summary>
               Gets the types of media represented by the current
               instance.
            </summary>
            <value>
               Always <see cref="F:TagLib.MediaTypes.Audio" />.
            </value>
        </member>
        <member name="P:TagLib.Aiff.StreamHeader.Description">
            <summary>
               Gets a text description of the media represented by the
               current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> object containing a description
               of the media represented by the current instance.
            </value>
        </member>
        <member name="P:TagLib.Aiff.StreamHeader.AudioBitrate">
            <summary>
               Gets the bitrate of the audio represented by the current
               instance.
            </summary>
            <value>
               A <see cref="T:System.Int32" /> value containing a bitrate of the
               audio represented by the current instance.
            </value>
        </member>
        <member name="P:TagLib.Aiff.StreamHeader.AudioSampleRate">
            <summary>
               Gets the sample rate of the audio represented by the
               current instance.
            </summary>
            <value>
               A <see cref="T:System.Int32" /> value containing the sample rate of
               the audio represented by the current instance.
            </value>
        </member>
        <member name="P:TagLib.Aiff.StreamHeader.AudioChannels">
            <summary>
               Gets the number of channels in the audio represented by
               the current instance.
            </summary>
            <value>
               A <see cref="T:System.Int32" /> value containing the number of
               channels in the audio represented by the current
               instance.
            </value>
        </member>
        <member name="P:TagLib.Aiff.StreamHeader.BitsPerSample">
            <summary>
               Gets the number of bits per sample in the audio
               represented by the current instance.
            </summary>
            <value>
               A <see cref="T:System.Int32" /> value containing the number of bits
               per sample in the audio represented by the current
               instance.
            </value>
        </member>
        <member name="T:TagLib.Ape.File">
            <summary>
               This class extends <see cref="T:TagLib.NonContainer.File" /> to
               provide tagging and properties support for Monkey's Audio APE
               files.
            </summary>
            <remarks>
               A <see cref="T:TagLib.Ape.Tag" /> will be added automatically to
               any file that doesn't contain one. This change does not effect
               the physical file until <see cref="M:TagLib.File.Save" /> is called and can be
               reversed using the following method:
               <code>file.RemoveTags (file.TagTypes &amp; ~file.TagTypesOnDisk);</code>
            </remarks>
        </member>
        <member name="F:TagLib.Ape.File.header_block">
            <summary>
               Contains the block with the audio header.
            </summary>
        </member>
        <member name="M:TagLib.Ape.File.#ctor(System.String,TagLib.ReadStyle)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Ape.File" /> for a specified path in the local file
               system and specified read style.
            </summary>
            <param name="path">
               A <see cref="T:System.String" /> object containing the path of the
               file to use in the new instance.
            </param>
            <param name="propertiesStyle">
               A <see cref="T:TagLib.ReadStyle" /> value specifying at what level
               of accuracy to read the media properties, or <see
               cref="F:TagLib.ReadStyle.None" /> to ignore the properties.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="path" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:TagLib.Ape.File.#ctor(System.String)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Ape.File" /> for a specified path in the local file
               system with an average read style.
            </summary>
            <param name="path">
               A <see cref="T:System.String" /> object containing the path of the
               file to use in the new instance.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="path" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:TagLib.Ape.File.#ctor(TagLib.File.IFileAbstraction,TagLib.ReadStyle)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Ape.File" /> for a specified file abstraction and
               specified read style.
            </summary>
            <param name="abstraction">
               A <see cref="T:TagLib.File.IFileAbstraction" /> object to use when
               reading from and writing to the file.
            </param>
            <param name="propertiesStyle">
               A <see cref="T:TagLib.ReadStyle" /> value specifying at what level
               of accuracy to read the media properties, or <see
               cref="F:TagLib.ReadStyle.None" /> to ignore the properties.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="abstraction" /> is <see langword="null"
               />.
            </exception>
        </member>
        <member name="M:TagLib.Ape.File.#ctor(TagLib.File.IFileAbstraction)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Ape.File" /> for a specified file abstraction with an
               average read style.
            </summary>
            <param name="abstraction">
               A <see cref="T:TagLib.File.IFileAbstraction" /> object to use when
               reading from and writing to the file.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="abstraction" /> is <see langword="null"
               />.
            </exception>
        </member>
        <member name="M:TagLib.Ape.File.GetTag(TagLib.TagTypes,System.Boolean)">
            <summary>
               Gets a tag of a specified type from the current instance,
               optionally creating a new tag if possible.
            </summary>
            <param name="type">
               A <see cref="T:TagLib.TagTypes" /> value indicating the
               type of tag to read.
            </param>
            <param name="create">
               A <see cref="T:System.Boolean" /> value specifying whether or not to
               try and create the tag if one is not found.
            </param>
            <returns>
               A <see cref="T:TagLib.Ape.Tag" /> object containing the tag that was
               found in or added to the current instance. If no
               matching tag was found and none was created, <see
               langword="null" /> is returned.
            </returns>
            <remarks>
               If a <see cref="T:TagLib.Id3v2.Tag" /> is added to the
               current instance, it will be placed at the start of the
               file. On the other hand, <see cref="T:TagLib.Id3v1.Tag" />
               <see cref="T:TagLib.Ape.Tag" /> will be added to the end of
               the file. All other tag types will be ignored.
            </remarks>
        </member>
        <member name="M:TagLib.Ape.File.ReadStart(System.Int64,TagLib.ReadStyle)">
            <summary>
               Reads format specific information at the start of the
               file.
            </summary>
            <param name="start">
               A <see cref="T:System.Int64" /> value containing the seek position
               at which the tags end and the media data begins.
            </param>
            <param name="propertiesStyle">
               A <see cref="T:TagLib.ReadStyle" /> value specifying at what level
               of accuracy to read the media properties, or <see
               cref="F:TagLib.ReadStyle.None" /> to ignore the properties.
            </param>
        </member>
        <member name="M:TagLib.Ape.File.ReadEnd(System.Int64,TagLib.ReadStyle)">
            <summary>
               Reads format specific information at the end of the
               file.
            </summary>
            <param name="end">
               A <see cref="T:System.Int64" /> value containing the seek position
               at which the media data ends and the tags begin.
            </param>
            <param name="propertiesStyle">
               A <see cref="T:TagLib.ReadStyle" /> value specifying at what level
               of accuracy to read the media properties, or <see
               cref="F:TagLib.ReadStyle.None" /> to ignore the properties.
            </param>
        </member>
        <member name="M:TagLib.Ape.File.ReadProperties(System.Int64,System.Int64,TagLib.ReadStyle)">
            <summary>
               Reads the audio properties from the file represented by
               the current instance.
            </summary>
            <param name="start">
               A <see cref="T:System.Int64" /> value containing the seek position
               at which the tags end and the media data begins.
            </param>
            <param name="end">
               A <see cref="T:System.Int64" /> value containing the seek position
               at which the media data ends and the tags begin.
            </param>
            <param name="propertiesStyle">
               A <see cref="T:TagLib.ReadStyle" /> value specifying at what level
               of accuracy to read the media properties, or <see
               cref="F:TagLib.ReadStyle.None" /> to ignore the properties.
            </param>
            <returns>
               A <see cref="T:TagLib.Properties" /> object describing the
               media properties of the file represented by the current
               instance.
            </returns>
        </member>
        <member name="T:TagLib.Ape.FooterFlags">
            <summary>
               Indicates the flags applied to a <see cref="T:TagLib.Ape.Footer" /> object.
            </summary>
        </member>
        <member name="F:TagLib.Ape.FooterFlags.FooterAbsent">
            <summary>
               The tag lacks a footer object.
            </summary>
        </member>
        <member name="F:TagLib.Ape.FooterFlags.IsHeader">
            <summary>
               The footer is actually a header.
            </summary>
        </member>
        <member name="F:TagLib.Ape.FooterFlags.HeaderPresent">
            <summary>
               The tag contains a header.
            </summary>
        </member>
        <member name="T:TagLib.Ape.Footer">
            <summary>
               This structure provides a representation of an APEv2 tag footer
               which can be read from and written to disk.
            </summary>
        </member>
        <member name="F:TagLib.Ape.Footer.version">
            <summary>
               Contains the APE tag version.
            </summary>
        </member>
        <member name="F:TagLib.Ape.Footer.Size">
            <summary>
               Specifies the size of an APEv2 footer.
            </summary>
        </member>
        <member name="F:TagLib.Ape.Footer.FileIdentifier">
            <summary>
               Specifies the identifier used find an APEv2 footer in a
               file.
            </summary>
            <value>
               "<c>APETAGEX</c>"
            </value>
        </member>
        <member name="M:TagLib.Ape.Footer.#ctor(TagLib.ByteVector)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Ape.Footer" /> by reading it from raw footer data.
            </summary>
            <param name="data">
               A <see cref="T:TagLib.ByteVector" /> object containing the raw
               data to build the new instance from.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="data" /> is <see langword="null" />.
            </exception>
            <exception cref="T:TagLib.CorruptFileException">
               <paramref name="data" /> is smaller than <see
               cref="F:TagLib.Ape.Footer.Size" /> or does not begin with <see
               cref="F:TagLib.Ape.Footer.FileIdentifier" />.
            </exception>
        </member>
        <member name="P:TagLib.Ape.Footer.Version">
            <summary>
               Gets the version of APE tag described by the current
               instance.
            </summary>
            <value>
               A <see cref="T:System.UInt32" /> value containing the version of the
               APE tag described by the current instance.
            </value>
        </member>
        <member name="P:TagLib.Ape.Footer.Flags">
            <summary>
               Gets and sets the flags that apply to the current
               instance.
            </summary>
            <value>
               A bitwise combined <see cref="T:TagLib.Ape.FooterFlags" /> value
               containing the flags that apply to the current instance.
            </value>
        </member>
        <member name="P:TagLib.Ape.Footer.ItemCount">
            <summary>
               Gets and sets the number of items in the tag represented
               by the current instance.
            </summary>
            <value>
               A <see cref="T:System.UInt32" /> value containing the number of
               items in the tag represented by the current instance.
            </value>
        </member>
        <member name="P:TagLib.Ape.Footer.TagSize">
            <summary>
               Gets the size of the tag represented by the current
               instance, including the footer but excluding the header
               if applicable.
            </summary>
            <value>
               A <see cref="T:System.UInt32" /> value containing the size of the
               tag represented by the current instance.
            </value>
        </member>
        <member name="P:TagLib.Ape.Footer.CompleteTagSize">
            <summary>
               Gets the complete size of the tag represented by the
               current instance, including the header and footer.
            </summary>
            <value>
               A <see cref="T:System.UInt32" /> value containing the size of the
               tag represented by the current instance.
            </value>
        </member>
        <member name="M:TagLib.Ape.Footer.RenderFooter">
            <summary>
               Renders the current instance as an APE tag footer.
            </summary>
            <returns>
               A <see cref="T:TagLib.ByteVector" /> object containing the
               rendered version of the current instance.
            </returns>
        </member>
        <member name="M:TagLib.Ape.Footer.RenderHeader">
            <summary>
               Renders the current instance as an APE tag header.
            </summary>
            <returns>
               A <see cref="T:TagLib.ByteVector" /> object containing the
               rendered version of the current instance or an empty
               <see cref="T:TagLib.ByteVector" /> object if <see cref="P:TagLib.Ape.Footer.Flags" />
               does not include <see cref="F:TagLib.Ape.FooterFlags.HeaderPresent"
               />.
            </returns>
        </member>
        <member name="M:TagLib.Ape.Footer.Render(System.Boolean)">
            <summary>
               Renders the current instance as either an APE tag header
               or footer.
            </summary>
            <param name="isHeader">
               A <see cref="T:System.Boolean" /> value indicating whether or not the
               current instance is to be rendered as a header.
            </param>
            <returns>
               A <see cref="T:TagLib.ByteVector" /> object containing the
               rendered version of the current instance.
            </returns>
        </member>
        <member name="M:TagLib.Ape.Footer.GetHashCode">
            <summary>
               Generates a hash code for the current instance.
            </summary>
            <returns>
               A <see cref="T:System.Int32" /> value containing the hash code for
               the current instance.
            </returns>
        </member>
        <member name="M:TagLib.Ape.Footer.Equals(System.Object)">
            <summary>
               Checks whether or not the current instance is equal to
               another object.
            </summary>
            <param name="other">
               A <see cref="T:System.Object" /> to compare to the current
               instance.
            </param>
            <returns>
               A <see cref="T:System.Boolean" /> value indicating whether or not the
               current instance is equal to <paramref name="other" />.
            </returns>
            <seealso cref="M:System.IEquatable`1.Equals" />
        </member>
        <member name="M:TagLib.Ape.Footer.Equals(TagLib.Ape.Footer)">
            <summary>
               Checks whether or not the current instance is equal to
               another instance of <see cref="T:TagLib.Ape.Footer" />.
            </summary>
            <param name="other">
               A <see cref="T:TagLib.Ape.Footer" /> object to compare to the current
               instance.
            </param>
            <returns>
               A <see cref="T:System.Boolean" /> value indicating whether or not the
               current instance is equal to <paramref name="other" />.
            </returns>
            <seealso cref="M:System.IEquatable`1.Equals" />
        </member>
        <member name="M:TagLib.Ape.Footer.op_Equality(TagLib.Ape.Footer,TagLib.Ape.Footer)">
            <summary>
               Gets whether or not two instances of <see cref="T:TagLib.Ape.Footer"
               /> are equal to eachother.
            </summary>
            <param name="first">
               The first <see cref="T:TagLib.Ape.Footer" /> object to compare.
            </param>
            <param name="second">
               The second <see cref="T:TagLib.Ape.Footer" /> object to compare.
            </param>
            <returns>
               <see langword="true" /> if <paramref name="first" /> is
               equal to <paramref name="second" />. Otherwise, <see
               langword="false" />.
            </returns>
        </member>
        <member name="M:TagLib.Ape.Footer.op_Inequality(TagLib.Ape.Footer,TagLib.Ape.Footer)">
            <summary>
               Gets whether or not two instances of <see cref="T:TagLib.Ape.Footer"
               /> are unequal to eachother.
            </summary>
            <param name="first">
               The first <see cref="T:TagLib.Ape.Footer" /> object to compare.
            </param>
            <param name="second">
               The second <see cref="T:TagLib.Ape.Footer" /> object to compare.
            </param>
            <returns>
               <see langword="true" /> if <paramref name="first" /> is
               unequal to <paramref name="second" />. Otherwise, <see
               langword="false" />.
            </returns>
        </member>
        <member name="T:TagLib.Ape.ItemType">
            <summary>
               Indicates the type of data stored in a <see cref="T:TagLib.Ape.Item" />
               object.
            </summary>
        </member>
        <member name="F:TagLib.Ape.ItemType.Text">
            <summary>
               The item contains Unicode text.
            </summary>
        </member>
        <member name="F:TagLib.Ape.ItemType.Binary">
            <summary>
               The item contains binary data.
            </summary>
        </member>
        <member name="F:TagLib.Ape.ItemType.Locator">
            <summary>
               The item contains a locator (file path/URL) for external
               information.
            </summary>
        </member>
        <member name="T:TagLib.Ape.Item">
            <summary>
               This class provides a representation of an APEv2 tag item which
               can be read from and written to disk.
            </summary>
        </member>
        <member name="F:TagLib.Ape.Item.data">
            <summary>
               Contains the item value.
            </summary>
        </member>
        <member name="F:TagLib.Ape.Item.text">
            <summary>
               Contains the item text.
            </summary>
        </member>
        <member name="M:TagLib.Ape.Item.#ctor(TagLib.ByteVector,System.Int32)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Ape.Item" />  by reading in a raw APEv2 item.
            </summary>
            <param name="data">
               A <see cref="T:TagLib.ByteVector" /> object containing the item to
               read.
            </param>
            <param name="offset">
               A <see cref="T:System.Int32" /> value specifying the offset in
               <paramref name="data" /> at which the item data begins.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="data" /> is <see langword="null" />.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
               <paramref name="offset" /> is less than zero.
            </exception>
            <exception cref="T:TagLib.CorruptFileException">
               A complete item could not be read.
            </exception>
        </member>
        <member name="M:TagLib.Ape.Item.#ctor(System.String,System.String)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Ape.Item" /> with a specified key and value.
            </summary>
            <param name="key">
               A <see cref="T:System.String" /> object containing the key to use
               for the current instance.
            </param>
            <param name="value">
               A <see cref="T:System.String" /> object containing the value to
               store in the new instance.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="key" /> or <paramref name="value" /> is
               <see langword="null" />.
            </exception>
        </member>
        <member name="M:TagLib.Ape.Item.#ctor(System.String,System.String[])">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Ape.Item" /> with a specified key and collection of
               values.
            </summary>
            <param name="key">
               A <see cref="T:System.String" /> object containing the key to use
               for the current instance.
            </param>
            <param name="value">
               A <see cref="T:string[]" /> containing the values to store
               in the new instance.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="key" /> or <paramref name="value" /> is
               <see langword="null" />.
            </exception>
        </member>
        <member name="M:TagLib.Ape.Item.#ctor(System.String,TagLib.StringCollection)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Ape.Item" /> with a specified key and collection of
               values.
            </summary>
            <param name="key">
               A <see cref="T:System.String" /> object containing the key to use
               for the current instance.
            </param>
            <param name="value">
               A <see cref="T:TagLib.StringCollection" /> object containing the
               values to store in the new instance.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="key" /> or <paramref name="value" /> is
               <see langword="null" />.
            </exception>
            <seealso cref="M:TagLib.Ape.Item.#ctor(System.String,System.String[])" />
        </member>
        <member name="M:TagLib.Ape.Item.#ctor(System.String,TagLib.ByteVector)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Ape.Item" /> with a specified key and raw data.
            </summary>
            <param name="key">
               A <see cref="T:System.String" /> object containing the key to use
               for the current instance.
            </param>
            <param name="value">
               A <see cref="T:TagLib.StringCollection" /> object containing the
               values to store in the new instance.
            </param>
            <remarks>
               This constructor automatically marks the new instance as
               <see cref="F:TagLib.Ape.ItemType.Binary" />.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="key" /> or <paramref name="value" /> is
               <see langword="null" />.
            </exception>
            <seealso cref="M:TagLib.Ape.Item.#ctor(System.String,System.String[])" />
        </member>
        <member name="P:TagLib.Ape.Item.Key">
            <summary>
               Gets the key used to identify the current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> object containing the key used to
               identify the current instance.
            </value>
            <remarks>
               This value is used for specifying the contents of the
               item in a common and consistant fashion. For example,
               <c>"TITLE"</c> specifies that the item contains the title
               of the track.
            </remarks>
        </member>
        <member name="P:TagLib.Ape.Item.Value">
            <summary>
               Gets the binary value stored in the current instance.
            </summary>
            <value>
               A <see cref="T:TagLib.ByteVector" /> object containing the binary
               value stored in the current instance, or <see
               langword="null" /> if the item contains text.
            </value>
        </member>
        <member name="P:TagLib.Ape.Item.Size">
            <summary>
               Gets the size of the current instance as it last appeared
               on disk.
            </summary>
            <value>
               A <see cref="T:System.Int32" /> value containing the size of the
               current instance as it last appeared on disk.
            </value>
        </member>
        <member name="P:TagLib.Ape.Item.Type">
            <summary>
               Gets and sets the type of value contained in the
               current instance.
            </summary>
            <value>
               A <see cref="T:TagLib.Ape.ItemType" /> value indicating the type of
               value contained in the current instance.
            </value>
        </member>
        <member name="P:TagLib.Ape.Item.ReadOnly">
            <summary>
               Gets and sets whether or not the current instance is
               flagged as read-only on disk.
            </summary>
            <value>
               A <see cref="T:System.Boolean" /> value indicating whether or not the
               current instance is flagged as read-only on disk.
            </value>
        </member>
        <member name="P:TagLib.Ape.Item.IsEmpty">
            <summary>
               Gets whether or not the current instance is empty.
            </summary>
            <value>
               A <see cref="T:System.Boolean" /> value indicating whether or not the
               current instance contains no value.
            </value>
        </member>
        <member name="M:TagLib.Ape.Item.ToString">
            <summary>
               Gets the contents of the current instance as a <see
               cref="T:System.String" />.
            </summary>
            <returns>
               <para>A <see cref="T:System.String" /> object containing the text
               stored in the current instance, or <see langword="null"
               /> if the item is empty of contains binary data.</para>
               <para>If the current instance contains multiple string
               values, they will be returned as a comma separated
               value.</para>
            </returns>
        </member>
        <member name="M:TagLib.Ape.Item.ToStringArray">
            <summary>
               Gets the contents of the current instance as a <see
               cref="T:System.String" /> array.
            </summary>
            <returns>
               A <see cref="T:string[]" /> containing the text stored in
               the current instance, or an empty array if the item
               contains binary data.
            </returns>
        </member>
        <member name="M:TagLib.Ape.Item.Render">
            <summary>
               Renders the current instance as an APEv2 item.
            </summary>
            <returns>
               A <see cref="T:TagLib.ByteVector" /> object containing the
               rendered version of the current instance.
            </returns>
        </member>
        <member name="M:TagLib.Ape.Item.Parse(TagLib.ByteVector,System.Int32)">
            <summary>
               Populates the current instance by reading in a raw APEv2
               item.
            </summary>
            <param name="data">
               A <see cref="T:TagLib.ByteVector" /> object containing the item to
               read.
            </param>
            <param name="offset">
               A <see cref="T:System.Int32" /> value specifying the offset in
               <paramref name="data" /> at which the item data begins.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="data" /> is <see langword="null" />.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
               <paramref name="offset" /> is less than zero.
            </exception>
            <exception cref="T:TagLib.CorruptFileException">
               A complete item could not be read.
            </exception>
        </member>
        <member name="M:TagLib.Ape.Item.Clone">
            <summary>
               Creates a deep copy of the current instance.
            </summary>
            <returns>
               A new <see cref="T:TagLib.Ape.Item"/> object identical to the current
               instance.
            </returns>
        </member>
        <member name="T:TagLib.Ape.CompressionLevel">
            <summary>
               Indicates the compression level used when encoding a Monkey's
               Audio APE file.
            </summary>
        </member>
        <member name="F:TagLib.Ape.CompressionLevel.None">
            <summary>
               The audio is not compressed.
            </summary>
        </member>
        <member name="F:TagLib.Ape.CompressionLevel.Fast">
            <summary>
               The audio is mildly compressed.
            </summary>
        </member>
        <member name="F:TagLib.Ape.CompressionLevel.Normal">
            <summary>
               The audio is compressed at a normal level.
            </summary>
        </member>
        <member name="F:TagLib.Ape.CompressionLevel.High">
            <summary>
               The audio is highly compressed.
            </summary>
        </member>
        <member name="F:TagLib.Ape.CompressionLevel.ExtraHigh">
            <summary>
               The audio is extremely highly compressed.
            </summary>
        </member>
        <member name="F:TagLib.Ape.CompressionLevel.Insane">
            <summary>
               The audio is compressed to an insane level.
            </summary>
        </member>
        <member name="T:TagLib.Ape.StreamHeader">
            <summary>
               This struct implements <see cref="T:TagLib.IAudioCodec" /> to provide
               support for reading Monkey's Audio APE stream properties.
            </summary>
        </member>
        <member name="F:TagLib.Ape.StreamHeader.version">
            <summary>
               Contains the APE version.
            </summary>
            <remarks>
               This value is stored in bytes (4,5) of the file and is
               1000 times the actual version number, so 3810 indicates
               version 3.81.
            </remarks>
        </member>
        <member name="F:TagLib.Ape.StreamHeader.blocks_per_frame">
            <summary>
               Contains the number of audio blocks in one frame.
            </summary>
            <remarks>
               This value is stored in bytes (55-58).
            </remarks>
        </member>
        <member name="F:TagLib.Ape.StreamHeader.final_frame_blocks">
            <summary>
               Contains the number of audio blocks in the final frame.
            </summary>
            <remarks>
               This value is stored in bytes (59-62).
            </remarks>
        </member>
        <member name="F:TagLib.Ape.StreamHeader.total_frames">
            <summary>
               Contains the total number of frames.
            </summary>
            <remarks>
               This value is stored in bytes (63-66).
            </remarks>
        </member>
        <member name="F:TagLib.Ape.StreamHeader.bits_per_sample">
            <summary>
               Contains the number of bits per sample.
            </summary>
            <remarks>
               This value is stored in bytes (67,68) and is typically
               16.
            </remarks>
        </member>
        <member name="F:TagLib.Ape.StreamHeader.channels">
            <summary>
               Contains the number of channels.
            </summary>
            <remarks>
               This value is stored in bytes (69,70) and is typically
               1 or 2.
            </remarks>
        </member>
        <member name="F:TagLib.Ape.StreamHeader.sample_rate">
            <summary>
               Contains the sample rate.
            </summary>
            <remarks>
               This value is stored in bytes (71-74) and is typically
               44100.
            </remarks>
        </member>
        <member name="F:TagLib.Ape.StreamHeader.stream_length">
            <summary>
               Contains the length of the audio stream.
            </summary>
            <remarks>
               This value is provided by the constructor.
            </remarks>
        </member>
        <member name="F:TagLib.Ape.StreamHeader.Size">
            <summary>
               The size of a Monkey Audio header.
            </summary>
        </member>
        <member name="F:TagLib.Ape.StreamHeader.FileIdentifier">
            <summary>
               The identifier used to recognize a WavPack file.
            </summary>
            <value>
               "MAC "
            </value>
        </member>
        <member name="M:TagLib.Ape.StreamHeader.#ctor(TagLib.ByteVector,System.Int64)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Ape.StreamHeader" /> for a specified header block and
               stream length.
            </summary>
            <param name="data">
               A <see cref="T:TagLib.ByteVector" /> object containing the stream
               header data.
            </param>
            <param name="streamLength">
               A <see cref="T:System.Int64" /> value containing the length of the
               Monkey Audio stream in bytes.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="data" /> is <see langword="null" />.
            </exception>
            <exception cref="T:TagLib.CorruptFileException">
               <paramref name="data" /> does not begin with <see
               cref="F:TagLib.Ape.StreamHeader.FileIdentifier" /> or is less than <see cref="F:TagLib.Ape.StreamHeader.Size"
               /> bytes long.
            </exception>
        </member>
        <member name="P:TagLib.Ape.StreamHeader.Duration">
            <summary>
               Gets the duration of the media represented by the current
               instance.
            </summary>
            <value>
               A <see cref="T:System.TimeSpan" /> containing the duration of the
               media represented by the current instance.
            </value>
        </member>
        <member name="P:TagLib.Ape.StreamHeader.MediaTypes">
            <summary>
               Gets the types of media represented by the current
               instance.
            </summary>
            <value>
               Always <see cref="F:TagLib.MediaTypes.Audio" />.
            </value>
        </member>
        <member name="P:TagLib.Ape.StreamHeader.Description">
            <summary>
               Gets a text description of the media represented by the
               current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> object containing a description
               of the media represented by the current instance.
            </value>
        </member>
        <member name="P:TagLib.Ape.StreamHeader.AudioBitrate">
            <summary>
               Gets the bitrate of the audio represented by the current
               instance.
            </summary>
            <value>
               A <see cref="T:System.Int32" /> value containing a bitrate of the
               audio represented by the current instance.
            </value>
        </member>
        <member name="P:TagLib.Ape.StreamHeader.AudioSampleRate">
            <summary>
               Gets the sample rate of the audio represented by the
               current instance.
            </summary>
            <value>
               A <see cref="T:System.Int32" /> value containing the sample rate of
               the audio represented by the current instance.
            </value>
        </member>
        <member name="P:TagLib.Ape.StreamHeader.AudioChannels">
            <summary>
               Gets the number of channels in the audio represented by
               the current instance.
            </summary>
            <value>
               A <see cref="T:System.Int32" /> value containing the number of
               channels in the audio represented by the current
               instance.
            </value>
        </member>
        <member name="P:TagLib.Ape.StreamHeader.Version">
            <summary>
               Gets the APE version of the audio represented by the
               current instance.
            </summary>
            <value>
               A <see cref="T:System.Double" /> value containing the APE version
               of the audio represented by the current instance.
            </value>
        </member>
        <member name="P:TagLib.Ape.StreamHeader.BitsPerSample">
            <summary>
               Gets the number of bits per sample in the audio
               represented by the current instance.
            </summary>
            <value>
               A <see cref="T:System.Int32" /> value containing the number of bits
               per sample in the audio represented by the current
               instance.
            </value>
        </member>
        <member name="P:TagLib.Ape.StreamHeader.Compression">
            <summary>
               Gets the level of compression used when encoding the
               audio represented by the current instance.
            </summary>
            <value>
               A <see cref="T:TagLib.Ape.CompressionLevel" /> value indicating the
               level of compression used when encoding the audio
               represented by the current instance.
            </value>
        </member>
        <member name="T:TagLib.Ape.Tag">
            <summary>
               This class extends <see cref="T:TagLib.Tag" /> and implements <see
               cref="T:System.Collections.Generic.IEnumerable`1" /> to provide a representation of an APEv2
               tag which can be read from and written to disk.
            </summary>
        </member>
        <member name="F:TagLib.Ape.Tag.picture_item_names">
            <summary>
               Contains names of picture fields, indexed to correspond
               to their picture item names.
            </summary>
        </member>
        <member name="F:TagLib.Ape.Tag.footer">
            <summary>
               Contains the tag footer.
            </summary>
        </member>
        <member name="F:TagLib.Ape.Tag.items">
            <summary>
               Contains the items in the tag.
            </summary>
        </member>
        <member name="F:TagLib.Ape.Tag.FileIdentifier">
            <summary>
               Specifies the identifier used find an APEv2 tag in a
               file.
            </summary>
            <value>
               "<c>APETAGEX</c>"
            </value>
        </member>
        <member name="M:TagLib.Ape.Tag.#ctor">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Ape.Tag" /> with no contents.
            </summary>
        </member>
        <member name="M:TagLib.Ape.Tag.#ctor(TagLib.File,System.Int64)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Ape.Tag" /> by reading the contents from a specified
               position in a specified file.
            </summary>
            <param name="file">
               A <see cref="T:TagLib.File" /> object containing the file
               from which the contents of the new instance is to be
               read.
            </param>
            <param name="position">
               A <see cref="T:System.Int64" /> value specify at what position to
               read the tag.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="file" /> is <see langword="null" />.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
               <paramref name="position" /> is less than zero or greater
               than the size of the file.
            </exception>
        </member>
        <member name="M:TagLib.Ape.Tag.#ctor(TagLib.ByteVector)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Ape.Tag" /> by reading the contents of a raw tag in a
               specified <see cref="T:TagLib.ByteVector"/> object.
            </summary>
            <param name="data">
               A <see cref="T:TagLib.ByteVector" /> object containing the raw
               tag.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="data" /> is <see langword="null"/>.
            </exception>
            <exception cref="T:TagLib.CorruptFileException">
               <paramref name="data" /> is too small to contain a tag,
               has a header where the footer should be, or is smaller
               than the tag it is supposed to contain.
            </exception>
        </member>
        <member name="P:TagLib.Ape.Tag.HeaderPresent">
            <summary>
               Gets and sets whether or not the current instance has a
               header when rendered.
            </summary>
            <value>
               A <see cref="T:System.Boolean" /> value indicating whether or not the
               current instance has a header when rendered.
            </value>
        </member>
        <member name="M:TagLib.Ape.Tag.AddValue(System.String,System.UInt32,System.UInt32)">
            <summary>
               Adds a number to the value stored in a specified item.
            </summary>
            <param name="key">
               A <see cref="T:System.String" /> object containing the key of the
               item to store the value in.
            </param>
            <param name="number">
               A <see cref="T:System.UInt32" /> value containing the number to
               store.
            </param>
            <param name="count">
               A <see cref="T:System.UInt32" /> value representing a total which
               <paramref name="number" /> is a part of, or zero if
               <paramref name="number" /> is not part of a set.
            </param>
            <remarks>
               If both <paramref name="number" /> and <paramref
               name="count" /> are equal to zero, the value will not be
               added. If <paramref name="count" /> is zero, <paramref
               name="number" /> by itself will be stored. Otherwise, the
               values will be stored as "<paramref name="number"
               />/<paramref name="count" />".
            </remarks>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="key" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:TagLib.Ape.Tag.SetValue(System.String,System.UInt32,System.UInt32)">
            <summary>
               Stores a number in a specified item.
            </summary>
            <param name="key">
               A <see cref="T:System.String" /> object containing the key of the
               item to store the value in.
            </param>
            <param name="number">
               A <see cref="T:System.UInt32" /> value containing the number to
               store.
            </param>
            <param name="count">
               A <see cref="T:System.UInt32" /> value representing a total which
               <paramref name="number" /> is a part of, or zero if
               <paramref name="number" /> is not part of a set.
            </param>
            <remarks>
               If both <paramref name="number" /> and <paramref
               name="count" /> are equal to zero, the value will be
               cleared. If <paramref name="count" /> is zero, <paramref
               name="number" /> by itself will be stored. Otherwise, the
               values will be stored as "<paramref name="number"
               />/<paramref name="count" />".
            </remarks>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="key" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:TagLib.Ape.Tag.AddValue(System.String,System.String)">
            <summary>
               Adds the contents of a <see cref="T:System.String" /> to the value
               stored in a specified item.
            </summary>
            <param name="key">
               A <see cref="T:System.String" /> object containing the key of the
               item to store the value in.
            </param>
            <param name="value">
               A <see cref="T:System.String" /> object containing the text to
               add.
            </param>
            <remarks>
               If <paramref name="value" /> is <see langword="null" />
               or empty, the value will not be added.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="key" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:TagLib.Ape.Tag.SetValue(System.String,System.String)">
            <summary>
               Stores the contents of a <see cref="T:System.String" /> in a
               specified item.
            </summary>
            <param name="key">
               A <see cref="T:System.String" /> object containing the key of the
               item to store the value in.
            </param>
            <param name="value">
               A <see cref="T:System.String" /> object containing the text to
               store.
            </param>
            <remarks>
               If <paramref name="value" /> is <see langword="null" />
               or empty, the value will be cleared.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="key" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:TagLib.Ape.Tag.AddValue(System.String,System.String[])">
            <summary>
               Adds the contents of a <see cref="T:string[]" /> to the
               value stored in a specified item.
            </summary>
            <param name="key">
               A <see cref="T:System.String" /> object containing the key of the
               item to store the value in.
            </param>
            <param name="value">
               A <see cref="T:string[]" /> containing the text to add.
            </param>
            <remarks>
               If <paramref name="value" /> is <see langword="null" />
               or empty, the value will not be added.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="key" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:TagLib.Ape.Tag.SetValue(System.String,System.String[])">
            <summary>
               Stores the contents of a <see cref="T:string[]" /> in a
               specified item.
            </summary>
            <param name="key">
               A <see cref="T:System.String" /> object containing the key of the
               item to store the value in.
            </param>
            <param name="value">
               A <see cref="T:string[]" /> containing the text to store.
            </param>
            <remarks>
               If <paramref name="value" /> is <see langword="null" />
               or empty, the value will be cleared.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="key" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:TagLib.Ape.Tag.GetItem(System.String)">
            <summary>
               Gets a specified item from the current instance.
            </summary>
            <param name="key">
               A <see cref="T:System.String" /> object containing the key of the
               item to get from the current instance.
            </param>
            <returns>
               The item with the matching name contained in the current
               instance, or <see langword="null" /> if a matching object
               was not found.
            </returns>
        </member>
        <member name="M:TagLib.Ape.Tag.SetItem(TagLib.Ape.Item)">
            <summary>
               Adds an item to the current instance, replacing the
               existing one of the same name.
            </summary>
            <param name="item">
               A <see cref="T:TagLib.Ape.Item" /> object to add to the current
               instance.
            </param>
        </member>
        <member name="M:TagLib.Ape.Tag.RemoveItem(System.String)">
            <summary>
               Removes the item with a specified key from the current
               instance.
            </summary>
            <param name="key">
               A <see cref="T:System.String" /> object containing the key of the
               item to remove from the current instance.
            </param>
        </member>
        <member name="M:TagLib.Ape.Tag.HasItem(System.String)">
            <summary>
            Checks if an item exists.
            </summary>
            <param name="key">
               A <see cref="T:System.String" /> object containing the key of the
               item to check.
            </param>
            <returns>
               Returns <see langword="true"/> if the <paramref name="key"/>
               exists - else <see langword="false"/> is returned.
            </returns>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="key" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:TagLib.Ape.Tag.Render">
            <summary>
               Renders the current instance as a raw APEv2 tag.
            </summary>
            <returns>
               A <see cref="T:TagLib.ByteVector" /> object containing the
               rendered tag.
            </returns>
        </member>
        <member name="M:TagLib.Ape.Tag.Read(TagLib.File,System.Int64)">
            <summary>
               Populates the current instance be reading in a tag from
               a specified position in a specified file.
            </summary>
            <param name="file">
               A <see cref="T:TagLib.File" /> object to read the tag from.
            </param>
            <param name="position">
               A <see cref="T:System.Int64" /> value specifying the seek position
               at which to read the tag.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="file" /> is <see langword="null" />.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
               <paramref name="position" /> is less than 0 or greater
               than the size of the file.
            </exception>
        </member>
        <member name="M:TagLib.Ape.Tag.Parse(TagLib.ByteVector)">
            <summary>
               Populates the current instance by parsing the contents of
               a raw APEv2 tag, minus the header and footer.
            </summary>
            <param name="data">
               A <see cref="T:TagLib.ByteVector" /> object containing the content
               of an APEv2 tag, minus the header and footer.
            </param>
            <remarks>
               This method must only be called after the internal
               footer has been read from the file, otherwise the data
               cannot be parsed correctly.
            </remarks>
        </member>
        <member name="M:TagLib.Ape.Tag.GetItemIndex(System.String)">
            <summary>
               Gets the index of an item in the current instance.
            </summary>
            <param name="key">
               A <see cref="T:System.String" /> object containing the key to look
               for in the current instance.
            </param>
            <returns>
               A <see cref="T:System.Int32" /> value containing the index in <see
               cref="F:TagLib.Ape.Tag.items" /> at which the item appears, or -1 if the
               item was not found.
            </returns>
            <remarks>
               Keys are compared in a case insensitive manner.
            </remarks>
        </member>
        <member name="M:TagLib.Ape.Tag.GetItemAsString(System.String)">
            <summary>
               Gets the text value from a specified item.
            </summary>
            <param name="key">
               A <see cref="T:System.String" /> object containing the key of the
               item to get the value from.
            </param>
            <returns>
               A <see cref="T:System.String" /> object containing the text of the
               specified frame, or <see langword="null" /> if no value
               was found.
            </returns>
        </member>
        <member name="M:TagLib.Ape.Tag.GetItemAsStrings(System.String)">
            <summary>
               Gets the text values from a specified item.
            </summary>
            <param name="key">
               A <see cref="T:System.String" /> object containing the key of the
               item to get the value from.
            </param>
            <returns>
               A <see cref="T:string[]" /> containing the text of the
               specified frame, or an empty array if no values were
               found.
            </returns>
        </member>
        <member name="M:TagLib.Ape.Tag.GetItemAsUInt32(System.String,System.Int32)">
            <summary>
               Gets an integer value from a "/" delimited list in a
               specified item.
            </summary>
            <param name="key">
               A <see cref="T:System.String" /> object containing the key of the
               item to get the value from.
            </param>
            <param name="index">
               A <see cref="T:System.Int32" /> value specifying the index in the
               integer list of the value to return.
            </param>
            <returns>
               A <see cref="T:System.UInt32" /> value read from the list in the
               frame, or 0 if the value wasn't found.
            </returns>
        </member>
        <member name="M:TagLib.Ape.Tag.GetEnumerator">
            <summary>
               Gets the enumerator for the current instance.
            </summary>
            <returns>
               A <see cref="T:System.Collections.Generic.IEnumerator`1" /> object enumerating through
               the item keys stored in the current instance.
            </returns>
        </member>
        <member name="M:TagLib.Ape.Tag.System#Collections#IEnumerable#GetEnumerator">
            <summary>
               Gets the enumerator for the current instance.
            </summary>
            <returns>
               A <see cref="T:System.Collections.IEnumerator" /> object enumerating through
               the item keys stored in the current instance.
            </returns>
        </member>
        <member name="P:TagLib.Ape.Tag.TagTypes">
            <summary>
               Gets the tag types contained in the current instance.
            </summary>
            <value>
               Always <see cref="F:TagLib.TagTypes.Ape" />.
            </value>
        </member>
        <member name="P:TagLib.Ape.Tag.Title">
            <summary>
               Gets and sets the title for the media described by the
               current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> object containing the title for
               the media described by the current instance or <see
               langword="null" /> if no value is present.
            </value>
            <remarks>
               This property is implemented using the "Title" item.
            </remarks>
        </member>
        <member name="P:TagLib.Ape.Tag.TitleSort">
            <summary>
               Gets and sets the sort names of the Title of the
               media represented by the current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> containing the sort names for
               the Title of the media described by the current instance,
               or null if no value is present. 
            </value>
            <remarks>
               This property is implemented using the "TitleSort" item.
            </remarks>
        </member>
        <member name="P:TagLib.Ape.Tag.Subtitle">
            <summary>
               Gets and sets a short description, one-liner. 
               It represents the tagline of the Video/music.
            </summary>
            <value>
               A <see cref="T:System.String" /> containing the subtitle
               the media represented by the current instance 
               or an empty array if no value is present.
            </value>
            <remarks>
               <para>This field gives a nice/short precision to 
               the title, which is typically below the title on the
               front cover of a media.
               For example, for "Back to the future", this would be 
               "It's About Time". 
               </para>
            </remarks>
            <remarks>
               This property is implemented using the "Subtitle" item.
            </remarks>
        </member>
        <member name="P:TagLib.Ape.Tag.Description">
            <summary>
               Gets and sets a short description of the media.
               For a music, this could be the comment that the artist
               made of its artwork. For a video, this should be a 
               short summary of the story/plot, but a spoiler. This
               should give the impression of what to expect in the
               media.
            </summary>
            <value>
               A <see cref="T:System.String" /> containing the subtitle
               the media represented by the current instance 
               or an empty array if no value is present.
            </value>
            <remarks>
               <para>This is especially relevant for a movie.
               For example, for "Back to the Future 2", this could be
               "After visiting 2015, Marty McFly must repeat his visit 
               to 1955 to prevent disastrous changes to 1985...without
               interfering with his first trip".
               </para>
            </remarks>
            <remarks>
               This property is implemented using the "Description" item.
            </remarks>
        </member>
        <member name="P:TagLib.Ape.Tag.Performers">
            <summary>
               Gets and sets the performers or artists who performed in
               the media described by the current instance.
            </summary>
            <value>
               A <see cref="T:string[]" /> containing the performers or
               artists who performed in the media described by the
               current instance or an empty array if no value is
               present.
            </value>
            <remarks>
               This property is implemented using the "Artist" item.
            </remarks>
        </member>
        <member name="P:TagLib.Ape.Tag.PerformersSort">
            <summary>
               Gets and sets the sort names of the performers or artists
               who performed in the media described by the current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> array containing the sort names for
               the performers or artists who performed in the media
               described by the current instance, or an empty array if
               no value is present. 
            </value>
            <remarks>
               This property is implemented using the "ArtistSort" field.
               http://musicbrainz.org/doc/PicardTagMapping
            </remarks>
        </member>
        <member name="P:TagLib.Ape.Tag.PerformersRole">
            <summary>
               Gets and sets the Charaters for a video media, or
               instruments played for music media. 
               This should match the <see cref="P:TagLib.Ape.Tag.Performers"/> array (for
               each person correspond one/more role). Several roles for
               the same artist/actor can be made up with semicolons. 
               For example, "Marty McFly; Marty McFly Jr.; Marlene McFly".
            </summary>
            <remarks>
               <para> This is typically usefull for movies, although the
               instrument played by each artist in a music may be of
               relevance.
               </para>
               <para>It is highly important to match each role to the 
               performers. This means that a role may be <see 
               langword="null"/> to keep the match between a
               Performers[i] and PerformersRole[i].
               </para>
            </remarks>
            <remarks>
               This property is implemented using the "TMCL" Text
               Information Frame: The 'Musician credits list' is 
               intended as a mapping between instruments and the 
               musician that played it.Every odd field is an 
               instrument and every even is an artist or a comma 
               delimited list of artists.
            </remarks>
            <remarks>
               This property is implemented using the "PerformersRole" field.
            </remarks>
        </member>
        <member name="P:TagLib.Ape.Tag.AlbumArtists">
            <summary>
               Gets and sets the band or artist who is credited in the
               creation of the entire album or collection containing the
               media described by the current instance.
            </summary>
            <value>
               A <see cref="T:string[]" /> containing the band or artist
               who is credited in the creation of the entire album or
               collection containing the media described by the current
               instance or an empty array if no value is present.
            </value>
            <remarks>
               This property is implemented using the "Album Artist"
               item, and "AlbumArtist" as a backup property if it exists.
            </remarks>
        </member>
        <member name="P:TagLib.Ape.Tag.AlbumArtistsSort">
            <summary>
               Gets and sets the sort names for the band or artist who
               is credited in the creation of the entire album or
               collection containing the media described by the
               current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> array containing the sort names
               for the band or artist who is credited in the creation
               of the entire album or collection containing the media
               described by the current instance or an empty array if
               no value is present.
            </value>
            <remarks>
               This property is implemented using the "AlbumArtistSort"
               field.
               http://musicbrainz.org/doc/PicardTagMapping
            </remarks>
        </member>
        <member name="P:TagLib.Ape.Tag.Composers">
            <summary>
               Gets and sets the composers of the media represented by
               the current instance.
            </summary>
            <value>
               A <see cref="T:string[]" /> containing the composers of the
               media represented by the current instance or an empty
               array if no value is present.
            </value>
            <remarks>
               This property is implemented using the "Composer" item.
            </remarks>
        </member>
        <member name="P:TagLib.Ape.Tag.ComposersSort">
            <summary>
               Gets and sets the sort names for the composers of
               the media described by the current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> array containing the sort names
               for the composer of the media described by the current
               instance or an empty array if no value is present.
            </value>
            <remarks>
               This property is implemented using the "ComposerSort"
               field.
               http://musicbrainz.org/doc/PicardTagMapping
            </remarks>
        </member>
        <member name="P:TagLib.Ape.Tag.Album">
            <summary>
               Gets and sets the album of the media represented by the
               current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> object containing the album of
               the media represented by the current instance or <see
               langword="null" /> if no value is present.
            </value>
            <remarks>
               This property is implemented using the "Album" item.
            </remarks>
        </member>
        <member name="P:TagLib.Ape.Tag.AlbumSort">
            <summary>
               Gets and sets the sort names for the Album Title of
               the media described by the current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> containing the sort name of 
               the Album Title of the media described by the current
               instance or null if no value is present.
            </value>
            <remarks>
               This property is implemented using the "AlbumSort"
               field.
               http://musicbrainz.org/doc/PicardTagMapping
            </remarks>
        </member>
        <member name="P:TagLib.Ape.Tag.Comment">
            <summary>
               Gets and sets a user comment on the media represented by
               the current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> object containing user comments
               on the media represented by the current instance or <see
               langword="null" /> if no value is present.
            </value>
            <remarks>
               This property is implemented using the "Comment" item.
            </remarks>
        </member>
        <member name="P:TagLib.Ape.Tag.Genres">
            <summary>
               Gets and sets the genres of the media represented by the
               current instance.
            </summary>
            <value>
               A <see cref="T:string[]" /> containing the genres of the
               media represented by the current instance or an empty
               array if no value is present.
            </value>
            <remarks>
               This property is implemented using the "Genre" item.
            </remarks>
        </member>
        <member name="P:TagLib.Ape.Tag.Year">
            <summary>
               Gets and sets the year that the media represented by the
               current instance was recorded.
            </summary>
            <value>
               A <see cref="T:System.UInt32" /> containing the year that the media
               represented by the current instance was created or zero
               if no value is present.
            </value>
            <remarks>
               This property is implemented using the "Year" item.
            </remarks>
        </member>
        <member name="P:TagLib.Ape.Tag.Track">
            <summary>
               Gets and sets the position of the media represented by
               the current instance in its containing album.
            </summary>
            <value>
               A <see cref="T:System.UInt32" /> containing the position of the
               media represented by the current instance in its
               containing album or zero if not specified.
            </value>
            <remarks>
               This property is implemented using the "Track" item.
            </remarks>
        </member>
        <member name="P:TagLib.Ape.Tag.TrackCount">
            <summary>
               Gets and sets the number of tracks in the album
               containing the media represented by the current instance.
            </summary>
            <value>
               A <see cref="T:System.UInt32" /> containing the number of tracks in
               the album containing the media represented by the current
               instance or zero if not specified.
            </value>
            <remarks>
               This property is implemented using the "Track" item.
            </remarks>
        </member>
        <member name="P:TagLib.Ape.Tag.Disc">
            <summary>
               Gets and sets the number of the disc containing the media
               represented by the current instance in the boxed set.
            </summary>
            <value>
               A <see cref="T:System.UInt32" /> containing the number of the disc
               containing the media represented by the current instance
               in the boxed set.
            </value>
            <remarks>
               This property is implemented using the "Disc" item.
            </remarks>
        </member>
        <member name="P:TagLib.Ape.Tag.DiscCount">
            <summary>
               Gets and sets the number of discs in the boxed set
               containing the media represented by the current instance.
            </summary>
            <value>
               A <see cref="T:System.UInt32" /> containing the number of discs in
               the boxed set containing the media represented by the
               current instance or zero if not specified.
            </value>
            <remarks>
               This property is implemented using the "Disc" item.
            </remarks>
        </member>
        <member name="P:TagLib.Ape.Tag.Lyrics">
            <summary>
               Gets and sets the lyrics or script of the media
               represented by the current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> object containing the lyrics or
               script of the media represented by the current instance
               or <see langword="null" /> if no value is present.
            </value>
            <remarks>
               This property is implemented using the "Lyrics" item.
            </remarks>
        </member>
        <member name="P:TagLib.Ape.Tag.Grouping">
            <summary>
               Gets and sets the grouping on the album which the media
               in the current instance belongs to.
            </summary>
            <value>
               A <see cref="T:System.String" /> object containing the grouping on
               the album which the media in the current instance belongs
               to or <see langword="null" /> if no value is present.
            </value>
            <remarks>
               This property is implemented using the "Grouping" item.
            </remarks>
        </member>
        <member name="P:TagLib.Ape.Tag.BeatsPerMinute">
            <summary>
               Gets and sets the number of beats per minute in the audio
               of the media represented by the current instance.
            </summary>
            <value>
               A <see cref="T:System.UInt32" /> containing the number of beats per
               minute in the audio of the media represented by the
               current instance, or zero if not specified.
            </value>
            <remarks>
               This property is implemented using the "BPM" item.
            </remarks>
        </member>
        <member name="P:TagLib.Ape.Tag.Conductor">
            <summary>
               Gets and sets the conductor or director of the media
               represented by the current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> object containing the conductor
               or director of the media represented by the current
               instance or <see langword="null" /> if no value present.
            </value>
            <remarks>
               This property is implemented using the "Conductor" item.
            </remarks>
        </member>
        <member name="P:TagLib.Ape.Tag.Copyright">
            <summary>
               Gets and sets the copyright information for the media
               represented by the current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> object containing the copyright
               information for the media represented by the current
               instance or <see langword="null" /> if no value present.
            </value>
            <remarks>
               This property is implemented using the "Copyright" item.
            </remarks>
        </member>
        <member name="P:TagLib.Ape.Tag.DateTagged">
            <summary>
               Gets and sets the date at which the tag has been written.
            </summary>
            <value>
               A nullable <see cref="T:System.DateTime" /> object containing the 
               date at which the tag has been written, or <see 
               langword="null" /> if no value present.
            </value>
            <remarks>
               This property is implemented using the "DateTagged" item.
               Format used is: yyyy-MM-dd HH:mm:ss
            </remarks>
        </member>
        <member name="P:TagLib.Ape.Tag.MusicBrainzArtistId">
            <summary>
               Gets and sets the MusicBrainz Artist ID of the media
               represented by the current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> object containing the MusicBrainz
               ArtistID for the media represented by the current instance
               or <see langword="null" /> if no value is present.
            </value>
            <remarks>
               This property is implemented using the "MUSICBRAINZ_ARTISTID" item.
               http://musicbrainz.org/doc/PicardTagMapping
            </remarks>
        </member>
        <member name="P:TagLib.Ape.Tag.MusicBrainzReleaseGroupId">
            <summary>
               Gets and sets the MusicBrainz Release Group ID of the media
               represented by the current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> object containing the MusicBrainz
               ReleaseGroupID for the media represented by the current instance
               or <see langword="null" /> if no value is present.
            </value>
            <remarks>
               This property is implemented using the "MUSICBRAINZ_RELEASEGROUPID" item.
               http://musicbrainz.org/doc/PicardTagMapping
            </remarks>
        </member>
        <member name="P:TagLib.Ape.Tag.MusicBrainzReleaseId">
            <summary>
               Gets and sets the MusicBrainz Release ID of the media
               represented by the current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> object containing the MusicBrainz
               ReleaseID for the media represented by the current instance
               or <see langword="null" /> if no value is present.
            </value>
            <remarks>
               This property is implemented using the "MUSICBRAINZ_ALBUMID" item.
               http://musicbrainz.org/doc/PicardTagMapping
            </remarks>
        </member>
        <member name="P:TagLib.Ape.Tag.MusicBrainzReleaseArtistId">
            <summary>
               Gets and sets the MusicBrainz Release Artist ID of the media
               represented by the current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> object containing the MusicBrainz
               ReleaseArtistID for the media represented by the current instance
               or <see langword="null" /> if no value is present.
            </value>
            <remarks>
               This property is implemented using the "MUSICBRAINZ_ALBUMARTISTID" item.
               http://musicbrainz.org/doc/PicardTagMapping
            </remarks>
        </member>
        <member name="P:TagLib.Ape.Tag.MusicBrainzTrackId">
            <summary>
               Gets and sets the MusicBrainz Track ID of the media
               represented by the current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> object containing the MusicBrainz
               TrackID for the media represented by the current instance
               or <see langword="null" /> if no value is present.
            </value>
            <remarks>
               This property is implemented using the "MUSICBRAINZ_TRACKID" item.
               http://musicbrainz.org/doc/PicardTagMapping
            </remarks>
        </member>
        <member name="P:TagLib.Ape.Tag.MusicBrainzDiscId">
            <summary>
               Gets and sets the MusicBrainz Disc ID of the media
               represented by the current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> object containing the MusicBrainz
               DiscID for the media represented by the current instance
               or <see langword="null" /> if no value is present.
            </value>
            <remarks>
               This property is implemented using the "MUSICBRAINZ_DISCID" item.
               http://musicbrainz.org/doc/PicardTagMapping
            </remarks>
        </member>
        <member name="P:TagLib.Ape.Tag.MusicIpId">
            <summary>
               Gets and sets the MusicIP PUID of the media
               represented by the current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> object containing the MusicIPPUID
               for the media represented by the current instance
               or <see langword="null" /> if no value is present.
            </value>
            <remarks>
               This property is implemented using the "MUSICIP_PUID" item.
               http://musicbrainz.org/doc/PicardTagMapping
            </remarks>
        </member>
        <member name="P:TagLib.Ape.Tag.AmazonId">
            <summary>
               Gets and sets the Amazon ID of the media
               represented by the current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> object containing the AmazonID
               for the media represented by the current instance
               or <see langword="null" /> if no value is present.
            </value>
            <remarks>
               This property is implemented using the "ASIN" item.
               http://musicbrainz.org/doc/PicardTagMapping
            </remarks>
        </member>
        <member name="P:TagLib.Ape.Tag.MusicBrainzReleaseStatus">
            <summary>
               Gets and sets the MusicBrainz Release Status of the media
               represented by the current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> object containing the MusicBrainz
               ReleaseStatus for the media represented by the current instance
               or <see langword="null" /> if no value is present.
            </value>
            <remarks>
               This property is implemented using the "MUSICBRAINZ_ALBUMSTATUS" item.
               http://musicbrainz.org/doc/PicardTagMapping
            </remarks>
        </member>
        <member name="P:TagLib.Ape.Tag.MusicBrainzReleaseType">
            <summary>
               Gets and sets the MusicBrainz Release Type of the media
               represented by the current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> object containing the MusicBrainz
               ReleaseType for the media represented by the current instance
               or <see langword="null" /> if no value is present.
            </value>
            <remarks>
               This property is implemented using the "MUSICBRAINZ_ALBUMTYPE" item.
               http://musicbrainz.org/doc/PicardTagMapping
            </remarks>
        </member>
        <member name="P:TagLib.Ape.Tag.MusicBrainzReleaseCountry">
            <summary>
               Gets and sets the MusicBrainz ReleaseCountry of the media
               represented by the current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> object containing the MusicBrainz
               ReleaseCountry for the media represented by the current instance
               or <see langword="null" /> if no value is present.
            </value>
            <remarks>
               This property is implemented using the "RELEASECOUNTRY" item.
               http://musicbrainz.org/doc/PicardTagMapping
            </remarks>
        </member>
        <member name="P:TagLib.Ape.Tag.ReplayGainTrackGain">
            <summary>
               Gets and sets the ReplayGain track gain in dB.
            </summary>
            <value>
               A <see cref="T:System.Boolean" /> value in dB for the track gain as
               per the ReplayGain specification.
            </value>
            <remarks>
               This property is implemented using the 
               "REPLAYGAIN_TRACK_GAIN" field. Set the value to double.NaN
               to clear the field.
            </remarks>
        </member>
        <member name="P:TagLib.Ape.Tag.ReplayGainTrackPeak">
            <summary>
               Gets and sets the ReplayGain track peak sample.
            </summary>
            <value>
               A <see cref="T:System.Boolean" /> value for the track peak as per the
               ReplayGain specification.
            </value>
            <remarks>
               This property is implemented using the 
               "REPLAYGAIN_TRACK_PEAK" field. Set the value to double.NaN
               to clear the field.
            </remarks>
        </member>
        <member name="P:TagLib.Ape.Tag.ReplayGainAlbumGain">
            <summary>
               Gets and sets the ReplayGain album gain in dB.
            </summary>
            <value>
               A <see cref="T:System.Boolean" /> value in dB for the album gain as
               per the ReplayGain specification.
            </value>
            <remarks>
               This property is implemented using the 
               "REPLAYGAIN_ALBUM_GAIN" field. Set the value to double.NaN
               to clear the field.
            </remarks>
        </member>
        <member name="P:TagLib.Ape.Tag.ReplayGainAlbumPeak">
            <summary>
               Gets and sets the ReplayGain album peak sample.
            </summary>
            <value>
               A <see cref="T:System.Boolean" /> value for the album peak as per the
               ReplayGain specification.
            </value>
            <remarks>
               This property is implemented using the 
               "REPLAYGAIN_ALBUM_PEAK" field. Set the value to double.NaN
               to clear the field.
            </remarks>
        </member>
        <member name="P:TagLib.Ape.Tag.Pictures">
            <summary>
               Gets and sets a collection of pictures associated with
               the media represented by the current instance.
            </summary>
            <value>
               A <see cref="T:IPicture[]" /> containing a collection of
               pictures associated with the media represented by the
               current instance or an empty array if none are present.
            </value>
            <remarks>
               This property is implemented using the "Cover Art" items
               and supports only one picture per type.
            </remarks>
        </member>
        <member name="P:TagLib.Ape.Tag.IsEmpty">
            <summary>
               Gets whether or not the current instance is empty.
            </summary>
            <value>
               <see langword="true" /> if the current instance does not
               any values. Otherwise <see langword="false" />.
            </value>
        </member>
        <member name="M:TagLib.Ape.Tag.Clear">
            <summary>
               Clears the values stored in the current instance.
            </summary>
        </member>
        <member name="M:TagLib.Ape.Tag.CopyTo(TagLib.Tag,System.Boolean)">
            <summary>
               Copies the values from the current instance to another
               <see cref="T:TagLib.Tag" />, optionally overwriting
               existing values.
            </summary>
            <param name="target">
               A <see cref="T:TagLib.Tag" /> object containing the target
               tag to copy values to.
            </param>
            <param name="overwrite">
               A <see cref="T:System.Boolean" /> specifying whether or not to copy
               values over existing one.
            </param>
            <remarks>
               <para>If <paramref name="target" /> is of type <see
               cref="T:TagLib.Ape.Tag" /> a complete copy of all values
               will be performed. Otherwise, only standard values will
               be copied.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="target" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="T:TagLib.Asf.ContentDescriptionObject">
            <summary>
               This class extends <see cref="T:TagLib.Asf.Object" /> to provide a
               representation of an ASF Content Description object which can be
               read from and written to disk.
            </summary>
        </member>
        <member name="F:TagLib.Asf.ContentDescriptionObject.title">
            <summary>
               Contains the media title.
            </summary>
        </member>
        <member name="F:TagLib.Asf.ContentDescriptionObject.author">
            <summary>
               Contains the author/performer.
            </summary>
        </member>
        <member name="F:TagLib.Asf.ContentDescriptionObject.copyright">
            <summary>
               Contains the copyright information.
            </summary>
        </member>
        <member name="F:TagLib.Asf.ContentDescriptionObject.description">
            <summary>
               Contains the description of the media.
            </summary>
        </member>
        <member name="F:TagLib.Asf.ContentDescriptionObject.rating">
            <summary>
               Contains the rating of the media.
            </summary>
        </member>
        <member name="M:TagLib.Asf.ContentDescriptionObject.#ctor(TagLib.Asf.File,System.Int64)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Asf.ContentDescriptionObject" /> by reading the
               contents from a specified position in a specified file.
            </summary>
            <param name="file">
               A <see cref="T:TagLib.Asf.File" /> object containing the file from
               which the contents of the new instance are to be read.
            </param>
            <param name="position">
               A <see cref="T:System.Int64" /> value specify at what position to
               read the object.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="file" /> is <see langword="null" />.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
               <paramref name="position" /> is less than zero or greater
               than the size of the file.
            </exception>
            <exception cref="T:TagLib.CorruptFileException">
               The object read from disk does not have the correct GUID
               or smaller than the minimum size.
            </exception>
        </member>
        <member name="M:TagLib.Asf.ContentDescriptionObject.#ctor">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Asf.ContentDescriptionObject" /> with no contents.
            </summary>
        </member>
        <member name="P:TagLib.Asf.ContentDescriptionObject.Title">
            <summary>
               Gets and sets the title of the media described by the
               current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> object containing the title of
               the media or <see langword="null" /> if it is not set.
            </value>
        </member>
        <member name="P:TagLib.Asf.ContentDescriptionObject.Author">
            <summary>
               Gets and sets the author or performer of the media
               described by the current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> object containing the author of
               the media or <see langword="null" /> if it is not set.
            </value>
        </member>
        <member name="P:TagLib.Asf.ContentDescriptionObject.Copyright">
            <summary>
               Gets and sets the copyright information for the media
               described by the current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> object containing the copyright
               information for the media or <see langword="null" /> if
               it is not set.
            </value>
        </member>
        <member name="P:TagLib.Asf.ContentDescriptionObject.Description">
            <summary>
               Gets and sets the description of the media described by
               the current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> object containing a description
               of the media or <see langword="null" /> if it is not set.
            </value>
        </member>
        <member name="P:TagLib.Asf.ContentDescriptionObject.Rating">
            <summary>
               Gets and sets the rating of the media described by the
               current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> object containing a rating of the
               media or <see langword="null" /> if it is not set.
            </value>
        </member>
        <member name="P:TagLib.Asf.ContentDescriptionObject.IsEmpty">
            <summary>
               Gets whether or not the current instance is empty.
            </summary>
            <value>
               <see langword="true" /> if all the values are cleared.
               Otherwise <see langword="false" />.
            </value>
        </member>
        <member name="M:TagLib.Asf.ContentDescriptionObject.Render">
            <summary>
               Renders the current instance as a raw ASF object.
            </summary>
            <returns>
               A <see cref="T:TagLib.ByteVector" /> object containing the
               rendered version of the current instance.
            </returns>
        </member>
        <member name="T:TagLib.Asf.DataType">
            <summary>
               Indicates the type of data stored in a <see
               cref="T:TagLib.Asf.ContentDescriptor" /> or <see cref="T:TagLib.Asf.DescriptionRecord" />
               object.
            </summary>
        </member>
        <member name="F:TagLib.Asf.DataType.Unicode">
            <summary>
               The descriptor contains Unicode (UTF-16LE) text.
            </summary>
        </member>
        <member name="F:TagLib.Asf.DataType.Bytes">
            <summary>
               The descriptor contains binary data.
            </summary>
        </member>
        <member name="F:TagLib.Asf.DataType.Bool">
            <summary>
               The descriptor contains a boolean value.
            </summary>
        </member>
        <member name="F:TagLib.Asf.DataType.DWord">
            <summary>
               The descriptor contains a 4-byte DWORD value.
            </summary>
        </member>
        <member name="F:TagLib.Asf.DataType.QWord">
            <summary>
               The descriptor contains a 8-byte QWORD value.
            </summary>
        </member>
        <member name="F:TagLib.Asf.DataType.Word">
            <summary>
               The descriptor contains a 2-byte WORD value.
            </summary>
        </member>
        <member name="F:TagLib.Asf.DataType.Guid">
            <summary>
               The descriptor contains a 16-byte GUID value.
            </summary>
        </member>
        <member name="T:TagLib.Asf.ContentDescriptor">
            <summary>
               This class provides a representation of an ASF Content
               Descriptor to be used in combination with <see
               cref="T:TagLib.Asf.ExtendedContentDescriptionObject" />.
            </summary>
        </member>
        <member name="F:TagLib.Asf.ContentDescriptor.strValue">
            <summary>
               Contains the string value.
            </summary>
        </member>
        <member name="F:TagLib.Asf.ContentDescriptor.byteValue">
            <summary>
               Contains the byte value.
            </summary>
        </member>
        <member name="F:TagLib.Asf.ContentDescriptor.longValue">
            <summary>
               Contains the long value.
            </summary>
        </member>
        <member name="M:TagLib.Asf.ContentDescriptor.#ctor(System.String,System.String)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Asf.ContentDescriptor" /> with a specified name and
               and value.
            </summary>
            <param name="name">
               A <see cref="T:System.String" /> object containing the name of the
               new instance.
            </param>
            <param name="value">
               A <see cref="T:System.String" /> object containing the value for
               the new instance.
            </param>
        </member>
        <member name="M:TagLib.Asf.ContentDescriptor.#ctor(System.String,TagLib.ByteVector)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Asf.ContentDescriptor" /> with a specified name and
               and value.
            </summary>
            <param name="name">
               A <see cref="T:System.String" /> object containing the name of the
               new instance.
            </param>
            <param name="value">
               A <see cref="T:TagLib.ByteVector" /> object containing the value
               for the new instance.
            </param>
        </member>
        <member name="M:TagLib.Asf.ContentDescriptor.#ctor(System.String,System.UInt32)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Asf.ContentDescriptor" /> with a specified name and
               and value.
            </summary>
            <param name="name">
               A <see cref="T:System.String" /> object containing the name of the
               new instance.
            </param>
            <param name="value">
               A <see cref="T:System.UInt32" /> value containing the value
               for the new instance.
            </param>
        </member>
        <member name="M:TagLib.Asf.ContentDescriptor.#ctor(System.String,System.UInt64)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Asf.ContentDescriptor" /> with a specified name and
               and value.
            </summary>
            <param name="name">
               A <see cref="T:System.String" /> object containing the name of the
               new instance.
            </param>
            <param name="value">
               A <see cref="T:System.UInt64" /> value containing the value
               for the new instance.
            </param>
        </member>
        <member name="M:TagLib.Asf.ContentDescriptor.#ctor(System.String,System.UInt16)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Asf.ContentDescriptor" /> with a specified name and
               and value.
            </summary>
            <param name="name">
               A <see cref="T:System.String" /> object containing the name of the
               new instance.
            </param>
            <param name="value">
               A <see cref="T:System.UInt16" /> value containing the value
               for the new instance.
            </param>
        </member>
        <member name="M:TagLib.Asf.ContentDescriptor.#ctor(System.String,System.Boolean)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Asf.ContentDescriptor" /> with a specified name and
               and value.
            </summary>
            <param name="name">
               A <see cref="T:System.String" /> object containing the name of the
               new instance.
            </param>
            <param name="value">
               A <see cref="T:System.Boolean" /> value containing the value
               for the new instance.
            </param>
        </member>
        <member name="M:TagLib.Asf.ContentDescriptor.#ctor(TagLib.Asf.File)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Asf.ContentDescriptor" /> by reading its contents from
               a file.
            </summary>
            <param name="file">
               A <see cref="T:TagLib.Asf.File" /> object to read the raw ASF
               Description Record from.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="file" /> is <see langword="null" />.
            </exception>
            <exception cref="T:TagLib.CorruptFileException">
               A valid descriptor could not be read.
            </exception>
            <remarks>
               <paramref name="file" /> must be at a seek position at
               which the descriptor can be read.
            </remarks>
        </member>
        <member name="P:TagLib.Asf.ContentDescriptor.Name">
            <summary>
               Gets the name of the current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> object containing the name of the
               current instance.
            </value>
        </member>
        <member name="P:TagLib.Asf.ContentDescriptor.Type">
            <summary>
               Gets the type of data contained in the current instance.
            </summary>
            <value>
               A <see cref="T:TagLib.Asf.DataType" /> value indicating type of data
               contained in the current instance.
            </value>
        </member>
        <member name="M:TagLib.Asf.ContentDescriptor.ToString">
            <summary>
               Gets a string representation of the current instance.
            </summary>
            <returns>
               A <see cref="T:System.String" /> object containing the value of
               the current instance.
            </returns>
        </member>
        <member name="M:TagLib.Asf.ContentDescriptor.ToByteVector">
            <summary>
               Gets the binary contents of the current instance.
            </summary>
            <returns>
               A <see cref="T:TagLib.ByteVector" /> object containing the
               contents of the current instance, or <see langword="null"
               /> if <see cref="P:TagLib.Asf.ContentDescriptor.Type" /> is unequal to <see
               cref="F:TagLib.Asf.DataType.Bytes" />.
            </returns>
        </member>
        <member name="M:TagLib.Asf.ContentDescriptor.ToBool">
            <summary>
               Gets the boolean value contained in the current instance.
            </summary>
            <returns>
               A <see cref="T:System.Boolean" /> value containing the value of the
               current instance.
            </returns>
        </member>
        <member name="M:TagLib.Asf.ContentDescriptor.ToDWord">
            <summary>
               Gets the DWORD value contained in the current instance.
            </summary>
            <returns>
               A <see cref="T:System.UInt32" /> value containing the value of the
               current instance.
            </returns>
        </member>
        <member name="M:TagLib.Asf.ContentDescriptor.ToQWord">
            <summary>
               Gets the QWORD value contained in the current instance.
            </summary>
            <returns>
               A <see cref="T:System.UInt64" /> value containing the value of the
               current instance.
            </returns>
        </member>
        <member name="M:TagLib.Asf.ContentDescriptor.ToWord">
            <summary>
               Gets the WORD value contained in the current instance.
            </summary>
            <returns>
               A <see cref="T:System.UInt16" /> value containing the value of the
               current instance.
            </returns>
        </member>
        <member name="M:TagLib.Asf.ContentDescriptor.Render">
            <summary>
               Renders the current instance as a raw ASF Description
               Record.
            </summary>
            <returns>
               A <see cref="T:TagLib.ByteVector" /> object containing the
               rendered version of the current instance.
            </returns>
        </member>
        <member name="M:TagLib.Asf.ContentDescriptor.Parse(TagLib.Asf.File)">
            <summary>
               Populates the current instance by reading in the contents
               from a file.
            </summary>
            <param name="file">
               A <see cref="T:TagLib.Asf.File" /> object to read the raw ASF
               Content Descriptor from.
            </param>
            <returns>
               <see langword="true" /> if the data was read correctly.
               Otherwise <see langword="false" />.
            </returns>
        </member>
        <member name="T:TagLib.Asf.DescriptionRecord">
            <summary>
               This class provides a representation of an ASF Description Record
               to be used in combination with <see cref="T:TagLib.Asf.MetadataLibraryObject"
               />.
            </summary>
        </member>
        <member name="F:TagLib.Asf.DescriptionRecord.strValue">
            <summary>
               Contains the string value.
            </summary>
        </member>
        <member name="F:TagLib.Asf.DescriptionRecord.byteValue">
            <summary>
               Contains the byte value.
            </summary>
        </member>
        <member name="F:TagLib.Asf.DescriptionRecord.longValue">
            <summary>
               Contains the long value.
            </summary>
        </member>
        <member name="F:TagLib.Asf.DescriptionRecord.guidValue">
            <summary>
               Contains the GUID value.
            </summary>
        </member>
        <member name="M:TagLib.Asf.DescriptionRecord.#ctor(System.UInt16,System.UInt16,System.String,System.String)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Asf.DescriptionRecord" /> with a specified language,
               stream, name, and value.
            </summary>
            <param name="languageListIndex">
               A <see cref="T:System.UInt16" /> value containing the language
               list index of the new instance.
            </param>
            <param name="streamNumber">
               A <see cref="T:System.UInt16" /> value containing the stream
               number of the new instance.
            </param>
            <param name="name">
               A <see cref="T:System.String" /> object containing the name of the
               new instance.
            </param>
            <param name="value">
               A <see cref="T:System.String" /> object containing the value for
               the new instance.
            </param>
        </member>
        <member name="M:TagLib.Asf.DescriptionRecord.#ctor(System.UInt16,System.UInt16,System.String,TagLib.ByteVector)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Asf.DescriptionRecord" /> with a specified language,
               stream, name, and value.
            </summary>
            <param name="languageListIndex">
               A <see cref="T:System.UInt16" /> value containing the language
               list index of the new instance.
            </param>
            <param name="streamNumber">
               A <see cref="T:System.UInt16" /> value containing the stream
               number of the new instance.
            </param>
            <param name="name">
               A <see cref="T:System.String" /> object containing the name of the
               new instance.
            </param>
            <param name="value">
               A <see cref="T:TagLib.ByteVector" /> object containing the value
               for the new instance.
            </param>
        </member>
        <member name="M:TagLib.Asf.DescriptionRecord.#ctor(System.UInt16,System.UInt16,System.String,System.UInt32)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Asf.DescriptionRecord" /> with a specified language,
               stream, name, and value.
            </summary>
            <param name="languageListIndex">
               A <see cref="T:System.UInt16" /> value containing the language
               list index of the new instance.
            </param>
            <param name="streamNumber">
               A <see cref="T:System.UInt16" /> value containing the stream
               number of the new instance.
            </param>
            <param name="name">
               A <see cref="T:System.String" /> object containing the name of the
               new instance.
            </param>
            <param name="value">
               A <see cref="T:System.UInt32" /> value containing the value
               for the new instance.
            </param>
        </member>
        <member name="M:TagLib.Asf.DescriptionRecord.#ctor(System.UInt16,System.UInt16,System.String,System.UInt64)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Asf.DescriptionRecord" /> with a specified language,
               stream, name, and value.
            </summary>
            <param name="languageListIndex">
               A <see cref="T:System.UInt16" /> value containing the language
               list index of the new instance.
            </param>
            <param name="streamNumber">
               A <see cref="T:System.UInt16" /> value containing the stream
               number of the new instance.
            </param>
            <param name="name">
               A <see cref="T:System.String" /> object containing the name of the
               new instance.
            </param>
            <param name="value">
               A <see cref="T:System.UInt64" /> value containing the value
               for the new instance.
            </param>
        </member>
        <member name="M:TagLib.Asf.DescriptionRecord.#ctor(System.UInt16,System.UInt16,System.String,System.UInt16)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Asf.DescriptionRecord" /> with a specified language,
               stream, name, and value.
            </summary>
            <param name="languageListIndex">
               A <see cref="T:System.UInt16" /> value containing the language
               list index of the new instance.
            </param>
            <param name="streamNumber">
               A <see cref="T:System.UInt16" /> value containing the stream
               number of the new instance.
            </param>
            <param name="name">
               A <see cref="T:System.String" /> object containing the name of the
               new instance.
            </param>
            <param name="value">
               A <see cref="T:System.UInt16" /> value containing the value
               for the new instance.
            </param>
        </member>
        <member name="M:TagLib.Asf.DescriptionRecord.#ctor(System.UInt16,System.UInt16,System.String,System.Boolean)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Asf.DescriptionRecord" /> with a specified language,
               stream, name, and value.
            </summary>
            <param name="languageListIndex">
               A <see cref="T:System.UInt16" /> value containing the language
               list index of the new instance.
            </param>
            <param name="streamNumber">
               A <see cref="T:System.UInt16" /> value containing the stream
               number of the new instance.
            </param>
            <param name="name">
               A <see cref="T:System.String" /> object containing the name of the
               new instance.
            </param>
            <param name="value">
               A <see cref="T:System.Boolean" /> value containing the value
               for the new instance.
            </param>
        </member>
        <member name="M:TagLib.Asf.DescriptionRecord.#ctor(System.UInt16,System.UInt16,System.String,System.Guid)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Asf.DescriptionRecord" /> with a specified language,
               stream, name, and value.
            </summary>
            <param name="languageListIndex">
               A <see cref="T:System.UInt16" /> value containing the language
               list index of the new instance.
            </param>
            <param name="streamNumber">
               A <see cref="T:System.UInt16" /> value containing the stream
               number of the new instance.
            </param>
            <param name="name">
               A <see cref="T:System.String" /> object containing the name of the
               new instance.
            </param>
            <param name="value">
               A <see cref="T:System.Guid" /> value containing the value
               for the new instance.
            </param>
        </member>
        <member name="M:TagLib.Asf.DescriptionRecord.#ctor(TagLib.Asf.File)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Asf.DescriptionRecord" /> by reading its contents from
               a file.
            </summary>
            <param name="file">
               A <see cref="T:TagLib.Asf.File" /> object to read the raw ASF
               Description Record from.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="file" /> is <see langword="null" />.
            </exception>
            <exception cref="T:TagLib.CorruptFileException">
               A valid record could not be read.
            </exception>
            <remarks>
               <paramref name="file" /> must be at a seek position at
               which the record can be read.
            </remarks>
        </member>
        <member name="P:TagLib.Asf.DescriptionRecord.LanguageListIndex">
            <summary>
               Gets the index of the language associated with the
               current instance.
            </summary>
            <value>
               A <see cref="T:System.UInt16" /> value containing the index of the
               language associated with the current instance.
            </value>
        </member>
        <member name="P:TagLib.Asf.DescriptionRecord.StreamNumber">
            <summary>
               Gets the index of the stream associated with the current
               instance.
            </summary>
            <value>
               A <see cref="T:System.UInt16" /> value containing the index of the
               stream associated with the current instance.
            </value>
        </member>
        <member name="P:TagLib.Asf.DescriptionRecord.Name">
            <summary>
               Gets the name of the current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> object containing the name of the
               current instance.
            </value>
        </member>
        <member name="P:TagLib.Asf.DescriptionRecord.Type">
            <summary>
               Gets the type of data contained in the current instance.
            </summary>
            <value>
               A <see cref="T:TagLib.Asf.DataType" /> value indicating type of data
               contained in the current instance.
            </value>
        </member>
        <member name="M:TagLib.Asf.DescriptionRecord.ToString">
            <summary>
               Gets a string representation of the current instance.
            </summary>
            <returns>
               A <see cref="T:System.String" /> object containing the value of
               the current instance.
            </returns>
        </member>
        <member name="M:TagLib.Asf.DescriptionRecord.ToByteVector">
            <summary>
               Gets the binary contents of the current instance.
            </summary>
            <returns>
               A <see cref="T:TagLib.ByteVector" /> object containing the
               contents of the current instance, or <see langword="null"
               /> if <see cref="P:TagLib.Asf.DescriptionRecord.Type" /> is unequal to <see
               cref="F:TagLib.Asf.DataType.Bytes" />.
            </returns>
        </member>
        <member name="M:TagLib.Asf.DescriptionRecord.ToBool">
            <summary>
               Gets the boolean value contained in the current instance.
            </summary>
            <returns>
               A <see cref="T:System.Boolean" /> value containing the value of the
               current instance.
            </returns>
        </member>
        <member name="M:TagLib.Asf.DescriptionRecord.ToDWord">
            <summary>
               Gets the DWORD value contained in the current instance.
            </summary>
            <returns>
               A <see cref="T:System.UInt32" /> value containing the value of the
               current instance.
            </returns>
        </member>
        <member name="M:TagLib.Asf.DescriptionRecord.ToQWord">
            <summary>
               Gets the QWORD value contained in the current instance.
            </summary>
            <returns>
               A <see cref="T:System.UInt64" /> value containing the value of the
               current instance.
            </returns>
        </member>
        <member name="M:TagLib.Asf.DescriptionRecord.ToWord">
            <summary>
               Gets the WORD value contained in the current instance.
            </summary>
            <returns>
               A <see cref="T:System.UInt16" /> value containing the value of the
               current instance.
            </returns>
        </member>
        <member name="M:TagLib.Asf.DescriptionRecord.ToGuid">
            <summary>
               Gets the GUID value contained in the current instance.
            </summary>
            <returns>
               A <see cref="T:System.Guid" /> value containing the value
               of the current instance.
            </returns>
        </member>
        <member name="M:TagLib.Asf.DescriptionRecord.Render">
            <summary>
               Renders the current instance as a raw ASF Description
               Record.
            </summary>
            <returns>
               A <see cref="T:TagLib.ByteVector" /> object containing the
               rendered version of the current instance.
            </returns>
        </member>
        <member name="M:TagLib.Asf.DescriptionRecord.Parse(TagLib.Asf.File)">
            <summary>
               Populates the current instance by reading in the contents
               from a file.
            </summary>
            <param name="file">
               A <see cref="T:TagLib.Asf.File" /> object to read the raw ASF
               Description Record from.
            </param>
            <returns>
               <see langword="true" /> if the data was read correctly.
               Otherwise <see langword="false" />.
            </returns>
        </member>
        <member name="T:TagLib.Asf.ExtendedContentDescriptionObject">
            <summary>
               This class extends <see cref="T:TagLib.Asf.Object" /> to provide a
               representation of an ASF Extended Content Description object
               which can be read from and written to disk.
            </summary>
        </member>
        <member name="F:TagLib.Asf.ExtendedContentDescriptionObject.descriptors">
            <summary>
               Contains the content descriptors.
            </summary>
        </member>
        <member name="M:TagLib.Asf.ExtendedContentDescriptionObject.#ctor(TagLib.Asf.File,System.Int64)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Asf.ExtendedContentDescriptionObject" /> by reading the
               contents from a specified position in a specified file.
            </summary>
            <param name="file">
               A <see cref="T:TagLib.Asf.File" /> object containing the file from
               which the contents of the new instance are to be read.
            </param>
            <param name="position">
               A <see cref="T:System.Int64" /> value specify at what position to
               read the object.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="file" /> is <see langword="null" />.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
               <paramref name="position" /> is less than zero or greater
               than the size of the file.
            </exception>
            <exception cref="T:TagLib.CorruptFileException">
               The object read from disk does not have the correct GUID
               or smaller than the minimum size.
            </exception>
        </member>
        <member name="M:TagLib.Asf.ExtendedContentDescriptionObject.#ctor">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Asf.ExtendedContentDescriptionObject" /> with no
               contents.
            </summary>
        </member>
        <member name="P:TagLib.Asf.ExtendedContentDescriptionObject.IsEmpty">
            <summary>
               Gets whether or not the current instance is empty.
            </summary>
            <value>
               <see langword="true" /> if the current instance doesn't
               contain any <see cref="T:TagLib.Asf.ContentDescriptor" /> objects.
               Otherwise <see langword="false" />.
            </value>
        </member>
        <member name="M:TagLib.Asf.ExtendedContentDescriptionObject.Render">
            <summary>
               Renders the current instance as a raw ASF object.
            </summary>
            <returns>
               A <see cref="T:TagLib.ByteVector" /> object containing the
               rendered version of the current instance.
            </returns>
        </member>
        <member name="M:TagLib.Asf.ExtendedContentDescriptionObject.RemoveDescriptors(System.String)">
            <summary>
               Removes all descriptors with a given name from the
               current instance.
            </summary>
            <param name="name">
               A <see cref="T:System.String" /> object containing the name of the
               descriptors to be removed.
            </param>
        </member>
        <member name="M:TagLib.Asf.ExtendedContentDescriptionObject.GetDescriptors(System.String[])">
            <summary>
               Gets all descriptors with any of a collection of names
               from the current instance.
            </summary>
            <param name="names">
               A <see cref="T:string[]" /> containing the names of the
               descriptors to be retrieved.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="names" /> is <see langword="null" />.
            </exception>
            <returns>
               A <see cref="T:System.Collections.Generic.IEnumerable`1" /> object enumerating
               through the <see cref="T:TagLib.Asf.ContentDescriptor" /> objects
               retrieved from the current instance.
            </returns>
        </member>
        <member name="M:TagLib.Asf.ExtendedContentDescriptionObject.AddDescriptor(TagLib.Asf.ContentDescriptor)">
            <summary>
               Adds a descriptor to the current instance.
            </summary>
            <param name="descriptor">
               A <see cref="T:TagLib.Asf.ContentDescriptor" /> object to add to the
               current instance.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="descriptor" /> is <see langword="null"
               />.
            </exception>
        </member>
        <member name="M:TagLib.Asf.ExtendedContentDescriptionObject.SetDescriptors(System.String,TagLib.Asf.ContentDescriptor[])">
            <summary>
               Sets the a collection of desciptors for a given name,
               removing the existing matching records.
            </summary>
            <param name="name">
               A <see cref="T:System.String" /> object containing the name of the
               descriptors to be added.
            </param>
            <param name="descriptors">
               A <see cref="T:ContentDescriptor[]" /> containing
               descriptors to add to the new instance.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="name" /> is <see langword="null" />.
            </exception>
            <remarks>
               All added entries in <paramref name="descriptors" />
               should match <paramref name="name" /> but it is not
               verified by the method. The descriptors will be added
               with their own names and not the one provided in this
               method, which are used for removing existing values and
               determining where to position the new objects.
            </remarks>
        </member>
        <member name="M:TagLib.Asf.ExtendedContentDescriptionObject.GetEnumerator">
            <summary>
               Gets an enumerator for enumerating through the content
               descriptors.
            </summary>
            <returns>
               A <see cref="T:System.Collections.IEnumerator`1" /> for
               enumerating through the content descriptors.
            </returns>
        </member>
        <member name="T:TagLib.Asf.File">
            <summary>
               This class extends <see cref="T:TagLib.File" /> to provide tagging
               and properties support for Microsoft's ASF files.
            </summary>
        </member>
        <member name="F:TagLib.Asf.File.asf_tag">
            <summary>
               Contains the file's tag.
            </summary>
        </member>
        <member name="F:TagLib.Asf.File.properties">
            <summary>
               Contains the file's properties.
            </summary>
        </member>
        <member name="M:TagLib.Asf.File.#ctor(System.String,TagLib.ReadStyle)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Asf.File" /> for a specified path in the local file
               system and specified read style.
            </summary>
            <param name="path">
               A <see cref="T:System.String" /> object containing the path of the
               file to use in the new instance.
            </param>
            <param name="propertiesStyle">
               A <see cref="T:TagLib.ReadStyle" /> value specifying at what level
               of accuracy to read the media properties, or <see
               cref="F:TagLib.ReadStyle.None" /> to ignore the properties.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="path" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:TagLib.Asf.File.#ctor(System.String)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Asf.File" /> for a specified path in the local file
               system with an average read style.
            </summary>
            <param name="path">
               A <see cref="T:System.String" /> object containing the path of the
               file to use in the new instance.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="path" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:TagLib.Asf.File.#ctor(TagLib.File.IFileAbstraction,TagLib.ReadStyle)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Asf.File" /> for a specified file abstraction and
               specified read style.
            </summary>
            <param name="abstraction">
               A <see cref="T:TagLib.File.IFileAbstraction" /> object to use when
               reading from and writing to the file.
            </param>
            <param name="propertiesStyle">
               A <see cref="T:TagLib.ReadStyle" /> value specifying at what level
               of accuracy to read the media properties, or <see
               cref="F:TagLib.ReadStyle.None" /> to ignore the properties.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="abstraction" /> is <see langword="null"
               />.
            </exception>
        </member>
        <member name="M:TagLib.Asf.File.#ctor(TagLib.File.IFileAbstraction)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Asf.File" /> for a specified file abstraction with an
               average read style.
            </summary>
            <param name="abstraction">
               A <see cref="T:TagLib.File.IFileAbstraction" /> object to use when
               reading from and writing to the file.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="abstraction" /> is <see langword="null"
               />.
            </exception>
        </member>
        <member name="P:TagLib.Asf.File.Tag">
            <summary>
               Gets a abstract representation of all tags stored in the
               current instance.
            </summary>
            <value>
               A <see cref="T:TagLib.Tag" /> object representing all tags
               stored in the current instance.
            </value>
        </member>
        <member name="P:TagLib.Asf.File.Properties">
            <summary>
               Gets the media properties of the file represented by the
               current instance.
            </summary>
            <value>
               A <see cref="T:TagLib.Properties" /> object containing the
               media properties of the file represented by the current
               instance.
            </value>
        </member>
        <member name="M:TagLib.Asf.File.Save">
            <summary>
               Saves the changes made in the current instance to the
               file it represents.
            </summary>
        </member>
        <member name="M:TagLib.Asf.File.GetTag(TagLib.TagTypes,System.Boolean)">
            <summary>
               Gets a tag of a specified type from the current instance,
               optionally creating a new tag if possible.
            </summary>
            <param name="type">
               A <see cref="T:TagLib.TagTypes" /> value indicating the
               type of tag to read.
            </param>
            <param name="create">
               A <see cref="T:System.Boolean" /> value specifying whether or not to
               try and create the tag if one is not found.
            </param>
            <returns>
               A <see cref="P:TagLib.Asf.File.Tag" /> object containing the tag that was
               found in or added to the current instance. If no
               matching tag was found and none was created, <see
               langword="null" /> is returned.
            </returns>
        </member>
        <member name="M:TagLib.Asf.File.RemoveTags(TagLib.TagTypes)">
            <summary>
               Removes a set of tag types from the current instance.
            </summary>
            <param name="types">
               A bitwise combined <see cref="T:TagLib.TagTypes" /> value
               containing tag types to be removed from the file.
            </param>
            <remarks>
               In order to remove all tags from a file, pass <see
               cref="F:TagLib.TagTypes.AllTags" /> as <paramref name="types" />.
            </remarks>
        </member>
        <member name="M:TagLib.Asf.File.ReadWord">
            <summary>
               Reads a 2-byte WORD from the current instance.
            </summary>
            <returns>
               A <see cref="T:System.UInt16" /> value containing the WORD read
               from the current instance.
            </returns>
        </member>
        <member name="M:TagLib.Asf.File.ReadDWord">
            <summary>
               Reads a 4-byte DWORD from the current instance.
            </summary>
            <returns>
               A <see cref="T:System.UInt32" /> value containing the DWORD read
               from the current instance.
            </returns>
        </member>
        <member name="M:TagLib.Asf.File.ReadQWord">
            <summary>
               Reads a 8-byte QWORD from the current instance.
            </summary>
            <returns>
               A <see cref="T:System.UInt64" /> value containing the QWORD read
               from the current instance.
            </returns>
        </member>
        <member name="M:TagLib.Asf.File.ReadGuid">
            <summary>
               Reads a 16-byte GUID from the current instance.
            </summary>
            <returns>
               A <see cref="T:System.Guid" /> value containing the GUID
               read from the current instance.
            </returns>
        </member>
        <member name="M:TagLib.Asf.File.ReadUnicode(System.Int32)">
            <summary>
               Reads a Unicode (UTF-16LE) string of specified length
               from the current instance.
            </summary>
            <param name="length">
               A <see cref="T:System.Int32" /> value specifying the number of bytes
               to read. This should always be an even number.
            </param>
            <returns>
               A <see cref="T:System.String" /> object containing the Unicode
               string read from the current instance.
            </returns>
        </member>
        <member name="M:TagLib.Asf.File.ReadObjects(System.UInt32,System.Int64)">
            <summary>
               Reads a collection of objects from the current instance.
            </summary>
            <param name="count">
               A <see cref="T:System.UInt32" /> value specifying the number of
               objects to read.
            </param>
            <param name="position">
               A <see cref="T:System.Int64" /> value specifying the seek position
               at which to start reading.
            </param>
            <returns>
               A new <see cref="T:System.Collections.Generic.IEnumerable`1" /> object enumerating
               through the <see cref="T:TagLib.Asf.Object" /> objects read from the
               current instance.
            </returns>
        </member>
        <member name="M:TagLib.Asf.File.ReadObject(System.Int64)">
            <summary>
               Reads a <see cref="T:TagLib.Asf.Object" /> from the current instance.
            </summary>
            <param name="position">
               A <see cref="T:System.Int64" /> value specifying the seek position
               at which to start reading.
            </param>
            <returns>
               A new <see cref="T:TagLib.Asf.Object" /> object of appropriate type as
               read from the current instance.
            </returns>
        </member>
        <member name="M:TagLib.Asf.File.Read(TagLib.ReadStyle)">
            <summary>
               Reads the contents of the current instance.
            </summary>
            <param name="propertiesStyle">
               A <see cref="T:TagLib.ReadStyle" /> value specifying at what level
               of accuracy to read the media properties, or <see
               cref="F:TagLib.ReadStyle.None" /> to ignore the properties.
            </param>
        </member>
        <member name="T:TagLib.Asf.FilePropertiesObject">
            <summary>
               This class extends <see cref="T:TagLib.Asf.Object" /> to provide a
               representation of an ASF File Properties object which can be read
               from and written to disk.
            </summary>
        </member>
        <member name="F:TagLib.Asf.FilePropertiesObject.file_id">
            <summary>
               Contains the GUID for the file.
            </summary>
        </member>
        <member name="F:TagLib.Asf.FilePropertiesObject.creation_date">
            <summary>
               Contains the creation date.
            </summary>
        </member>
        <member name="F:TagLib.Asf.FilePropertiesObject.play_duration">
            <summary>
               Contains the play duration.
            </summary>
        </member>
        <member name="F:TagLib.Asf.FilePropertiesObject.send_duration">
            <summary>
               Contains the send duration.
            </summary>
        </member>
        <member name="M:TagLib.Asf.FilePropertiesObject.#ctor(TagLib.Asf.File,System.Int64)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Asf.FilePropertiesObject" /> by reading the contents
               from a specified position in a specified file.
            </summary>
            <param name="file">
               A <see cref="T:TagLib.Asf.File" /> object containing the file from
               which the contents of the new instance are to be read.
            </param>
            <param name="position">
               A <see cref="T:System.Int64" /> value specify at what position to
               read the object.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="file" /> is <see langword="null" />.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
               <paramref name="position" /> is less than zero or greater
               than the size of the file.
            </exception>
            <exception cref="T:TagLib.CorruptFileException">
               The object read from disk does not have the correct GUID
               or smaller than the minimum size.
            </exception>
        </member>
        <member name="P:TagLib.Asf.FilePropertiesObject.FileId">
            <summary>
               Gets the GUID for the file described by the current
               instance.
            </summary>
            <value>
               A <see cref="T:System.Guid" /> value containing the GUID
               for the file described by the current instance.
            </value>
        </member>
        <member name="P:TagLib.Asf.FilePropertiesObject.FileSize">
            <summary>
               Gets the size of the file described by the current
               instance.
            </summary>
            <value>
               A <see cref="T:System.UInt64" /> value containing the size of the
               file described by the current instance.
            </value>
        </member>
        <member name="P:TagLib.Asf.FilePropertiesObject.CreationDate">
            <summary>
               Gets the creation date of the file described by the
               current instance.
            </summary>
            <value>
               A <see cref="T:System.DateTime" /> value containing the creation
               date of the file described by the current instance.
            </value>
        </member>
        <member name="P:TagLib.Asf.FilePropertiesObject.DataPacketsCount">
            <summary>
               Gets the number of data packets in the file described by
               the current instance.
            </summary>
            <value>
               A <see cref="T:System.UInt64" /> value containing the number of
               data packets in the file described by the current
               instance.
            </value>
        </member>
        <member name="P:TagLib.Asf.FilePropertiesObject.PlayDuration">
            <summary>
               Gets the play duration of the file described by the
               current instance.
            </summary>
            <value>
               A <see cref="T:System.TimeSpan" /> value containing the play
               duration of the file described by the current instance.
            </value>
        </member>
        <member name="P:TagLib.Asf.FilePropertiesObject.SendDuration">
            <summary>
               Gets the send duration of the file described by the
               current instance.
            </summary>
            <value>
               A <see cref="T:System.TimeSpan" /> value containing the send
               duration of the file described by the current instance.
            </value>
        </member>
        <member name="P:TagLib.Asf.FilePropertiesObject.Preroll">
            <summary>
               Gets the pre-roll of the file described by the current
               instance.
            </summary>
            <value>
               A <see cref="T:System.UInt64" /> value containing the pre-roll of
               the file described by the current instance.
            </value>
        </member>
        <member name="P:TagLib.Asf.FilePropertiesObject.Flags">
            <summary>
               Gets the flags of the file described by the current
               instance.
            </summary>
            <value>
               A <see cref="T:System.UInt32" /> value containing the flags of the
               file described by the current instance.
            </value>
        </member>
        <member name="P:TagLib.Asf.FilePropertiesObject.MinimumDataPacketSize">
            <summary>
               Gets the minimum data packet size of the file described
               by the current instance.
            </summary>
            <value>
               A <see cref="T:System.UInt32" /> value containing the minimum data
               packet size of the file described by the current
               instance.
            </value>
        </member>
        <member name="P:TagLib.Asf.FilePropertiesObject.MaximumDataPacketSize">
            <summary>
               Gets the maximum data packet size of the file described
               by the current instance.
            </summary>
            <value>
               A <see cref="T:System.UInt32" /> value containing the maximum data
               packet size of the file described by the current
               instance.
            </value>
        </member>
        <member name="P:TagLib.Asf.FilePropertiesObject.MaximumBitrate">
            <summary>
               Gets the maximum bitrate of the file described by the
               current instance.
            </summary>
            <value>
               A <see cref="T:System.UInt32" /> value containing the maximum
               bitrate of the file described by the current instance.
            </value>
        </member>
        <member name="M:TagLib.Asf.FilePropertiesObject.Render">
            <summary>
               Renders the current instance as a raw ASF object.
            </summary>
            <returns>
               A <see cref="T:TagLib.ByteVector" /> object containing the
               rendered version of the current instance.
            </returns>
        </member>
        <member name="T:TagLib.Asf.Guid">
            <summary>
               This static class contains common <see cref="T:System.Guid" />
               values used by ASF Objects.
            </summary>
        </member>
        <member name="F:TagLib.Asf.Guid.AsfContentDescriptionObject">
            <summary>
               Indicates that an object is a <see
               cref="T:TagLib.Asf.ContentDescriptionObject" />.
            </summary>
        </member>
        <member name="F:TagLib.Asf.Guid.AsfExtendedContentDescriptionObject">
            <summary>
               Indicates that an object is a <see
               cref="T:TagLib.Asf.ExtendedContentDescriptionObject" />.
            </summary>
        </member>
        <member name="F:TagLib.Asf.Guid.AsfFilePropertiesObject">
            <summary>
               Indicates that an object is a <see
               cref="T:TagLib.Asf.FilePropertiesObject" />.
            </summary>
        </member>
        <member name="F:TagLib.Asf.Guid.AsfHeaderExtensionObject">
            <summary>
               Indicates that an object is a <see
               cref="T:TagLib.Asf.HeaderExtensionObject" />.
            </summary>
        </member>
        <member name="F:TagLib.Asf.Guid.AsfHeaderObject">
            <summary>
               Indicates that an object is a <see
               cref="T:TagLib.Asf.HeaderObject" />.
            </summary>
        </member>
        <member name="F:TagLib.Asf.Guid.AsfMetadataLibraryObject">
            <summary>
               Indicates that an object is a <see
               cref="T:TagLib.Asf.MetadataLibraryObject" />.
            </summary>
        </member>
        <member name="F:TagLib.Asf.Guid.AsfPaddingObject">
            <summary>
               Indicates that an object is a <see
               cref="T:TagLib.Asf.PaddingObject" />.
            </summary>
        </member>
        <member name="F:TagLib.Asf.Guid.AsfStreamPropertiesObject">
            <summary>
               Indicates that an object is a <see
               cref="T:TagLib.Asf.StreamPropertiesObject" />.
            </summary>
        </member>
        <member name="F:TagLib.Asf.Guid.AsfAudioMedia">
            <summary>
               Indicates that a <see cref="T:TagLib.Asf.StreamPropertiesObject" />
               contains information about an audio stream.
            </summary>
        </member>
        <member name="F:TagLib.Asf.Guid.AsfVideoMedia">
            <summary>
               Indicates that a <see cref="T:TagLib.Asf.StreamPropertiesObject" />
               contains information about an video stream.
            </summary>
        </member>
        <member name="F:TagLib.Asf.Guid.AsfReserved1">
            <summary>
               Indicates a placeholder portion of a file is correctly
               encoded.
            </summary>
        </member>
        <member name="T:TagLib.Asf.HeaderExtensionObject">
            <summary>
               This class extends <see cref="T:TagLib.Asf.Object" /> to provide a
               representation of an ASF Header Extension object which can be
               read from and written to disk.
            </summary>
        </member>
        <member name="F:TagLib.Asf.HeaderExtensionObject.children">
            <summary>
               Contains the child objects.
            </summary>
        </member>
        <member name="M:TagLib.Asf.HeaderExtensionObject.#ctor(TagLib.Asf.File,System.Int64)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Asf.HeaderExtensionObject" /> by reading the contents
               from a specified position in a specified file.
            </summary>
            <param name="file">
               A <see cref="T:TagLib.Asf.File" /> object containing the file from
               which the contents of the new instance are to be read.
            </param>
            <param name="position">
               A <see cref="T:System.Int64" /> value specify at what position to
               read the object.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="file" /> is <see langword="null" />.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
               <paramref name="position" /> is less than zero or greater
               than the size of the file.
            </exception>
            <exception cref="T:TagLib.CorruptFileException">
               The object read from disk does not have the correct GUID
               or contents.
            </exception>
        </member>
        <member name="P:TagLib.Asf.HeaderExtensionObject.Children">
            <summary>
               Gets the child objects contained in the current instance.
            </summary>
            <value>
               A <see cref="T:System.Collections.Generic.IEnumerable`1" /> object enumerating
               through the children of the current instance.
            </value>
        </member>
        <member name="M:TagLib.Asf.HeaderExtensionObject.Render">
            <summary>
               Renders the current instance as a raw ASF object.
            </summary>
            <returns>
               A <see cref="T:TagLib.ByteVector" /> object containing the
               rendered version of the current instance.
            </returns>
        </member>
        <member name="M:TagLib.Asf.HeaderExtensionObject.AddObject(TagLib.Asf.Object)">
            <summary>
               Adds a child object to the current instance.
            </summary>
            <param name="obj">
               A <see cref="T:TagLib.Asf.Object" /> object to add to the current
               instance.
            </param>
        </member>
        <member name="M:TagLib.Asf.HeaderExtensionObject.AddUniqueObject(TagLib.Asf.Object)">
            <summary>
               Adds a child unique child object to the current instance,
               replacing and existing child if present.
            </summary>
            <param name="obj">
               A <see cref="T:TagLib.Asf.Object" /> object to add to the current
               instance.
            </param>
        </member>
        <member name="T:TagLib.Asf.HeaderObject">
            <summary>
               This class extends <see cref="T:TagLib.Asf.Object" /> to provide a
               representation of an ASF Header object which can be read from and
               written to disk.
            </summary>
        </member>
        <member name="F:TagLib.Asf.HeaderObject.reserved">
            <summary>
               Contains the reserved header data.
            </summary>
        </member>
        <member name="F:TagLib.Asf.HeaderObject.children">
            <summary>
               Contains the child objects.
            </summary>
        </member>
        <member name="M:TagLib.Asf.HeaderObject.#ctor(TagLib.Asf.File,System.Int64)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Asf.HeaderObject" /> by reading the contents from a
               specified position in a specified file.
            </summary>
            <param name="file">
               A <see cref="T:TagLib.Asf.File" /> object containing the file from
               which the contents of the new instance are to be read.
            </param>
            <param name="position">
               A <see cref="T:System.Int64" /> value specify at what position to
               read the object.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="file" /> is <see langword="null" />.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
               <paramref name="position" /> is less than zero or greater
               than the size of the file.
            </exception>
            <exception cref="T:TagLib.CorruptFileException">
               The object read from disk does not have the correct GUID
               or smaller than the minimum size.
            </exception>
        </member>
        <member name="P:TagLib.Asf.HeaderObject.Extension">
            <summary>
               Gets the header extension object contained in the
               current instance.
            </summary>
            <value>
               A <see cref="T:TagLib.Asf.HeaderExtensionObject" /> object containing
               the header extension object.
            </value>
        </member>
        <member name="P:TagLib.Asf.HeaderObject.Children">
            <summary>
               Gets the child objects contained in the current instance.
            </summary>
            <value>
               A <see cref="T:System.Collections.Generic.IEnumerable`1" /> object enumerating
               through the children of the current instance.
            </value>
        </member>
        <member name="P:TagLib.Asf.HeaderObject.Properties">
            <summary>
               Gets the media properties contained within the current
               instance.
            </summary>
            <value>
               A <see cref="P:TagLib.Asf.HeaderObject.Properties" /> object containing the media
               properties of the current instance.
            </value>
        </member>
        <member name="P:TagLib.Asf.HeaderObject.HasContentDescriptors">
            <summary>
               Gets whether or not the current instance contains either
               type of content descriptiors.
            </summary>
            <value>
               <see langword="true" /> if the current instance contains
               a <see cref="T:TagLib.Asf.ContentDescriptionObject" /> or a <see
               cref="T:TagLib.Asf.ExtendedContentDescriptionObject" />. Otherwise
               <see langword="false" />.
            </value>
        </member>
        <member name="M:TagLib.Asf.HeaderObject.Render">
            <summary>
               Renders the current instance as a raw ASF object.
            </summary>
            <returns>
               A <see cref="T:TagLib.ByteVector" /> object containing the
               rendered version of the current instance.
            </returns>
        </member>
        <member name="M:TagLib.Asf.HeaderObject.AddObject(TagLib.Asf.Object)">
            <summary>
               Adds a child object to the current instance.
            </summary>
            <param name="obj">
               A <see cref="T:TagLib.Asf.Object" /> object to add to the current
               instance.
            </param>
        </member>
        <member name="M:TagLib.Asf.HeaderObject.AddUniqueObject(TagLib.Asf.Object)">
            <summary>
               Adds a child unique child object to the current instance,
               replacing and existing child if present.
            </summary>
            <param name="obj">
               A <see cref="T:TagLib.Asf.Object" /> object to add to the current
               instance.
            </param>
        </member>
        <member name="M:TagLib.Asf.HeaderObject.RemoveContentDescriptors">
            <summary>
               Removes the content description objects from the current
               instance.
            </summary>
        </member>
        <member name="T:TagLib.Asf.MetadataLibraryObject">
            <summary>
               This class extends <see cref="T:TagLib.Asf.Object" /> to provide a
               representation of an ASF Metadata Library object which can be
               read from and written to disk.
            </summary>
        </member>
        <member name="F:TagLib.Asf.MetadataLibraryObject.records">
            <summary>
               Contains the description records.
            </summary>
        </member>
        <member name="M:TagLib.Asf.MetadataLibraryObject.#ctor(TagLib.Asf.File,System.Int64)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Asf.MetadataLibraryObject" /> by reading the contents
               from a specified position in a specified file.
            </summary>
            <param name="file">
               A <see cref="T:TagLib.Asf.File" /> object containing the file from
               which the contents of the new instance are to be read.
            </param>
            <param name="position">
               A <see cref="T:System.Int64" /> value specify at what position to
               read the object.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="file" /> is <see langword="null" />.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
               <paramref name="position" /> is less than zero or greater
               than the size of the file.
            </exception>
            <exception cref="T:TagLib.CorruptFileException">
               The object read from disk does not have the correct GUID
               or smaller than the minimum size.
            </exception>
        </member>
        <member name="M:TagLib.Asf.MetadataLibraryObject.#ctor">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Asf.MetadataLibraryObject" /> with no contents.
            </summary>
        </member>
        <member name="P:TagLib.Asf.MetadataLibraryObject.IsEmpty">
            <summary>
               Gets whether or not the current instance is empty.
            </summary>
            <value>
               <see langword="true" /> if the current instance doesn't
               contain any <see cref="T:TagLib.Asf.DescriptionRecord" /> objects.
               Otherwise <see langword="false" />.
            </value>
        </member>
        <member name="M:TagLib.Asf.MetadataLibraryObject.Render">
            <summary>
               Renders the current instance as a raw ASF object.
            </summary>
            <returns>
               A <see cref="T:TagLib.ByteVector" /> object containing the
               rendered version of the current instance.
            </returns>
        </member>
        <member name="M:TagLib.Asf.MetadataLibraryObject.RemoveRecords(System.UInt16,System.UInt16,System.String)">
            <summary>
               Removes all records with a given language, stream, and
               name from the current instance.
            </summary>
            <param name="languageListIndex">
               A <see cref="T:System.UInt16" /> value containing the language
               list index of the records to be removed.
            </param>
            <param name="streamNumber">
               A <see cref="T:System.UInt16" /> value containing the stream
               number of the records to be removed.
            </param>
            <param name="name">
               A <see cref="T:System.String" /> object containing the name of the
               records to be removed.
            </param>
        </member>
        <member name="M:TagLib.Asf.MetadataLibraryObject.GetRecords(System.UInt16,System.UInt16,System.String[])">
            <summary>
               Gets all records with a given language, stream, and any
               of a collection of names from the current instance.
            </summary>
            <param name="languageListIndex">
               A <see cref="T:System.UInt16" /> value containing the language
               list index of the records to be retrieved.
            </param>
            <param name="streamNumber">
               A <see cref="T:System.UInt16" /> value containing the stream
               number of the records to be retrieved.
            </param>
            <param name="names">
               A <see cref="T:string[]" /> containing the names of the
               records to be retrieved.
            </param>
            <returns>
               A <see cref="T:System.Collections.Generic.IEnumerable`1" /> object enumerating
               through the <see cref="T:TagLib.Asf.DescriptionRecord" /> objects
               retrieved from the current instance.
            </returns>
        </member>
        <member name="M:TagLib.Asf.MetadataLibraryObject.AddRecord(TagLib.Asf.DescriptionRecord)">
            <summary>
               Adds a record to the current instance.
            </summary>
            <param name="record">
               A <see cref="T:TagLib.Asf.DescriptionRecord" /> object to add to the
               current instance.
            </param>
        </member>
        <member name="M:TagLib.Asf.MetadataLibraryObject.SetRecords(System.UInt16,System.UInt16,System.String,TagLib.Asf.DescriptionRecord[])">
            <summary>
               Sets the a collection of records for a given language,
               stream, and name, removing the existing matching records.
            </summary>
            <param name="languageListIndex">
               A <see cref="T:System.UInt16" /> value containing the language
               list index of the records to be added.
            </param>
            <param name="streamNumber">
               A <see cref="T:System.UInt16" /> value containing the stream
               number of the records to be added.
            </param>
            <param name="name">
               A <see cref="T:System.String" /> object containing the name of the
               records to be added.
            </param>
            <param name="records">
               A <see cref="T:DescriptionRecord[]" /> containing records
               to add to the new instance.
            </param>
            <remarks>
               All added entries in <paramref name="records" /> should
               match <paramref name="languageListIndex" />, <paramref
               name="streamNumber" /> and <paramref name="name" /> but
               it is not verified by the method. The records will be
               added with their own values and not those provided in
               this method, which are used for removing existing values
               and determining where to position the new object.
            </remarks>
        </member>
        <member name="M:TagLib.Asf.MetadataLibraryObject.GetEnumerator">
            <summary>
               Gets an enumerator for enumerating through the
               description records.
            </summary>
            <returns>
               A <see cref="T:System.Collections.IEnumerator`1" /> for
               enumerating through the description records.
            </returns>
        </member>
        <member name="T:TagLib.Asf.Object">
            <summary>
               This abstract class provides a basic representation of an ASF
               object which can be read from and written to disk.
            </summary>
        </member>
        <member name="F:TagLib.Asf.Object.id">
            <summary>
               Contains the GUID of the object.
            </summary>
        </member>
        <member name="M:TagLib.Asf.Object.#ctor(TagLib.Asf.File,System.Int64)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Asf.Object" /> by reading the contents from a
               specified position in a specified file.
            </summary>
            <param name="file">
               A <see cref="T:TagLib.Asf.File" /> object containing the file from
               which the contents of the new instance are to be read.
            </param>
            <param name="position">
               A <see cref="T:System.Int64" /> value specify at what position to
               read the object.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="file" /> is <see langword="null" />.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
               <paramref name="position" /> is less than zero or greater
               than the size of the file.
            </exception>
        </member>
        <member name="M:TagLib.Asf.Object.#ctor(System.Guid)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Asf.Object" /> with a specified GUID.
            </summary>
            <param name="guid">
               A <see cref="T:System.Guid" /> value containing the GUID to
               use for the new instance.
            </param>
        </member>
        <member name="P:TagLib.Asf.Object.Guid">
            <summary>
               Gets the GUID for the current instance.
            </summary>
            <value>
               A <see cref="T:System.Guid" /> object containing the GUID
               of the current instance.
            </value>
        </member>
        <member name="P:TagLib.Asf.Object.OriginalSize">
            <summary>
               Gets the original size of the current instance.
            </summary>
            <value>
               A <see cref="T:System.UInt64" /> value containing the size of the
               current instance as it originally appeared on disk.
            </value>
        </member>
        <member name="M:TagLib.Asf.Object.Render">
            <summary>
               Renders the current instance as a raw ASF object.
            </summary>
            <returns>
               A <see cref="T:TagLib.ByteVector" /> object containing the
               rendered version of the current instance.
            </returns>
            <seealso cref="M:TagLib.Asf.Object.Render(TagLib.ByteVector)" />
        </member>
        <member name="M:TagLib.Asf.Object.RenderUnicode(System.String)">
            <summary>
               Renders a Unicode (wide) string.
            </summary>
            <param name="value">
               A <see cref="T:System.String" /> object containing the text to
               render.
            </param>
            <returns>
               A <see cref="T:TagLib.ByteVector" /> object containing the
               rendered value.
            </returns>
        </member>
        <member name="M:TagLib.Asf.Object.RenderDWord(System.UInt32)">
            <summary>
               Renders a 4-byte DWORD.
            </summary>
            <param name="value">
               A <see cref="T:System.UInt32" /> value containing the DWORD to
               render.
            </param>
            <returns>
               A <see cref="T:TagLib.ByteVector" /> object containing the
               rendered value.
            </returns>
        </member>
        <member name="M:TagLib.Asf.Object.RenderQWord(System.UInt64)">
            <summary>
               Renders a 8-byte QWORD.
            </summary>
            <param name="value">
               A <see cref="T:System.UInt64" /> value containing the QWORD to
               render.
            </param>
            <returns>
               A <see cref="T:TagLib.ByteVector" /> object containing the
               rendered value.
            </returns>
        </member>
        <member name="M:TagLib.Asf.Object.RenderWord(System.UInt16)">
            <summary>
               Renders a 2-byte WORD.
            </summary>
            <param name="value">
               A <see cref="T:System.UInt16" /> value containing the WORD to
               render.
            </param>
            <returns>
               A <see cref="T:TagLib.ByteVector" /> object containing the
               rendered value.
            </returns>
        </member>
        <member name="M:TagLib.Asf.Object.Render(TagLib.ByteVector)">
            <summary>
               Renders the current instance as a raw ASF object
               containing specified data.
            </summary>
            <param name="data">
               A <see cref="T:TagLib.ByteVector" /> object containing the data to
               contained in the rendered version of the current
               instance.
            </param>
            <returns>
               A <see cref="T:TagLib.ByteVector" /> object containing the
               rendered version of the current instance.
            </returns>
            <remarks>
               Child classes implementing <see cref="M:TagLib.Asf.Object.Render" /> should
               render their contents and then send the data through this
               method to produce the final output.
            </remarks>
        </member>
        <member name="T:TagLib.Asf.PaddingObject">
            <summary>
               This class extends <see cref="T:TagLib.Asf.Object" /> to provide a
               representation of an ASF Padding object which can be read from
               and written to disk.
            </summary>
        </member>
        <member name="M:TagLib.Asf.PaddingObject.#ctor(TagLib.Asf.File,System.Int64)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Asf.PaddingObject" /> by reading the contents from a
               specified position in a specified file.
            </summary>
            <param name="file">
               A <see cref="T:TagLib.Asf.File" /> object containing the file from
               which the contents of the new instance are to be read.
            </param>
            <param name="position">
               A <see cref="T:System.Int64" /> value specify at what position to
               read the object.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="file" /> is <see langword="null" />.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
               <paramref name="position" /> is less than zero or greater
               than the size of the file.
            </exception>
            <exception cref="T:TagLib.CorruptFileException">
               The object read from disk does not have the correct GUID
               or smaller than the minimum size.
            </exception>
        </member>
        <member name="M:TagLib.Asf.PaddingObject.#ctor(System.UInt32)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Asf.PaddingObject" /> of a specified size.
            </summary>
            <param name="size">
               A <see cref="T:System.UInt32" /> value specifying the number of
               bytes the new instance is to take up on disk.
            </param>
        </member>
        <member name="P:TagLib.Asf.PaddingObject.Size">
            <summary>
               Gets and sets the number of bytes the current instance
               will take up on disk.
            </summary>
            <value>
               A <see cref="T:System.UInt64" /> value containing the size of the
               current instance on disk.
            </value>
        </member>
        <member name="M:TagLib.Asf.PaddingObject.Render">
            <summary>
               Renders the current instance as a raw ASF object.
            </summary>
            <returns>
               A <see cref="T:TagLib.ByteVector" /> object containing the
               rendered version of the current instance.
            </returns>
        </member>
        <member name="T:TagLib.Asf.StreamPropertiesObject">
            <summary>
               This class extends <see cref="T:TagLib.Asf.Object" /> to provide a
               representation of an ASF Stream Properties object which can be
               read from and written to disk.
            </summary>
        </member>
        <member name="F:TagLib.Asf.StreamPropertiesObject.time_offset">
            <summary>
               Contains the time offset of the stream.
            </summary>
        </member>
        <member name="F:TagLib.Asf.StreamPropertiesObject.reserved">
            <summary>
               Contains the reserved data.
            </summary>
        </member>
        <member name="M:TagLib.Asf.StreamPropertiesObject.#ctor(TagLib.Asf.File,System.Int64)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Asf.PaddingObject" /> by reading the contents from a
               specified position in a specified file.
            </summary>
            <param name="file">
               A <see cref="T:TagLib.Asf.File" /> object containing the file from
               which the contents of the new instance are to be read.
            </param>
            <param name="position">
               A <see cref="T:System.Int64" /> value specify at what position to
               read the object.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="file" /> is <see langword="null" />.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
               <paramref name="position" /> is less than zero or greater
               than the size of the file.
            </exception>
            <exception cref="T:TagLib.CorruptFileException">
               The object read from disk does not have the correct GUID
               or smaller than the minimum size.
            </exception>
        </member>
        <member name="P:TagLib.Asf.StreamPropertiesObject.Codec">
            <summary>
               Gets the codec information contained in the current
               instance.
            </summary>
            <value>
               A <see cref="T:TagLib.ICodec" /> object containing the codec
               information read from <see cref="P:TagLib.Asf.StreamPropertiesObject.TypeSpecificData" /> or
               <see langword="null" /> if the data could not be decoded.
            </value>
        </member>
        <member name="P:TagLib.Asf.StreamPropertiesObject.StreamType">
            <summary>
               Gets the stream type GUID of the current instance.
            </summary>
            <summary>
               A <see cref="T:System.Guid" /> object containing the stream
               type GUID of the current instance.
            </summary>
        </member>
        <member name="P:TagLib.Asf.StreamPropertiesObject.ErrorCorrectionType">
            <summary>
               Gets the error correction type GUID of the current
               instance.
            </summary>
            <summary>
               A <see cref="T:System.Guid" /> object containing the error
               correction type GUID of the current instance.
            </summary>
        </member>
        <member name="P:TagLib.Asf.StreamPropertiesObject.TimeOffset">
            <summary>
               Gets the time offset at which the stream described by the
               current instance begins.
            </summary>
            <value>
               A <see cref="T:System.TimeSpan" /> value containing the time
               offset at which the stream described by the current
               instance begins.
            </value>
        </member>
        <member name="P:TagLib.Asf.StreamPropertiesObject.Flags">
            <summary>
               Gets the flags that apply to the current instance.
            </summary>
            <value>
               A <see cref="T:System.UInt16" /> value containing the flags that
               apply to the current instance.
            </value>
        </member>
        <member name="P:TagLib.Asf.StreamPropertiesObject.TypeSpecificData">
            <summary>
               Gets the type specific data contained in the current
               instance.
            </summary>
            <value>
               A <see cref="T:TagLib.ByteVector" /> object containing the type
               specific data contained in the current instance.
            </value>
            <remarks>
               The contents of this value are dependant on the type
               contained in <see cref="P:TagLib.Asf.StreamPropertiesObject.StreamType" />.
            </remarks>
        </member>
        <member name="P:TagLib.Asf.StreamPropertiesObject.ErrorCorrectionData">
            <summary>
               Gets the error correction data contained in the current
               instance.
            </summary>
            <value>
               A <see cref="T:TagLib.ByteVector" /> object containing the error
               correction data contained in the current instance.
            </value>
            <remarks>
               The contents of this value are dependant on the type
               contained in <see cref="P:TagLib.Asf.StreamPropertiesObject.ErrorCorrectionType" />.
            </remarks>
        </member>
        <member name="M:TagLib.Asf.StreamPropertiesObject.Render">
            <summary>
               Renders the current instance as a raw ASF object.
            </summary>
            <returns>
               A <see cref="T:TagLib.ByteVector" /> object containing the
               rendered version of the current instance.
            </returns>
        </member>
        <member name="T:TagLib.Asf.Tag">
            <summary>
               This class extends <see cref="T:TagLib.Tag" /> to provide a
               representation of an ASF tag which can be read from and written
               to disk.
            </summary>
        </member>
        <member name="M:TagLib.Asf.Tag.#ctor">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Asf.Tag" /> with no contents.
            </summary>
        </member>
        <member name="M:TagLib.Asf.Tag.#ctor(TagLib.Asf.HeaderObject)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Asf.Tag" /> using the children of a <see
               cref="T:TagLib.Asf.HeaderObject" /> object.
            </summary>
            <param name="header">
               A <see cref="T:TagLib.Asf.HeaderObject" /> object whose children are
               are to be used by the new instance.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="header" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="P:TagLib.Asf.Tag.ContentDescriptionObject">
            <summary>
               Gets the ASF Content Description object used by the
               current instance.
            </summary>
            <value>
               A <see cref="P:TagLib.Asf.Tag.ContentDescriptionObject" /> object
               containing the ASF Content Description object used by the
               current instance.
            </value>
        </member>
        <member name="P:TagLib.Asf.Tag.ExtendedContentDescriptionObject">
            <summary>
               Gets the ASF Extended Content Description object used by
               the current instance.
            </summary>
            <value>
               A <see cref="P:TagLib.Asf.Tag.ExtendedContentDescriptionObject" /> object
               containing the ASF Extended Content Description object
               used by the current instance.
            </value>
        </member>
        <member name="P:TagLib.Asf.Tag.MetadataLibraryObject">
            <summary>
               Gets the ASF Metadata Library object used by the current
               instance.
            </summary>
            <value>
               A <see cref="P:TagLib.Asf.Tag.MetadataLibraryObject" /> object containing
               the ASF Metadata Library object used by the current
               instance.
            </value>
        </member>
        <member name="M:TagLib.Asf.Tag.GetDescriptorString(System.String[])">
            <summary>
               Gets the string contained in a specific descriptor in the
               current instance.
            </summary>
            <param name="names">
               A <see cref="T:string[]" /> containing the names of the
               descriptors to look for the value in.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="names" /> is <see langword="null" />.
            </exception>
            <returns>
               A <see cref="T:System.String" /> object containing the contents of
               the first descriptor found in the current instance.
            </returns>
        </member>
        <member name="M:TagLib.Asf.Tag.GetDescriptorStrings(System.String[])">
            <summary>
               Gets the strings contained in a specific descriptor in
               the current instance.
            </summary>
            <param name="names">
               A <see cref="T:string[]" /> containing the names of the
               descriptors to look for the value in.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="names" /> is <see langword="null" />.
            </exception>
            <returns>
               A <see cref="T:System.String" /> object containing the contents of
               the first descriptor found in the current instance as
               split by ';'.
            </returns>
        </member>
        <member name="M:TagLib.Asf.Tag.SetDescriptorString(System.String,System.String[])">
            <summary>
               Sets the string for a collection of descriptors in the
               current instance.
            </summary>
            <param name="value">
               A <see cref="T:System.String" /> object containing the value to
               store, or <see langword="null" /> to clear the value.
            </param>
            <param name="names">
               A <see cref="T:string[]" /> containing the names in which
               the value would be expected. For example, "WM/AlbumTitle"
               and "Album".
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="names" /> is <see langword="null" />.
            </exception>
            <remarks>
               The value will be stored in the first value in <paramref
               name="names" /> and the rest will be cleared.
            </remarks>
        </member>
        <member name="M:TagLib.Asf.Tag.SetDescriptorStrings(System.String[],System.String[])">
            <summary>
               Sets the strings for a collection of descriptors in the
               current instance.
            </summary>
            <param name="value">
               A <see cref="T:string[]" /> containing the value to store,
               or <see langword="null" /> to clear the value.
            </param>
            <param name="names">
               A <see cref="T:string[]" /> containing the names in which
               the value would be expected. For example, "WM/AlbumTitle"
               and "Album".
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="names" /> is <see langword="null" />.
            </exception>
            <remarks>
               The value will be stored in the first value in <paramref
               name="names" /> and the rest will be cleared.
            </remarks>
        </member>
        <member name="M:TagLib.Asf.Tag.RemoveDescriptors(System.String)">
            <summary>
               Removes all descriptors with a specified name from the
               current instance.
            </summary>
            <param name="name">
               A <see cref="T:System.String" /> object containing the name of the
               descriptor to remove from the current instance.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="name" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:TagLib.Asf.Tag.GetDescriptors(System.String[])">
            <summary>
               Gets all descriptors with any of a collection of names
               from the current instance.
            </summary>
            <param name="names">
               A <see cref="T:string[]" /> containing the names of the
               descriptors to be retrieved.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="names" /> is <see langword="null" />.
            </exception>
            <returns>
               A <see cref="T:System.Collections.Generic.IEnumerable`1" /> object enumerating
               through the <see cref="T:TagLib.Asf.ContentDescriptor" /> objects
               retrieved from the current instance.
            </returns>
        </member>
        <member name="M:TagLib.Asf.Tag.SetDescriptors(System.String,TagLib.Asf.ContentDescriptor[])">
            <summary>
               Sets the a collection of desciptors for a given name,
               removing the existing matching records.
            </summary>
            <param name="name">
               A <see cref="T:System.String" /> object containing the name of the
               descriptors to be added.
            </param>
            <param name="descriptors">
               A <see cref="T:ContentDescriptor[]" /> containing
               descriptors to add to the new instance.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="name" /> is <see langword="null" />.
            </exception>
            <remarks>
               All added entries in <paramref name="descriptors" />
               should match <paramref name="name" /> but it is not
               verified by the method. The descriptors will be added
               with their own names and not the one provided in this
               method, which are used for removing existing values and
               determining where to position the new objects.
            </remarks>
        </member>
        <member name="M:TagLib.Asf.Tag.AddDescriptor(TagLib.Asf.ContentDescriptor)">
            <summary>
               Adds a descriptor to the current instance.
            </summary>
            <param name="descriptor">
               A <see cref="T:TagLib.Asf.ContentDescriptor" /> object to add to the
               current instance.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="descriptor" /> is <see langword="null"
               />.
            </exception>
        </member>
        <member name="M:TagLib.Asf.Tag.PictureFromData(TagLib.ByteVector)">
            <summary>
               Converts a raw ASF picture into an <see cref="T:TagLib.IPicture"
               /> object.
            </summary>
            <param name="data">
               A <see cref="T:TagLib.ByteVector" /> object containing raw ASF
               picture data.
            </param>
            <returns>
               A <see cref="T:TagLib.IPicture" /> object to read from the raw
               data.
            </returns>
        </member>
        <member name="M:TagLib.Asf.Tag.PictureToData(TagLib.IPicture)">
            <summary>
               Converts a <see cref="T:TagLib.IPicture" /> object into raw ASF
               picture data.
            </summary>
            <param name="picture">
               A <see cref="T:TagLib.IPicture" /> object to convert.
            </param>
            <returns>
               A <see cref="T:TagLib.ByteVector" /> object containing raw ASF
               picture data.
            </returns>
        </member>
        <member name="M:TagLib.Asf.Tag.SplitAndClean(System.String)">
            <summary>
               Splits a string into a collection of strings by ';'.
            </summary>
            <param name="s">
               A <see cref="T:System.String" /> object containing the text to
               split.
            </param>
            <returns>
               A <see cref="T:string[]" /> containing the split text.
            </returns>
        </member>
        <member name="M:TagLib.Asf.Tag.GetEnumerator">
            <summary>
               Gets an enumerator for enumerating through the content
               descriptors.
            </summary>
            <returns>
               A <see cref="T:System.Collections.IEnumerator`1" /> for
               enumerating through the content descriptors.
            </returns>
        </member>
        <member name="P:TagLib.Asf.Tag.TagTypes">
            <summary>
               Gets the tag types contained in the current instance.
            </summary>
            <value>
               Always <see cref="F:TagLib.TagTypes.Asf" />.
            </value>
        </member>
        <member name="P:TagLib.Asf.Tag.Title">
            <summary>
               Gets and sets the title for the media described by the
               current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> object containing the title for
               the media described by the current instance or <see
               langword="null" /> if no value is present.
            </value>
            <remarks>
               This property is implemented using the title stored in
               the ASF Content Description Object.
            </remarks>
        </member>
        <member name="P:TagLib.Asf.Tag.Subtitle">
            <summary>
               Gets and sets a short description, one-liner. 
               It represents the tagline of the Video/music.
            </summary>
            <value>
               A <see cref="T:System.String" /> containing the subtitle
               the media represented by the current instance 
               or an empty array if no value is present.
            </value>
            <remarks>
               <para>This field gives a nice/short precision to 
               the title, which is typically below the title on the
               front cover of a media.
               For example, for "Back to the future", this would be 
               "It's About Time". 
               </para>
            </remarks>
            <remarks>
               This property is implemented using the "WM/SubTitle"
               field.
               https://msdn.microsoft.com/en-us/library/windows/desktop/dd757997(v=vs.85).aspx
            </remarks>
        </member>
        <member name="P:TagLib.Asf.Tag.TitleSort">
            <summary>
               Gets and sets the sort names for the Track Title of
               the media described by the current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> containing the sort name of 
               the Track Title of the media described by the current
               instance or null if no value is present.
            </value>
            <remarks>
               This property is implemented using the "WM/TitleSortOrder"
               field.
               http://msdn.microsoft.com/en-us/library/aa386866(VS.85).aspx
            </remarks>
        </member>
        <member name="P:TagLib.Asf.Tag.Description">
            <summary>
               Gets and sets a short description of the media.
               For a music, this could be the comment that the artist
               made of its artwork. For a video, this should be a 
               short summary of the story/plot, but a spoiler. This
               should give the impression of what to expect in the
               media.
            </summary>
            <value>
               A <see cref="T:System.String" /> containing the subtitle
               the media represented by the current instance 
               or an empty array if no value is present.
            </value>
            <remarks>
               This property is implemented using the description stored
               in the ASF Content Description Object.
            </remarks>
        </member>
        <member name="P:TagLib.Asf.Tag.Performers">
            <summary>
               Gets and sets the performers or artists who performed in
               the media described by the current instance.
            </summary>
            <value>
               A <see cref="T:string[]" /> containing the performers or
               artists who performed in the media described by the
               current instance or an empty array if no value is
               present.
            </value>
            <remarks>
               This property is implemented using the author stored in
               the ASF Content Description Object.
            </remarks>
        </member>
        <member name="P:TagLib.Asf.Tag.PerformersSort">
            <summary>
               Gets and sets the sort names of the performers or artists
               who performed in the media described by the current instance.
            </summary>
            <value>
               A <see cref="T:string[]" /> containing the sort names for
               the performers or artists who performed in the media
               described by the current instance, or an empty array if
               no value is present. 
            </value>
            <remarks>
               This property is implemented using the "WM/ArtistSortOrder" field.
               http://msdn.microsoft.com/en-us/library/aa386866(VS.85).aspx
            </remarks>
        </member>
        <member name="P:TagLib.Asf.Tag.AlbumArtists">
            <summary>
               Gets and sets the band or artist who is credited in the
               creation of the entire album or collection containing the
               media described by the current instance.
            </summary>
            <value>
               A <see cref="T:string[]" /> containing the band or artist
               who is credited in the creation of the entire album or
               collection containing the media described by the current
               instance or an empty array if no value is present.
            </value>
            <remarks>
               This property is implemented using the "WM/AlbumArtist"
               and "AlbumArtist" Content Descriptors.
            </remarks>
        </member>
        <member name="P:TagLib.Asf.Tag.AlbumArtistsSort">
            <summary>
               Gets and sets the sort names for the band or artist who
               is credited in the creation of the entire album or
               collection containing the media described by the
               current instance.
            </summary>
            <value>
               A <see cref="T:string[]" /> containing the sort names
               for the band or artist who is credited in the creation
               of the entire album or collection containing the media
               described by the current instance or an empty array if
               no value is present.
            </value>
            <remarks>
               This property is implemented using the "WM/AlbumArtistSortOrder"
               field.
               http://msdn.microsoft.com/en-us/library/aa386866(VS.85).aspx
            </remarks>
        </member>
        <member name="P:TagLib.Asf.Tag.Composers">
            <summary>
               Gets and sets the composers of the media represented by
               the current instance.
            </summary>
            <value>
               A <see cref="T:string[]" /> containing the composers of the
               media represented by the current instance or an empty
               array if no value is present.
            </value>
            <remarks>
               This property is implemented using the "WM/Composer"
               and "Composer" Content Descriptors.
            </remarks>
        </member>
        <member name="P:TagLib.Asf.Tag.Album">
            <summary>
               Gets and sets the album of the media represented by the
               current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> object containing the album of
               the media represented by the current instance or <see
               langword="null" /> if no value is present.
            </value>
            <remarks>
               This property is implemented using the "WM/AlbumTitle"
               and "Album" Content Descriptors.
            </remarks>
        </member>
        <member name="P:TagLib.Asf.Tag.AlbumSort">
            <summary>
               Gets and sets the sort names for the Album Title of
               the media described by the current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> containing the sort name of 
               the Album Title of the media described by the current
               instance or null if no value is present.
            </value>
            <remarks>
               This property is implemented using the "WM/AlbumSortOrder"
               field.
               http://msdn.microsoft.com/en-us/library/aa386866(VS.85).aspx
            </remarks>
        </member>
        <member name="P:TagLib.Asf.Tag.Comment">
            <summary>
               Gets and sets a user comment on the media represented by
               the current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> object containing user comments
               on the media represented by the current instance or <see
               langword="null" /> if no value is present.
            </value>
            <remarks>
               This property is implemented using the "WM/Text" field.
            </remarks>
        </member>
        <member name="P:TagLib.Asf.Tag.Genres">
            <summary>
               Gets and sets the genres of the media represented by the
               current instance.
            </summary>
            <value>
               A <see cref="T:string[]" /> containing the genres of the
               media represented by the current instance or an empty
               array if no value is present.
            </value>
            <remarks>
               This property is implemented using the "WM/Genre",
               "WM/GenreID", and "Genre" Content Descriptors.
            </remarks>
        </member>
        <member name="P:TagLib.Asf.Tag.Year">
            <summary>
               Gets and sets the year that the media represented by the
               current instance was recorded.
            </summary>
            <value>
               A <see cref="T:System.UInt32" /> containing the year that the media
               represented by the current instance was created or zero
               if no value is present.
            </value>
            <remarks>
               This property is implemented using the "WM/Year" Content
               Descriptor.
            </remarks>
        </member>
        <member name="P:TagLib.Asf.Tag.Track">
            <summary>
               Gets and sets the position of the media represented by
               the current instance in its containing album.
            </summary>
            <value>
               A <see cref="T:System.UInt32" /> containing the position of the
               media represented by the current instance in its
               containing album or zero if not specified.
            </value>
            <remarks>
               This property is implemented using the "WM/TrackNumber"
               Content Descriptor.
            </remarks>
        </member>
        <member name="P:TagLib.Asf.Tag.TrackCount">
            <summary>
               Gets and sets the number of tracks in the album
               containing the media represented by the current instance.
            </summary>
            <value>
               A <see cref="T:System.UInt32" /> containing the number of tracks in
               the album containing the media represented by the current
               instance or zero if not specified.
            </value>
            <remarks>
               This property is implemented using the "TrackTotal"
               Content Descriptor.
            </remarks>
        </member>
        <member name="P:TagLib.Asf.Tag.Disc">
            <summary>
               Gets and sets the number of the disc containing the media
               represented by the current instance in the boxed set.
            </summary>
            <value>
               A <see cref="T:System.UInt32" /> containing the number of the disc
               containing the media represented by the current instance
               in the boxed set.
            </value>
            <remarks>
               This property is implemented using the "WM/PartOfSet"
               Content Descriptor.
            </remarks>
        </member>
        <member name="P:TagLib.Asf.Tag.DiscCount">
            <summary>
               Gets and sets the number of discs in the boxed set
               containing the media represented by the current instance.
            </summary>
            <value>
               A <see cref="T:System.UInt32" /> containing the number of discs in
               the boxed set containing the media represented by the
               current instance or zero if not specified.
            </value>
            <remarks>
               This property is implemented using the "WM/PartOfSet"
               Content Descriptor.
            </remarks>
        </member>
        <member name="P:TagLib.Asf.Tag.Lyrics">
            <summary>
               Gets and sets the lyrics or script of the media
               represented by the current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> object containing the lyrics or
               script of the media represented by the current instance
               or <see langword="null" /> if no value is present.
            </value>
            <remarks>
               This property is implemented using the "WM/Lyrics"
               Content Descriptor.
            </remarks>
        </member>
        <member name="P:TagLib.Asf.Tag.Grouping">
            <summary>
               Gets and sets the grouping on the album which the media
               in the current instance belongs to.
            </summary>
            <value>
               A <see cref="T:System.String" /> object containing the grouping on
               the album which the media in the current instance belongs
               to or <see langword="null" /> if no value is present.
            </value>
            <remarks>
               This property is implemented using the
               "WM/ContentGroupDescription" Content Descriptor.
            </remarks>
        </member>
        <member name="P:TagLib.Asf.Tag.BeatsPerMinute">
            <summary>
               Gets and sets the number of beats per minute in the audio
               of the media represented by the current instance.
            </summary>
            <value>
               A <see cref="T:System.UInt32" /> containing the number of beats per
               minute in the audio of the media represented by the
               current instance, or zero if not specified.
            </value>
            <remarks>
               This property is implemented using the
               "WM/BeatsPerMinute" Content Descriptor.
            </remarks>
        </member>
        <member name="P:TagLib.Asf.Tag.Conductor">
            <summary>
               Gets and sets the conductor or director of the media
               represented by the current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> object containing the conductor
               or director of the media represented by the current
               instance or <see langword="null" /> if no value present.
            </value>
            <remarks>
               This property is implemented using the "WM/Conductor"
               Content Descriptor.
            </remarks>
        </member>
        <member name="P:TagLib.Asf.Tag.Copyright">
            <summary>
               Gets and sets the copyright information for the media
               represented by the current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> object containing the copyright
               information for the media represented by the current
               instance or <see langword="null" /> if no value present.
            </value>
            <remarks>
               This property is implemented using the copyright stored
               in the ASF Content Description Object.
            </remarks>
        </member>
        <member name="P:TagLib.Asf.Tag.MusicBrainzArtistId">
            <summary>
               Gets and sets the MusicBrainz Artist ID of
               the media described by the current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> containing the MusicBrainz 
               ArtistID for the media described by the current
               instance or null if no value is present.
            </value>
            <remarks>
               This property is implemented using the "MusicBrainz/Artist Id"
               field.
               http://musicbrainz.org/doc/PicardTagMapping
            </remarks>
        </member>
        <member name="P:TagLib.Asf.Tag.MusicBrainzReleaseGroupId">
            <summary>
               Gets and sets the MusicBrainz Release Group ID of
               the media described by the current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> containing the MusicBrainz 
               ReleaseGroupID for the media described by the current
               instance or null if no value is present.
            </value>
            <remarks>
               This property is implemented using the "MusicBrainz/Release Group Id"
               field.
               http://musicbrainz.org/doc/PicardTagMapping
            </remarks>
        </member>
        <member name="P:TagLib.Asf.Tag.MusicBrainzReleaseId">
            <summary>
               Gets and sets the MusicBrainz Release ID of
               the media described by the current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> containing the MusicBrainz 
               ReleaseID for the media described by the current
               instance or null if no value is present.
            </value>
            <remarks>
               This property is implemented using the "MusicBrainz/Album Id"
               field.
               http://musicbrainz.org/doc/PicardTagMapping
            </remarks>
        </member>
        <member name="P:TagLib.Asf.Tag.MusicBrainzReleaseArtistId">
            <summary>
               Gets and sets the MusicBrainz Release Artist ID of
               the media described by the current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> containing the MusicBrainz 
               ReleaseArtistID for the media described by the current
               instance or null if no value is present.
            </value>
            <remarks>
               This property is implemented using the "MusicBrainz/Album Artist Id"
               field.
               http://musicbrainz.org/doc/PicardTagMapping
            </remarks>
        </member>
        <member name="P:TagLib.Asf.Tag.MusicBrainzTrackId">
            <summary>
               Gets and sets the MusicBrainz Track ID of
               the media described by the current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> containing the MusicBrainz 
               TrackID for the media described by the current
               instance or null if no value is present.
            </value>
            <remarks>
               This property is implemented using the "MusicBrainz/Track Id"
               field.
               http://musicbrainz.org/doc/PicardTagMapping
            </remarks>
        </member>
        <member name="P:TagLib.Asf.Tag.MusicBrainzDiscId">
            <summary>
               Gets and sets the MusicBrainz Disc ID of
               the media described by the current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> containing the MusicBrainz 
               DiscID for the media described by the current
               instance or null if no value is present.
            </value>
            <remarks>
               This property is implemented using the "MusicBrainz/Disc Id"
               field.
               http://musicbrainz.org/doc/PicardTagMapping
            </remarks>
        </member>
        <member name="P:TagLib.Asf.Tag.MusicIpId">
            <summary>
               Gets and sets the MusicIP PUID of
               the media described by the current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> containing the MusicIPPUID 
               for the media described by the current instance or
               null if no value is present.
            </value>
            <remarks>
               This property is implemented using the "MusicIP/PUID"
               field.
               http://musicbrainz.org/doc/PicardTagMapping
            </remarks>
        </member>
        <member name="P:TagLib.Asf.Tag.MusicBrainzReleaseStatus">
            <summary>
               Gets and sets the MusicBrainz Release Status of
               the media described by the current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> containing the MusicBrainz 
               ReleaseStatus for the media described by the current
               instance or null if no value is present.
            </value>
            <remarks>
               This property is implemented using the "MusicBrainz/Album Status"
               field.
               http://musicbrainz.org/doc/PicardTagMapping
            </remarks>
        </member>
        <member name="P:TagLib.Asf.Tag.MusicBrainzReleaseType">
            <summary>
               Gets and sets the MusicBrainz Release Type of
               the media described by the current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> containing the MusicBrainz 
               ReleaseType for the media described by the current
               instance or null if no value is present.
            </value>
            <remarks>
               This property is implemented using the "MusicBrainz/Album Type"
               field.
               http://musicbrainz.org/doc/PicardTagMapping
            </remarks>
        </member>
        <member name="P:TagLib.Asf.Tag.MusicBrainzReleaseCountry">
            <summary>
               Gets and sets the MusicBrainz Release Country of
               the media described by the current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> containing the MusicBrainz 
               ReleaseCountry for the media described by the current
               instance or null if no value is present.
            </value>
            <remarks>
               This property is implemented using the "MusicBrainz/Album Release Country"
               field.
               http://musicbrainz.org/doc/PicardTagMapping
            </remarks>
        </member>
        <member name="P:TagLib.Asf.Tag.ReplayGainTrackGain">
            <summary>
               Gets and sets the ReplayGain track gain in dB.
            </summary>
            <value>
               A <see cref="T:System.Boolean" /> value in dB for the track gain as
               per the ReplayGain specification.
            </value>
            <remarks>
               This property is implemented using the 
               "REPLAYGAIN_TRACK_GAIN" field. Set the value to double.NaN
               to clear the field.
            </remarks>
        </member>
        <member name="P:TagLib.Asf.Tag.ReplayGainTrackPeak">
            <summary>
               Gets and sets the ReplayGain track peak sample.
            </summary>
            <value>
               A <see cref="T:System.Boolean" /> value for the track peak as per the
               ReplayGain specification.
            </value>
            <remarks>
               This property is implemented using the 
               "REPLAYGAIN_TRACK_PEAK" field. Set the value to double.NaN
               to clear the field.
            </remarks>
        </member>
        <member name="P:TagLib.Asf.Tag.ReplayGainAlbumGain">
            <summary>
               Gets and sets the ReplayGain album gain in dB.
            </summary>
            <value>
               A <see cref="T:System.Boolean" /> value in dB for the album gain as
               per the ReplayGain specification.
            </value>
            <remarks>
               This property is implemented using the 
               "REPLAYGAIN_ALBUM_GAIN" field. Set the value to double.NaN
               to clear the field.
            </remarks>
        </member>
        <member name="P:TagLib.Asf.Tag.ReplayGainAlbumPeak">
            <summary>
               Gets and sets the ReplayGain album peak sample.
            </summary>
            <value>
               A <see cref="T:System.Boolean" /> value for the album peak as per the
               ReplayGain specification.
            </value>
            <remarks>
               This property is implemented using the 
               "REPLAYGAIN_ALBUM_PEAK" field. Set the value to double.NaN
               to clear the field.
            </remarks>
        </member>
        <member name="P:TagLib.Asf.Tag.Pictures">
            <summary>
               Gets and sets a collection of pictures associated with
               the media represented by the current instance.
            </summary>
            <value>
               A <see cref="T:IPicture[]" /> containing a collection of
               pictures associated with the media represented by the
               current instance or an empty array if none are present.
            </value>
            <remarks>
               This property is implemented using the "WM/Picture"
               Content Descriptor and Description Record.
            </remarks>
        </member>
        <member name="P:TagLib.Asf.Tag.IsEmpty">
            <summary>
               Gets whether or not the current instance is empty.
            </summary>
            <value>
               <see langword="true" /> if the current instance does not
               any values. Otherwise <see langword="false" />.
            </value>
        </member>
        <member name="M:TagLib.Asf.Tag.Clear">
            <summary>
               Clears the values stored in the current instance.
            </summary>
        </member>
        <member name="T:TagLib.Asf.UnknownObject">
            <summary>
               This class extends <see cref="T:TagLib.Asf.Object" /> to provide a
               representation of an unknown object which can be read from and
               written to disk.
            </summary>
        </member>
        <member name="M:TagLib.Asf.UnknownObject.#ctor(TagLib.Asf.File,System.Int64)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Asf.UnknownObject" /> by reading the contents from a
               specified position in a specified file.
            </summary>
            <param name="file">
               A <see cref="T:TagLib.Asf.File" /> object containing the file from
               which the contents of the new instance are to be read.
            </param>
            <param name="position">
               A <see cref="T:System.Int64" /> value specify at what position to
               read the object.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="file" /> is <see langword="null" />.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
               <paramref name="position" /> is less than zero or greater
               than the size of the file.
            </exception>
        </member>
        <member name="P:TagLib.Asf.UnknownObject.Data">
            <summary>
               Gets and sets the data contained in the current instance.
            </summary>
            <value>
               A <see cref="T:TagLib.ByteVector" /> object containing the data
               contained in the current instance.
            </value>
        </member>
        <member name="M:TagLib.Asf.UnknownObject.Render">
            <summary>
               Renders the current instance as a raw ASF object.
            </summary>
            <returns>
               A <see cref="T:TagLib.ByteVector" /> object containing the
               rendered version of the current instance.
            </returns>
        </member>
        <member name="T:TagLib.Audible.File">
            <summary>
               This class extends <see cref="T:TagLib.File" /> to provide tagging
               and properties support for Audible inc's aa file format.
            </summary>
        </member>
        <member name="F:TagLib.Audible.File.tag">
            <summary>
              Contains the tags for the file.
            </summary>
        </member>
        <member name="F:TagLib.Audible.File.TagBlockOffset">
            <summary>
               The offset to the tag block.
            </summary>
        </member>
        <member name="F:TagLib.Audible.File.OffsetToEndTagPointer">
            <summary>
               The offset to the end of tag pointer.
            </summary>
        </member>
        <member name="M:TagLib.Audible.File.#ctor(System.String,TagLib.ReadStyle)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Audible.File" /> for a specified path in the local file
               system and specified read style.
            </summary>
            <param name="path">
               A <see cref="T:System.String" /> object containing the path of the
               file to use in the new instance.
            </param>
            <param name="propertiesStyle">
               A <see cref="T:TagLib.ReadStyle" /> value specifying at what level
               of accuracy to read the media properties, or <see
               cref="F:TagLib.ReadStyle.None" /> to ignore the properties.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="path" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:TagLib.Audible.File.#ctor(System.String)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Audible.File" /> for a specified path in the local file
               system with an average read style.
            </summary>
            <param name="path">
               A <see cref="T:System.String" /> object containing the path of the
               file to use in the new instance.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="path" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:TagLib.Audible.File.#ctor(TagLib.File.IFileAbstraction,TagLib.ReadStyle)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Audible.File" /> for a specified file abstraction and
               specified read style.
            </summary>
            <param name="abstraction">
               A <see cref="T:TagLib.File.IFileAbstraction" /> object to use when
               reading from and writing to the file.
            </param>
            <param name="propertiesStyle">
               A <see cref="T:TagLib.ReadStyle" /> value specifying at what level
               of accuracy to read the media properties, or <see
               cref="F:TagLib.ReadStyle.None" /> to ignore the properties.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="abstraction" /> is <see langword="null"
               />.
            </exception>
            <exception cref="T:TagLib.CorruptFileException">
               The file is not the write length.
            </exception>
        </member>
        <member name="M:TagLib.Audible.File.#ctor(TagLib.File.IFileAbstraction)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Audible.File" /> for a specified file abstraction with an
               average read style.
            </summary>
            <param name="abstraction">
               A <see cref="T:TagLib.File.IFileAbstraction" /> object to use when
               reading from and writing to the file.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="abstraction" /> is <see langword="null"
               />.
            </exception>
        </member>
        <member name="M:TagLib.Audible.File.Save">
            <summary>
               Saves the changes made in the current instance to the
               file it represents.
            </summary>
            <remarks>
            	Currently this does not work as there is not enough
            	information about the file format
            </remarks>
        </member>
        <member name="M:TagLib.Audible.File.RemoveTags(TagLib.TagTypes)">
            <summary>
               Removes a set of tag types from the current instance.
            </summary>
            <param name="types">
               A bitwise combined <see cref="T:TagLib.TagTypes" /> value
               containing tag types to be removed from the file.
            </param>
            <remarks>
               In order to remove all tags from a file, pass <see
               cref="F:TagLib.TagTypes.AllTags" /> as <paramref name="types" />.
            </remarks>
            <remarks>
            	Currently this does not work as there is not enough
            	information about the file format
            </remarks>
        </member>
        <member name="M:TagLib.Audible.File.GetTag(TagLib.TagTypes,System.Boolean)">
            <summary>
               Gets a tag of a specified type from the current instance,
               optionally creating a new tag if possible.
            </summary>
            <param name="type">
               A <see cref="T:TagLib.TagTypes" /> value indicating the
               type of tag to read.
            </param>
            <param name="create">
               A <see cref="T:System.Boolean" /> value specifying whether or not to
               try and create the tag if one is not found.
            </param>
            <returns>
               A <see cref="P:TagLib.Audible.File.Tag" /> object containing the tag that was
               found in or added to the current instance. If no
               matching tag was found and none was created, <see
               langword="null" /> is returned.
            </returns>
        </member>
        <member name="P:TagLib.Audible.File.Tag">
            <summary>
               Gets a abstract representation of all tags stored in the
               current instance.
            </summary>
            <value>
               A <see cref="T:TagLib.Tag" /> object representing all tags
               stored in the current instance.
            </value>
        </member>
        <member name="P:TagLib.Audible.File.Properties">
            <summary>
               Gets the media properties of the file represented by the
               current instance.
            </summary>
            <value>
               A <see cref="T:TagLib.Properties" /> object containing the
               media properties of the file represented by the current
               instance.
            </value>
        </member>
        <member name="T:TagLib.Audible.Tag">
            <summary>
               This class extends <see cref="T:TagLib.Audible.Tag" /> to provide support for
               reading tags stored in the Audible Metadata format.
            </summary>
        </member>
        <member name="M:TagLib.Audible.Tag.#ctor">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Audible.Tag" /> with no contents.
            </summary>
        </member>
        <member name="M:TagLib.Audible.Tag.#ctor(TagLib.Audible.File,System.Int64)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Audible.Tag" /> by reading the contents from a specified
               position in a specified file.
            </summary>
            <param name="file">
               A <see cref="T:TagLib.Audible.File" /> object containing the file from
               which the contents of the new instance is to be read.
            </param>
            <param name="position">
               A <see cref="T:System.Int64" /> value specify at what position to
               read the tag.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="file" /> is <see langword="null" />.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
               <paramref name="position" /> is less than zero or greater
               than the size of the file.
            </exception>
            <exception cref="T:TagLib.CorruptFileException">
               The file does not contain FileIdentifier
               at the given position.
            </exception>
        </member>
        <member name="M:TagLib.Audible.Tag.#ctor(TagLib.ByteVector)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Audible.Tag" /> by reading the contents from a specified
               <see cref="T:TagLib.ByteVector" /> object.
            </summary>
            <param name="data">
               A <see cref="T:TagLib.ByteVector" /> object to read the tag from.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="data" /> is <see langword="null" />.
            </exception>
            <exception cref="T:TagLib.CorruptFileException">
               <paramref name="data" /> is less than 128 bytes or does
               not start with FileIdentifier.
            </exception>
        </member>
        <member name="M:TagLib.Audible.Tag.Parse(TagLib.ByteVector)">
            <summary>
               Populates the current instance by parsing the contents of
               a raw AudibleMetadata tag.
            </summary>
            <param name="data">
               	A <see cref="T:TagLib.ByteVector" /> object containing the whole tag
            	object
            </param>
            <exception cref="T:TagLib.CorruptFileException">
               <paramref name="data" /> is less than 128 bytes or does
               not start with FileIdentifier.
            </exception>
        </member>
        <member name="P:TagLib.Audible.Tag.TagTypes">
            <summary>
               Gets the tag types contained in the current instance.
            </summary>
            <value>
               Always <see cref="F:TagLib.TagTypes.AudibleMetadata" />.
            </value>
        </member>
        <member name="P:TagLib.Audible.Tag.Author">
            <summary>
            Get or Set the Author Tag
            </summary>
        </member>
        <member name="P:TagLib.Audible.Tag.Copyright">
            <summary>
            Get or Set the Copyright Tag
            </summary>
        </member>
        <member name="P:TagLib.Audible.Tag.Description">
            <summary>
            Get or Set the Description Tag
            </summary>
        </member>
        <member name="P:TagLib.Audible.Tag.Narrator">
            <summary>
            Get or Set the Narrator Tag
            </summary>
        </member>
        <member name="P:TagLib.Audible.Tag.Title">
            <summary>
               Gets the title for the media described by the
               current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> object containing the title for
               the media described by the current instance or <see
               langword="null" /> if no value is present.
            </value>
        </member>
        <member name="P:TagLib.Audible.Tag.Album">
            <summary>
               Gets the album for the media described by the
               current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> object containing the album for
               the media described by the current instance or <see
               langword="null" /> if no value is present.
            </value>
        </member>
        <member name="P:TagLib.Audible.Tag.AlbumArtists">
            <summary>
               Gets the album artist for the media described by the
               current instance.
            </summary>
            <value>
               	A <see cref="T:string[]" /> object containing a single 
            	artist described by the current instance or <see
               langword="null" /> if no value is present.
            </value>
        </member>
        <member name="M:TagLib.Audible.Tag.Clear">
            <summary>
               Clears the values stored in the current instance.
            </summary>
        </member>
        <member name="T:TagLib.StringType">
            <summary>
               Specifies the text encoding used when converting between a <see
               cref="T:System.String" /> and a <see cref="T:TagLib.ByteVector" />.
            </summary>
            <remarks>
               This enumeration is used by <see
               cref="M:TagLib.ByteVector.FromString(System.String,TagLib.StringType)" /> and <see
               cref="M:TagLib.ByteVector.ToString(TagLib.StringType)" />.
            </remarks>
        </member>
        <member name="F:TagLib.StringType.Latin1">
            <summary>
               The string is to be Latin-1 encoded.
            </summary>
        </member>
        <member name="F:TagLib.StringType.UTF16">
            <summary>
               The string is to be UTF-16 encoded.
            </summary>
        </member>
        <member name="F:TagLib.StringType.UTF16BE">
            <summary>
               The string is to be UTF-16BE encoded.
            </summary>
        </member>
        <member name="F:TagLib.StringType.UTF8">
            <summary>
               The string is to be UTF-8 encoded.
            </summary>
        </member>
        <member name="F:TagLib.StringType.UTF16LE">
            <summary>
               The string is to be UTF-16LE encoded.
            </summary>
        </member>
        <member name="T:TagLib.ByteVector">
            <summary>
               This class represents and performs operations on variable length
               list of <see cref="T:System.Byte" /> elements.
            </summary>
        </member>
        <member name="F:TagLib.ByteVector.crc_table">
            <summary>
               Contains values to use in CRC calculation.
            </summary>
        </member>
        <member name="F:TagLib.ByteVector.use_broken_latin1">
            <summary>
               Specifies whether or not to use a broken Latin-1
               behavior.
            </summary>
        </member>
        <member name="F:TagLib.ByteVector.td1">
            <summary>
               Contains a one byte text delimiter.
            </summary>
        </member>
        <member name="F:TagLib.ByteVector.td2">
            <summary>
               Contains a two byte text delimiter.
            </summary>
        </member>
        <member name="F:TagLib.ByteVector.last_utf16_encoding">
            <summary>
               Contains the last generic UTF-16 encoding read.
            </summary>
            <remarks>
               When reading a collection of UTF-16 strings, sometimes
               only the first one will contain the BOM. In that case,
               this field will inform the file what encoding to use for
               the second string.
            </remarks>
        </member>
        <member name="F:TagLib.ByteVector.data">
            <summary>
               Contains the internal byte list.
            </summary>
        </member>
        <member name="M:TagLib.ByteVector.#ctor">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.ByteVector" /> with a length of zero.
            </summary>
        </member>
        <member name="M:TagLib.ByteVector.#ctor(TagLib.ByteVector)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.ByteVector" /> by copying the values from another
               instance.
            </summary>
            <param name="vector">
               A <see cref="T:TagLib.ByteVector" /> object containing the bytes
               to be stored in the new instance.
            </param>
        </member>
        <member name="M:TagLib.ByteVector.#ctor(System.Byte[])">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.ByteVector" /> by copying the values from a
               specified <see cref="T:byte[]" />.
            </summary>
            <param name="data">
               A <see cref="T:byte[]" /> containing the bytes to be stored
               in the new instance.
            </param>
        </member>
        <member name="M:TagLib.ByteVector.#ctor(System.Byte[],System.Int32)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.ByteVector" /> by copying a specified number of
               values from a specified <see cref="T:byte[]" />.
            </summary>
            <param name="data">
               A <see cref="T:byte[]" /> containing the bytes to be stored
               in the new instance.
            </param>
            <param name="length">
               A <see cref="T:System.Int32" /> value specifying the number of bytes
               to be copied to the new instance.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
               <paramref name="length" /> is less than zero or greater
               than the length of the data.
            </exception>
        </member>
        <member name="M:TagLib.ByteVector.#ctor(System.Int32)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.ByteVector" /> of specified size containing bytes
               with a zeroed value.
            </summary>
            <param name="size">
               A <see cref="T:System.Int32" /> value specifying the number of bytes
               to be stored in the new instance.
            </param>
            <remarks>
               Each element of the new instance will have a value of
               <c>0x00</c>. <see cref="M:TagLib.ByteVector.#ctor(System.Int32,System.Byte)" /> to fill
               a new instance with a specified value.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
               <paramref name="size" /> is less than zero.
            </exception>
        </member>
        <member name="M:TagLib.ByteVector.#ctor(System.Int32,System.Byte)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.ByteVector" /> of specified size containing bytes
               of a specified value.
            </summary>
            <param name="size">
               A <see cref="T:System.Int32" /> value specifying the number of bytes
               to be stored in the new instance.
            </param>
            <param name="value">
               A <see cref="T:System.Byte" /> value specifying the value to be
               stored in the new instance.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
               <paramref name="size" /> is less than zero.
            </exception>
        </member>
        <member name="P:TagLib.ByteVector.Data">
            <summary>
               Gets the data stored in the current instance.
            </summary>
            <value>
               A <see cref="T:byte[]" /> containing the data stored in the
               current instance.
            </value>
        </member>
        <member name="P:TagLib.ByteVector.IsEmpty">
            <summary>
               Gets whether or not the current instance is empty.
            </summary>
            <value>
               A <see cref="T:System.Boolean" /> value indicating whether or not the
               current instance is empty.
            </value>
        </member>
        <member name="P:TagLib.ByteVector.Checksum">
            <summary>
               Gets the CRC-32 checksum of the current instance.
            </summary>
            <value>
               A <see cref="T:System.Int32" /> value containing the CRC-32 checksum
               of the current instance.
            </value>
        </member>
        <member name="P:TagLib.ByteVector.UseBrokenLatin1Behavior">
            <summary>
               Gets and sets whether or not to use a broken behavior for
               Latin-1 strings, common to ID3v1 and ID3v2 tags.
            </summary>
            <value>
               <see langword="true" /> if the broken behavior is to be
               used. Otherwise, <see langword="false" />.
            </value>
            <remarks>
               <para>Many media players and taggers incorrectly treat
               Latin-1 fields as "default encoding" fields. As such, a
               tag may end up with Windows-1250 encoded text. While this
               problem would be apparent when moving a file from one
               computer to another, it would not be apparent on the
               original machine. By setting this property to <see
               langword="true" />, your program will behave like Windows
               Media Player and others, who read tags with this broken
               behavior.</para>
               <para>Please note that TagLib# stores tag data in Unicode
               formats at every possible instance to avoid these
               problems in tags it has written.</para>
            </remarks>
        </member>
        <member name="M:TagLib.ByteVector.Mid(System.Int32,System.Int32)">
            <summary>
               Creates a new instance of <see cref="T:TagLib.ByteVector" />
               containing a specified range of elements from the current
               instance.
            </summary>
            <param name="startIndex">
               A <see cref="T:System.Int32" /> value specifying the index at which
               to start copying elements from the current instance.
            </param>
            <param name="length">
               A <see cref="T:System.Int32" /> value specifying the number of
               elements to copy from the current instance.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
               <paramref name="startIndex" /> is less than zero or
               greater than or equal to <see cref="P:TagLib.ByteVector.Count" />. OR
               <paramref name="length" /> is less than zero or greater
               than the amount of available data.
            </exception>
        </member>
        <member name="M:TagLib.ByteVector.Mid(System.Int32)">
            <summary>
               Creates a new instance of <see cref="T:TagLib.ByteVector" />
               containing elements from the current instance starting
               from a specified point.
            </summary>
            <param name="index">
               A <see cref="T:System.Int32" /> value specifying the index at which
               to start copying elements from the current instance.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
               <paramref name="index" /> is less than zero or greater
               than or equal to <see cref="P:TagLib.ByteVector.Count" />.
            </exception>
        </member>
        <member name="M:TagLib.ByteVector.Find(TagLib.ByteVector,System.Int32,System.Int32)">
            <summary>
               Finds the first byte-aligned occurance of a pattern in
               the current instance, starting at a specified position.
            </summary>
            <param name="pattern">
               A <see cref="T:TagLib.ByteVector"/> object containing the pattern
               to search for in the current instance.
            </param>
            <param name="offset">
               A <see cref="T:System.Int32"/> value specifying the index in the
               current instance at which to start searching.
            </param>
            <param name="byteAlign">
               A <see cref="T:System.Int32"/> value specifying the byte alignment
               of the pattern to search for, relative to <paramref
               name="offset" />.
            </param>
            <returns>
               A <see cref="T:System.Int32"/> value containing the index at which
               <paramref name="pattern" /> was found in the current
               instance, or -1 if the pattern was not found. The
               difference between the position and <paramref
               name="offset" /> will be divisible by <paramref
               name="byteAlign" />.
            </returns>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="pattern" /> is <see langword="null" />.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
               <paramref name="offset" /> is less than zero or
               <paramref name="byteAlign" /> is less than 1.
            </exception>
        </member>
        <member name="M:TagLib.ByteVector.Find(TagLib.ByteVector,System.Int32)">
            <summary>
               Finds the first occurance of a pattern in the current
               instance, starting at a specified position.
            </summary>
            <param name="pattern">
               A <see cref="T:TagLib.ByteVector"/> object containing the pattern
               to search for in the current instance.
            </param>
            <param name="offset">
               A <see cref="T:System.Int32"/> value specifying the index in the
               current instance at which to start searching.
            </param>
            <returns>
               A <see cref="T:System.Int32"/> value containing the index at which
               <paramref name="pattern" /> was found in the current
               instance, or -1 if the pattern was not found.
            </returns>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="pattern" /> is <see langword="null" />.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
               <paramref name="offset" /> is less than zero.
            </exception>
        </member>
        <member name="M:TagLib.ByteVector.Find(TagLib.ByteVector)">
            <summary>
               Finds the first occurance of a pattern in the current
               instance.
            </summary>
            <param name="pattern">
               A <see cref="T:TagLib.ByteVector"/> object containing the pattern
               to search for in the current instance.
            </param>
            <returns>
               A <see cref="T:System.Int32"/> value containing the index at which
               <paramref name="pattern" /> was found in the current
               instance, or -1 if the pattern was not found.
            </returns>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="pattern" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:TagLib.ByteVector.RFind(TagLib.ByteVector,System.Int32,System.Int32)">
            <summary>
               Finds the last byte-aligned occurance of a pattern in
               the current instance, starting before a specified
               position.
            </summary>
            <param name="pattern">
               A <see cref="T:TagLib.ByteVector"/> object containing the pattern
               to search for in the current instance.
            </param>
            <param name="offset">
               A <see cref="T:System.Int32"/> value specifying the index in the
               current instance at which to start searching.
            </param>
            <param name="byteAlign">
               A <see cref="T:System.Int32"/> value specifying the byte alignment
               of the pattern to search for, relative to <paramref
               name="offset" />.
            </param>
            <returns>
               A <see cref="T:System.Int32"/> value containing the index at which
               <paramref name="pattern" /> was found in the current
               instance, or -1 if the pattern was not found. The
               difference between the position and <paramref
               name="offset" /> will be divisible by <paramref
               name="byteAlign" />.
            </returns>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="pattern" /> is <see langword="null" />.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
               <paramref name="offset" /> is less than zero.
            </exception>
        </member>
        <member name="M:TagLib.ByteVector.RFind(TagLib.ByteVector,System.Int32)">
            <summary>
               Finds the last occurance of a pattern in the current
               instance, starting before a specified position.
            </summary>
            <param name="pattern">
               A <see cref="T:TagLib.ByteVector"/> object containing the pattern
               to search for in the current instance.
            </param>
            <param name="offset">
               A <see cref="T:System.Int32"/> value specifying the index in the
               current instance at which to start searching.
            </param>
            <returns>
               A <see cref="T:System.Int32"/> value containing the index at which
               <paramref name="pattern" /> was found in the current
               instance, or -1 if the pattern was not found.
            </returns>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="pattern" /> is <see langword="null" />.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
               <paramref name="offset" /> is less than zero.
            </exception>
        </member>
        <member name="M:TagLib.ByteVector.RFind(TagLib.ByteVector)">
            <summary>
               Finds the last occurance of a pattern in the current
               instance.
            </summary>
            <param name="pattern">
               A <see cref="T:TagLib.ByteVector"/> object containing the pattern
               to search for in the current instance.
            </param>
            <returns>
               A <see cref="T:System.Int32"/> value containing the index at which
               <paramref name="pattern" /> was found in the current
               instance, or -1 if the pattern was not found.
            </returns>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="pattern" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:TagLib.ByteVector.ContainsAt(TagLib.ByteVector,System.Int32,System.Int32,System.Int32)">
            <summary>
               Checks whether or not a pattern appears at a specified
               position in the current instance.
            </summary>
            <param name="pattern">
               A <see cref="T:TagLib.ByteVector"/> object containing the pattern
               to check for in the current instance.
            </param>
            <param name="offset">
               A <see cref="T:System.Int32"/> value specifying the offset in the
               current instance at which to check for the pattern.
            </param>
            <param name="patternOffset">
               A <see cref="T:System.Int32"/> value specifying the position in
               <paramref name="pattern" /> at which to start checking.
            </param>
            <param name="patternLength">
               A <see cref="T:System.Int32"/> value specifying the number of bytes
               in <paramref name="pattern" /> to compare.
            </param>
            <returns>
               <see langword="true"/> if the pattern was found at the
               specified position. Otherwise, <see langword="false"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="pattern" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:TagLib.ByteVector.ContainsAt(TagLib.ByteVector,System.Int32,System.Int32)">
            <summary>
               Checks whether or not a pattern appears at a specified
               position in the current instance.
            </summary>
            <param name="pattern">
               A <see cref="T:TagLib.ByteVector"/> object containing the pattern
               to check for in the current instance.
            </param>
            <param name="offset">
               A <see cref="T:System.Int32"/> value specifying the offset in the
               current instance at which to check for the pattern.
            </param>
            <param name="patternOffset">
               A <see cref="T:System.Int32"/> value specifying the position in
               <paramref name="pattern" /> at which to start checking.
            </param>
            <returns>
               <see langword="true"/> if the pattern was found at the
               specified position. Otherwise, <see langword="false"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="pattern" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:TagLib.ByteVector.ContainsAt(TagLib.ByteVector,System.Int32)">
            <summary>
               Checks whether or not a pattern appears at a specified
               position in the current instance.
            </summary>
            <param name="pattern">
               A <see cref="T:TagLib.ByteVector"/> object containing the pattern
               to check for in the current instance.
            </param>
            <param name="offset">
               A <see cref="T:System.Int32"/> value specifying the offset in the
               current instance at which to check for the pattern.
            </param>
            <returns>
               <see langword="true"/> if the pattern was found at the
               specified position. Otherwise, <see langword="false"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="pattern" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:TagLib.ByteVector.StartsWith(TagLib.ByteVector)">
            <summary>
               Checks whether or not a pattern appears at the beginning
               of the current instance.
            </summary>
            <param name="pattern">
               A <see cref="T:TagLib.ByteVector"/> object containing the pattern
               to check for in the current instance.
            </param>
            <returns>
               <see langword="true"/> if the pattern was found at the
               beginning of the current instance. Otherwise, <see
               langword="false"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="pattern" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:TagLib.ByteVector.EndsWith(TagLib.ByteVector)">
            <summary>
               Checks whether or not a pattern appears at the end of the
               current instance.
            </summary>
            <param name="pattern">
               A <see cref="T:TagLib.ByteVector"/> object containing the pattern
               to check for in the current instance.
            </param>
            <returns>
               <see langword="true"/> if the pattern was found at the
               end of the current instance. Otherwise, <see
               langword="false"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="pattern" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:TagLib.ByteVector.EndsWithPartialMatch(TagLib.ByteVector)">
            <summary>
               Checks whether or not the current instance ends with part
               of a pattern.
            </summary>
            <param name="pattern">
               A <see cref="T:TagLib.ByteVector"/> object containing the pattern
               to search for in the current instance.
            </param>
            <returns>
               A <see cref="T:System.Int32" /> value containing the index at which
               a partial match was located, or -1 if no match was found.
            </returns>
            <remarks>
               <para>This function is useful for checking for patterns
               across multiple buffers.</para>
            </remarks>
        </member>
        <member name="M:TagLib.ByteVector.Add(TagLib.ByteVector)">
            <summary>
               Adds the contents of another <see cref="T:TagLib.ByteVector" />
               object to the end of the current instance.
            </summary>
            <param name="data">
               A <see cref="T:TagLib.ByteVector"/> object containing data to add
               to the end of the current instance.
            </param>
            <exception cref="T:System.NotSupportedException">
               The current instance is read-only.
            </exception>
        </member>
        <member name="M:TagLib.ByteVector.Add(System.Byte[])">
            <summary>
               Adds the contents of an array to the end of the current
               instance.
            </summary>
            <param name="data">
               A <see cref="T:byte[]"/> containing data to add to the end
               of the current instance.
            </param>
            <exception cref="T:System.NotSupportedException">
               The current instance is read-only.
            </exception>
        </member>
        <member name="M:TagLib.ByteVector.Insert(System.Int32,TagLib.ByteVector)">
            <summary>
               Inserts the contents of another <see cref="T:TagLib.ByteVector" />
               object into the current instance.
            </summary>
            <param name="index">
               A <see cref="T:System.Int32"/> value specifying the index at which
               to insert the data.
            </param>
            <param name="data">
               A <see cref="T:TagLib.ByteVector"/> object containing data to
               insert into the current instance.
            </param>
            <exception cref="T:System.NotSupportedException">
               The current instance is read-only.
            </exception>
        </member>
        <member name="M:TagLib.ByteVector.Insert(System.Int32,System.Byte[])">
            <summary>
               Inserts the contents of an array to insert into the
               current instance.
            </summary>
            <param name="index">
               A <see cref="T:System.Int32"/> value specifying the index at which
               to insert the data.
            </param>
            <param name="data">
               A <see cref="T:byte[]"/> containing data to insert into the
               current instance.
            </param>
            <exception cref="T:System.NotSupportedException">
               The current instance is read-only.
            </exception>
        </member>
        <member name="M:TagLib.ByteVector.Resize(System.Int32,System.Byte)">
            <summary>
               Resizes the current instance.
            </summary>
            <param name="size">
               A <see cref="T:System.Int32"/> value specifying the new size of the
               current instance.
            </param>
            <param name="padding">
               A <see cref="T:System.Byte"/> object containing the padding byte
               to use if the current instance is growing.
            </param>
            <returns>
               The current instance.
            </returns>
            <exception cref="T:System.NotSupportedException">
               The current instance is read-only.
            </exception>
        </member>
        <member name="M:TagLib.ByteVector.Resize(System.Int32)">
            <summary>
               Resizes the current instance.
            </summary>
            <param name="size">
               A <see cref="T:System.Int32"/> value specifying the new size of the
               current instance.
            </param>
            <returns>
               The current instance.
            </returns>
            <remarks>
               If the current instance grows, the added bytes are filled
               with '0'. Use <see cref="M:TagLib.ByteVector.Resize(System.Int32,System.Byte)" /> to specify
               the padding byte.
            </remarks>
            <exception cref="T:System.NotSupportedException">
               The current instance is read-only.
            </exception>
            <seealso cref="M:TagLib.ByteVector.Resize(System.Int32,System.Byte)" />
        </member>
        <member name="M:TagLib.ByteVector.RemoveRange(System.Int32,System.Int32)">
            <summary>
               Removes a range of data from the current instance.
            </summary>
            <param name="index">
               A <see cref="T:System.Int32" /> value specifying the index at which
               to start removing data.
            </param>
            <param name="count">
               A <see cref="T:System.Int32"/> value specifying the number of bytes
               to remove.
            </param>
            <exception cref="T:System.NotSupportedException">
               The current instance is read-only.
            </exception>
        </member>
        <member name="M:TagLib.ByteVector.ToInt(System.Boolean)">
            <summary>
               Converts an first four bytes of the current instance to
               a <see cref="T:System.Int32" /> value.
            </summary>
            <param name="mostSignificantByteFirst">
               <see langword="true" /> if the most significant byte
               appears first (big endian format), or <see
               langword="false" /> if the least significant byte appears
               first (little endian format).
            </param>
            <returns>
               A <see cref="T:System.Int32"/> value containing the value read from
               the current instance.
            </returns>
        </member>
        <member name="M:TagLib.ByteVector.ToInt">
            <summary>
               Converts an first four bytes of the current instance to
               a <see cref="T:System.Int32" /> value using big-endian format.
            </summary>
            <returns>
               A <see cref="T:System.Int32"/> value containing the value read from
               the current instance.
            </returns>
        </member>
        <member name="M:TagLib.ByteVector.ToUInt(System.Boolean)">
            <summary>
               Converts an first four bytes of the current instance to
               a <see cref="T:System.UInt32" /> value.
            </summary>
            <param name="mostSignificantByteFirst">
               <see langword="true" /> if the most significant byte
               appears first (big endian format), or <see
               langword="false" /> if the least significant byte appears
               first (little endian format).
            </param>
            <returns>
               A <see cref="T:System.UInt32"/> value containing the value read from
               the current instance.
            </returns>
        </member>
        <member name="M:TagLib.ByteVector.ToUInt">
            <summary>
               Converts an first four bytes of the current instance to
               a <see cref="T:System.UInt32" /> value using big-endian format.
            </summary>
            <returns>
               A <see cref="T:System.UInt32"/> value containing the value read from
               the current instance.
            </returns>
        </member>
        <member name="M:TagLib.ByteVector.ToShort(System.Boolean)">
            <summary>
               Converts an first two bytes of the current instance to a
               <see cref="T:System.Int16" /> value.
            </summary>
            <param name="mostSignificantByteFirst">
               <see langword="true" /> if the most significant byte
               appears first (big endian format), or <see
               langword="false" /> if the least significant byte appears
               first (little endian format).
            </param>
            <returns>
               A <see cref="T:System.Int16"/> value containing the value read
               from the current instance.
            </returns>
        </member>
        <member name="M:TagLib.ByteVector.ToShort">
            <summary>
               Converts an first two bytes of the current instance to
               a <see cref="T:System.Int16" /> value using big-endian format.
            </summary>
            <returns>
               A <see cref="T:System.Int16"/> value containing the value read
               from the current instance.
            </returns>
        </member>
        <member name="M:TagLib.ByteVector.ToUShort(System.Boolean)">
            <summary>
               Converts an first two bytes of the current instance to a
               <see cref="T:System.UInt16" /> value.
            </summary>
            <param name="mostSignificantByteFirst">
               <see langword="true" /> if the most significant byte
               appears first (big endian format), or <see
               langword="false" /> if the least significant byte appears
               first (little endian format).
            </param>
            <returns>
               A <see cref="T:System.UInt16"/> value containing the value read
               from the current instance.
            </returns>
        </member>
        <member name="M:TagLib.ByteVector.ToUShort">
            <summary>
               Converts an first two bytes of the current instance to
               a <see cref="T:System.UInt16" /> value using big-endian format.
            </summary>
            <returns>
               A <see cref="T:System.UInt16"/> value containing the value read
               from the current instance.
            </returns>
        </member>
        <member name="M:TagLib.ByteVector.ToLong(System.Boolean)">
            <summary>
               Converts an first eight bytes of the current instance to
               a <see cref="T:System.Int64" /> value.
            </summary>
            <param name="mostSignificantByteFirst">
               <see langword="true" /> if the most significant byte
               appears first (big endian format), or <see
               langword="false" /> if the least significant byte appears
               first (little endian format).
            </param>
            <returns>
               A <see cref="T:System.Int64"/> value containing the value read
               from the current instance.
            </returns>
        </member>
        <member name="M:TagLib.ByteVector.ToLong">
            <summary>
               Converts an first eight bytes of the current instance to
               a <see cref="T:System.Int64" /> value using big-endian format.
            </summary>
            <returns>
               A <see cref="T:System.Int64"/> value containing the value read
               from the current instance.
            </returns>
        </member>
        <member name="M:TagLib.ByteVector.ToULong(System.Boolean)">
            <summary>
               Converts an first eight bytes of the current instance to
               a <see cref="T:System.UInt64" /> value.
            </summary>
            <param name="mostSignificantByteFirst">
               <see langword="true" /> if the most significant byte
               appears first (big endian format), or <see
               langword="false" /> if the least significant byte appears
               first (little endian format).
            </param>
            <returns>
               A <see cref="T:System.UInt64"/> value containing the value read
               from the current instance.
            </returns>
        </member>
        <member name="M:TagLib.ByteVector.ToULong">
            <summary>
               Converts an first eight bytes of the current instance to
               a <see cref="T:System.UInt64" /> value using big-endian format.
            </summary>
            <returns>
               A <see cref="T:System.UInt64"/> value containing the value read
               from the current instance.
            </returns>
        </member>
        <member name="M:TagLib.ByteVector.ToFloat(System.Boolean)">
            <summary>
               Converts an first four bytes of the current instance to
               a <see cref="T:System.Single" /> value.
            </summary>
            <param name="mostSignificantByteFirst">
               <see langword="true" /> if the most significant byte
               appears first (big endian format), or <see
               langword="false" /> if the least significant byte appears
               first (little endian format).
            </param>
            <returns>
               A <see cref="T:System.Single"/> value containing the value read
               from the current instance.
            </returns>
        </member>
        <member name="M:TagLib.ByteVector.ToFloat">
            <summary>
               Converts an first four bytes of the current instance to
               a <see cref="T:System.Single" /> value using big-endian format.
            </summary>
            <returns>
               A <see cref="T:System.Single"/> value containing the value read
               from the current instance.
            </returns>
        </member>
        <member name="M:TagLib.ByteVector.ToDouble(System.Boolean)">
            <summary>
               Converts an first eight bytes of the current instance to
               a <see cref="T:System.Double" /> value.
            </summary>
            <param name="mostSignificantByteFirst">
               <see langword="true" /> if the most significant byte
               appears first (big endian format), or <see
               langword="false" /> if the least significant byte appears
               first (little endian format).
            </param>
            <returns>
               A <see cref="T:System.Double"/> value containing the value read
               from the current instance.
            </returns>
        </member>
        <member name="M:TagLib.ByteVector.ToDouble">
            <summary>
               Converts an first eight bytes of the current instance to
               a <see cref="T:System.Double" /> value using big-endian format.
            </summary>
            <returns>
               A <see cref="T:System.Double"/> value containing the value read
               from the current instance.
            </returns>
        </member>
        <member name="M:TagLib.ByteVector.ToExtendedPrecision">
            <summary>
               Converts the first 10 bytes of the current instance to an IEEE
               754 80-bit extended precision floating point number, expressed
               as a <see cref="T:System.Double"/>.
            </summary>
            <returns>
               A <see cref="T:System.Double"/> value containing the value read from the
               current instance.
            </returns>
        </member>
        <member name="M:TagLib.ByteVector.ToString(TagLib.StringType,System.Int32,System.Int32)">
            <summary>
               Converts a portion of the current instance to a <see
               cref="T:System.String"/> object using a specified encoding.
            </summary>
            <param name="type">
               A <see cref="T:TagLib.StringType"/> value indicating the encoding
               to use when converting to a <see cref="T:System.String"/> object.
            </param>
            <param name="offset">
               A <see cref="T:System.Int32"/> value specify the index in the
               current instance at which to start converting.
            </param>
            <param name="count">
               A <see cref="T:System.Int32"/> value specify the number of bytes to
               convert.
            </param>
            <returns>
               A <see cref="T:System.String"/> object containing the converted
               text.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
               <paramref name="offset" /> is less than zero or greater
               than the total number of bytes, or <paramref name="count"
               /> is less than zero or greater than the number of bytes
               after <paramref name="offset" />.
            </exception>
        </member>
        <member name="M:TagLib.ByteVector.ToString(TagLib.StringType,System.Int32)">
            <summary>
               Converts all data after a specified index in the current
               instance to a <see cref="T:System.String"/> object using a
               specified encoding.
            </summary>
            <param name="type">
               A <see cref="T:TagLib.StringType"/> value indicating the encoding
               to use when converting to a <see cref="T:System.String"/> object.
            </param>
            <param name="offset">
               A <see cref="T:System.Int32"/> value specify the index in the
               current instance at which to start converting.
            </param>
            <returns>
               A <see cref="T:System.String"/> object containing the converted
               text.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
               <paramref name="offset" /> is less than zero or greater
               than the total number of bytes.
            </exception>
        </member>
        <member name="M:TagLib.ByteVector.ToString(TagLib.StringType)">
            <summary>
               Converts the current instance into a <see cref="T:System.String"/>
               object using a specified encoding.
            </summary>
            <returns>
               A <see cref="T:System.String"/> object containing the converted
               text.
            </returns>
        </member>
        <member name="M:TagLib.ByteVector.ToString">
            <summary>
               Converts the current instance into a <see cref="T:System.String"/>
               object using a UTF-8 encoding.
            </summary>
            <returns>
               A <see cref="T:System.String"/> object containing the converted
               text.
            </returns>
        </member>
        <member name="M:TagLib.ByteVector.ToStrings(TagLib.StringType,System.Int32)">
            <summary>
               Converts the current instance into a <see cref="T:string[]"
               /> starting at a specified offset and using a specified
               encoding, assuming the values are nil separated.
            </summary>
            <param name="type">
               A <see cref="T:TagLib.StringType"/> value indicating the encoding
               to use when converting to a <see cref="T:System.String"/> object.
            </param>
            <param name="offset">
               A <see cref="T:System.Int32"/> value specify the index in the
               current instance at which to start converting.
            </param>
            <returns>
               A <see cref="T:string[]" /> containing the converted text.
            </returns>
        </member>
        <member name="M:TagLib.ByteVector.ToStrings(TagLib.StringType,System.Int32,System.Int32)">
            <summary>
               Converts the current instance into a <see cref="T:string[]"
               /> starting at a specified offset and using a specified
               encoding, assuming the values are nil separated and
               limiting it to a specified number of items.
            </summary>
            <param name="type">
               A <see cref="T:TagLib.StringType"/> value indicating the encoding
               to use when converting to a <see cref="T:System.String"/> object.
            </param>
            <param name="offset">
               A <see cref="T:System.Int32"/> value specify the index in the
               current instance at which to start converting.
            </param>
            <param name="count">
               A <see cref="T:System.Int32"/> value specifying a limit to the
               number of strings to create. Once the limit has been
               reached, the last string will be filled by the remainder
               of the data.
            </param>
            <returns>
               A <see cref="T:string[]" /> containing the converted text.
            </returns>
        </member>
        <member name="M:TagLib.ByteVector.op_Equality(TagLib.ByteVector,TagLib.ByteVector)">
            <summary>
               Determines whether two specified <see cref="T:TagLib.ByteVector"
               /> objects are equal.
            </summary>
            <param name="first">
               A <see cref="T:TagLib.ByteVector"/> to compare.
            </param>
            <param name="second">
               A <see cref="T:TagLib.ByteVector"/> to compare.
            </param>
            <returns>
               <para><see langword="true" /> if <paramref name="first"
               /> and <paramref name="second" /> contain the same
               data; otherwise, <see langword="false" />.</para>
            </returns>
        </member>
        <member name="M:TagLib.ByteVector.op_Inequality(TagLib.ByteVector,TagLib.ByteVector)">
            <summary>
               Determines whether two specified <see cref="T:TagLib.ByteVector"
               /> objects differ.
            </summary>
            <param name="first">
               A <see cref="T:TagLib.ByteVector"/> to compare.
            </param>
            <param name="second">
               A <see cref="T:TagLib.ByteVector"/> to compare.
            </param>
            <returns>
               <para><see langword="true" /> if <paramref name="first"
               /> and <paramref name="second" /> contain different
               data; otherwise, <see langword="false" />.</para>
            </returns>
        </member>
        <member name="M:TagLib.ByteVector.op_LessThan(TagLib.ByteVector,TagLib.ByteVector)">
            <summary>
               Determines whether or not one <see cref="T:TagLib.ByteVector" />
               is less than another.
            </summary>
            <param name="first">
               A <see cref="T:TagLib.ByteVector"/> to compare.
            </param>
            <param name="second">
               A <see cref="T:TagLib.ByteVector"/> to compare.
            </param>
            <returns>
               <para><see langword="true" /> if <paramref name="first"
               /> is less than <paramref name="second" />; otherwise,
               <see langword="false" />.</para>
            </returns>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="first" /> or <paramref name="second" />
               is <see langword="null" />.
            </exception>
        </member>
        <member name="M:TagLib.ByteVector.op_LessThanOrEqual(TagLib.ByteVector,TagLib.ByteVector)">
            <summary>
               Determines whether or not one <see cref="T:TagLib.ByteVector" />
               is less than or equal to another.
            </summary>
            <param name="first">
               A <see cref="T:TagLib.ByteVector"/> to compare.
            </param>
            <param name="second">
               A <see cref="T:TagLib.ByteVector"/> to compare.
            </param>
            <returns>
               <para><see langword="true" /> if <paramref name="first"
               /> is less than or equal to <paramref name="second" />;
               otherwise, <see langword="false" />.</para>
            </returns>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="first" /> or <paramref name="second" />
               is <see langword="null" />.
            </exception>
        </member>
        <member name="M:TagLib.ByteVector.op_GreaterThan(TagLib.ByteVector,TagLib.ByteVector)">
            <summary>
               Determines whether or not one <see cref="T:TagLib.ByteVector" />
               is greater than another.
            </summary>
            <param name="first">
               A <see cref="T:TagLib.ByteVector"/> to compare.
            </param>
            <param name="second">
               A <see cref="T:TagLib.ByteVector"/> to compare.
            </param>
            <returns>
               <para><see langword="true" /> if <paramref name="first"
               /> is greater than <paramref name="second" />; otherwise,
               <see langword="false" />.</para>
            </returns>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="first" /> or <paramref name="second" />
               is <see langword="null" />.
            </exception>
        </member>
        <member name="M:TagLib.ByteVector.op_GreaterThanOrEqual(TagLib.ByteVector,TagLib.ByteVector)">
            <summary>
               Determines whether or not one <see cref="T:TagLib.ByteVector" />
               is greater than or equal to another.
            </summary>
            <param name="first">
               A <see cref="T:TagLib.ByteVector"/> to compare.
            </param>
            <param name="second">
               A <see cref="T:TagLib.ByteVector"/> to compare.
            </param>
            <returns>
               <para><see langword="true" /> if <paramref name="first"
               /> is greater than or equal to <paramref name="second"
               />; otherwise, <see langword="false" />.</para>
            </returns>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="first" /> or <paramref name="second" />
               is <see langword="null" />.
            </exception>
        </member>
        <member name="M:TagLib.ByteVector.op_Addition(TagLib.ByteVector,TagLib.ByteVector)">
            <summary>
               Creates a new <see cref="T:TagLib.ByteVector"/> object by adding
               two objects together.
            </summary>
            <param name="first">
               A <see cref="T:TagLib.ByteVector"/> to combine.
            </param>
            <param name="second">
               A <see cref="T:TagLib.ByteVector"/> to combine.
            </param>
            <returns>
               A new instance of <see cref="T:TagLib.ByteVector" /> with the
               contents of <paramref name="first" /> followed by the
               contents of <paramref name="second" />.
            </returns>
        </member>
        <member name="M:TagLib.ByteVector.op_Implicit(System.Byte)~TagLib.ByteVector">
            <summary>
               Converts a <see cref="T:System.Byte" /> to a new <see
               cref="T:TagLib.ByteVector" /> object.
            </summary>
            <param name="value">
               A <see cref="T:System.Byte" /> to convert.
            </param>
            <returns>
               A new instance of <see cref="T:TagLib.ByteVector" /> containing
               <paramref name="value" />.
            </returns>
        </member>
        <member name="M:TagLib.ByteVector.op_Implicit(System.Byte[])~TagLib.ByteVector">
            <summary>
               Converts a <see cref="T:byte[]" /> to a new <see
               cref="T:TagLib.ByteVector" /> object.
            </summary>
            <param name="value">
               A <see cref="T:byte[]" /> to convert.
            </param>
            <returns>
               A new instance of <see cref="T:TagLib.ByteVector" /> containing
               the contents of <paramref name="value" />.
            </returns>
        </member>
        <member name="M:TagLib.ByteVector.op_Implicit(System.String)~TagLib.ByteVector">
            <summary>
               Converts a <see cref="T:System.String" /> to a new <see
               cref="T:TagLib.ByteVector" /> object.
            </summary>
            <param name="value">
               A <see cref="T:System.String" /> to convert.
            </param>
            <returns>
               A new instance of <see cref="T:TagLib.ByteVector" /> containing
               the UTF-8 encoded contents of <paramref name="value" />.
            </returns>
        </member>
        <member name="M:TagLib.ByteVector.FromInt(System.Int32,System.Boolean)">
            <summary>
               Converts a value into a data representation.
            </summary>
            <param name="value">
               A <see cref="T:System.Int32"/> value to convert into bytes.
            </param>
            <param name="mostSignificantByteFirst">
               <see langword="true" /> if the most significant byte is
               to appear first (big endian format), or <see
               langword="false" /> if the least significant byte is to
               appear first (little endian format).
            </param>
            <returns>
               A <see cref="T:TagLib.ByteVector"/> object containing the encoded
               representation of <paramref name="value" />.
            </returns>
        </member>
        <member name="M:TagLib.ByteVector.FromInt(System.Int32)">
            <summary>
               Converts an value into a big-endian data representation.
            </summary>
            <param name="value">
               A <see cref="T:System.Int32"/> value to convert into bytes.
            </param>
            <returns>
               A <see cref="T:TagLib.ByteVector"/> object containing the encoded
               representation of <paramref name="value" />.
            </returns>
        </member>
        <member name="M:TagLib.ByteVector.FromUInt(System.UInt32,System.Boolean)">
            <summary>
               Converts an unsigned value into a data representation.
            </summary>
            <param name="value">
               A <see cref="T:System.UInt32"/> value to convert into bytes.
            </param>
            <param name="mostSignificantByteFirst">
               <see langword="true" /> if the most significant byte is
               to appear first (big endian format), or <see
               langword="false" /> if the least significant byte is to
               appear first (little endian format).
            </param>
            <returns>
               A <see cref="T:TagLib.ByteVector"/> object containing the encoded
               representation of <paramref name="value" />.
            </returns>
        </member>
        <member name="M:TagLib.ByteVector.FromUInt(System.UInt32)">
            <summary>
               Converts an unsigned value into a big-endian data
               representation.
            </summary>
            <param name="value">
               A <see cref="T:System.UInt32"/> value to convert into bytes.
            </param>
            <returns>
               A <see cref="T:TagLib.ByteVector"/> object containing the encoded
               representation of <paramref name="value" />.
            </returns>
        </member>
        <member name="M:TagLib.ByteVector.FromShort(System.Int16,System.Boolean)">
            <summary>
               Converts a value into a data representation.
            </summary>
            <param name="value">
               A <see cref="T:System.Int16"/> value to convert into bytes.
            </param>
            <param name="mostSignificantByteFirst">
               <see langword="true" /> if the most significant byte is
               to appear first (big endian format), or <see
               langword="false" /> if the least significant byte is to
               appear first (little endian format).
            </param>
            <returns>
               A <see cref="T:TagLib.ByteVector"/> object containing the encoded
               representation of <paramref name="value" />.
            </returns>
        </member>
        <member name="M:TagLib.ByteVector.FromShort(System.Int16)">
            <summary>
               Converts a value into a big-endian data representation.
            </summary>
            <param name="value">
               A <see cref="T:System.Int16"/> value to convert into bytes.
            </param>
            <returns>
               A <see cref="T:TagLib.ByteVector"/> object containing the encoded
               representation of <paramref name="value" />.
            </returns>
        </member>
        <member name="M:TagLib.ByteVector.FromUShort(System.UInt16,System.Boolean)">
            <summary>
               Converts an unsigned value into a data representation.
            </summary>
            <param name="value">
               A <see cref="T:System.UInt16"/> value to convert into bytes.
            </param>
            <param name="mostSignificantByteFirst">
               <see langword="true" /> if the most significant byte is
               to appear first (big endian format), or <see
               langword="false" /> if the least significant byte is to
               appear first (little endian format).
            </param>
            <returns>
               A <see cref="T:TagLib.ByteVector"/> object containing the encoded
               representation of <paramref name="value" />.
            </returns>
        </member>
        <member name="M:TagLib.ByteVector.FromUShort(System.UInt16)">
            <summary>
               Converts an unsigned value into a big-endian data
               representation.
            </summary>
            <param name="value">
               A <see cref="T:System.UInt16"/> value to convert into bytes.
            </param>
            <returns>
               A <see cref="T:TagLib.ByteVector"/> object containing the encoded
               representation of <paramref name="value" />.
            </returns>
        </member>
        <member name="M:TagLib.ByteVector.FromLong(System.Int64,System.Boolean)">
            <summary>
               Converts a value into a data representation.
            </summary>
            <param name="value">
               A <see cref="T:System.Int64"/> value to convert into bytes.
            </param>
            <param name="mostSignificantByteFirst">
               <see langword="true" /> if the most significant byte is
               to appear first (big endian format), or <see
               langword="false" /> if the least significant byte is to
               appear first (little endian format).
            </param>
            <returns>
               A <see cref="T:TagLib.ByteVector"/> object containing the encoded
               representation of <paramref name="value" />.
            </returns>
        </member>
        <member name="M:TagLib.ByteVector.FromLong(System.Int64)">
            <summary>
               Converts a value into a big-endian data representation.
            </summary>
            <param name="value">
               A <see cref="T:System.Int64"/> value to convert into bytes.
            </param>
            <returns>
               A <see cref="T:TagLib.ByteVector"/> object containing the encoded
               representation of <paramref name="value" />.
            </returns>
        </member>
        <member name="M:TagLib.ByteVector.FromULong(System.UInt64,System.Boolean)">
            <summary>
               Converts an unsigned value into a data representation.
            </summary>
            <param name="value">
               A <see cref="T:System.UInt64"/> value to convert into bytes.
            </param>
            <param name="mostSignificantByteFirst">
               <see langword="true" /> if the most significant byte is
               to appear first (big endian format), or <see
               langword="false" /> if the least significant byte is to
               appear first (little endian format).
            </param>
            <returns>
               A <see cref="T:TagLib.ByteVector"/> object containing the encoded
               representation of <paramref name="value" />.
            </returns>
        </member>
        <member name="M:TagLib.ByteVector.FromULong(System.UInt64)">
            <summary>
               Converts an unsigned value into a big-endian data
               representation.
            </summary>
            <param name="value">
               A <see cref="T:System.UInt64"/> value to convert into bytes.
            </param>
            <returns>
               A <see cref="T:TagLib.ByteVector"/> object containing the encoded
               representation of <paramref name="value" />.
            </returns>
        </member>
        <member name="M:TagLib.ByteVector.FromString(System.String,TagLib.StringType,System.Int32)">
            <summary>
               Converts an string into a encoded data representation.
            </summary>
            <param name="text">
               A <see cref="T:System.String"/> object containing the text to
               convert.
            </param>
            <param name="type">
               A <see cref="T:TagLib.StringType"/> value specifying the encoding
               to use when converting the text.
            </param>
            <param name="length">
               A <see cref="T:System.Int32"/> value specifying the number of
               characters in <paramref name="text" /> to encoded.
            </param>
            <returns>
               A <see cref="T:TagLib.ByteVector"/> object containing the encoded
               representation of <paramref name="text" />.
            </returns>
        </member>
        <member name="M:TagLib.ByteVector.FromString(System.String,TagLib.StringType)">
            <summary>
               Converts an string into a encoded data representation.
            </summary>
            <param name="text">
               A <see cref="T:System.String"/> object containing the text to
               convert.
            </param>
            <param name="type">
               A <see cref="T:TagLib.StringType"/> value specifying the encoding
               to use when converting the text.
            </param>
            <returns>
               A <see cref="T:TagLib.ByteVector"/> object containing the encoded
               representation of <paramref name="text" />.
            </returns>
        </member>
        <member name="M:TagLib.ByteVector.FromString(System.String,System.Int32)">
            <summary>
               Converts an string into a encoded data representation.
            </summary>
            <param name="text">
               A <see cref="T:System.String"/> object containing the text to
               convert.
            </param>
            <param name="length">
               A <see cref="T:System.Int32"/> value specifying the number of
               characters in <paramref name="text" /> to encoded.
            </param>
            <returns>
               A <see cref="T:TagLib.ByteVector"/> object containing the encoded
               representation of <paramref name="text" />.
            </returns>
        </member>
        <member name="M:TagLib.ByteVector.FromString(System.String)">
            <summary>
               Converts an string into a encoded data representation.
            </summary>
            <param name="text">
               A <see cref="T:System.String"/> object containing the text to
               convert.
            </param>
            <returns>
               A <see cref="T:TagLib.ByteVector"/> object containing the encoded
               representation of <paramref name="text" />.
            </returns>
        </member>
        <member name="M:TagLib.ByteVector.FromPath(System.String)">
            <summary>
               Creates a new instance of <see cref="T:TagLib.ByteVector" /> by
               reading in the contents of a specified file.
            </summary>
            <param name="path">
               A <see cref="T:System.String"/> object containing the path of the
               file to read.
            </param>
            <returns>
               A <see cref="T:TagLib.ByteVector"/> object containing the contents
               of the specified file.
            </returns>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="path" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:TagLib.ByteVector.FromPath(System.String,System.Byte[]@,System.Boolean)">
            <summary>
               Creates a new instance of <see cref="T:TagLib.ByteVector" /> by
               reading in the contents of a specified file.
            </summary>
            <param name="path">
               A <see cref="T:System.String"/> object containing the path of the
               file to read.
            </param>
            <param name="firstChunk">
               A <see cref="T:byte[]"/> reference to be filled with the
               first data chunk from the read file.
            </param>
            <param name="copyFirstChunk">
               A <see cref="T:System.Boolean"/> value specifying whether or not to
               copy the first chunk of the file into <paramref
               name="firstChunk" />.
            </param>
            <returns>
               A <see cref="T:TagLib.ByteVector"/> object containing the contents
               of the specified file.
            </returns>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="path" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:TagLib.ByteVector.FromFile(TagLib.File.IFileAbstraction)">
            <summary>
               Creates a new instance of <see cref="T:TagLib.ByteVector" /> by
               reading in the contents of a specified file abstraction.
            </summary>
            <param name="abstraction">
               A <see cref="T:TagLib.File.IFileAbstraction"/> object containing
               abstraction of the file to read.
            </param>
            <returns>
               A <see cref="T:TagLib.ByteVector"/> object containing the contents
               of the specified file.
            </returns>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="abstraction" /> is <see langword="null"
               />.
            </exception>
        </member>
        <member name="M:TagLib.ByteVector.FromFile(TagLib.File.IFileAbstraction,System.Byte[]@,System.Boolean)">
            <summary>
               Creates a new instance of <see cref="T:TagLib.ByteVector" /> by
               reading in the contents of a specified file abstraction.
            </summary>
            <param name="abstraction">
               A <see cref="T:TagLib.File.IFileAbstraction"/> object containing
               abstraction of the file to read.
            </param>
            <param name="firstChunk">
               A <see cref="T:byte[]"/> reference to be filled with the
               first data chunk from the read file.
            </param>
            <param name="copyFirstChunk">
               A <see cref="T:System.Boolean"/> value specifying whether or not to
               copy the first chunk of the file into <paramref
               name="firstChunk" />.
            </param>
            <returns>
               A <see cref="T:TagLib.ByteVector"/> object containing the contents
               of the specified file.
            </returns>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="abstraction" /> is <see langword="null"
               />.
            </exception>
        </member>
        <member name="M:TagLib.ByteVector.FromStream(System.IO.Stream)">
            <summary>
               Creates a new instance of <see cref="T:TagLib.ByteVector" /> by
               reading in the contents of a specified stream.
            </summary>
            <param name="stream">
               A <see cref="T:System.IO.Stream"/> object containing
               the stream to read.
            </param>
            <returns>
               A <see cref="T:TagLib.ByteVector"/> object containing the contents
               of the specified stream.
            </returns>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="stream" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:TagLib.ByteVector.FromStream(System.IO.Stream,System.Byte[]@,System.Boolean)">
            <summary>
               Creates a new instance of <see cref="T:TagLib.ByteVector" /> by
               reading in the contents of a specified stream.
            </summary>
            <param name="stream">
               A <see cref="T:System.IO.Stream"/> object containing
               the stream to read.
            </param>
            <param name="firstChunk">
               A <see cref="T:byte[]"/> reference to be filled with the
               first data chunk from the read stream.
            </param>
            <param name="copyFirstChunk">
               A <see cref="T:System.Boolean"/> value specifying whether or not to
               copy the first chunk of the stream into <paramref
               name="firstChunk" />.
            </param>
            <returns>
               A <see cref="T:TagLib.ByteVector"/> object containing the contents
               of the specified stream.
            </returns>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="stream" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:TagLib.ByteVector.TextDelimiter(TagLib.StringType)">
            <summary>
               Gets the text delimiter for nil separated string lists of
               a specified encoding.
            </summary>
            <param name="type">
               A <see cref="T:TagLib.StringType"/> value specifying the encoding
               to use.
            </param>
            <returns>
               A <see cref="T:TagLib.ByteVector"/> object containing the text
               delimiter.
            </returns>
        </member>
        <member name="M:TagLib.ByteVector.StringTypeToEncoding(TagLib.StringType,TagLib.ByteVector)">
            <summary>
               Gets the <see cref="T:System.Text.Encoding" /> to use for a specified
               encoding.
            </summary>
            <param name="type">
               A <see cref="T:TagLib.StringType"/> value specifying encoding to
               use.
            </param>
            <param name="bom">
               A <see cref="T:TagLib.ByteVector"/> object containing the first
               two bytes of the data to convert if <paramref
               name="type" /> equals <see cref="F:TagLib.StringType.UTF16" />.
            </param>
            <returns>
               A <see cref="T:System.Text.Encoding" /> object capable of encoding
               and decoding text with the specified type.
            </returns>
            <remarks>
               <paramref name="bom" /> is used to determine whether the
               encoding is big or little endian. If it does not contain
               BOM data, the previously used endian format is used.
            </remarks>
        </member>
        <member name="M:TagLib.ByteVector.Equals(System.Object)">
            <summary>
               Determines whether another object is equal to the current
               instance.
            </summary>
            <param name="other">
               A <see cref="T:System.Object"/> to compare to the current
               instance.
            </param>
            <returns>
               <see langword="true" /> if <paramref name="other"/> is not
               <see langword="null" />, is of type <see
               cref="T:TagLib.ByteVector" />, and is equal to the current
               instance; otherwise <see langword="false" />.
            </returns>
        </member>
        <member name="M:TagLib.ByteVector.Equals(TagLib.ByteVector)">
            <summary>
               Determines whether another <see cref="T:TagLib.ByteVector"/>
               object is equal to the current instance.
            </summary>
            <param name="other">
               A <see cref="T:TagLib.ByteVector"/> object to compare to the
               current instance.
            </param>
            <returns>
               <see langword="true" /> if <paramref name="other"/> is not
               <see langword="null" /> and equal to the current instance;
               otherwise <see langword="false" />.
            </returns>
        </member>
        <member name="M:TagLib.ByteVector.GetHashCode">
            <summary>
               Gets the hash value for the current instance.
            </summary>
            <returns>
               A <see cref="T:System.Int32" /> value equal to the CRC checksum of
               the current instance.
            </returns>
        </member>
        <member name="M:TagLib.ByteVector.CompareTo(TagLib.ByteVector)">
            <summary>
               Compares the current instance to another to determine if
               their order.
            </summary>
            <param name="other">
               A <see cref="T:TagLib.ByteVector" /> object to compare to the
               current instance.
            </param>
            <returns>
               A <see cref="T:System.Int32" /> which is less than zero if the
               current instance is less than <paramref name="other" />,
               zero if it is equal to <paramref name="other" />, and
               greater than zero if the current instance is greater than
               <paramref name="other" />.
            </returns>
        </member>
        <member name="M:TagLib.ByteVector.GetEnumerator">
            <summary>
               Gets an enumerator for enumerating through the the bytes
               in the current instance.
            </summary>
            <returns>
               A <see cref="T:System.Collections.IEnumerator`1" /> for
               enumerating through the contents of the current instance.
            </returns>
        </member>
        <member name="M:TagLib.ByteVector.Clear">
            <summary>
               Clears the current instance.
            </summary>
            <exception cref="T:System.NotSupportedException">
               The current instance is read-only.
            </exception>
        </member>
        <member name="M:TagLib.ByteVector.Add(System.Byte)">
            <summary>
               Adds a single byte to the end of the current instance.
            </summary>
            <param name="item">
               A <see cref="T:System.Byte" /> to add to the current instance.
            </param>
            <exception cref="T:System.NotSupportedException">
               The current instance is read-only.
            </exception>
        </member>
        <member name="M:TagLib.ByteVector.Remove(System.Byte)">
            <summary>
               Removes the first occurance of a <see cref="T:System.Byte" /> from
               the current instance.
            </summary>
            <param name="item">
               A <see cref="T:System.Byte"/> to remove from the current instance.
            </param>
            <returns>
               <see langword="true" /> if the value was removed;
               otherwise the value did not appear in the current
               instance and <see langword="false" /> is returned.
            </returns>
            <exception cref="T:System.NotSupportedException">
               The current instance is read-only.
            </exception>
        </member>
        <member name="M:TagLib.ByteVector.CopyTo(System.Byte[],System.Int32)">
            <summary>
               Copies the current instance to a <see cref="T:byte[]"/>
               starting at a specified index.
            </summary>
            <param name="array">
               A <see cref="T:byte[]" /> to copy to.
            </param>
            <param name="arrayIndex">
               A <see cref="T:System.Int32" /> value indicating the index in
               <paramref name="array" /> at which to start copying.
            </param>
        </member>
        <member name="M:TagLib.ByteVector.Contains(System.Byte)">
            <summary>
               Gets whether or not the current instance contains a
               specified byte.
            </summary>
            <param name="item">
               A <see cref="T:System.Byte" /> value to look for in the current
               instance.
            </param>
            <returns>
               <see langword="true" /> if the value could be found;
               otherwise <see langword="false" />.
            </returns>
        </member>
        <member name="P:TagLib.ByteVector.Count">
            <summary>
               Gets the number of elements in the current instance.
            </summary>
            <value>
               A <see cref="T:System.Int32" /> value containing the number of bytes
               in the current instance.
            </value>
        </member>
        <member name="P:TagLib.ByteVector.IsSynchronized">
            <summary>
               Gets whether or not the current instance is synchronized.
            </summary>
            <value>
               Always <see langword="false" />.
            </value>
        </member>
        <member name="P:TagLib.ByteVector.SyncRoot">
            <summary>
               Gets the object that can be used to synchronize the
               current instance.
            </summary>
            <value>
               A <see cref="T:System.Object" /> that can be used to synchronize
               the current instance.
            </value>
        </member>
        <member name="M:TagLib.ByteVector.RemoveAt(System.Int32)">
            <summary>
               Removes the byte at the specified index.
            </summary>
            <param name="index">
               A <see cref="T:System.Int32" /> value specifying the position at
               which to remove a byte.
            </param>
            <exception cref="T:System.NotSupportedException">
               The current instance is read-only.
            </exception>
        </member>
        <member name="M:TagLib.ByteVector.Insert(System.Int32,System.Byte)">
            <summary>
               Inserts a single byte into the current instance at a
               specified index.
            </summary>
            <param name="index">
               A <see cref="T:System.Int32" /> value specifying the position at
               which to insert the value.
            </param>
            <param name="item">
               A <see cref="T:System.Byte"/> value to insert into the current
               instance.
            </param>
            <exception cref="T:System.NotSupportedException">
               The current instance is read-only.
            </exception>
        </member>
        <member name="M:TagLib.ByteVector.IndexOf(System.Byte)">
            <summary>
               Gets the index of the first occurance of a value.
            </summary>
            <param name="item">
               A <see cref="T:System.Byte" /> to find in the current instance.
            </param>
            <returns>
               A <see cref="T:System.Int32" /> value containing the first index
               at which the value was found, or -1 if it was not found.
            </returns>
        </member>
        <member name="P:TagLib.ByteVector.IsReadOnly">
            <summary>
               Gets whether or not the current instance is read-only.
            </summary>
            <value>
               <see langword="true" /> if the current instance is
               read-only; otherwise <see langword="false" />.
            </value>
        </member>
        <member name="P:TagLib.ByteVector.IsFixedSize">
            <summary>
               Gets whether or not the current instance has a fixed
               size.
            </summary>
            <value>
               <see langword="true" /> if the current instance has a
               fixed size; otherwise <see langword="false" />.
            </value>
        </member>
        <member name="P:TagLib.ByteVector.Item(System.Int32)">
            <summary>
               Gets and sets the value as a specified index.
            </summary>
            <exception cref="T:System.NotSupportedException">
               The current instance is read-only.
            </exception>
        </member>
        <member name="T:TagLib.ByteVectorCollection">
            <summary>
               This class extends <see cref="T:TagLib.ListBase`1"/> to represent
               a collection of <see cref="T:TagLib.ByteVector" /> objects.
            </summary>
        </member>
        <member name="M:TagLib.ByteVectorCollection.#ctor">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.ByteVectorCollection" /> with no contents.
            </summary>
        </member>
        <member name="M:TagLib.ByteVectorCollection.#ctor(System.Collections.Generic.IEnumerable{TagLib.ByteVector})">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.ByteVectorCollection" /> with specified contents.
            </summary>
            <param name="list">
              A <see cref="T:System.Collections.Generic.IEnumerable`1"
              /> containing <see cref="T:TagLib.ByteVector" /> objects to add to
              the current instance.
            </param>
        </member>
        <member name="M:TagLib.ByteVectorCollection.#ctor(TagLib.ByteVector[])">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.ByteVectorCollection" /> with specified contents.
            </summary>
            <param name="list">
              A <see cref="T:ByteVector[]" /> containing objects to add to
              the current instance.
            </param>
        </member>
        <member name="M:TagLib.ByteVectorCollection.SortedInsert(TagLib.ByteVector,System.Boolean)">
            <summary>
               Performs a sorted insert of a <see cref="T:TagLib.ByteVector" />
               object into the current instance, optionally only adding
               if the item is unique.
            </summary>
            <param name="item">
               A <see cref="T:TagLib.ByteVector" /> object to add to the current
               instance.
            </param>
            <param name="unique">
               If <see langword="true" />, the object will only be added
               if an identical value is not already contained in the
               current instance.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="item" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:TagLib.ByteVectorCollection.ToByteVector(TagLib.ByteVector)">
            <summary>
               Converts the current instance to a <see cref="T:TagLib.ByteVector"
               /> by joining the contents together with a specified
               separator.
            </summary>
            <param name="separator">
               A <see cref="T:TagLib.ByteVector"/> object to separate the
               combined contents of the current instance.
            </param>
            <returns>
               A new <see cref="T:TagLib.ByteVector"/> object containing the
               joined contents of the current instance.
            </returns>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="separator" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:TagLib.ByteVectorCollection.Split(TagLib.ByteVector,TagLib.ByteVector,System.Int32,System.Int32)">
            <summary>
               Splits a <see cref="T:TagLib.ByteVector" /> object using a
               pattern.
            </summary>
            <param name="vector">
               A <see cref="T:TagLib.ByteVector"/> object to split.
            </param>
            <param name="pattern">
               A <see cref="T:TagLib.ByteVector"/> object to use to split
               <paramref name="vector" /> with.
            </param>
            <param name="byteAlign">
               A <see cref="T:System.Int32" /> specifying the byte align to use
               when splitting. In order to split when a pattern is
               encountered, the index at which it is found must be
               divisible by <paramref name="byteAlign" />.
            </param>
            <param name="max">
               A <see cref="T:System.Int32" /> value specifying the maximum number
               of objects to return, or zero to not to limit the number.
               If that that number is reached, the last value will
               contain the remainder of the file even if it contains
               more instances of <paramref name="pattern" />.
            </param>
            <returns>
               A <see cref="T:TagLib.ByteVectorCollection" /> object containing
               the split contents of the current instance.
            </returns>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="vector" /> or <paramref name="pattern" />
               is <see langword="null" />.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
               <paramref name="byteAlign" /> is less than 1.
            </exception>
        </member>
        <member name="M:TagLib.ByteVectorCollection.Split(TagLib.ByteVector,TagLib.ByteVector,System.Int32)">
            <summary>
               Splits a <see cref="T:TagLib.ByteVector" /> object using a
               pattern.
            </summary>
            <param name="vector">
               A <see cref="T:TagLib.ByteVector"/> object to split.
            </param>
            <param name="pattern">
               A <see cref="T:TagLib.ByteVector"/> object to use to split
               <paramref name="vector" /> with.
            </param>
            <param name="byteAlign">
               A <see cref="T:System.Int32" /> specifying the byte align to use
               when splitting. In order to split when a pattern is
               encountered, the index at which it is found must be
                divisible by <paramref name="byteAlign" />.
            </param>
            <returns>
               A <see cref="T:TagLib.ByteVectorCollection" /> object containing
               the split contents of the current instance.
            </returns>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="vector" /> or <paramref name="pattern" />
               is <see langword="null" />.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
               <paramref name="byteAlign" /> is less than 1.
            </exception>
        </member>
        <member name="M:TagLib.ByteVectorCollection.Split(TagLib.ByteVector,TagLib.ByteVector)">
            <summary>
               Splits a <see cref="T:TagLib.ByteVector" /> object using a
               pattern.
            </summary>
            <param name="vector">
               A <see cref="T:TagLib.ByteVector"/> object to split.
            </param>
            <param name="pattern">
               A <see cref="T:TagLib.ByteVector"/> object to use to split
               <paramref name="vector" /> with.
            </param>
            <returns>
               A <see cref="T:TagLib.ByteVectorCollection" /> object containing
               the split contents of the current instance.
            </returns>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="vector" /> or <paramref name="pattern" />
               is <see langword="null" />.
            </exception>
        </member>
        <member name="T:TagLib.CombinedTag">
            <summary>
               This class combines a collection of tags so that they behave as
               one.
            </summary>
        </member>
        <member name="F:TagLib.CombinedTag.tags">
            <summary>
               Contains tags to be combined.
            </summary>
        </member>
        <member name="M:TagLib.CombinedTag.#ctor">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.CombinedTag" /> with no internal tags.
            </summary>
            <remarks>
               You can set the tags in the new instance later using
               <see cref="M:TagLib.CombinedTag.SetTags(TagLib.Tag[])" />.
            </remarks>
        </member>
        <member name="M:TagLib.CombinedTag.#ctor(TagLib.Tag[])">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.CombinedTag" /> with a specified collection of
               tags.
            </summary>
            <param name="tags">
               A <see cref="T:Tag[]" /> containing a collection of tags to
               combine in the new instance.
            </param>
        </member>
        <member name="P:TagLib.CombinedTag.Tags">
            <summary>
               Gets the tags combined in the current instance.
            </summary>
            <value>
               A <see cref="T:Tag[]" /> containing the tags combined in
               the current instance.
            </value>
        </member>
        <member name="M:TagLib.CombinedTag.SetTags(TagLib.Tag[])">
            <summary>
               Sets the child tags to combine in the current instance.
            </summary>
            <param name="tags">
               A <see cref="T:Tag[]" /> containing the tags to combine.
            </param>
        </member>
        <member name="M:TagLib.CombinedTag.InsertTag(System.Int32,TagLib.Tag)">
            <summary>
               Inserts a tag into the collection of tags in the current
               instance.
            </summary>
            <param name="index">
               A <see cref="T:System.Int32" /> value specifying the index at which
               to insert the tag.
            </param>
            <param name="tag">
               A <see cref="T:TagLib.Tag" /> object to insert into the collection
               of tags.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
               <paramref name="index" /> is less than zero or greater
               than the count.
            </exception>
        </member>
        <member name="M:TagLib.CombinedTag.AddTag(TagLib.Tag)">
            <summary>
               Adds a tag at the end of the collection of tags in the
               current instance.
            </summary>
            <param name="tag">
               A <see cref="T:TagLib.Tag" /> object to add to the collection of
               tags.
            </param>
        </member>
        <member name="M:TagLib.CombinedTag.RemoveTag(TagLib.Tag)">
            <summary>
               Removes a specified tag from the collection in the
               current instance.
            </summary>
            <param name="tag">
               A <see cref="T:TagLib.Tag" /> object to remove from the
               collection.
            </param>
        </member>
        <member name="M:TagLib.CombinedTag.ClearTags">
            <summary>
               Clears the tag collection in the current instance.
            </summary>
        </member>
        <member name="P:TagLib.CombinedTag.TagTypes">
            <summary>
               Gets the tag types contained in the current instance.
            </summary>
            <value>
               A bitwise combined <see cref="T:TagLib.TagTypes" />
               containing the tag types contained in the current
               instance.
            </value>
            <remarks>
               This value contains a bitwise combined value from all the
               child tags.
            </remarks>
            <seealso cref="P:TagLib.Tag.TagTypes" />
        </member>
        <member name="P:TagLib.CombinedTag.Title">
            <summary>
               Gets and sets the title for the media described by the
               current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> object containing the title for
               the media described by the current instance or <see
               langword="null" /> if no value is present.
            </value>
            <remarks>
               <para>When getting the value, the child tags are looped
               through in order and the first non-<see langword="null" />
               value is returned.</para>
               <para>When setting the value, it is stored in each child
               tag.</para>
            </remarks>
            <seealso cref="P:TagLib.Tag.Title" />
        </member>
        <member name="P:TagLib.CombinedTag.Subtitle">
            <summary>
               Gets and sets a short description, one-liner. 
               It represents the tagline of the Video/music.
            </summary>
            <value>
               A <see cref="T:System.String" /> containing the subtitle
               the media represented by the current instance 
               or an empty array if no value is present.
            </value>
            <remarks>
               <para>This field gives a nice/short precision to 
               the title, which is typically below the title on the
               front cover of a media.
               For example, for "Back to the future", this would be 
               "It's About Time". 
               </para>
            </remarks>
        </member>
        <member name="P:TagLib.CombinedTag.Description">
            <summary>
               Gets and sets a short description of the media.
               For a music, this could be the comment that the artist
               made of its artwork. For a video, this should be a 
               short summary of the story/plot, but a spoiler. This
               should give the impression of what to expect in the
               media.
            </summary>
            <value>
               A <see cref="T:System.String" /> containing the subtitle
               the media represented by the current instance 
               or an empty array if no value is present.
            </value>
            <remarks>
               <para>This is especially relevant for a movie.
               For example, for "Back to the Future 2", this could be
               "After visiting 2015, Marty McFly must repeat his visit 
               to 1955 to prevent disastrous changes to 1985...without
               interfering with his first trip".
               </para>
            </remarks>
        </member>
        <member name="P:TagLib.CombinedTag.Performers">
            <summary>
               Gets and sets the performers or artists who performed in
               the media described by the current instance.
            </summary>
            <value>
               A <see cref="T:string[]" /> containing the performers or
               artists who performed in the media described by the
               current instance or an empty array if no value is
               present.
            </value>
            <remarks>
               <para>When getting the value, the child tags are looped
               through in order and the first non-<see langword="null" />
               and non-empty value is returned.</para>
               <para>When setting the value, it is stored in each child
               tag.</para>
            </remarks>
            <seealso cref="P:TagLib.Tag.Performers" />
        </member>
        <member name="P:TagLib.CombinedTag.PerformersSort">
            <summary>
               Gets and sets the sort names of the performers or artists
               who performed in the media described by the current instance.
            </summary>
            <value>
               A <see cref="T:string[]" /> containing the sort names for
               the performers or artists who performed in the media
               described by the current instance, or an empty array if
               no value is present.
            </value>
            <remarks>
               <para>When getting the value, the child tags are looped
               through in order and the first non-<see langword="null" />
               and non-empty value is returned.</para>
               <para>When setting the value, it is stored in each child
               tag.</para>
            </remarks>
            <seealso cref="P:TagLib.Tag.PerformersSort" />
        </member>
        <member name="P:TagLib.CombinedTag.PerformersRole">
            <summary>
               Gets and sets the Charaters for a video media, or
               instruments played for music media. 
               This should match the <see cref="P:TagLib.CombinedTag.Performers"/> array (for
               each person correspond one/more role). Several roles for
               the same artist/actor can be made up with semicolons. 
               For example, "Marty McFly; Marty McFly Jr.; Marlene McFly".
            </summary>
            <remarks>
               <para> This is typically usefull for movies, although the
               instrument played by each artist in a music may be of
               relevance.
               </para>
               <para>It is highly important to match each role to the 
               performers. This means that a role may be <see 
               langword="null"/> to keep the match between a
               Performers[i] and PerformersRole[i].
               </para>
            </remarks>
        </member>
        <member name="P:TagLib.CombinedTag.AlbumArtistsSort">
            <summary>
               Gets and sets the sort names for the band or artist who
               is credited in the creation of the entire album or
               collection containing the media described by the
               current instance.
            </summary>
            <value>
               A <see cref="T:string[]" /> containing the sort names
               for the band or artist who is credited in the creation
               of the entire album or collection containing the media
               described by the current instance or an empty array if
               no value is present.
            </value>
            <remarks>
               <para>When getting the value, the child tags are looped
               through in order and the first non-<see langword="null" />
               and non-empty value is returned.</para>
               <para>When setting the value, it is stored in each child
               tag.</para>
            </remarks>
            <seealso cref="P:TagLib.Tag.AlbumArtistsSort" />
        </member>
        <member name="P:TagLib.CombinedTag.AlbumArtists">
            <summary>
               Gets and sets the band or artist who is credited in the
               creation of the entire album or collection containing the
               media described by the current instance.
            </summary>
            <value>
               A <see cref="T:string[]" /> containing the band or artist
               who is credited in the creation of the entire album or
               collection containing the media described by the current
               instance or an empty array if no value is present.
            </value>
            <remarks>
               <para>When getting the value, the child tags are looped
               through in order and the first non-<see langword="null" />
               and non-empty value is returned.</para>
               <para>When setting the value, it is stored in each child
               tag.</para>
            </remarks>
            <seealso cref="P:TagLib.Tag.AlbumArtists" />
        </member>
        <member name="P:TagLib.CombinedTag.Composers">
            <summary>
               Gets and sets the composers of the media represented by
               the current instance.
            </summary>
            <value>
               A <see cref="T:string[]" /> containing the composers of the
               media represented by the current instance or an empty
               array if no value is present.
            </value>
            <remarks>
               <para>When getting the value, the child tags are looped
               through in order and the first non-<see langword="null" />
               and non-empty value is returned.</para>
               <para>When setting the value, it is stored in each child
               tag.</para>
            </remarks>
            <seealso cref="P:TagLib.Tag.Composers" />
        </member>
        <member name="P:TagLib.CombinedTag.ComposersSort">
            <summary>
               Gets and sets the sort names for the composer of the 
               media described by the current instance.
            </summary>
            <value>
               A <see cref="T:string[]" /> containing the sort names
               for the composers of the media described by the 
               current instance or an empty array if no value is present.
            </value>
            <remarks>
               <para>When getting the value, the child tags are looped
               through in order and the first non-<see langword="null" />
               and non-empty value is returned.</para>
               <para>When setting the value, it is stored in each child
               tag.</para>
            </remarks>
            <seealso cref="P:TagLib.Tag.ComposersSort" />
        </member>
        <member name="P:TagLib.CombinedTag.TitleSort">
            <summary>
               Gets and sets the sort names for the Track Title of the 
               media described by the current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> containing the sort names
               for the Track Title of the media described by the 
               current instance or null if no value is present.
            </value>
            <remarks>
               <para>When getting the value, the child tags are looped
               through in order and the first non-<see langword="null" />
               and non-empty value is returned.</para>
               <para>When setting the value, it is stored in each child
               tag.</para>
            </remarks>
            <seealso cref="P:TagLib.Tag.TitleSort" />
        </member>
        <member name="P:TagLib.CombinedTag.AlbumSort">
            <summary>
               Gets and sets the sort names for the Album Title of the 
               media described by the current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> containing the sort names
               for the Title of the media described by the 
               current instance or null if no value is present.
            </value>
            <remarks>
               <para>When getting the value, the child tags are looped
               through in order and the first non-<see langword="null" />
               and non-empty value is returned.</para>
               <para>When setting the value, it is stored in each child
               tag.</para>
            </remarks>
            <seealso cref="P:TagLib.Tag.AlbumSort" />
        </member>
        <member name="P:TagLib.CombinedTag.Album">
            <summary>
               Gets and sets the album of the media represented by the
               current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> object containing the album of
               the media represented by the current instance or <see
               langword="null" /> if no value is present.
            </value>
            <remarks>
               <para>When getting the value, the child tags are looped
               through in order and the first non-<see langword="null" />
               value is returned.</para>
               <para>When setting the value, it is stored in each child
               tag.</para>
            </remarks>
            <seealso cref="P:TagLib.Tag.Album" />
        </member>
        <member name="P:TagLib.CombinedTag.Comment">
            <summary>
               Gets and sets a user comment on the media represented by
               the current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> object containing user comments
               on the media represented by the current instance or <see
               langword="null" /> if no value is present.
            </value>
            <remarks>
               <para>When getting the value, the child tags are looped
               through in order and the first non-<see langword="null" />
               value is returned.</para>
               <para>When setting the value, it is stored in each child
               tag.</para>
            </remarks>
            <seealso cref="P:TagLib.Tag.Comment" />
        </member>
        <member name="P:TagLib.CombinedTag.Genres">
            <summary>
               Gets and sets the genres of the media represented by the
               current instance.
            </summary>
            <value>
               A <see cref="T:string[]" /> containing the genres of the
               media represented by the current instance or an empty
               array if no value is present.
            </value>
            <remarks>
               <para>When getting the value, the child tags are looped
               through in order and the first non-<see langword="null" />
               and non-empty value is returned.</para>
               <para>When setting the value, it is stored in each child
               tag.</para>
            </remarks>
            <seealso cref="P:TagLib.Tag.Genres" />
        </member>
        <member name="P:TagLib.CombinedTag.Year">
            <summary>
               Gets and sets the year that the media represented by the
               current instance was recorded.
            </summary>
            <value>
               A <see cref="T:System.UInt32" /> containing the year that the media
               represented by the current instance was created or zero
               if no value is present.
            </value>
            <remarks>
               <para>When getting the value, the child tags are looped
               through in order and the first non-zero value is
               returned.</para>
               <para>When setting the value, it is stored in each child
               tag.</para>
            </remarks>
            <seealso cref="P:TagLib.Tag.Year" />
        </member>
        <member name="P:TagLib.CombinedTag.Track">
            <summary>
               Gets and sets the position of the media represented by
               the current instance in its containing album.
            </summary>
            <value>
               A <see cref="T:System.UInt32" /> containing the position of the
               media represented by the current instance in its
               containing album or zero if not specified.
            </value>
            <remarks>
               <para>When getting the value, the child tags are looped
               through in order and the first non-zero value is
               returned.</para>
               <para>When setting the value, it is stored in each child
               tag.</para>
            </remarks>
            <seealso cref="P:TagLib.Tag.Track" />
        </member>
        <member name="P:TagLib.CombinedTag.TrackCount">
            <summary>
               Gets and sets the number of tracks in the album
               containing the media represented by the current instance.
            </summary>
            <value>
               A <see cref="T:System.UInt32" /> containing the number of tracks in
               the album containing the media represented by the current
               instance or zero if not specified.
            </value>
            <remarks>
               <para>When getting the value, the child tags are looped
               through in order and the first non-zero value is
               returned.</para>
               <para>When setting the value, it is stored in each child
               tag.</para>
            </remarks>
            <seealso cref="P:TagLib.Tag.TrackCount" />
        </member>
        <member name="P:TagLib.CombinedTag.Disc">
            <summary>
               Gets and sets the number of the disc containing the media
               represented by the current instance in the boxed set.
            </summary>
            <value>
               A <see cref="T:System.UInt32" /> containing the number of the disc
               containing the media represented by the current instance
               in the boxed set.
            </value>
            <remarks>
               <para>When getting the value, the child tags are looped
               through in order and the first non-zero value is
               returned.</para>
               <para>When setting the value, it is stored in each child
               tag.</para>
            </remarks>
            <seealso cref="P:TagLib.Tag.Disc" />
        </member>
        <member name="P:TagLib.CombinedTag.DiscCount">
            <summary>
               Gets and sets the number of discs in the boxed set
               containing the media represented by the current instance.
            </summary>
            <value>
               A <see cref="T:System.UInt32" /> containing the number of discs in
               the boxed set containing the media represented by the
               current instance or zero if not specified.
            </value>
            <remarks>
               <para>When getting the value, the child tags are looped
               through in order and the first non-zero value is
               returned.</para>
               <para>When setting the value, it is stored in each child
               tag.</para>
            </remarks>
            <seealso cref="P:TagLib.Tag.DiscCount" />
        </member>
        <member name="P:TagLib.CombinedTag.Lyrics">
            <summary>
               Gets and sets the lyrics or script of the media
               represented by the current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> object containing the lyrics or
               script of the media represented by the current instance
               or <see langword="null" /> if no value is present.
            </value>
            <remarks>
               <para>When getting the value, the child tags are looped
               through in order and the first non-<see langword="null" />
               value is returned.</para>
               <para>When setting the value, it is stored in each child
               tag.</para>
            </remarks>
            <seealso cref="P:TagLib.Tag.Lyrics" />
        </member>
        <member name="P:TagLib.CombinedTag.Grouping">
            <summary>
               Gets and sets the grouping on the album which the media
               in the current instance belongs to.
            </summary>
            <value>
               A <see cref="T:System.String" /> object containing the grouping on
               the album which the media in the current instance belongs
               to or <see langword="null" /> if no value is present.
            </value>
            <remarks>
               <para>When getting the value, the child tags are looped
               through in order and the first non-<see langword="null" />
               value is returned.</para>
               <para>When setting the value, it is stored in each child
               tag.</para>
            </remarks>
            <seealso cref="P:TagLib.Tag.Grouping" />
        </member>
        <member name="P:TagLib.CombinedTag.BeatsPerMinute">
            <summary>
               Gets and sets the number of beats per minute in the audio
               of the media represented by the current instance.
            </summary>
            <value>
               A <see cref="T:System.UInt32" /> containing the number of beats per
               minute in the audio of the media represented by the
               current instance, or zero if not specified.
            </value>
            <remarks>
               <para>When getting the value, the child tags are looped
               through in order and the first non-zero value is
               returned.</para>
               <para>When setting the value, it is stored in each child
               tag.</para>
            </remarks>
            <seealso cref="P:TagLib.Tag.BeatsPerMinute" />
        </member>
        <member name="P:TagLib.CombinedTag.Conductor">
            <summary>
               Gets and sets the conductor or director of the media
               represented by the current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> object containing the conductor
               or director of the media represented by the current
               instance or <see langword="null" /> if no value present.
            </value>
            <remarks>
               <para>When getting the value, the child tags are looped
               through in order and the first non-<see langword="null" />
               value is returned.</para>
               <para>When setting the value, it is stored in each child
               tag.</para>
            </remarks>
            <seealso cref="P:TagLib.Tag.Conductor" />
        </member>
        <member name="P:TagLib.CombinedTag.Copyright">
            <summary>
               Gets and sets the copyright information for the media
               represented by the current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> object containing the copyright
               information for the media represented by the current
               instance or <see langword="null" /> if no value present.
            </value>
            <remarks>
               <para>When getting the value, the child tags are looped
               through in order and the first non-<see langword="null" />
               value is returned.</para>
               <para>When setting the value, it is stored in each child
               tag.</para>
            </remarks>
            <seealso cref="P:TagLib.Tag.Copyright" />
        </member>
        <member name="P:TagLib.CombinedTag.DateTagged">
            <summary>
               Gets and sets the date at which the tag has been written.
            </summary>
            <value>
               A nullable <see cref="T:System.DateTime" /> object containing the 
               date at which the tag has been written, or <see 
               langword="null" /> if no value present.
            </value>
        </member>
        <member name="P:TagLib.CombinedTag.MusicBrainzArtistId">
            <summary>
               Gets and sets the MusicBrainz Artist ID.
            </summary>
            <value>
               A <see cref="T:System.String" /> containing the MusicBrainz
               ArtistID for the media described by the 
               current instance or null if no value is present.
            </value>
            <remarks>
               <para>When getting the value, the child tags are looped
               through in order and the first non-<see langword="null" />
               and non-empty value is returned.</para>
               <para>When setting the value, it is stored in each child
               tag.</para>
            </remarks>
            <seealso cref="P:TagLib.Tag.MusicBrainzArtistId" />
        </member>
        <member name="P:TagLib.CombinedTag.MusicBrainzReleaseGroupId">
            <summary>
               Gets and sets the MusicBrainz Release Group ID.
            </summary>
            <value>
               A <see cref="T:System.String" /> containing the MusicBrainz
               ReleaseGroupID for the media described by the 
               current instance or null if no value is present.
            </value>
            <remarks>
               <para>When getting the value, the child tags are looped
               through in order and the first non-<see langword="null" />
               and non-empty value is returned.</para>
               <para>When setting the value, it is stored in each child
               tag.</para>
            </remarks>
            <seealso cref="P:TagLib.Tag.MusicBrainzReleaseGroupId" />
        </member>
        <member name="P:TagLib.CombinedTag.MusicBrainzReleaseId">
            <summary>
               Gets and sets the MusicBrainz Release ID.
            </summary>
            <value>
               A <see cref="T:System.String" /> containing the MusicBrainz
               ReleaseID for the media described by the 
               current instance or null if no value is present.
            </value>
            <remarks>
               <para>When getting the value, the child tags are looped
               through in order and the first non-<see langword="null" />
               and non-empty value is returned.</para>
               <para>When setting the value, it is stored in each child
               tag.</para>
            </remarks>
            <seealso cref="P:TagLib.Tag.MusicBrainzReleaseId" />
        </member>
        <member name="P:TagLib.CombinedTag.MusicBrainzReleaseArtistId">
            <summary>
               Gets and sets the MusicBrainz Release Artist ID.
            </summary>
            <value>
               A <see cref="T:System.String" /> containing the MusicBrainz
               ReleaseArtistID for the media described by the 
               current instance or null if no value is present.
            </value>
            <remarks>
               <para>When getting the value, the child tags are looped
               through in order and the first non-<see langword="null" />
               and non-empty value is returned.</para>
               <para>When setting the value, it is stored in each child
               tag.</para>
            </remarks>
            <seealso cref="P:TagLib.Tag.MusicBrainzReleaseArtistId" />
        </member>
        <member name="P:TagLib.CombinedTag.MusicBrainzTrackId">
            <summary>
               Gets and sets the MusicBrainz Track ID.
            </summary>
            <value>
               A <see cref="T:System.String" /> containing the MusicBrainz
               TrackID for the media described by the 
               current instance or null if no value is present.
            </value>
            <remarks>
               <para>When getting the value, the child tags are looped
               through in order and the first non-<see langword="null" />
               and non-empty value is returned.</para>
               <para>When setting the value, it is stored in each child
               tag.</para>
            </remarks>
            <seealso cref="P:TagLib.Tag.MusicBrainzTrackId" />
        </member>
        <member name="P:TagLib.CombinedTag.MusicBrainzDiscId">
            <summary>
               Gets and sets the MusicBrainz Disc ID.
            </summary>
            <value>
               A <see cref="T:System.String" /> containing the MusicBrainz
               DiscID for the media described by the 
               current instance or null if no value is present.
            </value>
            <remarks>
               <para>When getting the value, the child tags are looped
               through in order and the first non-<see langword="null" />
               and non-empty value is returned.</para>
               <para>When setting the value, it is stored in each child
               tag.</para>
            </remarks>
            <seealso cref="P:TagLib.Tag.MusicBrainzDiscId" />
        </member>
        <member name="P:TagLib.CombinedTag.MusicIpId">
            <summary>
               Gets and sets the MusicIP PUID.
            </summary>
            <value>
               A <see cref="T:System.String" /> containing the MusicIP PUID
               for the media described by the 
               current instance or null if no value is present.
            </value>
            <remarks>
               <para>When getting the value, the child tags are looped
               through in order and the first non-<see langword="null" />
               and non-empty value is returned.</para>
               <para>When setting the value, it is stored in each child
               tag.</para>
            </remarks>
            <seealso cref="P:TagLib.Tag.MusicIpId" />
        </member>
        <member name="P:TagLib.CombinedTag.AmazonId">
            <summary>
               Gets and sets the Amazon ID.
            </summary>
            <value>
               A <see cref="T:System.String" /> containing the Amazon Id
               for the media described by the 
               current instance or null if no value is present.
            </value>
            <remarks>
               <para>When getting the value, the child tags are looped
               through in order and the first non-<see langword="null" />
               and non-empty value is returned.</para>
               <para>When setting the value, it is stored in each child
               tag.</para>
            </remarks>
            <seealso cref="P:TagLib.Tag.AmazonId" />
        </member>
        <member name="P:TagLib.CombinedTag.MusicBrainzReleaseStatus">
            <summary>
               Gets and sets the MusicBrainz Release Status.
            </summary>
            <value>
               A <see cref="T:System.String" /> containing the MusicBrainz
               ReleaseStatus for the media described by the 
               current instance or null if no value is present.
            </value>
            <remarks>
               <para>When getting the value, the child tags are looped
               through in order and the first non-<see langword="null" />
               and non-empty value is returned.</para>
               <para>When setting the value, it is stored in each child
               tag.</para>
            </remarks>
            <seealso cref="P:TagLib.Tag.MusicBrainzReleaseStatus" />
        </member>
        <member name="P:TagLib.CombinedTag.MusicBrainzReleaseType">
            <summary>
               Gets and sets the MusicBrainz Release Type.
            </summary>
            <value>
               A <see cref="T:System.String" /> containing the MusicBrainz
               ReleaseType for the media described by the 
               current instance or null if no value is present.
            </value>
            <remarks>
               <para>When getting the value, the child tags are looped
               through in order and the first non-<see langword="null" />
               and non-empty value is returned.</para>
               <para>When setting the value, it is stored in each child
               tag.</para>
            </remarks>
            <seealso cref="P:TagLib.Tag.MusicBrainzReleaseType" />
        </member>
        <member name="P:TagLib.CombinedTag.MusicBrainzReleaseCountry">
            <summary>
               Gets and sets the MusicBrainz Release Country.
            </summary>
            <value>
               A <see cref="T:System.String" /> containing the MusicBrainz
               ReleaseCountry for the media described by the 
               current instance or null if no value is present.
            </value>
            <remarks>
               <para>When getting the value, the child tags are looped
               through in order and the first non-<see langword="null" />
               and non-empty value is returned.</para>
               <para>When setting the value, it is stored in each child
               tag.</para>
            </remarks>
            <seealso cref="P:TagLib.Tag.MusicBrainzReleaseCountry" />
        </member>
        <member name="P:TagLib.CombinedTag.Pictures">
            <summary>
               Gets and sets a collection of pictures associated with
               the media represented by the current instance.
            </summary>
            <value>
               A <see cref="T:IPicture[]" /> containing a collection of
               pictures associated with the media represented by the
               current instance or an empty array if none are present.
            </value>
            <remarks>
               <para>When getting the value, the child tags are looped
               through in order and the first non-<see langword="null" />
               and non-empty value is returned.</para>
               <para>When setting the value, it is stored in each child
               tag.</para>
            </remarks>
            <seealso cref="P:TagLib.Tag.Pictures" />
        </member>
        <member name="P:TagLib.CombinedTag.ReplayGainTrackGain">
            <summary>
               Gets and sets the ReplayGain track gain in dB.
            </summary>
            <value>
               A <see cref="T:System.Boolean" /> value in dB for the track gain as
               per the ReplayGain specification.
            </value>
            <remarks>
               <para>When getting the value, the child tags are looped
               through in order and the first non-zero value is
               returned.</para>
               <para>When setting the value, it is stored in each child
               tag.</para>
            </remarks>
            <seealso cref="P:TagLib.Tag.ReplayGainTrackGain" />
        </member>
        <member name="P:TagLib.CombinedTag.ReplayGainTrackPeak">
            <summary>
               Gets and sets the ReplayGain track peak sample.
            </summary>
            <value>
               A <see cref="T:System.Boolean" /> value for the track peak as per the
               ReplayGain specification.
            </value>
            <remarks>
               <para>When getting the value, the child tags are looped
               through in order and the first non-zero value is
               returned.</para>
               <para>When setting the value, it is stored in each child
               tag.</para>
            </remarks>
            <seealso cref="P:TagLib.Tag.ReplayGainTrackPeak" />
        </member>
        <member name="P:TagLib.CombinedTag.ReplayGainAlbumGain">
            <summary>
               Gets and sets the ReplayGain album gain in dB.
            </summary>
            <value>
               A <see cref="T:System.Boolean" /> value in dB for the album gain as
               per the ReplayGain specification.
            </value>
            <remarks>
               <para>When getting the value, the child tags are looped
               through in order and the first non-zero value is
               returned.</para>
               <para>When setting the value, it is stored in each child
               tag.</para>
            </remarks>
            <seealso cref="P:TagLib.Tag.ReplayGainAlbumGain" />
        </member>
        <member name="P:TagLib.CombinedTag.ReplayGainAlbumPeak">
            <summary>
               Gets and sets the ReplayGain album peak sample.
            </summary>
            <value>
               A <see cref="T:System.Boolean" /> value for the album peak as per the
               ReplayGain specification.
            </value>
            <remarks>
               <para>When getting the value, the child tags are looped
               through in order and the first non-zero value is
               returned.</para>
               <para>When setting the value, it is stored in each child
               tag.</para>
            </remarks>
            <seealso cref="P:TagLib.Tag.ReplayGainAlbumPeak" />
        </member>
        <member name="P:TagLib.CombinedTag.InitialKey">
            <summary>
               Gets and sets the initial key of the media
               represented by the current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> object containing the initial
               key of the media represented by the current
               instance or <see langword="null" /> if no value present.
            </value>
            <remarks>
               <para>When getting the value, the child tags are looped
               through in order and the first non-<see langword="null" />
               value is returned.</para>
               <para>When setting the value, it is stored in each child
               tag.</para>
            </remarks>
            <seealso cref="P:TagLib.Tag.InitialKey" />
        </member>
        <member name="P:TagLib.CombinedTag.RemixedBy">
            <summary>
               Gets and sets the remixer of the media
               represented by the current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> object containing the remixer
               of the media represented by the current
               instance or <see langword="null" /> if no value present.
            </value>
            <remarks>
               <para>When getting the value, the child tags are looped
               through in order and the first non-<see langword="null" />
               value is returned.</para>
               <para>When setting the value, it is stored in each child
               tag.</para>
            </remarks>
            <seealso cref="P:TagLib.Tag.RemixedBy" />
        </member>
        <member name="P:TagLib.CombinedTag.Publisher">
            <summary>
               Gets and sets the publisher of the media
               represented by the current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> object containing the 
               publisher of the media represented by the current
               instance or <see langword="null" /> if no value present.
            </value>
            <remarks>
               <para>When getting the value, the child tags are looped
               through in order and the first non-<see langword="null" />
               value is returned.</para>
               <para>When setting the value, it is stored in each child
               tag.</para>
            </remarks>
            <seealso cref="P:TagLib.Tag.Publisher" />
        </member>
        <member name="P:TagLib.CombinedTag.ISRC">
            <summary>
               Gets and sets the ISRC (International Standard Recording Code)
               of the song represented by the current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> object containing the ISRC
               of the media represented by the current
               instance or <see langword="null" /> if no value present.
            </value>
            <remarks>
               <para>When getting the value, the child tags are looped
               through in order and the first non-<see langword="null" />
               value is returned.</para>
               <para>When setting the value, it is stored in each child
               tag.</para>
            </remarks>
            <seealso cref="P:TagLib.Tag.ISRC" />
        </member>
        <member name="P:TagLib.CombinedTag.Length">
            <summary>
               Gets and sets the length of the media
               represented by the current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> object containing the 
               length of the media represented by the current
               instance or <see langword="null" /> if no value present.
            </value>
            <remarks>
               <para>When getting the value, the child tags are looped
               through in order and the first non-<see langword="null" />
               value is returned.</para>
               <para>When setting the value, it is stored in each child
               tag.</para>
            </remarks>
            <seealso cref="P:TagLib.Tag.Length" />
        </member>
        <member name="P:TagLib.CombinedTag.IsEmpty">
            <summary>
               Gets whether or not the current instance is empty.
            </summary>
            <value>
               <see langword="true" /> if all the child tags are empty.
               Otherwise <see langword="false" />.
            </value>
            <seealso cref="P:TagLib.Tag.IsEmpty" />
        </member>
        <member name="M:TagLib.CombinedTag.Clear">
            <summary>
               Clears all of the child tags.
            </summary>
        </member>
        <member name="T:TagLib.CorruptFileException">
             <summary>
                This class extends <see cref="T:System.Exception" /> and is used to
                indicate that a file or tag is corrupt.
             </summary>
             <remarks>
                This exception will be thrown if invalid data interferes with the
                reading of the file or tag. One common example is in the (legal)
                downloading of media files with BitTorrent, in which case large
                portions of the file will contain zeroed bytes.
             </remarks>
             <example>
                <para>Catching an exception when creating a <see
                cref="T:TagLib.File" />.</para>
                <code lang="C#">
             using System;
             using TagLib;
            
             public class ExceptionTest
             {
             	public static void Main ()
             	{
             		try {
             			File file = File.Create ("partial.mp3"); // Partial download.
             		} catch (CorruptFileException e) {
             			Console.WriteLine ("That file is corrupt: {0}", e.ToString ());
             		}
            	}
             }
                </code>
                <code lang="C++">
             #using &lt;System.dll>
             #using &lt;taglib-sharp.dll>
             
             using System;
             using TagLib;
            
             void main ()
             {
             	try {
             		File file = File::Create ("partial.mp3"); // Partial download.
             	} catch (CorruptFileException^ e) {
             		Console::WriteLine ("That file is corrupt: {0}", e);
             	}
             }
                </code>
                <code lang="VB">
             Imports System
             Imports TagLib
            
             Public Class ExceptionTest
             	Public Shared Sub Main ()
             		Try
             			file As File = File.Create ("partial.mp3") ' Partial download.
             		Catch e As CorruptFileException
             			Console.WriteLine ("That file is corrupt: {0}", e.ToString ());
             		End Try
            	End Sub
             End Class
                </code>
                <code lang="Boo">
             import System
             import TagLib
            
             try:
             	file As File = File.Create ("partial.mp3") # Partial download.
             catch e as CorruptFileException:
             	Console.WriteLine ("That file is corrupt: {0}", e.ToString ());
                </code>
             </example>
        </member>
        <member name="M:TagLib.CorruptFileException.#ctor(System.String)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.CorruptFileException" /> with a specified
               message.
            </summary>
            <param name="message">
               A <see cref="T:System.String" /> containing a message explaining
               the reason for the exception.
            </param>
        </member>
        <member name="M:TagLib.CorruptFileException.#ctor">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.CorruptFileException" /> with the default
               values.
            </summary>
        </member>
        <member name="M:TagLib.CorruptFileException.#ctor(System.String,System.Exception)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.CorruptFileException" /> with a specified
               message containing a specified exception.
            </summary>
            <param name="message">
               A <see cref="T:System.String" /> containing a message explaining
               the reason for the exception.
            </param>
            <param name="innerException">
               A <see cref="T:System.Exception" /> object to be contained in the
               new exception. For example, previously caught exception.
            </param>
        </member>
        <member name="M:TagLib.CorruptFileException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.CorruptFileException" /> from a specified
               serialization info and streaming context.
            </summary>
            <param name="info">
               A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object containing the
               serialized data to be used for the new instance.
            </param>
            <param name="context">
               A <see cref="T:System.Runtime.Serialization.StreamingContext" /> object containing the
               streaming context information for the new instance.
            </param>
            <remarks>
               This constructor is implemented because <see
               cref="T:TagLib.CorruptFileException" /> implements the <see
               cref="T:System.Runtime.Serialization.ISerializable" /> interface.
            </remarks>
        </member>
        <member name="T:TagLib.Dsf.File">
            <summary>
               This class extends <see cref="T:TagLib.File" /> to provide
               support for reading and writing tags and properties for files
               using the AIFF file format.
            </summary>
        </member>
        <member name="F:TagLib.Dsf.File.header_block">
            <summary>
               Contains the address of the DSF header block.
            </summary>
        </member>
        <member name="F:TagLib.Dsf.File.tag">
            <summary>
             Contains the Id3v2 tag.
            </summary>
        </member>
        <member name="F:TagLib.Dsf.File.properties">
            <summary>
             Contains the media properties.
            </summary>
        </member>
        <member name="F:TagLib.Dsf.File.dsf_size">
            <summary>
            Contains the size of the DSF File
            </summary>
        </member>
        <member name="F:TagLib.Dsf.File.tag_start">
            <summary>
            Contains the start position of the Tag
            </summary>
        </member>
        <member name="F:TagLib.Dsf.File.tag_end">
            <summary>
            Contains the end position of the Tag
            </summary>
        </member>
        <member name="F:TagLib.Dsf.File.FileIdentifier">
            <summary>
               The identifier used to recognize a DSF file.
            </summary>
            <value>
               "DSD "
            </value>
        </member>
        <member name="F:TagLib.Dsf.File.FormatIdentifier">
            <summary>
               The identifier used to recognize a Format chunk.
            </summary>
            <value>
               "fmt "
            </value>
        </member>
        <member name="F:TagLib.Dsf.File.ID3Identifier">
            <summary>
               The identifier used to recognize a DSF ID3 chunk.
            </summary>
            <value>
               "ID3 "
            </value>
        </member>
        <member name="M:TagLib.Dsf.File.#ctor(System.String,TagLib.ReadStyle)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Dsf.File" /> for a specified path in the local file
               system and specified read style.
            </summary>
            <param name="path">
               A <see cref="T:System.String" /> object containing the path of the
               file to use in the new instance.
            </param>
            <param name="propertiesStyle">
               A <see cref="T:TagLib.ReadStyle" /> value specifying at what level
               of accuracy to read the media properties, or <see
               cref="F:TagLib.ReadStyle.None" /> to ignore the properties.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="path" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:TagLib.Dsf.File.#ctor(System.String)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Dsf.File" /> for a specified path in the local file
               system with an average read style.
            </summary>
            <param name="path">
               A <see cref="T:System.String" /> object containing the path of the
               file to use in the new instance.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="path" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:TagLib.Dsf.File.#ctor(TagLib.File.IFileAbstraction,TagLib.ReadStyle)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Dsf.File" /> for a specified file abstraction and
               specified read style.
            </summary>
            <param name="abstraction">
               A <see cref="T:TagLib.File.IFileAbstraction" /> object to use when
               reading from and writing to the file.
            </param>
            <param name="propertiesStyle">
               A <see cref="T:TagLib.ReadStyle" /> value specifying at what level
               of accuracy to read the media properties, or <see
               cref="F:TagLib.ReadStyle.None" /> to ignore the properties.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="abstraction" /> is <see langword="null"
               />.
            </exception>
        </member>
        <member name="M:TagLib.Dsf.File.#ctor(TagLib.File.IFileAbstraction)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Dsf.File" /> for a specified file abstraction with an
               average read style.
            </summary>
            <param name="abstraction">
               A <see cref="T:TagLib.File.IFileAbstraction" /> object to use when
               reading from and writing to the file.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="abstraction" /> is <see langword="null"
               />.
            </exception>
        </member>
        <member name="P:TagLib.Dsf.File.Tag">
            <summary>
               Gets a abstract representation of all tags stored in the
               current instance.
            </summary>
            <value>
               A <see cref="T:TagLib.Tag" /> object representing all tags
               stored in the current instance.
            </value>
        </member>
        <member name="P:TagLib.Dsf.File.Properties">
            <summary>
               Gets the media properties of the file represented by the
               current instance.
            </summary>
            <value>
               A <see cref="T:TagLib.Properties" /> object containing the
               media properties of the file represented by the current
               instance.
            </value>
        </member>
        <member name="M:TagLib.Dsf.File.Save">
            <summary>
               Saves the changes made in the current instance to the
               file it represents.
            </summary>
        </member>
        <member name="M:TagLib.Dsf.File.RemoveTags(TagLib.TagTypes)">
            <summary>
               Removes a set of tag types from the current instance.
            </summary>
            <param name="types">
               A bitwise combined <see cref="T:TagLib.TagTypes" /> value
               containing tag types to be removed from the file.
            </param>
            <remarks>
               In order to remove all tags from a file, pass <see
               cref="F:TagLib.TagTypes.AllTags" /> as <paramref name="types" />.
            </remarks>
        </member>
        <member name="M:TagLib.Dsf.File.GetTag(TagLib.TagTypes,System.Boolean)">
            <summary>
               Gets a tag of a specified type from the current instance,
               optionally creating a new tag if possible.
            </summary>
            <param name="type">
               A <see cref="T:TagLib.TagTypes" /> value indicating the
               type of tag to read.
            </param>
            <param name="create">
               A <see cref="T:System.Boolean" /> value specifying whether or not to
               try and create the tag if one is not found.
            </param>
            <returns>
               A <see cref="P:TagLib.Dsf.File.Tag" /> object containing the tag that was
               found in or added to the current instance. If no
               matching tag was found and none was created, <see
               langword="null" /> is returned.
            </returns>
        </member>
        <member name="M:TagLib.Dsf.File.Read(System.Boolean,TagLib.ReadStyle,System.UInt32@,System.Int64@,System.Int64@)">
            <summary>
               Reads the contents of the current instance determining
               the size of the dsf data, the area the tagging is in,
               and optionally reading in the tags and media properties.
            </summary>
            <param name="read_tags">
               If <see langword="true" />, any tags found will be read
               into the current instance.
            </param>
            <param name="style">
               A <see cref="T:TagLib.ReadStyle"/> value specifying how the media
               data is to be read into the current instance.
            </param>
            <param name="dsf_size">
               A <see cref="T:System.UInt32"/> value reference to be filled with
               the size of the RIFF data as read from the file.
            </param>
            <param name="tag_start">
               A <see cref="T:System.Int64" /> value reference to be filled with
               the absolute seek position at which the tagging data
               starts.
            </param>
            <param name="tag_end">
               A <see cref="T:System.Int64" /> value reference to be filled with
               the absolute seek position at which the tagging data
               ends.
            </param>
            <exception cref="T:TagLib.CorruptFileException">
               The file does not begin with <see cref="F:TagLib.Dsf.File.FileIdentifier"
               />.
            </exception>
        </member>
        <member name="T:TagLib.Dsf.StreamHeader">
            <summary>
               This struct implements <see cref="T:TagLib.IAudioCodec" /> to provide
               support for reading DSF stream properties.
            </summary>
        </member>
        <member name="F:TagLib.Dsf.StreamHeader.version">
            <summary>
               Contains the version.
            </summary>
            <remarks>
               This value is stored in bytes (12-15).
               Currently only value of 1 is valid.
            </remarks>
        </member>
        <member name="F:TagLib.Dsf.StreamHeader.format_id">
            <summary>
               The Format Id.
            </summary>
            <remarks>
               This value is stored in bytes (16-19).
               0: DSD Raw
            </remarks>
        </member>
        <member name="F:TagLib.Dsf.StreamHeader.channel_type">
            <summary>
               The Channel Type.
            </summary>
            <remarks>
               This value is stored in bytes (20-23).
               1: mono 
               2:stereo 
               3:3 channels 
               4: quad 
               5: 4 channels 
               6: 5 channels 
               7: 5.1 channels 
            </remarks>
        </member>
        <member name="F:TagLib.Dsf.StreamHeader.channels">
            <summary>
               Contains the number of channels.
            </summary>
            <remarks>
               This value is stored in bytes (24-27).
               1 is monophonic, 2 is stereo, 4 means 4 channels, etc..
               up to 6 channels may be represented
            </remarks>
        </member>
        <member name="F:TagLib.Dsf.StreamHeader.sample_rate">
            <summary>
               Contains the sample rate.
            </summary>
            <remarks>
               This value is stored in bytes (28-31).
               the sample rate at which the sound is to be played back, 
               in Hz: 2822400, 5644800
            </remarks>
        </member>
        <member name="F:TagLib.Dsf.StreamHeader.bits_per_sample">
            <summary>
               Contains the number of bits per sample.
            </summary>
            <remarks>
               This value is stored in bytes (32-35).
               It can be any number from 1 to 8.
            </remarks>
        </member>
        <member name="F:TagLib.Dsf.StreamHeader.sample_count">
            <summary>
               Contains the number of sample frames per channel.
            </summary>
            <remarks>
               This value is stored in bytes (36-43).
            </remarks>
        </member>
        <member name="F:TagLib.Dsf.StreamHeader.channel_blksize">
            <summary>
               Contains the Block size per channel.
            </summary>
            <remarks>
               This value is stored in bytes (44-47).
               Always: 4096
            </remarks>
        </member>
        <member name="F:TagLib.Dsf.StreamHeader.stream_length">
            <summary>
               Contains the length of the audio stream.
            </summary>
            <remarks>
               This value is provided by the constructor.
            </remarks>
        </member>
        <member name="F:TagLib.Dsf.StreamHeader.Size">
            <summary>
               The size of an DSF Format chunk
            </summary>
        </member>
        <member name="F:TagLib.Dsf.StreamHeader.FileIdentifier">
            <summary>
               The identifier used to recognize a DSF file.
               Altough an DSF file start with "DSD ", we're interested
               in the Format chunk only, which contains the properties we need.
            </summary>
            <value>
               "fmt "
            </value>
        </member>
        <member name="M:TagLib.Dsf.StreamHeader.#ctor(TagLib.ByteVector,System.Int64)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Dsf.StreamHeader" /> for a specified header block and
               stream length.
            </summary>
            <param name="data">
               A <see cref="T:TagLib.ByteVector" /> object containing the stream
               header data.
            </param>
            <param name="streamLength">
               A <see cref="T:System.Int64" /> value containing the length of the
               DSF Audio stream in bytes.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="data" /> is <see langword="null" />.
            </exception>
            <exception cref="T:TagLib.CorruptFileException">
               <paramref name="data" /> does not begin with <see
               cref="F:TagLib.Dsf.StreamHeader.FileIdentifier" /> 
            </exception>
        </member>
        <member name="P:TagLib.Dsf.StreamHeader.Duration">
            <summary>
               Gets the duration of the media represented by the current
               instance.
            </summary>
            <value>
               A <see cref="T:System.TimeSpan" /> containing the duration of the
               media represented by the current instance.
            </value>
        </member>
        <member name="P:TagLib.Dsf.StreamHeader.MediaTypes">
            <summary>
               Gets the types of media represented by the current
               instance.
            </summary>
            <value>
               Always <see cref="F:TagLib.MediaTypes.Audio" />.
            </value>
        </member>
        <member name="P:TagLib.Dsf.StreamHeader.Description">
            <summary>
               Gets a text description of the media represented by the
               current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> object containing a description
               of the media represented by the current instance.
            </value>
        </member>
        <member name="P:TagLib.Dsf.StreamHeader.AudioBitrate">
            <summary>
               Gets the bitrate of the audio represented by the current
               instance.
            </summary>
            <value>
               A <see cref="T:System.Int32" /> value containing a bitrate of the
               audio represented by the current instance.
            </value>
        </member>
        <member name="P:TagLib.Dsf.StreamHeader.AudioSampleRate">
            <summary>
               Gets the sample rate of the audio represented by the
               current instance.
            </summary>
            <value>
               A <see cref="T:System.Int32" /> value containing the sample rate of
               the audio represented by the current instance.
            </value>
        </member>
        <member name="P:TagLib.Dsf.StreamHeader.AudioChannels">
            <summary>
               Gets the number of channels in the audio represented by
               the current instance.
            </summary>
            <value>
               A <see cref="T:System.Int32" /> value containing the number of
               channels in the audio represented by the current
               instance.
            </value>
        </member>
        <member name="P:TagLib.Dsf.StreamHeader.BitsPerSample">
            <summary>
               Gets the number of bits per sample in the audio
               represented by the current instance.
            </summary>
            <value>
               A <see cref="T:System.Int32" /> value containing the number of bits
               per sample in the audio represented by the current
               instance.
            </value>
        </member>
        <member name="T:TagLib.ReadStyle">
            <summary>
               Specifies the options to use when reading the media.
            </summary>
        </member>
        <member name="F:TagLib.ReadStyle.None">
            <summary>
               The media properties will not be read.
            </summary>
        </member>
        <member name="F:TagLib.ReadStyle.Average">
            <summary>
               The media properties will be read with average accuracy.
            </summary>
        </member>
        <member name="F:TagLib.ReadStyle.PictureLazy">
            <summary>
               Use the <see cref="F:TagLib.ReadStyle.PictureLazy"/> class in the 
               the property <see cref="P:TagLib.Tag.Pictures"/>. 
               This will avoid loading picture content when reading the Tag.
               Picture will be read lazily, when the picture content is 
               accessed.
            </summary>
        </member>
        <member name="T:TagLib.File">
            <summary>
               This abstract class provides a basic framework for reading from
               and writing to a file, as well as accessing basic tagging and
               media properties.
            </summary>
            <remarks>
               <para>This class is agnostic to all specific media types. Its
               child classes, on the other hand, support the the intricacies of
               different media and tagging formats. For example, <see
               cref="T:TagLib.Mpeg4.File" /> supports the MPEG-4 specificication and
               Apple's tagging format.</para>
               <para>Each file type can be created using its format specific
               constructors, ie. <see cref="M:TagLib.Mpeg4.File.#ctor(System.String)" />, but the
               preferred method is to use <see
               cref="M:TagLib.File.Create(System.String,System.String,TagLib.ReadStyle)" /> or one of its
               variants, as it automatically detects the appropriate class from
               the file extension or provided mime-type.</para>
            </remarks>
        </member>
        <member name="T:TagLib.File.AccessMode">
            <summary>
              Specifies the type of file access operations currently
              permitted on an instance of <see cref="T:TagLib.File" />.
            </summary>
        </member>
        <member name="F:TagLib.File.AccessMode.Read">
            <summary>
               Read operations can be performed.
            </summary>
        </member>
        <member name="F:TagLib.File.AccessMode.Write">
            <summary>
               Read and write operations can be performed.
            </summary>
        </member>
        <member name="F:TagLib.File.AccessMode.Closed">
            <summary>
               The file is closed for both read and write
               operations.
            </summary>
        </member>
        <member name="T:TagLib.File.FileTypeResolver">
            <summary>
               This delegate is used for intervening in <see
               cref="M:TagLib.File.Create(System.String)" /> by resolving the file type
               before any standard resolution operations.
            </summary>
            <param name="abstraction">
               A <see cref="T:TagLib.File.IFileAbstraction" /> object representing the
               file to be read.
            </param>
            <param name="mimetype">
               A <see cref="T:System.String" /> object containing the mime-type
               of the file.
            </param>
            <param name="style">
               A <see cref="T:TagLib.ReadStyle" /> value specifying how to read
               media properties from the file.
            </param>
            <returns>
               A new instance of <see cref="T:TagLib.File" /> or <see
               langword="null" /> if the resolver could not match it.
            </returns>
            <remarks>
               <para>A <see cref="T:TagLib.File.FileTypeResolver" /> is one way of
               altering the behavior of <see cref="M:TagLib.File.Create(System.String)" />
               .</para>
               <para>When <see cref="M:TagLib.File.Create(System.String)" /> is called, the
               registered resolvers are invoked in the reverse order in
               which they were registered. The resolver may then perform
               any operations necessary, including other type-finding
               methods.</para>
               <para>If the resolver returns a new <see cref="T:TagLib.File" />,
               it will instantly be returned, by <see
               cref="M:TagLib.File.Create(System.String)" />. If it returns <see 
               langword="null" />, <see cref="M:TagLib.File.Create(System.String)" /> will
               continue to process. If the resolver throws an exception
               it will be uncaught.</para>
               <para>To register a resolver, use <see
               cref="M:TagLib.File.AddFileTypeResolver(TagLib.File.FileTypeResolver)" />.</para>
            </remarks>
        </member>
        <member name="F:TagLib.File.file_stream">
            <summary>
               Contains the current stream used in reading/writing.
            </summary>
        </member>
        <member name="F:TagLib.File.file_abstraction">
            <summary>
               Contains the internal file abstraction.
            </summary>
        </member>
        <member name="F:TagLib.File.buffer_size">
            <summary>
               Contains buffer size to use when reading.
            </summary>
        </member>
        <member name="F:TagLib.File.file_type_resolvers">
            <summary>
               Contains the file type resolvers to use in <see
               cref="M:TagLib.File.Create(System.String)" />.
            </summary>
        </member>
        <member name="F:TagLib.File.corruption_reasons">
            <summary>
               The reasons (if any) why this file is marked as corrupt.
            </summary>
        </member>
        <member name="P:TagLib.File.BufferSize">
            <summary>
               The buffer size to use when reading large blocks of data
               in the <see cref="T:TagLib.File" /> class.
            </summary>
            <value>
               A <see cref="T:System.UInt32" /> containing the buffer size to use
               when reading large blocks of data.
            </value>
        </member>
        <member name="M:TagLib.File.#ctor(System.String)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.File" /> for a specified path in the local file
               system.
            </summary>
            <param name="path">
               A <see cref="T:System.String" /> object containing the path of the
               file to use in the new instance.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="path" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:TagLib.File.#ctor(TagLib.File.IFileAbstraction)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.File" /> for a specified file abstraction.
            </summary>
            <param name="abstraction">
               A <see cref="T:TagLib.File.IFileAbstraction" /> object to use when
               reading from and writing to the file.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="abstraction" /> is <see langword="null"
               />.
            </exception>
        </member>
        <member name="P:TagLib.File.Tag">
            <summary>
               Gets a abstract representation of all tags stored in the
               current instance.
            </summary>
            <value>
               A <see cref="T:TagLib.Tag" /> object representing all tags
               stored in the current instance.
            </value>
            <remarks>
               <para>This property provides generic and general access
               to the most common tagging features of a file. To access
               or add a specific type of tag in the file, use <see
               cref="M:TagLib.File.GetTag(TagLib.TagTypes,System.Boolean)" />.</para>
            </remarks>
        </member>
        <member name="P:TagLib.File.Properties">
            <summary>
               Gets the media properties of the file represented by the
               current instance.
            </summary>
            <value>
               A <see cref="T:TagLib.Properties" /> object containing the
               media properties of the file represented by the current
               instance.
            </value>
        </member>
        <member name="P:TagLib.File.TagTypesOnDisk">
            <summary>
               Gets the tag types contained in the physical file
               represented by the current instance.
            </summary>
            <value>
               A bitwise combined <see cref="T:TagLib.TagTypes" /> value
               containing the tag types stored in the physical file as
               it was read or last saved.
            </value>
        </member>
        <member name="P:TagLib.File.TagTypes">
            <summary>
               Gets the tag types contained in the current instance.
            </summary>
            <value>
               A bitwise combined <see cref="T:TagLib.TagTypes" /> value
               containing the tag types stored in the current instance.
            </value>
        </member>
        <member name="P:TagLib.File.Name">
            <summary>
               Gets the name of the file as stored in its file
               abstraction.
            </summary>
            <value>
               A <see cref="T:System.String" /> object containing the name of the
               file as stored in the <see cref="T:TagLib.File.IFileAbstraction" />
               object used to create it or the path if created with a
               local path.
            </value>
        </member>
        <member name="P:TagLib.File.MimeType">
            <summary>
               Gets the mime-type of the file as determined by <see
               cref="M:TagLib.File.Create(TagLib.File.IFileAbstraction,System.String,TagLib.ReadStyle)" /> if
               that method was used to create the current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> object containing the mime-type
               used to create the file or <see langword="null" /> if <see
               cref="M:TagLib.File.Create(TagLib.File.IFileAbstraction,System.String,TagLib.ReadStyle)" /> was
               not used to create the current instance.
            </value>
        </member>
        <member name="P:TagLib.File.Tell">
            <summary>
               Gets the seek position in the internal stream used by the
               current instance.
            </summary>
            <value>
               A <see cref="T:System.Int64" /> value representing the seek
               position, or 0 if the file is not open for reading.
            </value>
        </member>
        <member name="P:TagLib.File.Length">
            <summary>
               Gets the length of the file represented by the current
               instance.
            </summary>
            <value>
               A <see cref="T:System.Int64" /> value representing the size of the
               file, or 0 if the file is not open for reading.
            </value>
        </member>
        <member name="P:TagLib.File.InvariantStartPosition">
            <summary>
               Gets the position at which the invariant portion of the
               current instance begins.
            </summary>
            <value>
               A <see cref="T:System.Int64" /> value representing the seek
               position at which the file's invariant (media) data
               section begins. If the value could not be determined,
               <c>-1</c> is returned.
            </value>
        </member>
        <member name="P:TagLib.File.InvariantEndPosition">
            <summary>
               Gets the position at which the invariant portion of the
               current instance ends.
            </summary>
            <value>
               A <see cref="T:System.Int64" /> value representing the seek
               position at which the file's invariant (media) data
               section ends. If the value could not be determined,
               <c>-1</c> is returned.
            </value>
        </member>
        <member name="P:TagLib.File.Mode">
            <summary>
               Gets and sets the file access mode in use by the current
               instance.
            </summary>
            <value>
               A <see cref="T:TagLib.File.AccessMode" /> value describing the features
               of stream currently in use by the current instance.
            </value>
            <remarks>
               Changing the value will cause the stream currently in use
               to be closed, except when a change is made from <see
               cref="F:TagLib.File.AccessMode.Write" /> to <see cref="F:TagLib.File.AccessMode.Read"
               /> which has no effect.
            </remarks>
        </member>
        <member name="P:TagLib.File.FileAbstraction">
            <summary>
            Gets the <see cref="T:TagLib.File.IFileAbstraction"/> representing the file.
            </summary>
        </member>
        <member name="P:TagLib.File.Writeable">
            <summary>
               Indicates if tags can be written back to the current file or not
            </summary>
            <value>
               A <see cref="T:System.Boolean" /> which is true if tags can be written to the
               current file, otherwise false.
            </value>
        </member>
        <member name="P:TagLib.File.PossiblyCorrupt">
            <summary>
              Indicates whether or not this file may be corrupt.
            </summary>
            <value>
            <c>true</c> if possibly corrupt; otherwise, <c>false</c>.
            </value>
            <remarks>
               Files with unknown corruptions should not be written.
            </remarks>
        </member>
        <member name="P:TagLib.File.CorruptionReasons">
            <summary>
              The reasons for which this file is marked as corrupt.
            </summary>
        </member>
        <member name="M:TagLib.File.MarkAsCorrupt(System.String)">
            <summary>
               Mark the file as corrupt.
            </summary>
            <param name="reason">
               The reason why this file is considered to be corrupt.
            </param>
        </member>
        <member name="M:TagLib.File.Dispose">
            <summary>
               Dispose the current file. Equivalent to setting the
               mode to closed
            </summary>
        </member>
        <member name="M:TagLib.File.Save">
            <summary>
               Saves the changes made in the current instance to the
               file it represents.
            </summary>
        </member>
        <member name="M:TagLib.File.RemoveTags(TagLib.TagTypes)">
            <summary>
               Removes a set of tag types from the current instance.
            </summary>
            <param name="types">
               A bitwise combined <see cref="T:TagLib.TagTypes" /> value
               containing tag types to be removed from the file.
            </param>
            <remarks>
               In order to remove all tags from a file, pass <see
               cref="F:TagLib.TagTypes.AllTags" /> as <paramref name="types" />.
            </remarks>
        </member>
        <member name="M:TagLib.File.GetTag(TagLib.TagTypes,System.Boolean)">
             <summary>
                Gets a tag of a specified type from the current instance,
                optionally creating a new tag if possible.
             </summary>
             <param name="type">
                A <see cref="T:TagLib.TagTypes" /> value indicating the
                type of tag to read.
             </param>
             <param name="create">
                A <see cref="T:System.Boolean" /> value specifying whether or not to
                try and create the tag if one is not found.
             </param>
             <returns>
                A <see cref="P:TagLib.File.Tag" /> object containing the tag that was
                found in or added to the current instance. If no
                matching tag was found and none was created, <see
                langword="null" /> is returned.
             </returns>
             <remarks>
                <para>Passing <see langword="true" /> to <paramref
                name="create" /> does not guarantee the tag will be
                created. For example, trying to create an ID3v2 tag on an
                OGG Vorbis file will always fail.</para>
                <para>It is safe to assume that if <see langword="null"
                /> is not returned, the returned tag can be cast to the
                appropriate type.</para>
             </remarks>
             <example>
                <para>The following example sets the mood of a file to
                several tag types.</para>
                <code lang="C#">string [] SetMoods (TagLib.File file, params string[] moods)
            {
               TagLib.Id3v2.Tag id3 = file.GetTag (TagLib.TagTypes.Id3v2, true);
               if (id3 != null)
                  id3.SetTextFrame ("TMOO", moods);
               
               TagLib.Asf.Tag asf = file.GetTag (TagLib.TagTypes.Asf, true);
               if (asf != null)
                  asf.SetDescriptorStrings (moods, "WM/Mood", "Mood");
               
               TagLib.Ape.Tag ape = file.GetTag (TagLib.TagTypes.Ape);
               if (ape != null)
                  ape.SetValue ("MOOD", moods);
                  
               // Whatever tag types you want...
            }</code>
             </example>
        </member>
        <member name="M:TagLib.File.GetTag(TagLib.TagTypes)">
             <summary>
                Gets a tag of a specified type from the current instance.
             </summary>
             <param name="type">
                A <see cref="T:TagLib.TagTypes" /> value indicating the
                type of tag to read.
             </param>
             <returns>
                A <see cref="P:TagLib.File.Tag" /> object containing the tag that was
                found in the current instance. If no matching tag
                was found, <see langword="null" /> is returned.
             </returns>
             <remarks>
                <para>This class merely accesses the tag if it exists.
                <see cref="M:TagLib.File.GetTag(TagLib.TagTypes,System.Boolean)" /> provides the option
                of adding the tag to the current instance if it does not
                exist.</para>
                <para>It is safe to assume that if <see langword="null"
                /> is not returned, the returned tag can be cast to the
                appropriate type.</para>
             </remarks>
             <example>
                <para>The following example reads the mood of a file from
                several tag types.</para>
                <code lang="C#">static string [] GetMoods (TagLib.File file)
            {
               TagLib.Id3v2.Tag id3 = file.GetTag (TagLib.TagTypes.Id3v2);
               if (id3 != null) {
                  TextIdentificationFrame f = TextIdentificationFrame.Get (this, "TMOO");
                  if (f != null)
                     return f.FieldList.ToArray ();
               }
               
               TagLib.Asf.Tag asf = file.GetTag (TagLib.TagTypes.Asf);
               if (asf != null) {
                  string [] value = asf.GetDescriptorStrings ("WM/Mood", "Mood");
                  if (value.Length &gt; 0)
                     return value;
               }
               
               TagLib.Ape.Tag ape = file.GetTag (TagLib.TagTypes.Ape);
               if (ape != null) {
                  Item item = ape.GetItem ("MOOD");
                  if (item != null)
                     return item.ToStringArray ();
               }
                  
               // Whatever tag types you want...
               
               return new string [] {};
            }</code>
             </example>
        </member>
        <member name="M:TagLib.File.ReadBlock(System.Int32)">
            <summary>
               Reads a specified number of bytes at the current seek
               position from the current instance.
            </summary>
            <param name="length">
               A <see cref="T:System.Int32" /> value specifying the number of bytes
               to read.
            </param>
            <returns>
               A <see cref="T:TagLib.ByteVector" /> object containing the data
               read from the current instance.
            </returns>
            <remarks>
               <para>This method reads the block of data at the current
               seek position. To change the seek position, use <see
               cref="M:TagLib.File.Seek(System.Int64,System.IO.SeekOrigin)" />.</para>
            </remarks>
            <exception cref="T:System.ArgumentException">
               <paramref name="length" /> is less than zero.
            </exception>
        </member>
        <member name="M:TagLib.File.WriteBlock(TagLib.ByteVector)">
            <summary>
               Writes a block of data to the file represented by the
               current instance at the current seek position.
            </summary>
            <param name="data">
               A <see cref="T:TagLib.ByteVector" /> object containing data to be
               written to the current instance.
            </param>
            <remarks>
               This will overwrite any existing data at the seek
               position and append new data to the file if writing past
               the current end.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="data" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:TagLib.File.Find(TagLib.ByteVector,System.Int64,TagLib.ByteVector)">
            <summary>
               Searches forwards through a file for a specified
               pattern, starting at a specified offset.
            </summary>
            <param name="pattern">
               A <see cref="T:TagLib.ByteVector" /> object containing a pattern
               to search for in the current instance.
            </param>
            <param name="startPosition">
               A <see cref="T:System.Int32" /> value specifying at what
               seek position to start searching.
            </param>
            <param name="before">
               A <see cref="T:TagLib.ByteVector" /> object specifying a pattern
               that the searched for pattern must appear before. If this
               pattern is found first, -1 is returned.
            </param>
            <returns>
               A <see cref="T:System.Int64" /> value containing the index at which
               the value was found. If not found, -1 is returned.
            </returns>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="pattern" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:TagLib.File.Find(TagLib.ByteVector,System.Int64)">
            <summary>
               Searches forwards through a file for a specified
               pattern, starting at a specified offset.
            </summary>
            <param name="pattern">
               A <see cref="T:TagLib.ByteVector" /> object containing a pattern
               to search for in the current instance.
            </param>
            <param name="startPosition">
               A <see cref="T:System.Int32" /> value specifying at what
               seek position to start searching.
            </param>
            <returns>
               A <see cref="T:System.Int64" /> value containing the index at which
               the value was found. If not found, -1 is returned.
            </returns>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="pattern" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:TagLib.File.Find(TagLib.ByteVector)">
            <summary>
               Searches forwards through a file for a specified
               pattern, starting at the beginning of the file.
            </summary>
            <param name="pattern">
               A <see cref="T:TagLib.ByteVector" /> object containing a pattern
               to search for in the current instance.
            </param>
            <returns>
               A <see cref="T:System.Int64" /> value containing the index at which
               the value was found. If not found, -1 is returned.
            </returns>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="pattern" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:TagLib.File.RFind(TagLib.ByteVector,System.Int64,TagLib.ByteVector)">
            <summary>
               Searches backwards through a file for a specified
               pattern, starting at a specified offset.
            </summary>
            <param name="pattern">
               A <see cref="T:TagLib.ByteVector" /> object containing a pattern
               to search for in the current instance.
            </param>
            <param name="startPosition">
               A <see cref="T:System.Int32" /> value specifying at what
               seek position to start searching.
            </param>
            <param name="after">
               A <see cref="T:TagLib.ByteVector" /> object specifying a pattern
               that the searched for pattern must appear after. If this
               pattern is found first, -1 is returned.
            </param>
            <returns>
               A <see cref="T:System.Int64" /> value containing the index at which
               the value was found. If not found, -1 is returned.
            </returns>
            <remarks>
               Searching for <paramref name="after" /> is not yet
               implemented.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="pattern" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:TagLib.File.RFind(TagLib.ByteVector,System.Int64)">
            <summary>
               Searches backwards through a file for a specified
               pattern, starting at a specified offset.
            </summary>
            <param name="pattern">
               A <see cref="T:TagLib.ByteVector" /> object containing a pattern
               to search for in the current instance.
            </param>
            <param name="startPosition">
               A <see cref="T:System.Int32" /> value specifying at what
               seek position to start searching.
            </param>
            <returns>
               A <see cref="T:System.Int64" /> value containing the index at which
               the value was found. If not found, -1 is returned.
            </returns>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="pattern" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:TagLib.File.RFind(TagLib.ByteVector)">
            <summary>
               Searches backwards through a file for a specified
               pattern, starting at the end of the file.
            </summary>
            <param name="pattern">
               A <see cref="T:TagLib.ByteVector" /> object containing a pattern
               to search for in the current instance.
            </param>
            <returns>
               A <see cref="T:System.Int64" /> value containing the index at which
               the value was found. If not found, -1 is returned.
            </returns>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="pattern" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:TagLib.File.Insert(TagLib.ByteVector,System.Int64,System.Int64)">
            <summary>
               Inserts a specifed block of data into the file repesented
               by the current instance at a specified location,
               replacing a specified number of bytes.
            </summary>
            <param name="data">
               A <see cref="T:TagLib.ByteVector" /> object containing the data to
               insert into the file.
            </param>
            <param name="start">
               A <see cref="T:System.Int64" /> value specifying at which point to
               insert the data.
            </param>
            <param name="replace">
               A <see cref="T:System.Int64" /> value specifying the number of
               bytes to replace. Typically this is the original size of
               the data block so that a new block will replace the old
               one.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="data" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:TagLib.File.Insert(TagLib.ByteVector,System.Int64)">
            <summary>
               Inserts a specified block of data into the file repesented
               by the current instance at a specified location.
            </summary>
            <param name="data">
               A <see cref="T:TagLib.ByteVector" /> object containing the data to
               insert into the file.
            </param>
            <param name="start">
               A <see cref="T:System.Int64" /> value specifying at which point to
               insert the data.
            </param>
            <remarks>
               This method inserts a new block of data into the file. To
               replace an existing block, ie. replacing an existing
               tag with a new one of different size, use <see
               cref="M:TagLib.File.Insert(TagLib.ByteVector,System.Int64,System.Int64)" />.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="data" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:TagLib.File.Insert(System.Int64,System.Int64)">
            <summary>
              Inserts a specified block-size into the file repesented
              by the current instance at a specified location. Former
              data at this location is not overwriten and may then 
              contain random content.
            </summary>
            <param name="size">
              A <see cref="T:System.Int64" /> value specifying the size in bytes
              of the block to be inserted (reserved).
            </param>
            <param name="start">
               A <see cref="T:System.Int64" /> value specifying at which point to
               insert the data.
            </param>
            <remarks>
               This method is usefull to reserve some space in the file.
               To insert or replace defined data blocks, use <see
               cref="M:TagLib.File.Insert(TagLib.ByteVector,System.Int64)" /> or 
               <see cref="M:TagLib.File.Insert(TagLib.ByteVector,System.Int64,System.Int64)"/> 
            </remarks>
        </member>
        <member name="M:TagLib.File.RemoveBlock(System.Int64,System.Int64)">
            <summary>
               Removes a specified block of data from the file
               represented by the current instance.
            </summary>
            <param name="start">
               A <see cref="T:System.Int64" /> value specifying at which point to
               remove data.
            </param>
            <param name="length">
               A <see cref="T:System.Int64" /> value specifying the number of
               bytes to remove.
            </param>
        </member>
        <member name="M:TagLib.File.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
               Seeks the read/write pointer to a specified offset in the
               current instance, relative to a specified origin.
            </summary>
            <param name="offset">
               A <see cref="T:System.Int64" /> value indicating the byte offset to
               seek to.
            </param>
            <param name="origin">
               A <see cref="T:System.IO.SeekOrigin" /> value specifying an
               origin to seek from.
            </param>
        </member>
        <member name="M:TagLib.File.Seek(System.Int64)">
            <summary>
               Seeks the read/write pointer to a specified offset in the
               current instance, relative to the beginning of the file.
            </summary>
            <param name="offset">
               A <see cref="T:System.Int64" /> value indicating the byte offset to
               seek to.
            </param>
        </member>
        <member name="M:TagLib.File.Create(System.String)">
            <summary>
               Creates a new instance of a <see cref="T:TagLib.File" /> subclass
               for a specified path, guessing the mime-type from the
               file's extension and using the average read style.
            </summary>
            <param name="path">
               A <see cref="T:System.String" /> object specifying the file to
               read from and write to.
            </param>
            <returns>
               A new instance of <see cref="T:TagLib.File" /> as read from the
               specified path.
            </returns>
            <exception cref="T:TagLib.CorruptFileException">
               The file could not be read due to corruption.
            </exception>
            <exception cref="T:TagLib.UnsupportedFormatException">
               The file could not be read because the mime-type could
               not be resolved or the library does not support an
               internal feature of the file crucial to its reading.
            </exception>
        </member>
        <member name="M:TagLib.File.Create(TagLib.File.IFileAbstraction)">
            <summary>
               Creates a new instance of a <see cref="T:TagLib.File" /> subclass
               for a specified file abstraction, guessing the mime-type
               from the file's extension and using the average read
               style.
            </summary>
            <param name="abstraction">
               A <see cref="T:TagLib.File.IFileAbstraction" /> object to use when
               reading to and writing from the current instance.
            </param>
            <returns>
               A new instance of <see cref="T:TagLib.File" /> as read from the
               specified abstraction.
            </returns>
            <exception cref="T:TagLib.CorruptFileException">
               The file could not be read due to corruption.
            </exception>
            <exception cref="T:TagLib.UnsupportedFormatException">
               The file could not be read because the mime-type could
               not be resolved or the library does not support an
               internal feature of the file crucial to its reading.
            </exception>
        </member>
        <member name="M:TagLib.File.Create(System.String,TagLib.ReadStyle)">
            <summary>
               Creates a new instance of a <see cref="T:TagLib.File" /> subclass
               for a specified path and read style, guessing the
               mime-type from the file's extension.
            </summary>
            <param name="path">
               A <see cref="T:System.String" /> object specifying the file to
               read from and write to.
            </param>
            <param name="propertiesStyle">
               A <see cref="T:TagLib.ReadStyle" /> value specifying the level of
               detail to use when reading the media information from the
               new instance.
            </param>
            <returns>
               A new instance of <see cref="T:TagLib.File" /> as read from the
               specified path.
            </returns>
            <exception cref="T:TagLib.CorruptFileException">
               The file could not be read due to corruption.
            </exception>
            <exception cref="T:TagLib.UnsupportedFormatException">
               The file could not be read because the mime-type could
               not be resolved or the library does not support an
               internal feature of the file crucial to its reading.
            </exception>
        </member>
        <member name="M:TagLib.File.Create(TagLib.File.IFileAbstraction,TagLib.ReadStyle)">
            <summary>
               Creates a new instance of a <see cref="T:TagLib.File" /> subclass
               for a specified file abstraction and read style, guessing
               the mime-type from the file's extension.
            </summary>
            <param name="abstraction">
               A <see cref="T:TagLib.File.IFileAbstraction" /> object to use when
               reading to and writing from the current instance.
            </param>
            <param name="propertiesStyle">
               A <see cref="T:TagLib.ReadStyle" /> value specifying the level of
               detail to use when reading the media information from the
               new instance.
            </param>
            <returns>
               A new instance of <see cref="T:TagLib.File" /> as read from the
               specified abstraction.
            </returns>
            <exception cref="T:TagLib.CorruptFileException">
               The file could not be read due to corruption.
            </exception>
            <exception cref="T:TagLib.UnsupportedFormatException">
               The file could not be read because the mime-type could
               not be resolved or the library does not support an
               internal feature of the file crucial to its reading.
            </exception>
        </member>
        <member name="M:TagLib.File.Create(System.String,System.String,TagLib.ReadStyle)">
            <summary>
               Creates a new instance of a <see cref="T:TagLib.File" /> subclass
               for a specified path, mime-type, and read style.
            </summary>
            <param name="path">
               A <see cref="T:System.String" /> object specifying the file to
               read from and write to.
            </param>
            <param name="mimetype">
               A <see cref="T:System.String" /> object containing the mime-type
               to use when selecting the appropriate class to use, or
               <see langword="null" /> if the extension in <paramref
               name="path" /> is to be used.
            </param>
            <param name="propertiesStyle">
               A <see cref="T:TagLib.ReadStyle" /> value specifying the level of
               detail to use when reading the media information from the
               new instance.
            </param>
            <returns>
               A new instance of <see cref="T:TagLib.File" /> as read from the
               specified path.
            </returns>
            <exception cref="T:TagLib.CorruptFileException">
               The file could not be read due to corruption.
            </exception>
            <exception cref="T:TagLib.UnsupportedFormatException">
               The file could not be read because the mime-type could
               not be resolved or the library does not support an
               internal feature of the file crucial to its reading.
            </exception>
        </member>
        <member name="M:TagLib.File.Create(TagLib.File.IFileAbstraction,System.String,TagLib.ReadStyle)">
            <summary>
               Creates a new instance of a <see cref="T:TagLib.File" /> subclass
               for a specified file abstraction, mime-type, and read
               style.
            </summary>
            <param name="abstraction">
               A <see cref="T:TagLib.File.IFileAbstraction" /> object to use when
               reading to and writing from the current instance.
            </param>
            <param name="mimetype">
               A <see cref="T:System.String" /> object containing the mime-type
               to use when selecting the appropriate class to use, or
               <see langword="null" /> if the extension in <paramref
               name="abstraction" /> is to be used.
            </param>
            <param name="propertiesStyle">
               A <see cref="T:TagLib.ReadStyle" /> value specifying the level of
               detail to use when reading the media information from the
               new instance.
            </param>
            <returns>
               A new instance of <see cref="T:TagLib.File" /> as read from the
               specified abstraction.
            </returns>
            <exception cref="T:TagLib.CorruptFileException">
               The file could not be read due to corruption.
            </exception>
            <exception cref="T:TagLib.UnsupportedFormatException">
               The file could not be read because the mime-type could
               not be resolved or the library does not support an
               internal feature of the file crucial to its reading.
            </exception>
        </member>
        <member name="M:TagLib.File.AddFileTypeResolver(TagLib.File.FileTypeResolver)">
            <summary>
               Adds a <see cref="T:TagLib.File.FileTypeResolver" /> to the <see
               cref="T:TagLib.File" /> class. The one added last gets run first.
            </summary>
            <param name="resolver">
               A <see cref="T:TagLib.File.FileTypeResolver" /> delegate to add to the
               file type recognition stack.
            </param>
            <remarks>
               A <see cref="T:TagLib.File.FileTypeResolver" /> adds support for 
               recognizing a file type outside of the standard mime-type
               methods.
            </remarks>
        </member>
        <member name="M:TagLib.File.PreSave">
            <summary>
               Prepare to Save the file. Thismust be called at the begining 
               of every File.Save() method.
            </summary>
        </member>
        <member name="M:TagLib.File.Insert(TagLib.ByteVector,System.Int64,System.Int64,System.Int64)">
            <summary>
               Inserts a specified block into the file repesented
               by the current instance at a specified location.
            </summary>
            <param name="data">
               A <see cref="T:TagLib.ByteVector" /> object containing the data to
               insert into the file. if null, no data is writen to the
               file and the block is just inserted without overwriting the 
               former data at the given location.
            </param>
            <param name="size">
               A <see cref="T:System.Int64" /> value specifying the size of the block
               to be inserted.
            </param>
            <param name="start">
               A <see cref="T:System.Int64" /> value specifying at which point to
               insert the data.
            </param>
            <param name="replace">
               A <see cref="T:System.Int64" /> value specifying the number of
               bytes to replace. Typically this is the original size of
               the data block so that a new block will replace the old
               one.
            </param>
            <remarks>
               This method inserts a new block of data into the file. To
               replace an existing block, ie. replacing an existing
               tag with a new one of different size, use <see
               cref="M:TagLib.File.Insert(TagLib.ByteVector,System.Int64,System.Int64)" />.
            </remarks>
        </member>
        <member name="M:TagLib.File.Truncate(System.Int64)">
            <summary>
               Resized the current instance to a specified number of
               bytes.
            </summary>
            <param name="length">
               A <see cref="T:System.Int64" /> value specifying the number of
               bytes to resize the file to.
            </param>
        </member>
        <member name="M:TagLib.File.PrepareExceptionForRethrow(System.Exception)">
            <summary>
            Causes the original strack trace of the exception to be preserved when it is rethrown
            </summary>
            <param name="ex"></param>
        </member>
        <member name="T:TagLib.File.LocalFileAbstraction">
            <summary>
               This class implements <see cref="T:TagLib.File.IFileAbstraction" />
               to provide support for accessing the local/standard file
               system.
            </summary>
            <remarks>
               This class is used as the standard file abstraction
               throughout the library.
            </remarks>
        </member>
        <member name="F:TagLib.File.LocalFileAbstraction.name">
            <summary>
               Contains the name used to open the file.
            </summary>
        </member>
        <member name="M:TagLib.File.LocalFileAbstraction.#ctor(System.String)">
            <summary>
               Constructs and initializes a new instance of
               <see cref="T:TagLib.File.LocalFileAbstraction" /> for a
               specified path in the local file system.
            </summary>
            <param name="path">
               A <see cref="T:System.String" /> object containing the
               path of the file to use in the new instance.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="path" /> is <see langword="null"
               />.
            </exception>
        </member>
        <member name="P:TagLib.File.LocalFileAbstraction.Name">
            <summary>
               Gets the path of the file represented by the
               current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> object containing the
               path of the file represented by the current
               instance.
            </value>
        </member>
        <member name="P:TagLib.File.LocalFileAbstraction.ReadStream">
            <summary>
               Gets a new readable, seekable stream from the
               file represented by the current instance.
            </summary>
            <value>
               A new <see cref="T:System.IO.Stream" /> to be used
               when reading the file represented by the current
               instance.
            </value>
        </member>
        <member name="P:TagLib.File.LocalFileAbstraction.WriteStream">
            <summary>
               Gets a new writable, seekable stream from the
               file represented by the current instance.
            </summary>
            <value>
               A new <see cref="T:System.IO.Stream" /> to be used
               when writing to the file represented by the
               current instance.
            </value>
        </member>
        <member name="M:TagLib.File.LocalFileAbstraction.CloseStream(System.IO.Stream)">
            <summary>
               Closes a stream created by the current instance.
            </summary>
            <param name="stream">
               A <see cref="T:System.IO.Stream" /> object
               created by the current instance.
            </param>
        </member>
        <member name="T:TagLib.File.IFileAbstraction">
             <summary>
                This interface provides abstracted access to a file. It
                premits access to non-standard file systems and data
                retrieval methods.
             </summary>
             <remarks>
                <para>To use a custom abstraction, use <see
                cref="M:TagLib.File.Create(TagLib.File.IFileAbstraction)" /> instead of <see
                cref="M:TagLib.File.Create(System.String)" /> when creating files.</para>
             </remarks>
             <example>
                <para>The following example uses Gnome VFS to open a file
                and read its title.</para>
             <code lang="C#">using TagLib;
            using Gnome.Vfs;
            
            public class ReadTitle
            {
               public static void Main (string [] args)
               {
                  if (args.Length != 1)
                     return;
            
                  Gnome.Vfs.Vfs.Initialize ();
                  
                  try {
                      TagLib.File file = TagLib.File.Create (
                         new VfsFileAbstraction (args [0]));
                      System.Console.WriteLine (file.Tag.Title);
                  } finally {
                     Vfs.Shutdown()
                  }
               }
            }
            
            public class VfsFileAbstraction : TagLib.File.IFileAbstraction
            {
                private string name;
            
                public VfsFileAbstraction (string file)
                {
                    name = file;
                }
            
                public string Name {
                    get { return name; }
                }
            
                public System.IO.Stream ReadStream {
                    get { return new VfsStream(Name, System.IO.FileMode.Open); }
                }
            
                public System.IO.Stream WriteStream {
                    get { return new VfsStream(Name, System.IO.FileMode.Open); }
                }
            
                public void CloseStream (System.IO.Stream stream)
                {
                    stream.Close ();
                }
            }</code>
                <code lang="Boo">import TagLib from "taglib-sharp.dll"
            import Gnome.Vfs from "gnome-vfs-sharp"
            
            class VfsFileAbstraction (TagLib.File.IFileAbstraction):
                    
                    _name as string
                    
                    def constructor(file as string):
                            _name = file
                    
                    Name:
                            get:
                                    return _name
                            
                    ReadStream:
                            get:
                                    return VfsStream(_name, FileMode.Open)
                            
                    WriteStream:
                            get:
                                    return VfsStream(_name, FileMode.Open)
                    
            if len(argv) == 1:
                    Vfs.Initialize()
            
                    try:
                            file as TagLib.File = TagLib.File.Create (VfsFileAbstraction (argv[0]))
                            print file.Tag.Title
                    ensure:
                            Vfs.Shutdown()</code>
             </example>
        </member>
        <member name="P:TagLib.File.IFileAbstraction.Name">
            <summary>
               Gets the name or identifier used by the
               implementation.
            </summary>
            <value>
               A <see cref="T:System.String" /> object containing the 
               name or identifier used by the implementation.
            </value>
            <remarks>
               This value would typically represent a path or
               URL to be used when identifying the file in the
               file system, but it could be any value
               as appropriate for the implementation.
            </remarks>
        </member>
        <member name="P:TagLib.File.IFileAbstraction.ReadStream">
            <summary>
               Gets a readable, seekable stream for the file
               referenced by the current instance.
            </summary>
            <value>
               A <see cref="T:System.IO.Stream" /> object to be
               used when reading a file.
            </value>
            <remarks>
               This property is typically used when creating
               constructing an instance of <see cref="T:TagLib.File" />.
               Upon completion of the constructor, <see
               cref="M:TagLib.File.IFileAbstraction.CloseStream(System.IO.Stream)" /> will be called to close
               the stream. If the stream is to be reused after
               this point, <see cref="M:TagLib.File.IFileAbstraction.CloseStream(System.IO.Stream)" /> should be
               implemented in a way to keep it open.
            </remarks>
        </member>
        <member name="P:TagLib.File.IFileAbstraction.WriteStream">
            <summary>
               Gets a writable, seekable stream for the file
               referenced by the current instance.
            </summary>
            <value>
               A <see cref="T:System.IO.Stream" /> object to be
               used when writing to a file.
            </value>
            <remarks>
               This property is typically used when saving a
               file with <see cref="M:TagLib.File.Save" />. Upon completion of
               the method, <see cref="M:TagLib.File.IFileAbstraction.CloseStream(System.IO.Stream)" /> will be
               called to close the stream. If the stream is to
               be reused after this point, <see
               cref="M:TagLib.File.IFileAbstraction.CloseStream(System.IO.Stream)" /> should be implemented in a
               way to keep it open.
            </remarks>
        </member>
        <member name="M:TagLib.File.IFileAbstraction.CloseStream(System.IO.Stream)">
            <summary>
               Closes a stream originating from the current
               instance.
            </summary>
            <param name="stream">
               A <see cref="T:System.IO.Stream" /> object
               originating from the current instance.
            </param>
            <remarks>
               If the stream is to be used outside of the scope,
               of TagLib#, this method should perform no action.
               For example, a stream that was created outside of
               the current instance, or a stream that will
               subsequently be used to play the file.
            </remarks>
        </member>
        <member name="T:TagLib.FileTypes">
            <summary>
               This static class provides a mechanism for registering file
               classes and mime-types, to be used when constructing a class via
               <see cref="M:TagLib.File.Create(System.String)" />.
            </summary>
            <remarks>
               <para>The default types built into the taglib-sharp.dll assembly
               are registered automatically when the class is initialized. To
               register your own custom types, use <see cref="M:TagLib.FileTypes.Register(System.Type)"
               />.</para>
            </remarks>
            <seealso cref="T:TagLib.SupportedMimeType" />
        </member>
        <member name="F:TagLib.FileTypes.file_types">
            <summary>
               Contains a mapping between mime-types and the <see
               cref="T:TagLib.File" /> subclasses that support them.
            </summary>
        </member>
        <member name="F:TagLib.FileTypes.static_file_types">
            <summary>
               Contains a static array of file types contained in the
               TagLib# assembly.
            </summary>
            <remarks>
               A static Type array is used instead of getting types by
               reflecting the executing assembly as Assembly.GetTypes is
               very inefficient and leaks every type instance under
               Mono. Not reflecting taglib-sharp.dll saves about 120KB
               of heap.
            </remarks>
        </member>
        <member name="M:TagLib.FileTypes.#cctor">
            <summary>
               Constructs and initializes the <see cref="T:TagLib.FileTypes" />
               class by registering the default types.
            </summary>
        </member>
        <member name="M:TagLib.FileTypes.Init">
            <summary>
               Initializes the class by registering the default types.
            </summary>
        </member>
        <member name="M:TagLib.FileTypes.Register(System.Type)">
            <summary>
               Registers a <see cref="T:TagLib.File" /> subclass to be used when
               creating files via <see cref="M:TagLib.File.Create(System.String)" />.
            </summary>
            <param name="type">
               A <see cref="T:System.Type" /> object for the class to register.
            </param>
            <remarks>
               In order to register mime-types, the class represented by
               <paramref name="type" /> should use the <see
               cref="T:TagLib.SupportedMimeType" /> custom attribute.
            </remarks>
        </member>
        <member name="P:TagLib.FileTypes.AvailableTypes">
            <summary>
               Gets a dictionary containing all the supported mime-types
               and file classes used by <see cref="M:TagLib.File.Create(System.String)"
               />.
            </summary>
            <value>
               A <see cref="T:System.Collections.Generic.IDictionary`2" /> object containing the
               supported mime-types.
            </value>
        </member>
        <member name="T:TagLib.Flac.Block">
            <summary>
               This class represents a Flac metadata block.
            </summary>
        </member>
        <member name="F:TagLib.Flac.Block.header">
            <summary>
               Contains the block header.
            </summary>
        </member>
        <member name="M:TagLib.Flac.Block.#ctor(TagLib.Flac.BlockHeader,TagLib.ByteVector)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Flac.Block" /> with a specified header and internal
               data.
            </summary>
            <param name="header">
               A <see cref="T:TagLib.Flac.BlockHeader" /> object containing the
               header to use for the new instance.
            </param>
            <param name="data">
               A <see cref="T:TagLib.ByteVector" /> object containing the data
               to be contained in the new instance.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="data" /> is <see langword="null" />.
            </exception>
            <exception cref="T:TagLib.CorruptFileException">
               The size of <paramref name="data" /> does not match the
               size specified in <paramref name="header" />.
            </exception>
        </member>
        <member name="M:TagLib.Flac.Block.#ctor(TagLib.Flac.BlockType,TagLib.ByteVector)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Flac.Block" /> with of a specified type and internal
               data.
            </summary>
            <param name="type">
               A <see cref="T:TagLib.Flac.BlockType" /> value indicating the type of
               data stored in <paramref name="data" />.
            </param>
            <param name="data">
               A <see cref="T:TagLib.ByteVector" /> object containing the data
               to be contained in the new instance.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="data" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="P:TagLib.Flac.Block.Type">
            <summary>
               Gets the type of data contained in the current instance.
            </summary>
            <value>
               A <see cref="T:TagLib.Flac.BlockType" /> value indicating the type of
               data contained in <see cref="P:TagLib.Flac.Block.Data" />.
            </value>
        </member>
        <member name="P:TagLib.Flac.Block.IsLastBlock">
            <summary>
               Gets whether or not the block represented by the current
               instance is the last metadata block in the Flac stream.
            </summary>
            <value>
               <see langword="true" /> if the block represented by the
               current instance was the last one to appear in the file
               and is followed immediately by the audio data, or <see
               langword="false" /> if another block appears after the
               current one or the block was not read from disk.
            </value>
        </member>
        <member name="P:TagLib.Flac.Block.DataSize">
            <summary>
               Gets the size of the data contained in the current
               instance.
            </summary>
        </member>
        <member name="P:TagLib.Flac.Block.TotalSize">
            <summary>
               Gets the total size of the block represented by the
               current instance as it appears on disk.
            </summary>
        </member>
        <member name="P:TagLib.Flac.Block.Data">
            <summary>
               Gets the data contained in the current instance.
            </summary>
            <value>
               A <see cref="T:TagLib.ByteVector" /> object containing the data
               stored in the current instance.
            </value>
        </member>
        <member name="M:TagLib.Flac.Block.Render(System.Boolean)">
            <summary>
               Renders the current instance as a raw Flac metadata
               block.
            </summary>
            <param name="isLastBlock">
               A <see cref="T:System.Boolean" /> value indicating whether or not the
               block is to be marked as the last metadata block.
            </param>
            <returns>
               A <see cref="T:TagLib.ByteVector" /> object containing the
               rendered version of the current instance.
            </returns>
        </member>
        <member name="T:TagLib.Flac.BlockType">
            <summary>
               Specifies the contents of a Flac block in <see cref="T:TagLib.Flac.BlockHeader"
               />.
            </summary>
        </member>
        <member name="F:TagLib.Flac.BlockType.StreamInfo">
            <summary>
               The block contains stream information.
            </summary>
        </member>
        <member name="F:TagLib.Flac.BlockType.Padding">
            <summary>
               The block contains padding.
            </summary>
        </member>
        <member name="F:TagLib.Flac.BlockType.Application">
            <summary>
               The block contains application data.
            </summary>
        </member>
        <member name="F:TagLib.Flac.BlockType.SeekTable">
            <summary>
               The block contains seek table.
            </summary>
        </member>
        <member name="F:TagLib.Flac.BlockType.XiphComment">
            <summary>
               The block contains a Xipp comment.
            </summary>
        </member>
        <member name="F:TagLib.Flac.BlockType.CueSheet">
            <summary>
               The block contains a cue sheet.
            </summary>
        </member>
        <member name="F:TagLib.Flac.BlockType.Picture">
            <summary>
               The block contains a picture.
            </summary>
        </member>
        <member name="T:TagLib.Flac.BlockHeader">
            <summary>
               This structure provides a representation of a Flac metadata block
               header structure.
            </summary>
        </member>
        <member name="F:TagLib.Flac.BlockHeader.Size">
            <summary>
               The size of a block header.
            </summary>
        </member>
        <member name="M:TagLib.Flac.BlockHeader.#ctor(TagLib.ByteVector)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Flac.BlockHeader" /> by reading a raw header from a <see
               cref="T:TagLib.ByteVector" /> object.
            </summary>
            <param name="data">
               A <see cref="T:TagLib.ByteVector" /> object containing a raw
               block header.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="data" /> is <see langword="null" />.
            </exception>
            <exception cref="T:TagLib.CorruptFileException">
               <paramref name="data" /> contains less than 4 bytes.
            </exception>
        </member>
        <member name="M:TagLib.Flac.BlockHeader.#ctor(TagLib.Flac.BlockType,System.UInt32)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Flac.BlockHeader" /> for a specified block type and size.
            </summary>
            <param name="type">
               A <see cref="P:TagLib.Flac.BlockHeader.BlockType" /> value describing the contents
               of the block.
            </param>
            <param name="blockSize">
               A <see cref="T:System.UInt32" /> value containing the block data
               size minus the size of the header.
            </param>
        </member>
        <member name="M:TagLib.Flac.BlockHeader.Render(System.Boolean)">
            <summary>
               Renderes the current instance as a raw Flac block header.
            </summary>
            <param name="isLastBlock">
               A <see cref="T:System.Boolean" /> value specifying whether or not the
               header is the last header of the file.
            </param>
            <returns>
               A <see cref="T:TagLib.ByteVector" /> object containing the
               rendered header.
            </returns>
        </member>
        <member name="P:TagLib.Flac.BlockHeader.BlockType">
            <summary>
               Gets the type of block described by the current instance.
            </summary>
            <value>
               A <see cref="P:TagLib.Flac.BlockHeader.BlockType" /> value describing the block
               type.
            </value>
        </member>
        <member name="P:TagLib.Flac.BlockHeader.IsLastBlock">
            <summary>
               Gets whether or not the block is the last in the file.
            </summary>
            <value>
               <see langword="true" /> if the block is the last in the
               file; otherwise <see langword="false" />.
            </value>
        </member>
        <member name="P:TagLib.Flac.BlockHeader.BlockSize">
            <summary>
               Gets the size of the block described by the current
               instance, minus the block header.
            </summary>
            <value>
               A <see cref="T:System.UInt32" /> value containing the size of the
               block, minus the header.
            </value>
        </member>
        <member name="T:TagLib.Flac.File">
            <summary>
               This class extends <see cref="T:TagLib.NonContainer.File" /> to
               provide tagging and properties support for Xiph's Flac audio
               files.
            </summary>
            <remarks>
               A <see cref="T:TagLib.Ogg.XiphComment" /> will be added
               automatically to any file that doesn't contain one. This change
               does not effect the physical file until <see cref="M:TagLib.Flac.File.Save" /> is
               called and can be reversed using the following method:
               <code>file.RemoveTags (file.TagTypes &amp; ~file.TagTypesOnDisk);</code>
            </remarks>
        </member>
        <member name="F:TagLib.Flac.File.metadata">
            <summary>
               Contains the Flac metadata tag.
            </summary>
        </member>
        <member name="F:TagLib.Flac.File.tag">
            <summary>
               Contains the combination of all file tags.
            </summary>
        </member>
        <member name="F:TagLib.Flac.File.header_block">
            <summary>
               Contains the Flac header block.
            </summary>
        </member>
        <member name="F:TagLib.Flac.File.stream_start">
            <summary>
               Contains the stream start position.
            </summary>
        </member>
        <member name="M:TagLib.Flac.File.#ctor(System.String,TagLib.ReadStyle)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Flac.File" /> for a specified path in the local file
               system and specified read style.
            </summary>
            <param name="path">
               A <see cref="T:System.String" /> object containing the path of the
               file to use in the new instance.
            </param>
            <param name="propertiesStyle">
               A <see cref="T:TagLib.ReadStyle" /> value specifying at what level
               of accuracy to read the media properties, or <see
               cref="F:TagLib.ReadStyle.None" /> to ignore the properties.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="path" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:TagLib.Flac.File.#ctor(System.String)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Flac.File" /> for a specified path in the local file
               system with an average read style.
            </summary>
            <param name="path">
               A <see cref="T:System.String" /> object containing the path of the
               file to use in the new instance.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="path" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:TagLib.Flac.File.#ctor(TagLib.File.IFileAbstraction,TagLib.ReadStyle)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Flac.File" /> for a specified file abstraction and
               specified read style.
            </summary>
            <param name="abstraction">
               A <see cref="T:TagLib.File.IFileAbstraction" /> object to use when
               reading from and writing to the file.
            </param>
            <param name="propertiesStyle">
               A <see cref="T:TagLib.ReadStyle" /> value specifying at what level
               of accuracy to read the media properties, or <see
               cref="F:TagLib.ReadStyle.None" /> to ignore the properties.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="abstraction" /> is <see langword="null"
               />.
            </exception>
        </member>
        <member name="M:TagLib.Flac.File.#ctor(TagLib.File.IFileAbstraction)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Flac.File" /> for a specified file abstraction with an
               average read style.
            </summary>
            <param name="abstraction">
               A <see cref="T:TagLib.File.IFileAbstraction" /> object to use when
               reading from and writing to the file.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="abstraction" /> is <see langword="null"
               />.
            </exception>
        </member>
        <member name="P:TagLib.Flac.File.Tag">
            <summary>
               Gets a abstract representation of all tags stored in the
               current instance.
            </summary>
            <value>
               A <see cref="T:TagLib.Tag" /> object representing all tags
               stored in the current instance.
            </value>
        </member>
        <member name="M:TagLib.Flac.File.Save">
            <summary>
               Saves the changes made in the current instance to the
               file it represents.
            </summary>
        </member>
        <member name="M:TagLib.Flac.File.GetTag(TagLib.TagTypes,System.Boolean)">
            <summary>
               Gets a tag of a specified type from the current instance,
               optionally creating a new tag if possible.
            </summary>
            <param name="type">
               A <see cref="T:TagLib.TagTypes" /> value indicating the
               type of tag to read.
            </param>
            <param name="create">
               A <see cref="T:System.Boolean" /> value specifying whether or not to
               try and create the tag if one is not found.
            </param>
            <returns>
               A <see cref="P:TagLib.Flac.File.Tag" /> object containing the tag that was
               found in or added to the current instance. If no
               matching tag was found and none was created, <see
               langword="null" /> is returned.
            </returns>
        </member>
        <member name="M:TagLib.Flac.File.RemoveTags(TagLib.TagTypes)">
            <summary>
               Removes a set of tag types from the current instance.
            </summary>
            <param name="types">
               A bitwise combined <see cref="T:TagLib.TagTypes" /> value
               containing tag types to be removed from the file.
            </param>
            <remarks>
               In order to remove all tags from a file, pass <see
               cref="F:TagLib.TagTypes.AllTags" /> as <paramref name="types" />.
            </remarks>
        </member>
        <member name="M:TagLib.Flac.File.ReadStart(System.Int64,TagLib.ReadStyle)">
            <summary>
               Reads format specific information at the start of the
               file.
            </summary>
            <param name="start">
               A <see cref="T:System.Int64" /> value containing the seek position
               at which the tags end and the media data begins.
            </param>
            <param name="propertiesStyle">
               A <see cref="T:TagLib.ReadStyle" /> value specifying at what level
               of accuracy to read the media properties, or <see
               cref="F:TagLib.ReadStyle.None" /> to ignore the properties.
            </param>
        </member>
        <member name="M:TagLib.Flac.File.ReadEnd(System.Int64,TagLib.ReadStyle)">
            <summary>
               Reads format specific information at the end of the
               file.
            </summary>
            <param name="end">
               A <see cref="T:System.Int64" /> value containing the seek position
               at which the media data ends and the tags begin.
            </param>
            <param name="propertiesStyle">
               A <see cref="T:TagLib.ReadStyle" /> value specifying at what level
               of accuracy to read the media properties, or <see
               cref="F:TagLib.ReadStyle.None" /> to ignore the properties.
            </param>
        </member>
        <member name="M:TagLib.Flac.File.ReadProperties(System.Int64,System.Int64,TagLib.ReadStyle)">
            <summary>
               Reads the audio properties from the file represented by
               the current instance.
            </summary>
            <param name="start">
               A <see cref="T:System.Int64" /> value containing the seek position
               at which the tags end and the media data begins.
            </param>
            <param name="end">
               A <see cref="T:System.Int64" /> value containing the seek position
               at which the media data ends and the tags begin.
            </param>
            <param name="propertiesStyle">
               A <see cref="T:TagLib.ReadStyle" /> value specifying at what level
               of accuracy to read the media properties, or <see
               cref="F:TagLib.ReadStyle.None" /> to ignore the properties.
            </param>
            <returns>
               A <see cref="T:TagLib.Properties" /> object describing the
               media properties of the file represented by the current
               instance.
            </returns>
        </member>
        <member name="T:TagLib.Flac.File.BlockMode">
            <summary>
               Indicates whether or not the block types passed into
               <see cref="M:TagLib.Flac.File.ReadBlocks(System.Int64@,System.Int64@,TagLib.Flac.File.BlockMode,TagLib.Flac.BlockType[])" /> are to be white-listed or
               black-listed.
            </summary>
        </member>
        <member name="F:TagLib.Flac.File.BlockMode.Blacklist">
            <summary>
               All block types except those provided are to be
               returned.
            </summary>
        </member>
        <member name="F:TagLib.Flac.File.BlockMode.Whitelist">
            <summary>
               Only those block types provides should be
               returned.
            </summary>
        </member>
        <member name="M:TagLib.Flac.File.ReadBlocks(System.Int64@,System.Int64@,TagLib.Flac.File.BlockMode,TagLib.Flac.BlockType[])">
            <summary>
               Reads all metadata blocks starting from the current
               instance, starting at a specified position.
            </summary>
            <param name="start">
               A <see cref="T:System.Int64" /> value reference specifying the
               position at which to start searching for the blocks. This
               will be updated to the position of the first block.
            </param>
            <param name="end">
               A <see cref="T:System.Int64" /> value reference updated to the
               position at which the last block ends.
            </param>
            <param name="mode">
               A <see cref="T:TagLib.Flac.File.BlockMode" /> value indicating whether to
               white-list or black-list the contents of <paramref
               name="types" />.
            </param>
            <param name="types">
               A <see cref="T:BlockType[]" /> containing the types to look
               for or not look for as specified by <paramref name="mode"
               />.
            </param>
            <returns>
               A <see cref="T:System.Collections.Generic.IList`1" /> object containing the blocks
               read from the current instance.
            </returns>
            <exception cref="T:TagLib.CorruptFileException">
               "<c>fLaC</c>" could not be found.
            </exception>
        </member>
        <member name="T:TagLib.Flac.Metadata">
            <summary>
               This class extends <see cref="T:TagLib.CombinedTag" /> to provide support
               for reading and writing FLAC metadata boxes.
            </summary>
            <remarks>
               At this point, only Xiph Comments and pictures are supported.
            </remarks>
        </member>
        <member name="F:TagLib.Flac.Metadata.pictures">
            <summary>
               Contains the pictures.
            </summary>
        </member>
        <member name="M:TagLib.Flac.Metadata.#ctor(System.Collections.Generic.List{TagLib.Flac.Block})">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Flac.Metadata" /> using a collection of blocks.
            </summary>
            <param name="blocks">
               A <see cref="T:System.Collections.Generic.List`1" /> object containing <see
               cref="T:TagLib.Flac.Block" /> objects to use in the new instance.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="blocks" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:TagLib.Flac.Metadata.#ctor(System.Collections.Generic.IEnumerable{TagLib.Flac.Block})">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Flac.Metadata" /> using a collection of blocks.
            </summary>
            <param name="blocks">
               A <see cref="T:System.Collections.Generic.IEnumerable`1" /> object enumerating <see
               cref="T:TagLib.Flac.Block" /> objects to use in the new instance.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="blocks" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:TagLib.Flac.Metadata.GetComment(System.Boolean,TagLib.Tag)">
            <summary>
               Gets the first Xiph comment stored in the current
               instance, optionally creating one if necessary.
            </summary>
            <param name="create">
               A <see cref="T:System.Boolean" /> value indicating whether or not a
               comment should be added if one cannot be found.
            </param>
            <param name="copy">
               A <see cref="T:TagLib.Tag" /> object containing the source tag to
               copy the values from, or <see langword="null" /> to not
               copy values.
            </param>
            <returns>
               A <see cref="T:TagLib.Ogg.XiphComment" /> object containing the
               tag that was found in or added to the current instance.
               If no matching tag was found and none was created, <see
               langword="null" /> is returned.
            </returns>
        </member>
        <member name="M:TagLib.Flac.Metadata.RemoveComment">
            <summary>
               Removes all child Xiph Comments from the current
               instance.
            </summary>
        </member>
        <member name="P:TagLib.Flac.Metadata.TagTypes">
            <summary>
               Gets the tag types contained in the current instance.
            </summary>
            <value>
               A bitwise combined <see cref="T:TagLib.TagTypes" /> value
               containing the tag types stored in the current instance.
            </value>
        </member>
        <member name="P:TagLib.Flac.Metadata.Pictures">
            <summary>
               Gets and sets a collection of pictures associated with
               the media represented by the current instance.
            </summary>
            <value>
               A <see cref="T:IPicture[]" /> containing a collection of
               pictures associated with the media represented by the
               current instance or an empty array if none are present.
            </value>
        </member>
        <member name="M:TagLib.Flac.Metadata.Clear">
            <summary>
               Clears the values stored in the current instance.
            </summary>
        </member>
        <member name="T:TagLib.Flac.Picture">
            <summary>
               This class implements <see cref="T:TagLib.IPicture" /> to provide support
               for reading and writing Flac picture metadata.
            </summary>
        </member>
        <member name="M:TagLib.Flac.Picture.#ctor(TagLib.ByteVector)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Flac.Picture" /> by reading the contents of a raw Flac
               image structure.
            </summary>
            <param name="data">
               A <see cref="T:TagLib.ByteVector" /> object containing the raw
               Flac image.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="data" /> is <see langword="null" />.
            </exception>
            <exception cref="T:TagLib.CorruptFileException">
               <paramref name="data" /> contains less than 32 bytes.
            </exception>
        </member>
        <member name="M:TagLib.Flac.Picture.#ctor(TagLib.IPicture)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Flac.Picture" /> by copying the properties of a <see
               cref="T:TagLib.IPicture" /> object.
            </summary>
            <param name="picture">
               A <see cref="T:TagLib.IPicture" /> object to use for the new
               instance.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="picture" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:TagLib.Flac.Picture.Render">
            <summary>
               Renders the current instance as a raw Flac picture.
            </summary>
            <returns>
               A <see cref="T:TagLib.ByteVector" /> object containing the
               rendered version of the current instance.
            </returns>
        </member>
        <member name="P:TagLib.Flac.Picture.MimeType">
            <summary>
               Gets and sets the mime-type of the picture data
               stored in the current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> object containing the mime-type
               of the picture data stored in the current instance.
            </value>
        </member>
        <member name="P:TagLib.Flac.Picture.Type">
            <summary>
               Gets and sets the type of content visible in the picture
               stored in the current instance.
            </summary>
            <value>
               A <see cref="T:TagLib.PictureType" /> containing the type of
               content visible in the picture stored in the current
               instance.
            </value>
        </member>
        <member name="P:TagLib.Flac.Picture.Filename">
            <summary>
               Gets and sets a filename of the picture stored in the
               current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> object containing a fielname, with
               extension, of the picture stored in the current instance.
            </value>
        </member>
        <member name="P:TagLib.Flac.Picture.Description">
            <summary>
               Gets and sets a description of the picture stored in the
               current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> object containing a description
               of the picture stored in the current instance.
            </value>
        </member>
        <member name="P:TagLib.Flac.Picture.Data">
            <summary>
               Gets and sets the picture data stored in the current
               instance.
            </summary>
            <value>
               A <see cref="T:TagLib.ByteVector" /> object containing the picture
               data stored in the current instance.
            </value>
        </member>
        <member name="P:TagLib.Flac.Picture.Width">
            <summary>
               Gets and sets the width of the picture in the current
               instance.
            </summary>
            <value>
               A <see cref="T:System.Int32" /> value containing width of the
               picture stored in the current instance.
            </value>
        </member>
        <member name="P:TagLib.Flac.Picture.Height">
            <summary>
               Gets and sets the height of the picture in the current
               instance.
            </summary>
            <value>
               A <see cref="T:System.Int32" /> value containing height of the
               picture stored in the current instance.
            </value>
        </member>
        <member name="P:TagLib.Flac.Picture.ColorDepth">
            <summary>
               Gets and sets the color depth of the picture in the
               current instance.
            </summary>
            <value>
               A <see cref="T:System.Int32" /> value containing color depth of the
               picture stored in the current instance.
            </value>
        </member>
        <member name="P:TagLib.Flac.Picture.IndexedColors">
            <summary>
               Gets and sets the number of indexed colors in the picture
               in the current instance.
            </summary>
            <value>
               A <see cref="T:System.Int32" /> value containing number of indexed
               colors in the picture, or zero if the picture is not
               stored in an indexed format.
            </value>
        </member>
        <member name="T:TagLib.Flac.StreamHeader">
            <summary>
               This structure implements <see cref="T:TagLib.IAudioCodec" /> and provides
               information about a Flac audio stream.
            </summary>
        </member>
        <member name="F:TagLib.Flac.StreamHeader.flags">
            <summary>
               Contains the flags.
            </summary>
        </member>
        <member name="F:TagLib.Flac.StreamHeader.low_length">
            <summary>
               Contains the low portion of the length.
            </summary>
        </member>
        <member name="F:TagLib.Flac.StreamHeader.stream_length">
            <summary>
               Contains the stream length.
            </summary>
        </member>
        <member name="M:TagLib.Flac.StreamHeader.#ctor(TagLib.ByteVector,System.Int64)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Flac.StreamHeader" /> by reading a raw stream header
               structure and using the stream length.
            </summary>
            <param name="data">
               A <see cref="T:TagLib.ByteVector" /> object containing the raw
               stream header.
            </param>
            <param name="streamLength">
               A <see cref="T:System.Int64" /> value containing the length of the
               stream.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="data" /> is <see langword="null" />.
            </exception>
            <exception cref="T:TagLib.CorruptFileException">
               <paramref name="data" /> contains less than 18 bytes.
            </exception>
        </member>
        <member name="P:TagLib.Flac.StreamHeader.Duration">
            <summary>
               Gets the duration of the media represented by the current
               instance.
            </summary>
            <value>
               A <see cref="T:System.TimeSpan" /> containing the duration of the
               media represented by the current instance.
            </value>
        </member>
        <member name="P:TagLib.Flac.StreamHeader.AudioBitrate">
            <summary>
               Gets the bitrate of the audio represented by the current
               instance.
            </summary>
            <value>
               A <see cref="T:System.Int32" /> value containing a bitrate of the
               audio represented by the current instance.
            </value>
        </member>
        <member name="P:TagLib.Flac.StreamHeader.AudioSampleRate">
            <summary>
               Gets the sample rate of the audio represented by the
               current instance.
            </summary>
            <value>
               A <see cref="T:System.Int32" /> value containing the sample rate of
               the audio represented by the current instance.
            </value>
        </member>
        <member name="P:TagLib.Flac.StreamHeader.AudioChannels">
            <summary>
               Gets the number of channels in the audio represented by
               the current instance.
            </summary>
            <value>
               A <see cref="T:System.Int32" /> value containing the number of
               channels in the audio represented by the current
               instance.
            </value>
        </member>
        <member name="P:TagLib.Flac.StreamHeader.MediaTypes">
            <summary>
               Gets the types of media represented by the current
               instance.
            </summary>
            <value>
               Always <see cref="F:TagLib.MediaTypes.Audio" />.
            </value>
        </member>
        <member name="P:TagLib.Flac.StreamHeader.AudioSampleWidth">
            <summary>
               Gets the sample width of the audio represented by the
               current instance.
            </summary>
            <value>
               A <see cref="T:System.Int32" /> value containing the sample width of
               the audio represented by the current instance.
            </value>
        </member>
        <member name="P:TagLib.Flac.StreamHeader.BitsPerSample">
            <summary>
               Gets the number of bits per sample in the audio
               represented by the current instance.
            </summary>
            <value>
               A <see cref="T:System.Int32" /> value containing the number of bits
               per sample in the audio represented by the current
               instance.
            </value>
        </member>
        <member name="P:TagLib.Flac.StreamHeader.Description">
            <summary>
               Gets a text description of the media represented by the
               current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> object containing a description
               of the media represented by the current instance.
            </value>
        </member>
        <member name="P:TagLib.Flac.StreamHeader.HighLength">
            <summary>
               Gets a high portion of the length of the audio
               represented by the current instance.
            </summary>
            <value>
               A <see cref="T:System.UInt32" /> value containing the high portion
               of the length.
            </value>
        </member>
        <member name="T:TagLib.Genres">
            <summary>
               This static class provides convenience functions for converting
               between <see cref="T:System.String" /> genres and their respective audio
               and video indices as used by several formats.
            </summary>
        </member>
        <member name="F:TagLib.Genres.audio">
            <summary>
               Contains a list of ID3v1 audio generes.
            </summary>
        </member>
        <member name="F:TagLib.Genres.video">
            <summary>
               Contains a list of DivX audio generes.
            </summary>
        </member>
        <member name="P:TagLib.Genres.Audio">
            <summary>
               Gets a list of standard audio generes.
            </summary>
            <value>
               A <see cref="T:string[]" /> containing standard audio
               genres.
            </value>
            <remarks>
               The genres are stored in the same order and with the same
               values as in the ID3v1 format.
            </remarks>
        </member>
        <member name="P:TagLib.Genres.Video">
            <summary>
               Gets a list of standard video generes.
            </summary>
            <value>
               A <see cref="T:string[]" /> containing standard video
               genres.
            </value>
            <remarks>
               The genres are stored in the same order and with the same
               values as in the DivX format.
            </remarks>
        </member>
        <member name="M:TagLib.Genres.AudioToIndex(System.String)">
            <summary>
               Gets the genre index for a specified audio genre.
            </summary>
            <param name="name">
               A <see cref="T:System.String" /> object containing the name of the
               genre to look up.
            </param>
            <returns>
               A <see cref="T:System.Byte" /> value containing the index of the
               genre in the audio array or 255 if it could not be found.
            </returns>
        </member>
        <member name="M:TagLib.Genres.VideoToIndex(System.String)">
            <summary>
               Gets the genre index for a specified video genre.
            </summary>
            <param name="name">
               A <see cref="T:System.String" /> object containing the name of the
               genre to look up.
            </param>
            <returns>
               A <see cref="T:System.Byte" /> value containing the index of the
               genre in the video array or 255 if it could not be found.
            </returns>
        </member>
        <member name="M:TagLib.Genres.IndexToAudio(System.Byte)">
            <summary>
               Gets the audio genre from its index in the array.
            </summary>
            <param name="index">
               A <see cref="T:System.Byte" /> value containing the index to
               aquire the genre from.
            </param>
            <returns>
               A <see cref="T:System.String" /> object containing the audio genre
               found at the index, or <see langword="null" /> if it does
               not exist.
            </returns>
        </member>
        <member name="M:TagLib.Genres.IndexToVideo(System.Byte)">
            <summary>
               Gets the video genre from its index in the array.
            </summary>
            <param name="index">
               A <see cref="T:System.Byte" /> value containing the index to
               aquire the genre from.
            </param>
            <returns>
               A <see cref="T:System.String" /> object containing the video genre
               found at the index, or <see langword="null" /> if it does
               not exist.
            </returns>
        </member>
        <member name="M:TagLib.Genres.IndexToAudio(System.String)">
            <summary>
               Gets the audio genre from its index in the array.
            </summary>
            <param name="text">
               A <see cref="T:System.String" /> object, either in the format
               <c>"(123)"</c> or <c>"123"</c>.
            </param>
            <returns>
               A <see cref="T:System.String" /> object containing the audio genre
               found at the index, or <see langword="null" /> if it does
               not exist.
            </returns>
        </member>
        <member name="M:TagLib.Genres.IndexToVideo(System.String)">
            <summary>
               Gets the video genre from its index in the array.
            </summary>
            <param name="text">
               A <see cref="T:System.String" /> object, either in the format
               <c>"(123)"</c> or <c>"123"</c>.
            </param>
            <returns>
               A <see cref="T:System.String" /> object containing the video genre
               found at the index, or <see langword="null" /> if it does
               not exist.
            </returns>
        </member>
        <member name="M:TagLib.Genres.StringToByte(System.String)">
            <summary>
               Converts a string, either in the format <c>"(123)"</c> or
               <c>"123"</c> into a byte or equal numeric value.
            </summary>
            <param name="text">
               A <see cref="T:System.String" /> object, either in the format
               <c>"(123)"</c> or <c>"123"</c>, to be converted.
            </param>
            <returns>
               A <see cref="T:System.Byte" /> value containing the numeric value
               of <paramref name="text" /> or 255 if no numeric value
               could be extracted.
            </returns>
        </member>
        <member name="T:TagLib.Gif.Codec">
            <summary>
               A Gif photo codec. Contains basic photo details.
            </summary>
        </member>
        <member name="P:TagLib.Gif.Codec.Description">
            <summary>
               Gets a text description of the media represented by the
               current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> object containing a description
               of the media represented by the current instance.
            </value>
        </member>
        <member name="M:TagLib.Gif.Codec.#ctor(System.Int32,System.Int32)">
            <summary>
               Constructs a new <see cref="T:TagLib.Gif.Codec" /> with the given width
               and height.
            </summary>
            <param name="width">
               The width of the photo.
            </param>
            <param name="height">
               The height of the photo.
            </param>
            <returns>
               A new <see cref="T:TagLib.Gif.Codec" /> instance.
            </returns>
        </member>
        <member name="T:TagLib.Gif.File">
            <summary>
               This class extends <see cref="T:TagLib.Image.ImageBlockFile" /> to provide tagging
               and property support for Gif files.
            </summary>
        </member>
        <member name="F:TagLib.Gif.File.SIGNATURE">
            <summary>
               Gif file signature which occurs at the begin of the file
            </summary>
        </member>
        <member name="F:TagLib.Gif.File.VERSION_87A">
            <summary>
               String which is used to indicate version the gif file format version 87a
            </summary>
        </member>
        <member name="F:TagLib.Gif.File.VERSION_89A">
            <summary>
               String which is used to indicate version the gif file format version 89a
            </summary>
        </member>
        <member name="F:TagLib.Gif.File.XMP_IDENTIFIER">
            <summary>
               Application Extension Identifier for an XMP Block
            </summary>
        </member>
        <member name="F:TagLib.Gif.File.XMP_AUTH_CODE">
            <summary>
               Application Authentication Extension Code for an XMP Block
            </summary>
        </member>
        <member name="F:TagLib.Gif.File.XMP_MAGIC_TRAILER">
            <summary>
               The Magic Trailer for XMP Data
            </summary>
            <remarks>
               The storage of XMP data in GIF does not follow the GIF specification. According to the
               specification, extension data is stored in so-called sub-blocks, which start with a length
               byte which specifies the number of data bytes contained in the sub block. So a block can at
               most contain 256 data bytes. After a sub-block, the next sub-block begins. The sequence ends,
               when a sub-block starts with 0. So readers, which are not aware of the XMP data not following
               this scheme, will get confused by the XMP data. To fix this, this trailer is added to the end.
               It has a length of 258 bytes, so that it is ensured that a reader which tries to skip the
               XMP data reads one of this bytes as length of a sub-block. But, each byte points with its length
               to the last one. Therefoe, independent of the byte, the reader reads as sub-block length, it is
               redirected to the last byte of the trailer and therfore to the end of the XMP data.
            </remarks>
        </member>
        <member name="F:TagLib.Gif.File.width">
            <summary>
               The width of the image
            </summary>
        </member>
        <member name="F:TagLib.Gif.File.height">
            <summary>
               The height of the image
            </summary>
        </member>
        <member name="F:TagLib.Gif.File.properties">
            <summary>
               The Properties of the image
            </summary>
        </member>
        <member name="F:TagLib.Gif.File.version">
            <summary>
               The version of the file format
            </summary>
        </member>
        <member name="F:TagLib.Gif.File.start_of_blocks">
            <summary>
               The start of the first block in file after the header.
            </summary>
        </member>
        <member name="P:TagLib.Gif.File.Properties">
            <summary>
               Gets the media properties of the file represented by the
               current instance.
            </summary>
            <value>
               A <see cref="T:TagLib.Properties" /> object containing the
               media properties of the file represented by the current
               instance.
            </value>
        </member>
        <member name="M:TagLib.Gif.File.#ctor(System.String,TagLib.ReadStyle)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Gif.File" /> for a specified path in the local file
               system and specified read style.
            </summary>
            <param name="path">
               A <see cref="T:System.String" /> object containing the path of the
               file to use in the new instance.
            </param>
            <param name="propertiesStyle">
               A <see cref="T:TagLib.ReadStyle" /> value specifying at what level
               of accuracy to read the media properties, or <see
               cref="F:TagLib.ReadStyle.None" /> to ignore the properties.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="path" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:TagLib.Gif.File.#ctor(System.String)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Gif.File" /> for a specified path in the local file
               system.
            </summary>
            <param name="path">
               A <see cref="T:System.String" /> object containing the path of the
               file to use in the new instance.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="path" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:TagLib.Gif.File.#ctor(TagLib.File.IFileAbstraction,TagLib.ReadStyle)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Gif.File" /> for a specified file abstraction and
               specified read style.
            </summary>
            <param name="abstraction">
               A <see cref="T:TagLib.File.IFileAbstraction" /> object to use when
               reading from and writing to the file.
            </param>
            <param name="propertiesStyle">
               A <see cref="T:TagLib.ReadStyle" /> value specifying at what level
               of accuracy to read the media properties, or <see
               cref="F:TagLib.ReadStyle.None" /> to ignore the properties.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="abstraction" /> is <see langword="null"
               />.
            </exception>
        </member>
        <member name="M:TagLib.Gif.File.#ctor(TagLib.File.IFileAbstraction)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Gif.File" /> for a specified file abstraction.
            </summary>
            <param name="abstraction">
               A <see cref="T:TagLib.File.IFileAbstraction" /> object to use when
               reading from and writing to the file.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="abstraction" /> is <see langword="null"
               />.
            </exception>
        </member>
        <member name="M:TagLib.Gif.File.Save">
            <summary>
               Saves the changes made in the current instance to the
               file it represents.
            </summary>
        </member>
        <member name="M:TagLib.Gif.File.Read(TagLib.ReadStyle)">
            <summary>
               Reads the information from file with a specified read style.
            </summary>
            <param name="propertiesStyle">
               A <see cref="T:TagLib.ReadStyle" /> value specifying at what level
               of accuracy to read the media properties, or <see
               cref="F:TagLib.ReadStyle.None" /> to ignore the properties.
            </param>
        </member>
        <member name="M:TagLib.Gif.File.ReadByte">
            <summary>
              Reads a single byte form file. This is needed often for Gif files.
            </summary>
            <returns>
              A <see cref="T:System.Byte"/> with the read data.
            </returns>
        </member>
        <member name="M:TagLib.Gif.File.ReadHeader">
            <summary>
               Reads the Header and the Logical Screen Descriptor of the GIF file and,
               if there is one, skips the global color table. It also extracts the
               image width and height from it.
            </summary>
        </member>
        <member name="M:TagLib.Gif.File.ReadMetadata">
            <summary>
               Reads the metadata from file. The current position must point to the
               start of the first block after the Header and Logical Screen
               Descriptor (and, if there is one, the Global Color Table)
            </summary>
        </member>
        <member name="M:TagLib.Gif.File.ReadExtensionBlock">
            <summary>
               Reads an Extension Block at the current position. The current position must
               point to the 2nd byte of the comment block. (The other byte is usually
               read before to identify the comment block)
            </summary>
        </member>
        <member name="M:TagLib.Gif.File.ReadApplicationExtensionBlock">
            <summary>
               Reads an Application Extension Block at the current position. The current
               position must point to the 3rd byte of the comment block. (The other 2 bytes
               are usually read before to identify the comment block)
            </summary>
        </member>
        <member name="M:TagLib.Gif.File.ReadCommentBlock">
            <summary>
               Reads a Comment Block at the current position. The current position must
               point to the 3rd byte of the comment block. (The other 2 bytes are usually
               read before to identify the comment block)
            </summary>
        </member>
        <member name="M:TagLib.Gif.File.SkipColorTable(System.Byte)">
            <summary>
               Skips the color table if there is one
            </summary>
            <param name="packed_data">
               A <see cref="T:System.Byte"/> with the packed data which is
               contained Logical Screen Descriptor or in the Image Descriptor.
            </param>
            <remarks>
               The data contained in the packed data is different for the Logical
               Screen Descriptor and for the Image Descriptor. But fortunately,
               the bits which are used do identifying the exitstance and the size
               of the color table are at the same position.
            </remarks>
        </member>
        <member name="M:TagLib.Gif.File.SkipImage">
            <summary>
               Skip over the image data at the current position. The current position must
               point to 2nd byte of the Image Descriptor. (First byte is usually read before
               to identify the image descriptor.)
            </summary>
        </member>
        <member name="M:TagLib.Gif.File.ReadSubBlocks">
            <summary>
               Reads a sequence of sub-blocks from the current position and concatenates the data
               from the sub-blocks to a string. The current position must point to the size-byte
               of the first subblock to skip.
            </summary>
            <returns>
               A <see cref="T:System.String"/> with the data contained in the sub-blocks.
            </returns>
        </member>
        <member name="M:TagLib.Gif.File.SkipSubBlocks">
            <summary>
               Skips over a sequence of sub-blocks from the current position in the file.
               The current position must point to the size-byte of the first subblock to skip.
            </summary>
        </member>
        <member name="M:TagLib.Gif.File.SaveMetadata">
            <summary>
               Save the metadata to file.
            </summary>
        </member>
        <member name="M:TagLib.Gif.File.RenderXMPBlock">
            <summary>
               Renders the XMP data to a Application Extension Block which can be
               embedded in a Gif file.
            </summary>
            <returns>
               A <see cref="T:TagLib.ByteVector"/> with the Application Extension Block for the
               XMP data, or <see langword="null" /> if the file does not have XMP data.
            </returns>
        </member>
        <member name="M:TagLib.Gif.File.RenderGifCommentBlock">
            <summary>
               Renders the Gif Comment to a Comment Extension Block which can be
               embedded in a Gif file.
            </summary>
            <returns>
               A <see cref="T:TagLib.ByteVector"/> with the Comment Extension Block for the
               Gif Comment, or <see langword="null" /> if the file does not have
               a Gif Comment.
            </returns>
        </member>
        <member name="M:TagLib.Gif.File.ExtractProperties">
            <summary>
               Attempts to extract the media properties of the main
               photo.
            </summary>
            <returns>
               A <see cref="P:TagLib.Gif.File.Properties" /> object with a best effort guess
               at the right values. When no guess at all can be made,
               <see langword="null" /> is returned.
            </returns>
        </member>
        <member name="T:TagLib.Gif.GifCommentTag">
            <summary>
               Contains the Gif comment.
            </summary>
        </member>
        <member name="M:TagLib.Gif.GifCommentTag.#ctor(System.String)">
            <summary>
               Constructor.
            </summary>
            <param name="value">
               The value of the comment.
            </param>
        </member>
        <member name="M:TagLib.Gif.GifCommentTag.#ctor">
            <summary>
               Constructor. Creates a new empty comment.
            </summary>
        </member>
        <member name="P:TagLib.Gif.GifCommentTag.Value">
            <summary>
               The value of the comment represented by the current instance.
            </summary>
        </member>
        <member name="P:TagLib.Gif.GifCommentTag.Comment">
            <summary>
               Gets or sets the comment for the image described
               by the current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> containing the comment of the
               current instace.
            </value>
        </member>
        <member name="P:TagLib.Gif.GifCommentTag.TagTypes">
            <summary>
               Gets the tag types contained in the current instance.
            </summary>
            <value>
               Always <see cref="F:TagLib.TagTypes.GifComment" />.
            </value>
        </member>
        <member name="M:TagLib.Gif.GifCommentTag.Clear">
            <summary>
               Clears the values stored in the current instance.
            </summary>
        </member>
        <member name="T:TagLib.MediaTypes">
            <summary>
               Indicates the types of media represented by a <see cref="T:TagLib.ICodec"
               /> or <see cref="T:TagLib.Properties" /> object.
            </summary>
            <remarks>
               These values can be bitwise combined to represent multiple media
               types.
            </remarks>
        </member>
        <member name="F:TagLib.MediaTypes.None">
            <summary>
               No media is present.
            </summary>
        </member>
        <member name="F:TagLib.MediaTypes.Audio">
            <summary>
               Audio is present.
            </summary>
        </member>
        <member name="F:TagLib.MediaTypes.Video">
            <summary>
               Video is present.
            </summary>
        </member>
        <member name="F:TagLib.MediaTypes.Photo">
            <summary>
               A Photo is present.
            </summary>
        </member>
        <member name="F:TagLib.MediaTypes.Text">
            <summary>
               Text is present.
            </summary>
        </member>
        <member name="T:TagLib.ICodec">
            <summary>
               This interface provides basic information, common to all media
               codecs.
            </summary>
        </member>
        <member name="P:TagLib.ICodec.Duration">
            <summary>
               Gets the duration of the media represented by the current
               instance.
            </summary>
            <value>
               A <see cref="T:System.TimeSpan" /> containing the duration of the
               media represented by the current instance.
            </value>
        </member>
        <member name="P:TagLib.ICodec.MediaTypes">
            <summary>
               Gets the types of media represented by the current
               instance.
            </summary>
            <value>
               A bitwise combined <see cref="P:TagLib.ICodec.MediaTypes" /> containing
               the types of media represented by the current instance.
            </value>
        </member>
        <member name="P:TagLib.ICodec.Description">
            <summary>
               Gets a text description of the media represented by the
               current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> object containing a description
               of the media represented by the current instance.
            </value>
        </member>
        <member name="T:TagLib.IAudioCodec">
            <summary>
               This interface inherits <see cref="T:TagLib.ICodec" /> to provide
               information about an audio codec.
            </summary>
            <remarks>
               <para>When dealing with a <see cref="T:TagLib.ICodec" />, if <see
               cref="P:TagLib.ICodec.MediaTypes" /> contains <see cref="F:TagLib.MediaTypes.Audio"
               />, it is safe to assume that the object also inherits <see
               cref="T:TagLib.IAudioCodec" /> and can be recast without issue.</para>
            </remarks>
        </member>
        <member name="P:TagLib.IAudioCodec.AudioBitrate">
            <summary>
               Gets the bitrate of the audio represented by the current
               instance.
            </summary>
            <value>
               A <see cref="T:System.Int32" /> value containing a bitrate of the
               audio represented by the current instance.
            </value>
        </member>
        <member name="P:TagLib.IAudioCodec.AudioSampleRate">
            <summary>
               Gets the sample rate of the audio represented by the
               current instance.
            </summary>
            <value>
               A <see cref="T:System.Int32" /> value containing the sample rate of
               the audio represented by the current instance.
            </value>
        </member>
        <member name="P:TagLib.IAudioCodec.AudioChannels">
            <summary>
               Gets the number of channels in the audio represented by
               the current instance.
            </summary>
            <value>
               A <see cref="T:System.Int32" /> value containing the number of
               channels in the audio represented by the current
               instance.
            </value>
        </member>
        <member name="T:TagLib.ILosslessAudioCodec">
            <summary>
               This interface provides information specific
               to lossless audio codecs.
            </summary>
        </member>
        <member name="P:TagLib.ILosslessAudioCodec.BitsPerSample">
            <summary>
               Gets the number of bits per sample in the audio
               represented by the current instance.
            </summary>
            <value>
               A <see cref="T:System.Int32" /> value containing the number of bits
               per sample in the audio represented by the current
               instance.
            </value>
        </member>
        <member name="T:TagLib.IVideoCodec">
            <summary>
               This interface inherits <see cref="T:TagLib.ICodec" /> to provide
               information about a video codec.
            </summary>
            <remarks>
               <para>When dealing with a <see cref="T:TagLib.ICodec" />, if <see
               cref="P:TagLib.ICodec.MediaTypes" /> contains <see cref="F:TagLib.MediaTypes.Video"
               />, it is safe to assume that the object also inherits <see
               cref="T:TagLib.IVideoCodec" /> and can be recast without issue.</para>
            </remarks>
        </member>
        <member name="P:TagLib.IVideoCodec.VideoWidth">
            <summary>
               Gets the width of the video represented by the current
               instance.
            </summary>
            <value>
               A <see cref="T:System.Int32" /> value containing the width of the
               video represented by the current instance.
            </value>
        </member>
        <member name="P:TagLib.IVideoCodec.VideoHeight">
            <summary>
               Gets the height of the video represented by the current
               instance.
            </summary>
            <value>
               A <see cref="T:System.Int32" /> value containing the height of the
               video represented by the current instance.
            </value>
        </member>
        <member name="T:TagLib.IPhotoCodec">
            <summary>
               This interface inherits <see cref="T:TagLib.ICodec" /> to provide
               information about a photo.
            </summary>
            <remarks>
               <para>When dealing with a <see cref="T:TagLib.ICodec" />, if <see
               cref="P:TagLib.ICodec.MediaTypes" /> contains <see cref="F:TagLib.MediaTypes.Photo"
               />, it is safe to assume that the object also inherits <see
               cref="T:TagLib.IPhotoCodec" /> and can be recast without issue.</para>
            </remarks>
        </member>
        <member name="P:TagLib.IPhotoCodec.PhotoWidth">
            <summary>
               Gets the width of the photo represented by the current
               instance.
            </summary>
            <value>
               A <see cref="T:System.Int32" /> value containing the width of the
               photo represented by the current instance.
            </value>
        </member>
        <member name="P:TagLib.IPhotoCodec.PhotoHeight">
            <summary>
               Gets the height of the photo represented by the current
               instance.
            </summary>
            <value>
               A <see cref="T:System.Int32" /> value containing the height of the
               photo represented by the current instance.
            </value>
        </member>
        <member name="P:TagLib.IPhotoCodec.PhotoQuality">
            <summary>
               Gets the (format specific) quality indicator of the photo
               represented by the current instance.
            </summary>
            <value>
               A <see cref="T:System.Int32" /> value indicating the quality. A value
               0 means that there was no quality indicator for the format
               or the file.
            </value>
        </member>
        <member name="T:TagLib.Id3v1.StringHandler">
            <summary>
               This class provides a mechanism for customizing how Id3v1 text
               is read and written.
            </summary>
        </member>
        <member name="M:TagLib.Id3v1.StringHandler.Parse(TagLib.ByteVector)">
            <summary>
               Converts raw ID3v1 text data to a <see cref="T:System.String" />
               object.
            </summary>
            <param name="data">
               A <see cref="T:TagLib.ByteVector" /> object containing raw Id3v1
               text data.
            </param>
            <returns>
               A <see cref="T:System.String"/> object containing the converted
               text.
            </returns>
        </member>
        <member name="M:TagLib.Id3v1.StringHandler.Render(System.String)">
            <summary>
               Converts a <see cref="T:System.String" /> object to raw ID3v1 text
               data.
            </summary>
            <param name="text">
               A <see cref="T:System.String" /> object to convert.
            </param>
            <returns>
               A <see cref="T:TagLib.ByteVector"/> containing the raw ID3v1 text
               data.
            </returns>
        </member>
        <member name="T:TagLib.Id3v1.Tag">
            <summary>
               This class extends <see cref="T:TagLib.Id3v1.Tag" /> to provide support for
               reading and writing tags stored in the ID3v1.1 format.
            </summary>
        </member>
        <member name="F:TagLib.Id3v1.Tag.title">
            <summary>
               Contains the title.
            </summary>
        </member>
        <member name="F:TagLib.Id3v1.Tag.artist">
            <summary>
               Contains the semicolon separated performers.
            </summary>
        </member>
        <member name="F:TagLib.Id3v1.Tag.album">
            <summary>
               Contains the album name.
            </summary>
        </member>
        <member name="F:TagLib.Id3v1.Tag.year">
            <summary>
               Contains the 4 digit year.
            </summary>
        </member>
        <member name="F:TagLib.Id3v1.Tag.comment">
            <summary>
               Contains a comment on track.
            </summary>
        </member>
        <member name="F:TagLib.Id3v1.Tag.track">
            <summary>
               Contains the track number in the album.
            </summary>
        </member>
        <member name="F:TagLib.Id3v1.Tag.genre">
            <summary>
               Contains the genre index.
            </summary>
        </member>
        <member name="F:TagLib.Id3v1.Tag.Size">
            <summary>
               The size of a ID3v1 tag.
            </summary>
        </member>
        <member name="F:TagLib.Id3v1.Tag.FileIdentifier">
            <summary>
               The identifier used to recognize a ID3v1 tags.
            </summary>
            <value>
               "TAG"
            </value>
        </member>
        <member name="M:TagLib.Id3v1.Tag.#ctor">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Id3v1.Tag" /> with no contents.
            </summary>
        </member>
        <member name="M:TagLib.Id3v1.Tag.#ctor(TagLib.File,System.Int64)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Id3v1.Tag" /> by reading the contents from a specified
               position in a specified file.
            </summary>
            <param name="file">
               A <see cref="T:TagLib.File" /> object containing the file from
               which the contents of the new instance is to be read.
            </param>
            <param name="position">
               A <see cref="T:System.Int64" /> value specify at what position to
               read the tag.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="file" /> is <see langword="null" />.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
               <paramref name="position" /> is less than zero or greater
               than the size of the file.
            </exception>
            <exception cref="T:TagLib.CorruptFileException">
               The file does not contain <see cref="F:TagLib.Id3v1.Tag.FileIdentifier" />
               at the given position.
            </exception>
        </member>
        <member name="M:TagLib.Id3v1.Tag.#ctor(TagLib.ByteVector)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Id3v1.Tag" /> by reading the contents from a specified
               <see cref="T:TagLib.ByteVector" /> object.
            </summary>
            <param name="data">
               A <see cref="T:TagLib.ByteVector" /> object to read the tag from.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="data" /> is <see langword="null" />.
            </exception>
            <exception cref="T:TagLib.CorruptFileException">
               <paramref name="data" /> is less than 128 bytes or does
               not start with <see cref="F:TagLib.Id3v1.Tag.FileIdentifier" />.
            </exception>
        </member>
        <member name="M:TagLib.Id3v1.Tag.Render">
            <summary>
               Renders the current instance as a raw ID3v1 tag.
            </summary>
            <returns>
               A <see cref="T:TagLib.ByteVector" /> object containing the
               rendered tag.
            </returns>
        </member>
        <member name="P:TagLib.Id3v1.Tag.DefaultStringHandler">
            <summary>
               Gets and sets the <see cref="T:TagLib.Id3v1.StringHandler" /> object
               to use when reading and writing ID3v1 fields.
            </summary>
            <value>
               A <see cref="T:TagLib.Id3v1.StringHandler" /> object to use when
               processing fields.
            </value>
        </member>
        <member name="M:TagLib.Id3v1.Tag.Parse(TagLib.ByteVector)">
            <summary>
               Populates the current instance by parsing the contents of
               a raw ID3v1 tag.
            </summary>
            <param name="data">
               A <see cref="T:TagLib.ByteVector" /> object containing the
               starting with an ID3v1 tag.
            </param>
        </member>
        <member name="P:TagLib.Id3v1.Tag.TagTypes">
            <summary>
               Gets the tag types contained in the current instance.
            </summary>
            <value>
               Always <see cref="F:TagLib.TagTypes.Id3v1" />.
            </value>
        </member>
        <member name="P:TagLib.Id3v1.Tag.Title">
            <summary>
               Gets and sets the title for the media described by the
               current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> object containing the title for
               the media described by the current instance or <see
               langword="null" /> if no value is present.
            </value>
            <remarks>
               When stored on disk, only the first 30 bytes of the
               Latin-1 encoded value will be stored. This may result in
               lost data.
            </remarks>
        </member>
        <member name="P:TagLib.Id3v1.Tag.Performers">
            <summary>
               Gets and sets the performers or artists who performed in
               the media described by the current instance.
            </summary>
            <value>
               A <see cref="T:string[]" /> containing the performers or
               artists who performed in the media described by the
               current instance or an empty array if no value is
               present.
            </value>
            <remarks>
               When stored on disk, only the first 30 bytes of the
               Latin-1 encoded value will be stored, minus a byte for
               each additionial performer (i.e. two performers will only
               have 29 bytes and three performers will only have 28
               bytes).This may result in lost data.
            </remarks>
        </member>
        <member name="P:TagLib.Id3v1.Tag.Album">
            <summary>
               Gets and sets the album of the media represented by the
               current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> object containing the album of
               the media represented by the current instance or <see
               langword="null" /> if no value is present.
            </value>
            <remarks>
               When stored on disk, only the first 30 bytes of the
               Latin-1 encoded value will be stored. This may result in
               lost data.
            </remarks>
        </member>
        <member name="P:TagLib.Id3v1.Tag.Comment">
            <summary>
               Gets and sets a user comment on the media represented by
               the current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> object containing user comments
               on the media represented by the current instance or <see
               langword="null" /> if no value is present.
            </value>
            <remarks>
               When stored on disk, only the first 28 bytes of the
               Latin-1 encoded value will be stored. This may result in
               lost data.
            </remarks>
        </member>
        <member name="P:TagLib.Id3v1.Tag.Genres">
            <summary>
               Gets and sets the genres of the media represented by the
               current instance.
            </summary>
            <value>
               A <see cref="T:string[]" /> containing the genres of the
               media represented by the current instance or an empty
               array if no value is present.
            </value>
            <remarks>
               Only first genre will be stored and only if it is an
               exact match for a value appearing in <see
               cref="P:TagLib.Genres.Audio" />. All other values will
               result in the property being cleared.
            </remarks>
        </member>
        <member name="P:TagLib.Id3v1.Tag.Year">
            <summary>
               Gets and sets the year that the media represented by the
               current instance was recorded.
            </summary>
            <value>
               A <see cref="T:System.UInt32" /> containing the year that the media
               represented by the current instance was created or zero
               if no value is present.
            </value>
            <remarks>
               Only values between 1 and 9999 will be stored, all other
               values will result in the property being zeroed.
            </remarks>
        </member>
        <member name="P:TagLib.Id3v1.Tag.Track">
            <summary>
               Gets and sets the position of the media represented by
               the current instance in its containing album.
            </summary>
            <value>
               A <see cref="T:System.UInt32" /> containing the position of the
               media represented by the current instance in its
               containing album or zero if not specified.
            </value>
            <remarks>
               Only values between 1 and 255 will be stored, all other
               values will result in the property being zeroed.
            </remarks>
        </member>
        <member name="M:TagLib.Id3v1.Tag.Clear">
            <summary>
               Clears the values stored in the current instance.
            </summary>
        </member>
        <member name="T:TagLib.Id3v2.EventTimeCode">
            <summary>
            
            </summary>
        </member>
        <member name="P:TagLib.Id3v2.EventTimeCode.TypeOfEvent">
            <summary>
            
            </summary>
        </member>
        <member name="P:TagLib.Id3v2.EventTimeCode.Time">
            <summary>
            
            </summary>
        </member>
        <member name="M:TagLib.Id3v2.EventTimeCode.#ctor(TagLib.Id3v2.EventType,System.Int32)">
            <summary>
            
            </summary>
            <param name="typeOfEvent"></param>
            <param name="time"></param>
        </member>
        <member name="M:TagLib.Id3v2.EventTimeCode.CreateEmpty">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:TagLib.Id3v2.EventTimeCode.Clone">
            <summary>
            
            </summary>
            <returns><see cref="T:TagLib.Id3v2.EventTimeCode" /></returns>
        </member>
        <member name="T:TagLib.Id3v2.EventType">
            <summary>
               Specifies the event type used by a <see
               cref="T:TagLib.Id3v2.EventTimeCode" /> and <see cref="T:TagLib.Id3v2.EventTimeCodesFrame"/>.
            </summary>
        </member>
        <member name="F:TagLib.Id3v2.EventType.Padding">
            <summary>
            The padding - no meaning
            </summary>
        </member>
        <member name="F:TagLib.Id3v2.EventType.EndOfInitialSilence">
            <summary>
            The end of initial silence
            </summary>
        </member>
        <member name="F:TagLib.Id3v2.EventType.IntroStart">
            <summary>
            The intro start
            </summary>
        </member>
        <member name="F:TagLib.Id3v2.EventType.MainPartStart">
            <summary>
            The main part start
            </summary>
        </member>
        <member name="F:TagLib.Id3v2.EventType.OutroStart">
            <summary>
            The outro start
            </summary>
        </member>
        <member name="F:TagLib.Id3v2.EventType.OutroEnd">
            <summary>
            The outro end
            </summary>
        </member>
        <member name="F:TagLib.Id3v2.EventType.VerseStart">
            <summary>
            The verse start
            </summary>
        </member>
        <member name="F:TagLib.Id3v2.EventType.RefrainStart">
            <summary>
            The refrain start
            </summary>
        </member>
        <member name="F:TagLib.Id3v2.EventType.InterludeStart">
            <summary>
            The interlude start
            </summary>
        </member>
        <member name="F:TagLib.Id3v2.EventType.ThemeStart">
            <summary>
            The theme start
            </summary>
        </member>
        <member name="F:TagLib.Id3v2.EventType.VariationStart">
            <summary>
            The variation start
            </summary>
        </member>
        <member name="F:TagLib.Id3v2.EventType.KeyChange">
            <summary>
            The key change
            </summary>
        </member>
        <member name="F:TagLib.Id3v2.EventType.TimeChange">
            <summary>
            The time change
            </summary>
        </member>
        <member name="F:TagLib.Id3v2.EventType.MomentaryUnwantedNoise">
            <summary>
            momentary unwanted noise (Snap, Crackle, and Pop)
            </summary>
        </member>
        <member name="F:TagLib.Id3v2.EventType.SustainedNoise">
            <summary>
            The sustained noise
            </summary>
        </member>
        <member name="F:TagLib.Id3v2.EventType.SustainedNoiseEnd">
            <summary>
            The sustained noise end
            </summary>
        </member>
        <member name="F:TagLib.Id3v2.EventType.IntroEnd">
            <summary>
            The intro end
            </summary>
        </member>
        <member name="F:TagLib.Id3v2.EventType.MainPartEnd">
            <summary>
            The main part end
            </summary>
        </member>
        <member name="F:TagLib.Id3v2.EventType.VerseEnd">
            <summary>
            The verse end
            </summary>
        </member>
        <member name="F:TagLib.Id3v2.EventType.RefrainEnd">
            <summary>
            The refrain end
            </summary>
        </member>
        <member name="F:TagLib.Id3v2.EventType.ThemeEnd">
            <summary>
            The theme end
            </summary>
        </member>
        <member name="F:TagLib.Id3v2.EventType.Profanity">
            <summary>
            Profanity starts
            </summary>
        </member>
        <member name="F:TagLib.Id3v2.EventType.ProfanityEnd">
            <summary>
            The profanity end
            </summary>
        </member>
        <member name="F:TagLib.Id3v2.EventType.AudioEnd">
            <summary>
            The audio end
            </summary>
        </member>
        <member name="F:TagLib.Id3v2.EventType.AudioFileEnd">
            <summary>
            The audio file end
            </summary>
        </member>
        <member name="T:TagLib.Id3v2.ExtendedHeader">
            <summary>
               This class is a filler until support for reading and writing the
               ID3v2 extended header is implemented.
            </summary>
        </member>
        <member name="F:TagLib.Id3v2.ExtendedHeader.size">
            <summary>
               Contains the size of the read header.
            </summary>
        </member>
        <member name="M:TagLib.Id3v2.ExtendedHeader.#ctor">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Id3v2.ExtendedHeader"/> with no contents.
            </summary>
        </member>
        <member name="M:TagLib.Id3v2.ExtendedHeader.#ctor(TagLib.ByteVector,System.Byte)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Id3v2.ExtendedHeader" /> by reading the raw contents from
               a <see cref="T:TagLib.ByteVector" /> object.
            </summary>
            <param name="data">
               A <see cref="T:TagLib.ByteVector" /> object containing the raw
               extended header structure.
            </param>
            <param name="version">
               A <see cref="T:System.Byte" /> value indicating the ID3v2 version.
            </param>
        </member>
        <member name="P:TagLib.Id3v2.ExtendedHeader.Size">
            <summary>
               Gets the size of the data on disk in bytes.
            </summary>
            <value>
               A <see cref="T:System.UInt32" /> value containing the size of the
               data on disk.
            </value>
        </member>
        <member name="M:TagLib.Id3v2.ExtendedHeader.Parse(TagLib.ByteVector,System.Byte)">
            <summary>
               Populates the current instance with the contents of the
               raw ID3v2 frame.
            </summary>
            <param name="data">
               A <see cref="T:TagLib.ByteVector" /> object containing the raw
               extended header structure.
            </param>
            <param name="version">
               A <see cref="T:System.Byte" /> value indicating the ID3v2 version.
            </param>
        </member>
        <member name="M:TagLib.Id3v2.ExtendedHeader.Clone">
            <summary>
               Creates a deep copy of the current instance.
            </summary>
            <returns>
               A new <see cref="T:TagLib.Id3v2.ExtendedHeader" /> object identical to
               the current instance.
            </returns>
        </member>
        <member name="T:TagLib.Id3v2.Footer">
            <summary>
               This structure provides a representation of an ID3v2 tag footer
               which can be read from and written to disk.
            </summary>
        </member>
        <member name="F:TagLib.Id3v2.Footer.major_version">
            <summary>
               Contains the tag's major version.
            </summary>
        </member>
        <member name="F:TagLib.Id3v2.Footer.flags">
            <summary>
               Contains tag's flags.
            </summary>
        </member>
        <member name="F:TagLib.Id3v2.Footer.Size">
            <summary>
               The size of a ID3v2 footer.
            </summary>
        </member>
        <member name="F:TagLib.Id3v2.Footer.FileIdentifier">
            <summary>
               The identifier used to recognize a ID3v2 footer.
            </summary>
            <value>
               "3DI"
            </value>
        </member>
        <member name="M:TagLib.Id3v2.Footer.#ctor(TagLib.ByteVector)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Id3v2.Footer" /> by reading it from raw footer data.
            </summary>
            <param name="data">
               A <see cref="T:TagLib.ByteVector" /> object containing the raw
               data to build the new instance from.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="data" /> is <see langword="null" />.
            </exception>
            <exception cref="T:TagLib.CorruptFileException">
               <paramref name="data" /> is smaller than <see
               cref="F:TagLib.Id3v2.Footer.Size" />, does not begin with <see
               cref="F:TagLib.Id3v2.Footer.FileIdentifier" />, contains invalid flag data,
               or contains invalid size data.
            </exception>
        </member>
        <member name="M:TagLib.Id3v2.Footer.#ctor(TagLib.Id3v2.Header)">
            <summary>
               Constructs and intializes a new instance of <see
               cref="T:TagLib.Id3v2.Footer" /> by reading in the contents of the header
               object used for the same tag.
            </summary>
            <param name="header">
               A <see cref="T:TagLib.Id3v2.Header" /> object to base the new instance
               off of.
            </param>
        </member>
        <member name="P:TagLib.Id3v2.Footer.MajorVersion">
            <summary>
               Gets and sets the major version of the tag described by
               the current instance.
            </summary>
            <value>
               A <see cref="T:System.Byte" /> value specifying the ID3v2 version
               of tag described by the current instance.
            </value>
            <remarks>
               When the version is set, unsupported header flags will
               automatically be removed from the tag.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
               <paramref name="value" /> is not 4.
            </exception>
        </member>
        <member name="P:TagLib.Id3v2.Footer.RevisionNumber">
            <summary>
               Gets and sets the version revision number of the tag
               represented by the current instance.
            </summary>
            <value>
               A <see cref="T:System.Byte" /> value containing the version
               revision number of the tag represented by the current
               instance.
            </value>
            <remarks>
               This value should always be zeroed. A non-zero value
               indicates an experimental or new version of the format
               which may not be completely understood by the current
               implementation. Some software may refuse to read tags
               with a non-zero value.
            </remarks>
        </member>
        <member name="P:TagLib.Id3v2.Footer.Flags">
            <summary>
               Gets and sets the flags applied to the current instance.
            </summary>
            <value>
               A bitwise combined <see cref="T:TagLib.Id3v2.HeaderFlags" /> value
               containing the flags applied to the current instance.
            </value>
            <exception cref="T:System.ArgumentException">
               <paramref name="value" /> contains a flag not supported
               by the the ID3v2 version of the current instance.
            </exception>
        </member>
        <member name="P:TagLib.Id3v2.Footer.TagSize">
            <summary>
               Gets and sets the size of the tag described by the
               current instance, minus the header and footer.
            </summary>
            <value>
               A <see cref="T:System.UInt32" /> value containing the size of the
               tag described by the current instance.
            </value>
        </member>
        <member name="P:TagLib.Id3v2.Footer.CompleteTagSize">
            <summary>
               Gets the complete size of the tag described by the
               current instance, including the header and footer.
            </summary>
            <value>
               A <see cref="T:System.UInt32" /> value containing the complete size
               of the tag described by the current instance.
            </value>
        </member>
        <member name="M:TagLib.Id3v2.Footer.Render">
            <summary>
               Renders the current instance as a raw ID3v2 header.
            </summary>
            <returns>
               A <see cref="T:TagLib.ByteVector" /> object containing the
               rendered header.
            </returns>
        </member>
        <member name="T:TagLib.Id3v2.Frame">
            <summary>
               This abstract class provides a basic framework for representing
               ID3v2.4 frames.
            </summary>
        </member>
        <member name="F:TagLib.Id3v2.Frame.header">
            <summary>
               Contains the frame's header.
            </summary>
        </member>
        <member name="F:TagLib.Id3v2.Frame.group_id">
            <summary>
               Contains the frame's grouping ID.
            </summary>
        </member>
        <member name="F:TagLib.Id3v2.Frame.encryption_id">
            <summary>
               Contains the frame's encryption ID.
            </summary>
        </member>
        <member name="M:TagLib.Id3v2.Frame.#ctor(TagLib.ByteVector,System.Byte)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Id3v2.Frame" /> by reading the raw header encoded in the
               specified ID3v2 version.
            </summary>
            <param name="data">
               A <see cref="T:TagLib.ByteVector" /> object containing the
               identifier or header data to use for the new instance.
            </param>
            <param name="version">
               A <see cref="T:System.Byte" /> value indicating the ID3v2 version
               which <paramref name="data" /> is encoded in.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="data" /> is <see langword="null" />.
            </exception>
            <exception cref="T:System.ArgumentException">
               <paramref name="data" /> does not contain a complete
               identifier.
            </exception>
        </member>
        <member name="M:TagLib.Id3v2.Frame.#ctor(TagLib.Id3v2.FrameHeader)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Id3v2.Frame" /> with a specified header.
            </summary>
            <param name="header">
               A <see cref="T:TagLib.Id3v2.FrameHeader" /> value containing the header
               to use for the new instance.
            </param>
        </member>
        <member name="P:TagLib.Id3v2.Frame.FrameId">
            <summary>
               Gets the frame ID for the current instance.
            </summary>
            <value>
               A <see cref="T:TagLib.ReadOnlyByteVector" /> object containing the
               four-byte ID3v2.4 frame header for the current instance.
            </value>
        </member>
        <member name="P:TagLib.Id3v2.Frame.Size">
            <summary>
               Gets the size of the current instance as it was last
               stored on disk.
            </summary>
            <value>
               A <see cref="T:System.UInt32" /> value containing the size of the
               current instance as it was last stored on disk.
            </value>
        </member>
        <member name="P:TagLib.Id3v2.Frame.Flags">
            <summary>
               Gets and sets the frame flags applied to the current
               instance.
            </summary>
            <value>
               A bitwise combined <see cref="T:TagLib.Id3v2.FrameFlags" /> value
               containing the frame flags applied to the current
               instance.
            </value>
            <remarks>
               If the value includes either <see
               cref="F:TagLib.Id3v2.FrameFlags.Encryption" /> or <see
               cref="F:TagLib.Id3v2.FrameFlags.Compression" />, <see cref="M:TagLib.Id3v2.Frame.Render(System.Byte)" />
               will throw a <see cref="T:System.NotImplementedException" />.
            </remarks>
        </member>
        <member name="P:TagLib.Id3v2.Frame.GroupId">
            <summary>
               Gets and sets the grouping ID applied to the current
               instance.
            </summary>
            <value>
               A <see cref="T:System.Int16" /> value containing the grouping
               identifier for the current instance, or -1 if not set.
            </value>
            <remarks>
               Grouping identifiers can be between 0 and 255. Setting
               any other value will unset the grouping identity and set
               the value to -1.
            </remarks>
        </member>
        <member name="P:TagLib.Id3v2.Frame.EncryptionId">
            <summary>
               Gets and sets the encryption ID applied to the current
               instance.
            </summary>
            <value>
               A <see cref="T:System.Int16" /> value containing the encryption
               identifier for the current instance, or -1 if not set.
            </value>
            <remarks>
               <para>Encryption identifiers can be between 0 and 255.
               Setting any other value will unset the grouping identity
               and set the value to -1.</para>
               <para>If set, <see cref="M:TagLib.Id3v2.Frame.Render(System.Byte)" /> will throw a <see
               cref="T:System.NotImplementedException" />.</para>
            </remarks>
        </member>
        <member name="M:TagLib.Id3v2.Frame.Render(System.Byte)">
            <summary>
               Renders the current instance, encoded in a specified
               ID3v2 version.
            </summary>
            <param name="version">
               A <see cref="T:System.Byte" /> value specifying the version of
               ID3v2 to use when encoding the current instance.
            </param>
            <returns>
               A <see cref="T:TagLib.ByteVector" /> object containing the
               rendered version of the current instance.
            </returns>
            <exception cref="T:System.NotImplementedException">
               The current instance uses some feature that cannot be
               implemented in the specified ID3v2 version, or uses a
               feature, such as encryption or compression, which is not
               yet implemented in the library.
            </exception>
        </member>
        <member name="M:TagLib.Id3v2.Frame.TextDelimiter(TagLib.StringType)">
            <summary>
               Gets the text delimiter for a specified encoding.
            </summary>
            <param name="type">
               A <see cref="T:TagLib.StringType" /> value specifying the encoding
               to get the delimiter for.
            </param>
            <returns>
               A <see cref="T:TagLib.ByteVector" /> object containing the
               delimiter for the specified encoding.
            </returns>
        </member>
        <member name="M:TagLib.Id3v2.Frame.CorrectEncoding(TagLib.StringType,System.Byte)">
            <summary>
               Converts an encoding to be a supported encoding for a
               specified tag version.
            </summary>
            <param name="type">
               A <see cref="T:TagLib.StringType" /> value containing the original
               encoding.
            </param>
            <param name="version">
               A <see cref="T:System.Byte" /> value containing the ID3v2 version
               to be encoded for.
            </param>
            <returns>
               A <see cref="T:TagLib.StringType" /> value containing the correct
               encoding to use, based on <see
               cref="P:TagLib.Id3v2.Tag.ForceDefaultEncoding" /> and what is supported
               by <paramref name="version" />.
            </returns>
        </member>
        <member name="M:TagLib.Id3v2.Frame.SetData(TagLib.ByteVector,System.Int32,System.Byte,System.Boolean)">
            <summary>
               Populates the current instance by reading the raw frame
               from disk, optionally reading the header.
            </summary>
            <param name="data">
               A <see cref="T:TagLib.ByteVector" /> object containing the raw
               ID3v2 frame.
            </param>
            <param name="offset">
               A <see cref="T:System.Int32" /> value containing the offset in
               <paramref name="data" /> at which the frame begins.
            </param>
            <param name="version">
               A <see cref="T:System.Byte" /> value containing the ID3v2 version
               of the raw frame contained in <paramref name="data" />.
            </param>
            <param name="readHeader">
               A <see cref="T:System.Boolean" /> value indicating whether or not to
               read the header into current instance.
            </param>
        </member>
        <member name="M:TagLib.Id3v2.Frame.ParseFields(TagLib.ByteVector,System.Byte)">
            <summary>
               Populates the values in the current instance by parsing
               its field data in a specified version.
            </summary>
            <param name="data">
               A <see cref="T:TagLib.ByteVector" /> object containing the
               extracted field data.
            </param>
            <param name="version">
               A <see cref="T:System.Byte" /> indicating the ID3v2 version the
               field data is encoded in.
            </param>
        </member>
        <member name="M:TagLib.Id3v2.Frame.RenderFields(System.Byte)">
            <summary>
               Renders the values in the current instance into field
               data for a specified version.
            </summary>
            <param name="version">
               A <see cref="T:System.Byte" /> indicating the ID3v2 version the
               field data is to be encoded in.
            </param>
            <returns>
               A <see cref="T:TagLib.ByteVector" /> object containing the
               rendered field data.
            </returns>
        </member>
        <member name="M:TagLib.Id3v2.Frame.FieldData(TagLib.ByteVector,System.Int32,System.Byte)">
            <summary>
               Extracts the field data from the raw data portion of an
               ID3v2 frame.
            </summary>
            <param name="frameData">
               A <see cref="T:TagLib.ByteVector" /> object containing fraw frame
               data.
            </param>
            <param name="offset">
               A <see cref="T:System.Int32" /> value containing the index at which
               the data is contained.
            </param>
            <param name="version">
               A <see cref="T:System.Byte" /> value containing the ID3v2 version
               of the data.
            </param>
            <returns>
               A <see cref="T:TagLib.ByteVector" /> object containing the
               extracted field data.
            </returns>
            <remarks>
               This method is necessary for extracting extra data
               prepended to the frame such as the grouping ID.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="frameData" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:TagLib.Id3v2.Frame.Clone">
            <summary>
               Creates a deep copy of the current instance.
            </summary>
            <returns>
               A new <see cref="T:TagLib.Id3v2.Frame" /> object identical to the
               current instance.
            </returns>
            <remarks>
               This method is implemented by rendering the current
               instance as an ID3v2.4 frame and using <see
               cref="M:TagLib.Id3v2.FrameFactory.CreateFrame(TagLib.ByteVector,TagLib.File,System.Int32@,System.Byte,System.Boolean)" /> to create a new
               frame. As such, this method should be overridden by
               child classes.
            </remarks>
        </member>
        <member name="T:TagLib.Id3v2.FrameFactory">
            <summary>
               This static class performs the necessary operations to determine
               and create the correct child class of <see cref="T:TagLib.Id3v2.Frame" /> for a
               given raw ID3v2 frame.
            </summary>
            <remarks>
               By default, <see cref="T:TagLib.Id3v2.FrameFactory" /> will only load frames
               contained in the library. To add additional frames to the
               process, register a frame creator with <see
               cref="M:TagLib.Id3v2.FrameFactory.AddFrameCreator(TagLib.Id3v2.FrameFactory.FrameCreator)" />.
            </remarks>
        </member>
        <member name="T:TagLib.Id3v2.FrameFactory.FrameCreator">
            <summary>
               Creates a frame from a specified block of data, or
               returns <see langword="null" /> if unsupported.
            </summary>
            <param name="data">
               A <see cref="T:TagLib.ByteVector" /> object containing a raw ID3v2
               frame.
            </param>
            <param name="offset">
               A <see cref="T:System.Int32" /> value specifying the offset in
               <paramref name="data"/> at which the frame data begins.
            </param>
            <param name="header">
               A <see cref="T:TagLib.Id3v2.FrameHeader" /> object for the frame
               contained in <paramref name="data" />.
            </param>
            <param name="version">
               A <see cref="T:System.Byte" /> specifying the version of ID3v2 the
               raw frame data is stored in.
            </param>
            <returns>
                A <see cref="T:TagLib.Id3v2.Frame" /> object if the method was able to
                match and create one. Otherwise <see langword="null" />.
            </returns>
            <remarks>
               <para>Frame creators are used to provide access or
               support for items that are left out of TagLib#.</para>
            </remarks>
            <example>
               <code lang="C#">
            public Frame Creator (TagLib.ByteVector data, TagLib.Id3v2.FrameHeader header)
            {
            	if (header.FrameId == "RVRB")
            		return new ReverbFrame (data, header);
            	else
            		return null;
            }
            ...
            TagLib.Id3v2.FrameFactor.AddFrameCreator (ReverbFrame.Creator);
              </code>
            </example>
            <seealso cref="M:TagLib.Id3v2.FrameFactory.AddFrameCreator(TagLib.Id3v2.FrameFactory.FrameCreator)" />
        </member>
        <member name="F:TagLib.Id3v2.FrameFactory.frame_creators">
            <summary>
               Contains registered frame creators.
            </summary>
        </member>
        <member name="M:TagLib.Id3v2.FrameFactory.CreateFrame(TagLib.ByteVector,TagLib.File,System.Int32@,System.Byte,System.Boolean)">
            <summary>
               Creates a <see cref="T:TagLib.Id3v2.Frame" /> object by reading it from
               raw ID3v2 frame data.
            </summary>
            <param name="data">
               A <see cref="T:TagLib.ByteVector" /> object containing a raw ID3v2
               frame.
            </param>
            <param name="file">
               A <see cref="T:TagLib.File"/> object containing
               abstraction of the file to read. 
               Ignored if <paramref name="data"/> is not null.
            </param>
            <param name="offset">
               A <see cref="T:System.Int32" /> value reference specifying at what
               index in <paramref name="file" />, or in 
               <paramref name="data" /> if not null,
               at which the frame begins. After reading, it contains 
               the offset of the next frame to be read.
            </param>
            <param name="version">
               A <see cref="T:System.Byte" /> value specifying the ID3v2 version
               the frame in <paramref name="data"/> is encoded in.
            </param>
            <param name="alreadyUnsynched">
               A <see cref="T:System.Boolean" /> value specifying whether the entire
               tag has already been unsynchronized.
            </param>
            <returns>
               A <see cref="T:TagLib.Id3v2.Frame" /> object read from the data, or <see
               langword="null" /> if none is found.
            </returns>
            <exception cref="T:System.NotImplementedException">
               The frame contained in the raw data could not be
               converted to ID3v2 or uses encryption or compression.
            </exception>
        </member>
        <member name="M:TagLib.Id3v2.FrameFactory.AddFrameCreator(TagLib.Id3v2.FrameFactory.FrameCreator)">
            <summary>
               Adds a curstom frame creator to try before using standard
               frame creation methods.
            </summary>
            <param name="creator">
               A <see cref="T:TagLib.Id3v2.FrameFactory.FrameCreator" /> delegate to be used by the
               frame factory.
            </param>
            <remarks>
               Frame creators are used before standard methods so custom
               checking can be used and new formats can be added. They
               are executed in the reverse order in which they are
               added.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="creator" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="T:TagLib.Id3v2.FrameFlags">
            <summary>
               Indicates the flags applied to a <see cref="T:TagLib.Id3v2.FrameHeader" />
               object.
            </summary>
        </member>
        <member name="F:TagLib.Id3v2.FrameFlags.None">
            <summary>
               The header contains no flags.
            </summary>
        </member>
        <member name="F:TagLib.Id3v2.FrameFlags.TagAlterPreservation">
            <summary>
               Indicates that the frame is to be deleted if the tag is
               altered.
            </summary>
        </member>
        <member name="F:TagLib.Id3v2.FrameFlags.FileAlterPreservation">
            <summary>
               Indicates that the frame is to be deleted if the file is
               altered.
            </summary>
        </member>
        <member name="F:TagLib.Id3v2.FrameFlags.ReadOnly">
            <summary>
               Indicates that the frame is read-only and should not be
               altered.
            </summary>
        </member>
        <member name="F:TagLib.Id3v2.FrameFlags.GroupingIdentity">
            <summary>
               Indicates that the frame has a grouping identity.
            </summary>
        </member>
        <member name="F:TagLib.Id3v2.FrameFlags.Compression">
            <summary>
               Indicates that the frame data is compressed.
            </summary>
        </member>
        <member name="F:TagLib.Id3v2.FrameFlags.Encryption">
            <summary>
               Indicates that the frame data is encrypted.
            </summary>
        </member>
        <member name="F:TagLib.Id3v2.FrameFlags.Unsynchronisation">
            <summary>
               Indicates that the frame data has been unsynchronized.
            </summary>
        </member>
        <member name="F:TagLib.Id3v2.FrameFlags.DataLengthIndicator">
            <summary>
               Indicates that the frame has a data length indicator.
            </summary>
        </member>
        <member name="T:TagLib.Id3v2.FrameHeader">
            <summary>
               This structure provides a representation of an ID3v2 frame header
               which can be read from and written to disk.
            </summary>
        </member>
        <member name="F:TagLib.Id3v2.FrameHeader.frame_id">
            <summary>
               Contains frame's ID.
            </summary>
        </member>
        <member name="F:TagLib.Id3v2.FrameHeader.flags">
            <summary>
               Contains frame's flags.
            </summary>
        </member>
        <member name="M:TagLib.Id3v2.FrameHeader.#ctor(TagLib.ByteVector,System.Byte)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Id3v2.FrameHeader" /> by reading it from raw header data
               of a specified version.
            </summary>
            <param name="data">
               A <see cref="T:TagLib.ByteVector" /> object containing the raw
               data to build the new instance from.
            </param>
            <param name="version">
               A <see cref="T:System.Byte" /> value containing the ID3v2 version
               with which the data in <paramref name="data" /> was
               encoded.
            </param>
            <remarks>
               If the data size is smaller than the size of a full
               header, the data is just treated as a frame identifier 
               and the remaining values are zeroed.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="data" /> is <see langword="null" />.
            </exception>
            <exception cref="T:TagLib.CorruptFileException">
               <paramref name="data" /> is smaller than the size of a
               frame identifier or <paramref name="version" /> is less
               than 2 or more than 4.
            </exception>
        </member>
        <member name="P:TagLib.Id3v2.FrameHeader.FrameId">
            <summary>
               Gets and sets the identifier of the frame described by
               the current instance.
            </summary>
            <value>
               A <see cref="T:TagLib.ReadOnlyByteVector" /> object containing the
               identifier of the frame described by the current
               instance.
            </value>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="value" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="P:TagLib.Id3v2.FrameHeader.FrameSize">
            <summary>
               Gets and sets the size of the frame described by the
               current instance, minus the header.
            </summary>
            <value>
               A <see cref="T:System.UInt32" /> value containing the size of the
               frame described by the current instance.
            </value>
        </member>
        <member name="P:TagLib.Id3v2.FrameHeader.Flags">
            <summary>
               Gets and sets the flags applied to the current instance.
            </summary>
            <value>
               A bitwise combined <see cref="T:TagLib.Id3v2.HeaderFlags" /> value
               containing the flags applied to the current instance.
            </value>
            <exception cref="T:System.ArgumentException">
               <paramref name="value" /> contains a either compression
               or encryption, neither of which are supported by the
               library.
            </exception>
        </member>
        <member name="M:TagLib.Id3v2.FrameHeader.Render(System.Byte)">
            <summary>
               Renders the current instance, encoded in a specified
               ID3v2 version.
            </summary>
            <param name="version">
               A <see cref="T:System.Byte" /> value specifying the version of
               ID3v2 to use when encoding the current instance.
            </param>
            <returns>
               A <see cref="T:TagLib.ByteVector" /> object containing the
               rendered version of the current instance.
            </returns>
            <exception cref="T:System.NotImplementedException">
               The version specified in the current instance is
               unsupported.
            </exception>
        </member>
        <member name="M:TagLib.Id3v2.FrameHeader.Size(System.Byte)">
            <summary>
               Gets the size of a header for a specified ID3v2 version.
            </summary>
            <param name="version">
               A <see cref="T:System.Byte" /> value specifying the version of
               ID3v2 to get the size for.
            </param>
        </member>
        <member name="T:TagLib.Id3v2.AttachmentFrame">
            <summary>
               This class extends <see cref="T:TagLib.Id3v2.Frame" />, implementing support for
               ID3v2 Attached Picture (APIC), ID3v2 General Encapsulated 
               Object (GEOB) and Frames.
            </summary>
            <remarks>
               <para>A <see cref="T:TagLib.Id3v2.AttachmentFrame" /> is used for storing
               any file (picture or other types) that complement. 
               This is typically (but not only limited to) the album cover,
               the physical medium, leaflets, file icons or other files and
               object data.</para>
               <para>Additionally, <see cref="P:TagLib.Tag.Pictures" /> provides a
               generic way or getting and setting pictures/files which is 
               preferable to format specific code.</para>
            </remarks>
        </member>
        <member name="F:TagLib.Id3v2.AttachmentFrame.encoding">
            <summary>
               Contains the text encoding to use when rendering.
            </summary>
        </member>
        <member name="F:TagLib.Id3v2.AttachmentFrame.mime_type">
            <summary>
               Contains the mime type of <see cref="F:TagLib.Id3v2.AttachmentFrame.data" />.
            </summary>
        </member>
        <member name="F:TagLib.Id3v2.AttachmentFrame.type">
            <summary>
               Contains the type of picture.
            </summary>
        </member>
        <member name="F:TagLib.Id3v2.AttachmentFrame.filename">
            <summary>
               Contains the filename.
            </summary>
        </member>
        <member name="F:TagLib.Id3v2.AttachmentFrame.description">
            <summary>
               Contains the description.
            </summary>
        </member>
        <member name="F:TagLib.Id3v2.AttachmentFrame.data">
            <summary>
               Contains the picture data.
            </summary>
        </member>
        <member name="F:TagLib.Id3v2.AttachmentFrame.raw_data">
            <summary>
               Contains the raw field data of the current instance as
               sent to <see cref="M:TagLib.Id3v2.AttachmentFrame.ParseFields(TagLib.ByteVector,System.Byte)" /> or <see
               langword="null" /> if <see cref="M:TagLib.Id3v2.AttachmentFrame.ParseFields(TagLib.ByteVector,System.Byte)" /> has not
               been called or <see cref="M:TagLib.Id3v2.AttachmentFrame.ParseRawData" /> has been
               called.
            </summary>
            <remarks>
               As this frame takes a while to parse and isn't read in
               all cases, the raw data is stored here until it is
               needed. This speeds up the file read time significantly.
            </remarks>
        </member>
        <member name="F:TagLib.Id3v2.AttachmentFrame.raw_version">
            <summary>
               Contains the ID3v2 version <see cref="F:TagLib.Id3v2.AttachmentFrame.raw_data" /> is
               stored in.
            </summary>
        </member>
        <member name="F:TagLib.Id3v2.AttachmentFrame.file">
            <summary>
            Stream where the picture is located
            </summary>
        </member>
        <member name="F:TagLib.Id3v2.AttachmentFrame.stream_offset">
            <summary>
            Offset from where the picture start in the <see cref="F:TagLib.Id3v2.AttachmentFrame.file"/>
            </summary>
        </member>
        <member name="F:TagLib.Id3v2.AttachmentFrame.stream_size">
            <summary>
            Size of the picture in the <see cref="F:TagLib.Id3v2.AttachmentFrame.file"/> (-1 = until end of Stream)
            </summary>
        </member>
        <member name="M:TagLib.Id3v2.AttachmentFrame.#ctor">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Id3v2.AttachmentFrame" /> with no contents and the
               default values.
            </summary>
            <remarks>
               <para>When a frame is created, it is not automatically
               added to the tag. Consider using <see
               cref="M:TagLib.Id3v2.AttachmentFrame.Get(TagLib.Id3v2.Tag,System.String,TagLib.PictureType,System.Boolean)" /> for more
               integrated frame creation.</para>
               <para>Additionally, <see cref="P:TagLib.Tag.Pictures" />
               provides a generic way or getting and setting
               attachments which is preferable to format specific
               code.</para>
            </remarks>
        </member>
        <member name="M:TagLib.Id3v2.AttachmentFrame.#ctor(TagLib.IPicture)">
             <summary>
                Constructs and initializes a new instance of <see
                cref="T:TagLib.Id3v2.AttachmentFrame" /> by populating it with
                the contents of another <see cref="T:TagLib.IPicture" /> object.
             </summary>
             <param name="picture">
                A <see cref="T:TagLib.IPicture" /> object containing values to use
                in the new instance.
             </param>
             <exception cref="T:System.ArgumentNullException">
                <paramref name="picture" /> is <see langword="null" />.
             </exception>
             <remarks>
                <para>When a frame is created, it is not automatically
                added to the tag. Consider using <see
                cref="M:TagLib.Id3v2.AttachmentFrame.Get(TagLib.Id3v2.Tag,System.String,TagLib.PictureType,System.Boolean)" /> for more
                integrated frame creation.</para>
                <para>Additionally, <see cref="P:TagLib.Tag.Pictures" />
                provides a generic way or getting and setting
                attachments which is preferable to format specific
                code.</para>
             </remarks>
             <example>
                <para>Add a picture to a file.</para>
                <code lang="C#">
             using TagLib;
             using TagLib.Id3v2;
            
             public static class AddId3v2Picture
             {
             	public static void Main (string [] args)
             	{
             		if (args.Length != 2)
             			throw new ApplicationException (
             				"USAGE: AddId3v2Picture.exe AUDIO_FILE PICTURE_FILE");
            
             		// Create the file. Can throw file to TagLib# exceptions.
             		File file = File.Create (args [0]);
            
             		// Get or create the ID3v2 tag.
             		TagLib.Id3v2.Tag tag = file.GetTag (TagTypes.Id3v2, true) as TagLib.Id3v2.Tag;
             		if (tag == null)
             			throw new ApplicationException ("File does not support ID3v2 tags.");
            
             		// Create a picture. Can throw file related exceptions.
            			TagLib.Picture picture = TagLib.Picture.CreateFromPath (path);
            
             		// Add a new picture frame to the tag.
             		tag.AddFrame (new AttachedPictureFrame (picture));
            
             		// Save the file.
             		file.Save ();
             	}
             }
                </code>
             </example>
        </member>
        <member name="M:TagLib.Id3v2.AttachmentFrame.#ctor(TagLib.ByteVector,System.Byte)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Id3v2.AttachmentFrame" /> by reading its raw data in
               a specified ID3v2 version.
            </summary>
            <param name="data">
               A <see cref="T:TagLib.ByteVector" /> object starting with the raw
               representation of the new frame.
            </param>
            <param name="version">
               A <see cref="T:System.Byte" /> indicating the ID3v2 version the
               raw frame is encoded in.
            </param>
        </member>
        <member name="M:TagLib.Id3v2.AttachmentFrame.#ctor(TagLib.ByteVector,System.Int32,TagLib.Id3v2.FrameHeader,System.Byte)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Id3v2.AttachmentFrame" /> by reading its raw data
               in a specified ID3v2 version.
            </summary>
            <param name="data">
               A <see cref="T:TagLib.ByteVector" /> object containing the raw
               representation of the new frame.
            </param>
            <param name="offset">
               A <see cref="T:System.Int32" /> indicating at what offset in
               <paramref name="data" /> the frame actually begins.
            </param>
            <param name="header">
               A <see cref="T:TagLib.Id3v2.FrameHeader" /> containing the header of the
               frame found at <paramref name="offset" /> in the data.
            </param>
            <param name="version">
               A <see cref="T:System.Byte" /> indicating the ID3v2 version the
               raw frame is encoded in.
            </param>
        </member>
        <member name="M:TagLib.Id3v2.AttachmentFrame.#ctor(TagLib.File.IFileAbstraction,System.Int64,System.Int64,TagLib.Id3v2.FrameHeader,System.Byte)">
            <summary>
               Constructs a new instance of <see
               cref="T:TagLib.Id3v2.AttachmentFrame" /> from a file.
               The content will be lazily loaded.
            </summary>
            <param name="abstraction">
               A <see cref="T:TagLib.File.IFileAbstraction"/> object containing
               abstraction of the file to read.
            </param>
            <param name="offset">
               The position in bytes where the picture is located in the
               <see cref="T:TagLib.File.IFileAbstraction"/>.
            </param>
            <param name="size">
               The size in bytes of the picture in the
               <see cref="T:TagLib.File.IFileAbstraction"/> (-1 : read all).
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="abstraction" /> is <see langword="null"
               />.
            </exception>
            <param name="header">
               A <see cref="T:TagLib.Id3v2.FrameHeader" /> containing the header of the
               frame found at <paramref name="offset" /> in the data.
            </param>
            <param name="version">
               A <see cref="T:System.Byte" /> indicating the ID3v2 version the
               raw frame is encoded in.
            </param>
        </member>
        <member name="P:TagLib.Id3v2.AttachmentFrame.TextEncoding">
            <summary>
               Gets and sets the text encoding to use when storing the
               current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> containing the text encoding to
               use when storing the current instance.
            </value>
            <remarks>
               This encoding is overridden when rendering if <see
               cref="P:TagLib.Id3v2.Tag.ForceDefaultEncoding" /> is <see
               langword="true" /> or the render version does not support
               it.
            </remarks>
        </member>
        <member name="P:TagLib.Id3v2.AttachmentFrame.MimeType">
            <summary>
               Gets and sets the mime-type of the picture stored in the
               current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> containing the mime-type of the
               picture stored in the current instance.
            </value>
        </member>
        <member name="P:TagLib.Id3v2.AttachmentFrame.Type">
            <summary>
               Gets and sets the object type stored in the current
               instance.
            </summary>
            <value>
               A <see cref="T:TagLib.PictureType" /> containing the object type
               stored in the current instance.
            </value>
            <remarks>
               For a General Object Frame, use: 
               <see cref="F:TagLib.PictureType.NotAPicture" />.
               Other types will make it a Picture Frame
            </remarks>
        </member>
        <member name="P:TagLib.Id3v2.AttachmentFrame.Filename">
            <summary>
               Gets and sets a filename of the picture stored in the
               current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> object containing a fielname, with
               extension, of the picture stored in the current instance.
            </value>
        </member>
        <member name="P:TagLib.Id3v2.AttachmentFrame.Description">
            <summary>
               Gets and sets the description stored in the current
               instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> containing the description
               stored in the current instance.
            </value>
            <remarks>
               There should only be one frame with a matching
               description and type per tag.
            </remarks>
        </member>
        <member name="P:TagLib.Id3v2.AttachmentFrame.Data">
            <summary>
               Gets and sets the image data stored in the current
               instance.
            </summary>
            <value>
               A <see cref="T:TagLib.ByteVector" /> containing the image data
               stored in the current instance.
            </value>
        </member>
        <member name="P:TagLib.Id3v2.AttachmentFrame.IsLoaded">
            <summary>
               Gets an indication whether the object is loaded.
            </summary>
        </member>
        <member name="M:TagLib.Id3v2.AttachmentFrame.ToString">
            <summary>
               Gets a string representation of the current instance.
            </summary>
            <returns>
               A <see cref="T:System.String" /> representing the current
               instance.
            </returns>
        </member>
        <member name="M:TagLib.Id3v2.AttachmentFrame.Get(TagLib.Id3v2.Tag,System.String,System.Boolean)">
            <summary>
               Gets a specified picture frame from the specified tag,
               optionally creating it if it does not exist.
            </summary>
            <param name="tag">
               A <see cref="T:TagLib.Id3v2.Tag" /> object to search in.
            </param>
            <param name="description">
               A <see cref="T:System.String" /> specifying the description to
               match.
            </param>
            <param name="create">
               A <see cref="T:System.Boolean" /> specifying whether or not to create
               and add a new frame to the tag if a match is not found.
            </param>
            <returns>
               A <see cref="T:TagLib.Id3v2.AttachmentFrame" /> object containing
               the matching frame, or <see langword="null" /> if a match
               wasn't found and <paramref name="create" /> is <see
               langword="false" />.
            </returns>
        </member>
        <member name="M:TagLib.Id3v2.AttachmentFrame.Get(TagLib.Id3v2.Tag,TagLib.PictureType,System.Boolean)">
            <summary>
               Gets a specified picture frame from the specified tag,
               optionally creating it if it does not exist.
            </summary>
            <param name="tag">
               A <see cref="T:TagLib.Id3v2.Tag" /> object to search in.
            </param>
            <param name="type">
               A <see cref="T:TagLib.PictureType" /> specifying the picture type
               to match.
            </param>
            <param name="create">
               A <see cref="T:System.Boolean" /> specifying whether or not to create
               and add a new frame to the tag if a match is not found.
            </param>
            <returns>
               A <see cref="T:TagLib.Id3v2.AttachmentFrame" /> object containing
               the matching frame, or <see langword="null" /> if a match
               wasn't found and <paramref name="create" /> is <see
               langword="false" />.
            </returns>
        </member>
        <member name="M:TagLib.Id3v2.AttachmentFrame.Get(TagLib.Id3v2.Tag,System.String,TagLib.PictureType,System.Boolean)">
             <summary>
                Gets a specified attachment frame from the specified tag,
                optionally creating it if it does not exist.
             </summary>
             <param name="tag">
                A <see cref="T:TagLib.Id3v2.Tag" /> object to search in.
             </param>
             <param name="description">
                A <see cref="T:System.String" /> specifying the description to
                match.
             </param>
             <param name="type">
                A <see cref="T:TagLib.PictureType" /> specifying the picture type
                to match.
             </param>
             <param name="create">
                A <see cref="T:System.Boolean" /> specifying whether or not to create
                and add a new frame to the tag if a match is not found.
             </param>
             <returns>
                A <see cref="T:TagLib.Id3v2.AttachmentFrame" /> object containing
                the matching frame, or <see langword="null" /> if a match
                wasn't found and <paramref name="create" /> is <see
                langword="false" />.
             </returns>
             <example>
                <para>Sets a cover image with a description. Because <see
                cref="M:TagLib.Id3v2.AttachmentFrame.Get(TagLib.Id3v2.Tag,System.String,TagLib.PictureType,System.Boolean)" /> is used, if
                the program is called again with the same audio file and
                desciption, the picture will be overwritten with the new
                one.</para>
                <code lang="C#">
             using TagLib;
             using TagLib.Id3v2;
            
             public static class SetId3v2Cover
             {
             	public static void Main (string [] args)
             	{
             		if (args.Length != 3)
             			throw new ApplicationException (
             				"USAGE: SetId3v2Cover.exe AUDIO_FILE PICTURE_FILE DESCRIPTION");
            
             		// Create the file. Can throw file to TagLib# exceptions.
             		File file = File.Create (args [0]);
            
             		// Get or create the ID3v2 tag.
             		TagLib.Id3v2.Tag tag = file.GetTag (TagTypes.Id3v2, true) as TagLib.Id3v2.Tag;
             		if (tag == null)
             			throw new ApplicationException ("File does not support ID3v2 tags.");
            
             		// Create a picture. Can throw file related exceptions.
            		TagLib.Picture picture = TagLib.Picture.CreateFromPath (args [1]);
            
             		// Get or create the picture frame.
             		AttachedPictureFrame frame = AttachedPictureFrame.Get (
             			tag, args [2], PictureType.FrontCover, true);
            
             		// Set the data from the picture.
             		frame.MimeType = picture.MimeType;
             		frame.Data     = picture.data;
             		
             		// Save the file.
             		file.Save ();
             	}
             }
                </code>
             </example>
        </member>
        <member name="M:TagLib.Id3v2.AttachmentFrame.Load">
            <summary>
            Load the picture data from the file,
            if not done yet.
            </summary>
        </member>
        <member name="M:TagLib.Id3v2.AttachmentFrame.ParseFields(TagLib.ByteVector,System.Byte)">
            <summary>
               Populates the values in the current instance by parsing
               its field data in a specified version.
            </summary>
            <param name="data">
               A <see cref="T:TagLib.ByteVector" /> object containing the
               extracted field data.
            </param>
            <param name="version">
               A <see cref="T:System.Byte" /> indicating the ID3v2 version the
               field data is encoded in.
            </param>
            <exception cref="T:TagLib.CorruptFileException">
               <paramref name="data" /> contains less than 5 bytes.
            </exception>
        </member>
        <member name="M:TagLib.Id3v2.AttachmentFrame.ParseRawData">
            <summary>
               Performs the actual parsing of the raw data.
            </summary>
            <remarks>
               Because of the high parsing cost and relatively low usage
               of the class, <see cref="M:TagLib.Id3v2.AttachmentFrame.ParseFields(TagLib.ByteVector,System.Byte)" /> only stores the
               field data so it can be parsed on demand. Whenever a
               property or method is called which requires the data,
               this method is called, and only on the first call does it
               actually parse the data.
            </remarks>
        </member>
        <member name="M:TagLib.Id3v2.AttachmentFrame.RenderFields(System.Byte)">
            <summary>
               Renders the values in the current instance into field
               data for a specified version.
            </summary>
            <param name="version">
               A <see cref="T:System.Byte" /> indicating the ID3v2 version the
               field data is to be encoded in.
            </param>
            <returns>
               A <see cref="T:TagLib.ByteVector" /> object containing the
               rendered field data.
            </returns>
        </member>
        <member name="M:TagLib.Id3v2.AttachmentFrame.Clone">
            <summary>
               Creates a deep copy of the current instance.
            </summary>
            <returns>
               A new <see cref="T:TagLib.Id3v2.Frame" /> object identical to the
               current instance.
            </returns>
        </member>
        <member name="T:TagLib.Id3v2.AttachedPictureFrame">
            <summary>
               This class extends <see cref="T:TagLib.Id3v2.Frame" />, implementing support for
               ID3v2 Attached Picture (APIC) Frames.
            </summary>
            <remarks>
               <para>A <see cref="T:TagLib.Id3v2.AttachmentFrame" /> is used for storing
               pictures that complement the media, including the album cover,
               the physical medium, leaflets, file icons, etc. Other file and
               object data can be encapulsated via <see
               cref="T:TagLib.Id3v2.GeneralEncapsulatedObjectFrame" />.</para>
               <para>Additionally, <see cref="P:TagLib.Tag.Pictures" /> provides a
               generic way or getting and setting pictures which is preferable
               to format specific code.</para>
            </remarks>
        </member>
        <member name="M:TagLib.Id3v2.AttachedPictureFrame.#ctor">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Id3v2.AttachmentFrame" /> with no contents and the
               default values.
            </summary>
        </member>
        <member name="M:TagLib.Id3v2.AttachedPictureFrame.#ctor(TagLib.IPicture)">
             <summary>
                Constructs and initializes a new instance of <see
                cref="T:TagLib.Id3v2.AttachmentFrame" /> by populating it with
                the contents of another <see cref="T:TagLib.IPicture" /> object.
             </summary>
             <param name="picture">
                A <see cref="T:TagLib.IPicture" /> object containing values to use
                in the new instance.
             </param>
             <exception cref="T:System.ArgumentNullException">
                <paramref name="picture" /> is <see langword="null" />.
             </exception>
             <example>
                <para>Add a picture to a file.</para>
                <code lang="C#">
             using TagLib;
             using TagLib.Id3v2;
            
             public static class AddId3v2Picture
             {
             	public static void Main (string [] args)
             	{
             		if (args.Length != 2)
             			throw new ApplicationException (
             				"USAGE: AddId3v2Picture.exe AUDIO_FILE PICTURE_FILE");
            
             		// Create the file. Can throw file to TagLib# exceptions.
             		File file = File.Create (args [0]);
            
             		// Get or create the ID3v2 tag.
             		TagLib.Id3v2.Tag tag = file.GetTag (TagTypes.Id3v2, true) as TagLib.Id3v2.Tag;
             		if (tag == null)
             			throw new ApplicationException ("File does not support ID3v2 tags.");
            
             		// Create a picture. Can throw file related exceptions.
            			TagLib.Picture picture = TagLib.Picture.CreateFromPath (path);
            
             		// Add a new picture frame to the tag.
             		tag.AddFrame (new AttachedPictureFrame (picture));
            
             		// Save the file.
             		file.Save ();
             	}
             }
                </code>
             </example>
        </member>
        <member name="M:TagLib.Id3v2.AttachedPictureFrame.#ctor(TagLib.ByteVector,System.Byte)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Id3v2.AttachmentFrame" /> by reading its raw data in
               a specified ID3v2 version.
            </summary>
            <param name="data">
               A <see cref="T:TagLib.ByteVector" /> object starting with the raw
               representation of the new frame.
            </param>
            <param name="version">
               A <see cref="T:System.Byte" /> indicating the ID3v2 version the
               raw frame is encoded in.
            </param>
        </member>
        <member name="M:TagLib.Id3v2.AttachedPictureFrame.#ctor(TagLib.ByteVector,System.Int32,TagLib.Id3v2.FrameHeader,System.Byte)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Id3v2.AttachmentFrame" /> by reading its raw data
               in a specified ID3v2 version.
            </summary>
            <param name="data">
               A <see cref="T:TagLib.ByteVector" /> object containing the raw
               representation of the new frame.
            </param>
            <param name="offset">
               A <see cref="T:System.Int32" /> indicating at what offset in
               <paramref name="data" /> the frame actually begins.
            </param>
            <param name="header">
               A <see cref="T:TagLib.Id3v2.FrameHeader" /> containing the header of the
               frame found at <paramref name="offset" /> in the data.
            </param>
            <param name="version">
               A <see cref="T:System.Byte" /> indicating the ID3v2 version the
               raw frame is encoded in.
            </param>
        </member>
        <member name="T:TagLib.Id3v2.GeneralEncapsulatedObjectFrame">
            <summary>
               This class extends <see cref="T:TagLib.Id3v2.Frame" />, implementing support for
               ID3v2 General Encapsulated Object (GEOB) Frames.
            </summary>
            <remarks>
               <para>A <see cref="T:TagLib.Id3v2.GeneralEncapsulatedObjectFrame" /> should be
               used for storing files and other objects relevant to the file but
               not supported by other frames.</para>
            </remarks>
        </member>
        <member name="M:TagLib.Id3v2.GeneralEncapsulatedObjectFrame.#ctor">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Id3v2.GeneralEncapsulatedObjectFrame" /> with no
               contents.
            </summary>
        </member>
        <member name="M:TagLib.Id3v2.GeneralEncapsulatedObjectFrame.#ctor(TagLib.ByteVector,System.Byte)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Id3v2.GeneralEncapsulatedObjectFrame" /> by reading its
               raw data in a specified ID3v2 version.
            </summary>
            <param name="data">
               A <see cref="T:TagLib.ByteVector" /> object starting with the raw
               representation of the new frame.
            </param>
            <param name="version">
               A <see cref="T:System.Byte" /> indicating the ID3v2 version the
               raw frame is encoded in.
            </param>
        </member>
        <member name="M:TagLib.Id3v2.GeneralEncapsulatedObjectFrame.#ctor(TagLib.ByteVector,System.Int32,TagLib.Id3v2.FrameHeader,System.Byte)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Id3v2.GeneralEncapsulatedObjectFrame" /> by reading its
               raw data in a specified ID3v2 version.
            </summary>
            <param name="data">
               A <see cref="T:TagLib.ByteVector" /> object containing the raw
               representation of the new frame.
            </param>
            <param name="offset">
               A <see cref="T:System.Int32" /> indicating at what offset in
               <paramref name="data" /> the frame actually begins.
            </param>
            <param name="header">
               A <see cref="T:TagLib.Id3v2.FrameHeader" /> containing the header of the
               frame found at <paramref name="offset" /> in the data.
            </param>
            <param name="version">
               A <see cref="T:System.Byte" /> indicating the ID3v2 version the
               raw frame is encoded in.
            </param>
        </member>
        <member name="P:TagLib.Id3v2.GeneralEncapsulatedObjectFrame.FileName">
            <summary>
               Gets and sets the file name of the object stored in the
               current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> containing the file name of the
               object stored in the current instance.
            </value>
        </member>
        <member name="P:TagLib.Id3v2.GeneralEncapsulatedObjectFrame.Object">
            <summary>
               Gets and sets the object data stored in the current
               instance.
            </summary>
            <value>
               A <see cref="T:TagLib.ByteVector" /> containing the object data
               stored in the current instance.
            </value>
        </member>
        <member name="T:TagLib.Id3v2.ChapterFrame">
             <summary>
                This class extends <see cref="T:TagLib.Id3v2.Frame" /> to provide support for
                Chapter Frames, i.e. "<c>CHAP</c>", (ID3v2 Chapter Frame Addendum 1.0,
                https://id3.org/id3v2-chapters-1.0).
             </summary>
             <remarks>
                The Chapter Frame is special in that it can hold an arbitrary amount
                of sub-frames, which are made available here in the SubFrames list.
            
                Each Chapter Frame must have an identifying string that is unique across
                all <see cref="T:TagLib.Id3v2.ChapterFrame"/>s and <see cref="T:TagLib.Id3v2.TableOfContentsFrame"/>s
                in the tag. This is the property <see cref="P:TagLib.Id3v2.ChapterFrame.Id"/>. It is not intended
                for humans consumption and players will not display it. A chapter can
                be titled by adding a "<c>TIT2</c>" <see cref="T:TagLib.Id3v2.TextInformationFrame"/>.
            
                There are two ways the Chapter Frame can state a chapter’s beginning
                and end: by milliseconds or by byte offset, accessible here as
                StartMilliseconds/EndMilliseconds and StartByteOffset/EndByteOffset
                respectively. The byte offsets are the zero-based byte positions of
                the first audio frame in the chapter or the first audio frame folliwing
                the chapter, counted from the beginning of the file. The byte offsets
                are to be ignored according to the spec if they are FF FF FF FF. This
                class does not synchronize the two ways in any way, so make sure to set
                both appropriately. The byte offsets are however initialized to be
                ignored, so with blank frames, you can focus on the milliseconds.
            
                According to the spec, chapters may overlap and have gaps.
             </remarks>
        </member>
        <member name="M:TagLib.Id3v2.ChapterFrame.#ctor">
            <summary>
               Constructs and initializes a new empty instance of <see
               cref="T:TagLib.Id3v2.ChapterFrame" />.
            </summary>
        </member>
        <member name="M:TagLib.Id3v2.ChapterFrame.#ctor(System.String)">
            <summary>
               Constructs and initializes a new empty instance of <see
               cref="T:TagLib.Id3v2.ChapterFrame" /> with the given chapter ID.
            </summary>
        </member>
        <member name="M:TagLib.Id3v2.ChapterFrame.#ctor(System.String,System.String)">
            <summary>
               Constructs and initializes a new instance of <see cref="T:TagLib.Id3v2.ChapterFrame" />
               with the given chapter ID and adds a <see cref="T:TagLib.Id3v2.TextInformationFrame"/>
               "<c>TIT2</c>" with the given title.
            </summary>
        </member>
        <member name="M:TagLib.Id3v2.ChapterFrame.#ctor(TagLib.ByteVector,System.Byte)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Id3v2.ChapterFrame" /> by reading its raw data in a
               specified ID3v2 version.
            </summary>
            <param name="data">
               A <see cref="T:TagLib.ByteVector" /> object starting with the raw
               representation of the new frame.
            </param>
            <param name="version">
               A <see cref="T:System.Byte" /> indicating the ID3v2 version the
               raw frame is encoded in.
            </param>
        </member>
        <member name="M:TagLib.Id3v2.ChapterFrame.#ctor(TagLib.ByteVector,System.Int32,TagLib.Id3v2.FrameHeader,System.Byte)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Id3v2.ChapterFrame" /> by reading its raw data in a
               specified ID3v2 version.
            </summary>
            <param name="data">
               A <see cref="T:TagLib.ByteVector" /> object containing the raw
               representation of the new frame.
            </param>
            <param name="offset">
               A <see cref="T:System.Int32" /> indicating at what offset in
               <paramref name="data" /> the frame actually begins.
            </param>
            <param name="header">
               A <see cref="T:TagLib.Id3v2.FrameHeader" /> containing the header of the
               frame found at <paramref name="offset" /> in the data.
            </param>
            <param name="version">
               A <see cref="T:System.Byte" /> indicating the ID3v2 version the
               raw frame is encoded in.
            </param>
        </member>
        <member name="P:TagLib.Id3v2.ChapterFrame.Id">
            <summary>
               Gets and sets the internal chapter id. This should be
               <see cref="F:TagLib.StringType.Latin1" /> .
            </summary>
        </member>
        <member name="P:TagLib.Id3v2.ChapterFrame.StartMilliseconds">
            <summary>
               Gets and sets the start time of the chapter in milliseconds.
            </summary>
        </member>
        <member name="P:TagLib.Id3v2.ChapterFrame.EndMilliseconds">
            <summary>
               Gets and sets the end time of the chapter in milliseconds.
            </summary>
        </member>
        <member name="P:TagLib.Id3v2.ChapterFrame.StartByteOffset">
            <summary>
               Gets and sets the chapter’s first audio frame’s byte position
               from the beginning of the file.
               The spec makes this ignorable if it is FF FF FF FF, which is
               the initial value.
            </summary>
        </member>
        <member name="P:TagLib.Id3v2.ChapterFrame.EndByteOffset">
            <summary>
               Gets and sets the byte position of the first audio frame following
               the chapter from the beginning of the file.
               The spec makes this ignorable if it is FF FF FF FF, which is
               the initial value.
            </summary>
        </member>
        <member name="P:TagLib.Id3v2.ChapterFrame.SubFrames">
            <summary>
               Gets and sets the descriptive sub-fields for this chapter. It
               is recommended by the spec to have at least a "<c>TIT2</c>"
               <see cref="T:TagLib.Id3v2.TextInformationFrame"/> with the chapter title, but
               it can contain anything. Particularly, players like to display
               per-chapter "<c>APIC</c>" <see cref="T:TagLib.Id3v2.AttachmentFrame"/>s and
               <see cref="T:TagLib.Id3v2.UrlLinkFrame"/>s.
            </summary>
            <value>
               A List of arbitrary <see cref="T:TagLib.Id3v2.Frame" />s.
            </value>
        </member>
        <member name="M:TagLib.Id3v2.ChapterFrame.ParseFields(TagLib.ByteVector,System.Byte)">
            <summary>
               Populates the values in the current instance by parsing
               its field data in a specified version.
            </summary>
            <param name="data">
               A <see cref="T:TagLib.ByteVector" /> object containing the
               extracted field data.
            </param>
            <param name="version">
               A <see cref="T:System.Byte" /> indicating the ID3v2 version the
               field data is encoded in.
            </param>
        </member>
        <member name="M:TagLib.Id3v2.ChapterFrame.RenderFields(System.Byte)">
            <summary>
               Renders the values in the current instance into field
               data for a specified version.
            </summary>
            <param name="version">
               A <see cref="T:System.Byte" /> indicating the ID3v2 version the
               field data is to be encoded in.
            </param>
            <returns>
               A <see cref="T:TagLib.ByteVector" /> object containing the
               rendered field data.
            </returns>
        </member>
        <member name="M:TagLib.Id3v2.ChapterFrame.Clone">
            <summary>
               Creates a deep copy of the current instance.
            </summary>
            <returns>
               A new <see cref="T:TagLib.Id3v2.Frame" /> object identical to the
               current instance.
            </returns>
        </member>
        <member name="T:TagLib.Id3v2.CommentsFrame">
            <summary>
               This class extends <see cref="T:TagLib.Id3v2.Frame" />, implementing support for
               ID3v2 Comments (COMM) Frames.
            </summary>
            <remarks>
               <para>A <see cref="T:TagLib.Id3v2.CommentsFrame" /> should be used for storing
               user readable comments on the media file.</para>
               <para>When reading comments from a file, <see cref="M:TagLib.Id3v2.CommentsFrame.GetPreferred(TagLib.Id3v2.Tag,System.String,System.String)"
               /> should be used as it gracefully falls back to comments that
               you, as a developer, may not be expecting. When writing comments,
               however, it is best to use <see cref="M:TagLib.Id3v2.CommentsFrame.Get(TagLib.Id3v2.Tag,System.String,System.String,System.Boolean)" /> as it forces it to
               be written in the exact version you are expecting.</para>
            </remarks>
        </member>
        <member name="F:TagLib.Id3v2.CommentsFrame.language">
            <summary>
               Contains the text encoding to use when rendering the
               current instance.
            </summary>
            <summary>
               Contains the ISO-639-2 language code of the current
               instance.
            </summary>
        </member>
        <member name="F:TagLib.Id3v2.CommentsFrame.description">
            <summary>
               Contains the description of the current instance.
            </summary>
        </member>
        <member name="F:TagLib.Id3v2.CommentsFrame.text">
            <summary>
               Contains the comment text of the current instance.
            </summary>
        </member>
        <member name="M:TagLib.Id3v2.CommentsFrame.#ctor(System.String,System.String,TagLib.StringType)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Id3v2.CommentsFrame" /> with a specified description,
               ISO-639-2 language code, and text encoding.
            </summary>
            <param name="description">
               A <see cref="T:System.String" /> containing the description of the
               new frame.
            </param>
            <param name="language">
               A <see cref="T:System.String" /> containing the ISO-639-2 language
               code of the new frame.
            </param>
            <param name="encoding">
               A <see cref="T:TagLib.StringType" /> containing the text encoding
               to use when rendering the new frame.
            </param>
            <remarks>
               When a frame is created, it is not automatically added to
               the tag. Consider using <see cref="M:TagLib.Id3v2.CommentsFrame.Get(TagLib.Id3v2.Tag,System.String,System.String,System.Boolean)" /> for more
               integrated frame creation.
            </remarks>
        </member>
        <member name="M:TagLib.Id3v2.CommentsFrame.#ctor(System.String,System.String)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Id3v2.CommentsFrame" /> with a specified description and
               ISO-639-2 language code.
            </summary>
            <param name="description">
               A <see cref="T:System.String" /> containing the description of the
               new frame.
            </param>
            <param name="language">
               A <see cref="T:System.String" /> containing the ISO-639-2 language
               code of the new frame.
            </param>
            <remarks>
               When a frame is created, it is not automatically added to
               the tag. Consider using <see cref="M:TagLib.Id3v2.CommentsFrame.Get(TagLib.Id3v2.Tag,System.String,System.String,System.Boolean)" /> for more
               integrated frame creation.
            </remarks>
        </member>
        <member name="M:TagLib.Id3v2.CommentsFrame.#ctor(System.String)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Id3v2.CommentsFrame" /> with a specified description.
            </summary>
            <param name="description">
               A <see cref="T:System.String" /> containing the description of the
               new frame.
            </param>
            <remarks>
               When a frame is created, it is not automatically added to
               the tag. Consider using <see cref="M:TagLib.Id3v2.CommentsFrame.Get(TagLib.Id3v2.Tag,System.String,System.String,System.Boolean)" /> for more
               integrated frame creation.
            </remarks>
        </member>
        <member name="M:TagLib.Id3v2.CommentsFrame.#ctor(TagLib.ByteVector,System.Byte)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Id3v2.CommentsFrame" /> by reading its raw data in a
               specified ID3v2 version.
            </summary>
            <param name="data">
               A <see cref="T:TagLib.ByteVector" /> object starting with the raw
               representation of the new frame.
            </param>
            <param name="version">
               A <see cref="T:System.Byte" /> indicating the ID3v2 version the
               raw frame is encoded in.
            </param>
        </member>
        <member name="M:TagLib.Id3v2.CommentsFrame.#ctor(TagLib.ByteVector,System.Int32,TagLib.Id3v2.FrameHeader,System.Byte)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Id3v2.CommentsFrame" /> by reading its raw data in a
               specified ID3v2 version.
            </summary>
            <param name="data">
               A <see cref="T:TagLib.ByteVector" /> object containing the raw
               representation of the new frame.
            </param>
            <param name="offset">
               A <see cref="T:System.Int32" /> indicating at what offset in
               <paramref name="data" /> the frame actually begins.
            </param>
            <param name="header">
               A <see cref="T:TagLib.Id3v2.FrameHeader" /> containing the header of the
               frame found at <paramref name="offset" /> in the data.
            </param>
            <param name="version">
               A <see cref="T:System.Byte" /> indicating the ID3v2 version the
               raw frame is encoded in.
            </param>
        </member>
        <member name="P:TagLib.Id3v2.CommentsFrame.TextEncoding">
            <summary>
               Gets and sets the text encoding to use when storing the
               current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> containing the text encoding to
               use when storing the current instance.
            </value>
            <remarks>
               This encoding is overridden when rendering if <see
               cref="P:TagLib.Id3v2.Tag.ForceDefaultEncoding" /> is <see
               langword="true" /> or the render version does not support
               it.
            </remarks>
        </member>
        <member name="P:TagLib.Id3v2.CommentsFrame.Language">
            <summary>
               Gets and sets the ISO-639-2 language code stored in the
               current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> containing the ISO-639-2 language
               code stored in the current instance.
            </value>
            <remarks>
               There should only be one file with a matching description
               and ISO-639-2 language code per tag.
            </remarks>
        </member>
        <member name="P:TagLib.Id3v2.CommentsFrame.Description">
            <summary>
               Gets and sets the description stored in the current
               instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> containing the description
               stored in the current instance.
            </value>
            <remarks>
               There should only be one frame with a matching
               description and ISO-639-2 language code per tag.
            </remarks>
        </member>
        <member name="P:TagLib.Id3v2.CommentsFrame.Text">
            <summary>
               Gets and sets the comment text stored in the current
               instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> containing the comment text
               stored in the current instance.
            </value>
        </member>
        <member name="M:TagLib.Id3v2.CommentsFrame.ToString">
            <summary>
               Gets a string representation of the current instance.
            </summary>
            <returns>
               A <see cref="T:System.String" /> containing the comment text.
            </returns>
        </member>
        <member name="M:TagLib.Id3v2.CommentsFrame.Get(TagLib.Id3v2.Tag,System.String,System.String,System.Boolean)">
            <summary>
               Gets a specified comments frame from the specified tag,
               optionally creating it if it does not exist.
            </summary>
            <param name="tag">
               A <see cref="T:TagLib.Id3v2.Tag" /> object to search in.
            </param>
            <param name="description">
               A <see cref="T:System.String" /> specifying the description to
               match.
            </param>
            <param name="language">
               A <see cref="T:System.String" /> specifying the ISO-639-2 language
              code to match.
            </param>
            <param name="create">
               A <see cref="T:System.Boolean" /> specifying whether or not to create
               and add a new frame to the tag if a match is not found.
            </param>
            <returns>
               A <see cref="T:TagLib.Id3v2.CommentsFrame" /> object containing the
               matching frame, or <see langword="null" /> if a match
               wasn't found and <paramref name="create" /> is <see
               langword="false" />.
            </returns>
        </member>
        <member name="M:TagLib.Id3v2.CommentsFrame.GetPreferred(TagLib.Id3v2.Tag,System.String,System.String)">
            <summary>
               Gets a specified comments frame from the specified tag,
               trying to to match the description and language but
               accepting an incomplete match.
            </summary>
            <param name="tag">
               A <see cref="T:TagLib.Id3v2.Tag" /> object to search in.
            </param>
            <param name="description">
               A <see cref="T:System.String" /> specifying the description to
               match.
            </param>
            <param name="language">
               A <see cref="T:System.String" /> specifying the ISO-639-2 language
              code to match.
            </param>
            <returns>
               A <see cref="T:TagLib.Id3v2.CommentsFrame" /> object containing the
               matching frame, or <see langword="null" /> if a match
               wasn't found.
            </returns>
            <remarks>
               <para>The method tries matching with the following order
               of precidence:</para>
               <list type="number">
                  <item><term>The first frame with a matching
                  description and language.</term></item>
                  <item><term>The first frame with a matching
                  language.</term></item>
                  <item><term>The first frame with a matching
                  description.</term></item>
                  <item><term>The first frame.</term></item>
               </list>
            </remarks>
        </member>
        <member name="M:TagLib.Id3v2.CommentsFrame.ParseFields(TagLib.ByteVector,System.Byte)">
            <summary>
               Populates the values in the current instance by parsing
               its field data in a specified version.
            </summary>
            <param name="data">
               A <see cref="T:TagLib.ByteVector" /> object containing the
               extracted field data.
            </param>
            <param name="version">
               A <see cref="T:System.Byte" /> indicating the ID3v2 version the
               field data is encoded in.
            </param>
        </member>
        <member name="M:TagLib.Id3v2.CommentsFrame.RenderFields(System.Byte)">
            <summary>
               Renders the values in the current instance into field
               data for a specified version.
            </summary>
            <param name="version">
               A <see cref="T:System.Byte" /> indicating the ID3v2 version the
               field data is to be encoded in.
            </param>
            <returns>
               A <see cref="T:TagLib.ByteVector" /> object containing the
               rendered field data.
            </returns>
        </member>
        <member name="M:TagLib.Id3v2.CommentsFrame.Clone">
            <summary>
               Creates a deep copy of the current instance.
            </summary>
            <returns>
               A new <see cref="T:TagLib.Id3v2.Frame" /> object identical to the
               current instance.
            </returns>
        </member>
        <member name="T:TagLib.Id3v2.EventTimeCodesFrame">
             <summary>
                This class extends <see cref="T:TagLib.Id3v2.Frame" />, implementing support for
                ID3v2 Event Time Codes (ETCO) Frames.
             </summary>
             <remarks>
                Event time codes Frames should contain a list of events occurring 
                throughout the track such as the start of the main part and the end of it.
                To see all available event types see <see cref="T:TagLib.Id3v2.EventType"/>.
             </remarks>
             <example>
                <para>Reading the Event Time Codes from a tag.</para>
                <code lang="C#">
             using TagLib;
             using TagLib.Id3v2;
             
             public static class LookupUtil
             {
             	public static ByteVector GetTrackEvents(string filename)
             	{
             		File file = File.Create (filename, ReadStyle.None);
             		Id3v2.Tag tag = file.GetTag (TagTypes.Id3v2, false) as Id3v2.Tag;
             		if (tag == null)
             			return new ByteVector ();
             		
             		EventTimeCodesFrame frame = EventTimeCodesFrame.Get (tag, false);
             		if (frame == null)
             			return new ByteVector ();
            
             		return frame.Data;
             	}
             }
                </code>
                <code lang="C++">
             #using &lt;System.dll>
             #using &lt;taglib-sharp.dll>
            
             using System;
             using TagLib;
             using TagLib::Id3v2;
             
             public ref class LookupUtil abstract sealed
             {
             public:
             	static ByteVector^ GetTrackEvents (String^ filename)
             	{
             		File^ file = File::Create (filename, ReadStyle::None);
             		Id3v2::Tag^ tag = dynamic_cast&lt;Id3v2::Tag^> (file.GetTag (TagTypes::Id3v2, false));
             		if (tag == null)
             			return gcnew ByteVector;
             		
             		EventTimeCodesFrame^ frame = EventTimeCodesFrame::Get (tag, false);
             		if (frame == null)
             			return gcnew ByteVector;
            
             		return frame->Data;
             	}
             }
                </code>
                <code lang="VB">
             Imports TagLib
             Imports TagLib.Id3v2
             
             Public Shared Class LookupUtil
             	Public Shared Sub GetTrackEvents (filename As String) As TagLib.ByteVector
             		Dim file As File = File.Create (filename, ReadStyle.None)
             		Dim tag As Id3v2.Tag = file.GetTag (TagTypes.Id3v2, False)
             		If tag Is Nothing Return New ByteVector ()
             		
             		Dim frame As EventTimeCodesFrame = EventTimeCodesFrame.Get (tag, False)
             		If frame Is Nothing Return New ByteVector ()
            
             		Return frame.Data
             	End Sub
             End Class
                </code>
                <code lang="Boo">
             import TagLib
             import TagLib.Id3v2
             
             public static class LookupUtil:
             	static def GetTrackEvents (filename as string) as TagLib.ByteVector:
             		file as File = File.Create (filename, ReadStyle.None)
             		tag as Id3v2.Tag = file.GetTag (TagTypes.Id3v2, false)
             		if tag == null:
             			return ByteVector ()
             		
             		frame as EventTimeCodesFrame = EventTimeCodesFrame.Get (tag, false)
             		if frame == null:
             			return ByteVector ()
            
             		return frame.Data
                </code>
             </example>
        </member>
        <member name="M:TagLib.Id3v2.EventTimeCodesFrame.#ctor">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Id3v2.EventTimeCodesFrame" /> with empty
               identifier data.
            </summary>
            <remarks>
               When a frame is created, it is not automatically added to
               the tag. Consider using <see cref="M:TagLib.Id3v2.EventTimeCodesFrame.Get(TagLib.Id3v2.Tag,System.Boolean)" /> for more
               integrated frame creation.
            </remarks>
        </member>
        <member name="M:TagLib.Id3v2.EventTimeCodesFrame.#ctor(TagLib.Id3v2.TimestampFormat)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Id3v2.EventTimeCodesFrame" /> by reading its raw data
               in a specified ID3v2 version.
            </summary>
            <param name="timestampFormat">
               A <see cref="P:TagLib.Id3v2.EventTimeCodesFrame.TimestampFormat" /> Specifies the time unit to use in this frame.
            </param>
        </member>
        <member name="M:TagLib.Id3v2.EventTimeCodesFrame.#ctor(TagLib.ByteVector,System.Byte)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Id3v2.EventTimeCodesFrame" /> by reading its raw data
               in a specified ID3v2 version.
            </summary>
            <param name="data">
               A <see cref="T:TagLib.ByteVector" /> object starting with the raw
               representation of the new frame.
            </param>
            <param name="version">
               A <see cref="T:System.Byte" /> indicating the ID3v2 version the
               raw frame is encoded in.
            </param>
        </member>
        <member name="M:TagLib.Id3v2.EventTimeCodesFrame.#ctor(TagLib.Id3v2.FrameHeader)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Id3v2.EventTimeCodesFrame" /> by reading its raw data
               in a specified ID3v2 version.
            </summary>
            <param name="frameHeader">
               A <see cref="T:TagLib.Id3v2.FrameHeader" /> containing the header of the frame
            </param>
        </member>
        <member name="M:TagLib.Id3v2.EventTimeCodesFrame.#ctor(TagLib.ByteVector,System.Int32,TagLib.Id3v2.FrameHeader,System.Byte)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Id3v2.EventTimeCodesFrame" /> by reading its raw data
               in a specified ID3v2 version.
            </summary>
            <param name="data">
               A <see cref="T:TagLib.ByteVector" /> object containing the raw
               representation of the new frame.
            </param>
            <param name="offset">
               A <see cref="T:System.Int32" /> indicating at what offset in
               <paramref name="data" /> the frame actually begins.
            </param>
            <param name="header">
               A <see cref="T:TagLib.Id3v2.FrameHeader" /> containing the header of the
               frame found at <paramref name="offset" /> in the data.
            </param>
            <param name="version">
               A <see cref="T:System.Byte" /> indicating the ID3v2 version the
               raw frame is encoded in.
            </param>
        </member>
        <member name="P:TagLib.Id3v2.EventTimeCodesFrame.TimestampFormat">
            <summary>
            Gets or sets the timestamp format for this frame instance.
            </summary>
            <value>
            A <see cref="P:TagLib.Id3v2.EventTimeCodesFrame.TimestampFormat"/> that will be used in this frame instance.
            </value>
        </member>
        <member name="P:TagLib.Id3v2.EventTimeCodesFrame.Events">
            <summary>
            Gets or sets the events this frame contains.
            Each <see cref="T:TagLib.Id3v2.EventTimeCode"/> represents a single event at a certain point in time.
            </summary>
            <value>
            A <see cref="T:System.Collections.Generic.List`1"/> that are stored in this frame instance.
            </value>
        </member>
        <member name="M:TagLib.Id3v2.EventTimeCodesFrame.Get(TagLib.Id3v2.Tag,System.Boolean)">
            <summary>
               Gets a play count frame from a specified tag, optionally
               creating it if it does not exist.
            </summary>
            <param name="tag">
               A <see cref="T:TagLib.Id3v2.Tag" /> object to search in.
            </param>
            <param name="create">
               A <see cref="T:System.Boolean" /> specifying whether or not to create
               and add a new frame to the tag if a match is not found.
            </param>
            <returns>
               A <see cref="T:TagLib.Id3v2.EventTimeCodesFrame" /> object containing the
               matching frame, or <see langword="null" /> if a match
               wasn't found and <paramref name="create" /> is <see
               langword="false" />.
            </returns>
        </member>
        <member name="M:TagLib.Id3v2.EventTimeCodesFrame.ParseFields(TagLib.ByteVector,System.Byte)">
            <summary>
               Populates the values in the current instance by parsing
               its field data in a specified version.
            </summary>
            <param name="data">
               A <see cref="T:TagLib.ByteVector" /> object containing the
               extracted field data.
            </param>
            <param name="version">
               A <see cref="T:System.Byte" /> indicating the ID3v2 version the
               field data is encoded in.
            </param>
        </member>
        <member name="M:TagLib.Id3v2.EventTimeCodesFrame.RenderFields(System.Byte)">
            <summary>
               Renders the values in the current instance into field
               data for a specified version.
            </summary>
            <param name="version">
               A <see cref="T:System.Byte" /> indicating the ID3v2 version the
               field data is to be encoded in.
            </param>
            <returns>
               A <see cref="T:TagLib.ByteVector" /> object containing the
               rendered field data.
            </returns>
        </member>
        <member name="M:TagLib.Id3v2.EventTimeCodesFrame.Clone">
            <summary>
               Creates a deep copy of the current instance.
            </summary>
            <returns>
               A new <see cref="T:TagLib.Id3v2.Frame" /> object identical to the
               current instance.
            </returns>
        </member>
        <member name="T:TagLib.Id3v2.MusicCdIdentifierFrame">
             <summary>
                This class extends <see cref="T:TagLib.Id3v2.Frame" />, implementing support for
                ID3v2 Music CD Identifier (MCDI) Frames.
             </summary>
             <remarks>
                Music CD Identifier Frames should contain the table of
                contents data as stored on the physical CD. It is primarily used
                for track information lookup by through web sources like CDDB.
             </remarks>
             <example>
                <para>Reading the music CD identifier from a tag.</para>
                <code lang="C#">
             using TagLib;
             using TagLib.Id3v2;
             
             public static class LookupUtil
             {
             	public static ByteVector GetCdIdentifier (string filename)
             	{
             		File file = File.Create (filename, ReadStyle.None);
             		Id3v2.Tag tag = file.GetTag (TagTypes.Id3v2, false) as Id3v2.Tag;
             		if (tag == null)
             			return new ByteVector ();
             		
             		MusicCdIdentifierFrame frame = MusicCdIdentifierFrame.Get (tag, false);
             		if (frame == null)
             			return new ByteVector ();
            
             		return frame.Data;
             	}
             }
                </code>
                <code lang="C++">
             #using &lt;System.dll>
             #using &lt;taglib-sharp.dll>
            
             using System;
             using TagLib;
             using TagLib::Id3v2;
             
             public ref class LookupUtil abstract sealed
             {
             public:
             	static ByteVector^ GetCdIdentifier (String^ filename)
             	{
             		File^ file = File::Create (filename, ReadStyle::None);
             		Id3v2::Tag^ tag = dynamic_cast&lt;Id3v2::Tag^> (file.GetTag (TagTypes::Id3v2, false));
             		if (tag == null)
             			return gcnew ByteVector;
             		
             		MusicCdIdentifierFrame^ frame = MusicCdIdentifierFrame::Get (tag, false);
             		if (frame == null)
             			return gcnew ByteVector;
            
             		return frame->Data;
             	}
             }
                </code>
                <code lang="VB">
             Imports TagLib
             Imports TagLib.Id3v2
             
             Public Shared Class LookupUtil
             	Public Shared Sub GetCdIdentifier (filename As String) As TagLib.ByteVector
             		Dim file As File = File.Create (filename, ReadStyle.None)
             		Dim tag As Id3v2.Tag = file.GetTag (TagTypes.Id3v2, False)
             		If tag Is Nothing Return New ByteVector ()
             		
             		Dim frame As MusicCdIdentifierFrame = MusicCdIdentifierFrame.Get (tag, False)
             		If frame Is Nothing Return New ByteVector ()
            
             		Return frame.Data
             	End Sub
             End Class
                </code>
                <code lang="Boo">
             import TagLib
             import TagLib.Id3v2
             
             public static class LookupUtil:
             	static def GetCdIdentifier (filename as string) as TagLib.ByteVector:
             		file as File = File.Create (filename, ReadStyle.None)
             		tag as Id3v2.Tag = file.GetTag (TagTypes.Id3v2, false)
             		if tag == null:
             			return ByteVector ()
             		
             		frame as MusicCdIdentifierFrame = MusicCdIdentifierFrame.Get (tag, false)
             		if frame == null:
             			return ByteVector ()
            
             		return frame.Data
                </code>
             </example>
        </member>
        <member name="M:TagLib.Id3v2.MusicCdIdentifierFrame.#ctor">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Id3v2.MusicCdIdentifierFrame" /> with empty
               identifier data.
            </summary>
            <remarks>
               When a frame is created, it is not automatically added to
               the tag. Consider using <see cref="M:TagLib.Id3v2.MusicCdIdentifierFrame.Get(TagLib.Id3v2.Tag,System.Boolean)" /> for more
               integrated frame creation.
            </remarks>
        </member>
        <member name="M:TagLib.Id3v2.MusicCdIdentifierFrame.#ctor(TagLib.ByteVector,System.Byte)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Id3v2.MusicCdIdentifierFrame" /> by reading its raw data
               in a specified ID3v2 version.
            </summary>
            <param name="data">
               A <see cref="T:TagLib.ByteVector" /> object starting with the raw
               representation of the new frame.
            </param>
            <param name="version">
               A <see cref="T:System.Byte" /> indicating the ID3v2 version the
               raw frame is encoded in.
            </param>
        </member>
        <member name="M:TagLib.Id3v2.MusicCdIdentifierFrame.#ctor(TagLib.ByteVector,System.Int32,TagLib.Id3v2.FrameHeader,System.Byte)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Id3v2.MusicCdIdentifierFrame" /> by reading its raw data
               in a specified ID3v2 version.
            </summary>
            <param name="data">
               A <see cref="T:TagLib.ByteVector" /> object containing the raw
               representation of the new frame.
            </param>
            <param name="offset">
               A <see cref="T:System.Int32" /> indicating at what offset in
               <paramref name="data" /> the frame actually begins.
            </param>
            <param name="header">
               A <see cref="T:TagLib.Id3v2.FrameHeader" /> containing the header of the
               frame found at <paramref name="offset" /> in the data.
            </param>
            <param name="version">
               A <see cref="T:System.Byte" /> indicating the ID3v2 version the
               raw frame is encoded in.
            </param>
        </member>
        <member name="P:TagLib.Id3v2.MusicCdIdentifierFrame.Data">
            <summary>
               Gets and sets the identifier data stored in the current
               instance.
            </summary>
            <value>
               A <see cref="T:TagLib.ByteVector" /> containing the identifier
               data stored in the current instance.
            </value>
        </member>
        <member name="M:TagLib.Id3v2.MusicCdIdentifierFrame.Get(TagLib.Id3v2.Tag,System.Boolean)">
            <summary>
               Gets a music CD identifier frame from a specified tag,
               optionally creating it if it does not exist.
            </summary>
            <param name="tag">
               A <see cref="T:TagLib.Id3v2.Tag" /> object to search in.
            </param>
            <param name="create">
               A <see cref="T:System.Boolean" /> specifying whether or not to create
               and add a new frame to the tag if a match is not found.
            </param>
            <returns>
               A <see cref="T:TagLib.Id3v2.MusicCdIdentifierFrame" /> object containing
               the matching frame, or <see langword="null" /> if a match
               wasn't found and <paramref name="create" /> is <see
               langword="false" />.
            </returns>
        </member>
        <member name="M:TagLib.Id3v2.MusicCdIdentifierFrame.ParseFields(TagLib.ByteVector,System.Byte)">
            <summary>
               Populates the values in the current instance by parsing
               its field data in a specified version.
            </summary>
            <param name="data">
               A <see cref="T:TagLib.ByteVector" /> object containing the
               extracted field data.
            </param>
            <param name="version">
               A <see cref="T:System.Byte" /> indicating the ID3v2 version the
               field data is encoded in.
            </param>
        </member>
        <member name="M:TagLib.Id3v2.MusicCdIdentifierFrame.RenderFields(System.Byte)">
            <summary>
               Renders the values in the current instance into field
               data for a specified version.
            </summary>
            <param name="version">
               A <see cref="T:System.Byte" /> indicating the ID3v2 version the
               field data is to be encoded in.
            </param>
            <returns>
               A <see cref="T:TagLib.ByteVector" /> object containing the
               rendered field data.
            </returns>
        </member>
        <member name="M:TagLib.Id3v2.MusicCdIdentifierFrame.Clone">
            <summary>
               Creates a deep copy of the current instance.
            </summary>
            <returns>
               A new <see cref="T:TagLib.Id3v2.Frame" /> object identical to the
               current instance.
            </returns>
        </member>
        <member name="T:TagLib.Id3v2.PlayCountFrame">
             <summary>
                This class extends <see cref="T:TagLib.Id3v2.Frame" />, implementing support for
                ID3v2 Play Count (PCNT) Frames.
             </summary>
             <example>
                <para>Getting and incrementing the play count of a file.</para>
                <code lang="C#">
             using TagLib;
             using TagLib.Id3v2;
            
             public static class TrackUtil
             {
             	public static int GetPlayCount (string filename)
             	{
             		File file = File.Create (filename, ReadStyle.None);
             		Id3v2.Tag tag = file.GetTag (TagTypes.Id3v2, false) as Id3v2.Tag;
             		if (tag == null)
             			return 0;
             		
             		PlayCountFrame frame = PlayCountFrame.Get (tag, false);
             		if (frame == null)
             			return 0;
            
             		return frame.PlayCount;
             	}
             	
             	public static void IncrementPlayCount (string filename)
             	{
             		File file = File.Create (filename, ReadStyle.None);
             		Id3v2.Tag tag = file.GetTag (TagTypes.Id3v2, true) as Id3v2.Tag;
             		if (tag == null)
             			return;
             		
             		PlayCountFrame.Get (tag, true).PlayCount ++;
             		file.Save ();
             	}
             }
                </code>
                <code lang="C++">
             #using &lt;System.dll>
             #using &lt;taglib-sharp.dll>
            
             using System;
             using TagLib;
             using TagLib::Id3v2;
            
             public ref class TrackUtil abstract sealed
             {
             public:
             	static int GetPlayCount (String^ filename)
             	{
             		File^ file = File.Create (filename, ReadStyle.None);
             		Id3v2::Tag^ tag = dynamic_cast&lt;Id3v2::Tag^> (file.GetTag (TagTypes::Id3v2, false));
             		if (tag == null)
             			return 0;
             		
             		PlayCountFrame^ frame = PlayCountFrame::Get (tag, false);
             		if (frame == null)
             			return 0;
            
             		return frame->PlayCount;
             	}
             	
             	static void IncrementPlayCount (String^ filename)
             	{
             		File^ file = File::Create (filename, ReadStyle::None);
             		Id3v2.Tag^ tag = dynamic_cast&lt;Id3v2::Tag^> (file.GetTag (TagTypes::Id3v2, true));
             		if (tag == null)
             			return;
             		
             		PlayCountFrame::Get (tag, true)->PlayCount ++;
             		file->Save ();
             	}
             }
                </code>
                <code lang="VB">
             Imports TagLib
             Imports TagLib.Id3v2
            
             Public Shared Class TrackUtil
             	Public Shared Sub GetPlayCount (filename As String) As Integer
             		Dim file As File = File.Create (filename, ReadStyle.None)
             		Dim tag As Id3v2.Tag = file.GetTag (TagTypes.Id3v2, False)
             		If tag Is Nothing Then Return 0
             		
             		Dim frame As PlayCountFrame = PlayCountFrame.Get (tag, False)
            		If frame Is Nothing Then Return 0
            
             		Return frame.PlayCount
             	End Sub
            
            	Public Shared Sub IncrementPlayCount (filename As String)
             		Dim file As File = File.Create (filename, ReadStyle.None)
             		Dim tag As Id3v2.Tag = file.GetTag (TagTypes.Id3v2, True)
             		If tag Is Nothing Then Exit Sub
             		
             		PlayCountFrame.Get (tag, True).PlayCount += 1
             		file.Save ()
             	End Sub
             End Class
                </code>
                <code lang="Boo">
             import TagLib
             import TagLib.Id3v2
             
             public static class TrackUtil:
             	static def GetPlayCount (filename as string) as int:
             		file As File = File.Create (filename, ReadStyle.None)
             		tag as Id3v2.Tag = file.GetTag (TagTypes.Id3v2, false)
            		if tag == null:
             			return 0
             		
             		frame as PlayCountFrame = PlayCountFrame.Get (tag, false)
             		if frame == null:
            			return 0
            
             		return frame.PlayCount
            
            	static def IncrementPlayCount (filename as string):
             		file as File = File.Create (filename, ReadStyle.None)
             		tag as Id3v2.Tag = file.GetTag (TagTypes.Id3v2, True)
            		if tag == null:
             			return
             		
             		PlayCountFrame.Get (tag, true).PlayCount ++
             		file.Save ()
                </code>
             </example>
        </member>
        <member name="M:TagLib.Id3v2.PlayCountFrame.#ctor">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Id3v2.PlayCountFrame" /> with a count of zero.
            </summary>
            <remarks>
               When a frame is created, it is not automatically added to
               the tag. Consider using <see cref="M:TagLib.Id3v2.PlayCountFrame.Get(TagLib.Id3v2.Tag,System.Boolean)" /> for more
               integrated frame creation.
            </remarks>
        </member>
        <member name="M:TagLib.Id3v2.PlayCountFrame.#ctor(TagLib.ByteVector,System.Byte)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Id3v2.PlayCountFrame" /> by reading its raw data in a
               specified ID3v2 version.
            </summary>
            <param name="data">
               A <see cref="T:TagLib.ByteVector" /> object starting with the raw
               representation of the new frame.
            </param>
            <param name="version">
               A <see cref="T:System.Byte" /> indicating the ID3v2 version the
               raw frame is encoded in.
            </param>
        </member>
        <member name="M:TagLib.Id3v2.PlayCountFrame.#ctor(TagLib.ByteVector,System.Int32,TagLib.Id3v2.FrameHeader,System.Byte)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Id3v2.PlayCountFrame" /> by reading its raw data in a
               specified ID3v2 version.
            </summary>
            <param name="data">
               A <see cref="T:TagLib.ByteVector" /> object containing the raw
               representation of the new frame.
            </param>
            <param name="offset">
               A <see cref="T:System.Int32" /> indicating at what offset in
               <paramref name="data" /> the frame actually begins.
            </param>
            <param name="header">
               A <see cref="T:TagLib.Id3v2.FrameHeader" /> containing the header of the
               frame found at <paramref name="offset" /> in the data.
            </param>
            <param name="version">
               A <see cref="T:System.Byte" /> indicating the ID3v2 version the
               raw frame is encoded in.
            </param>
        </member>
        <member name="P:TagLib.Id3v2.PlayCountFrame.PlayCount">
            <summary>
               Gets and sets the play count of the current instance.
            </summary>
            <value>
               A <see cref="T:System.UInt64" /> containing the play count of the
               current instance.
            </value>
        </member>
        <member name="M:TagLib.Id3v2.PlayCountFrame.Get(TagLib.Id3v2.Tag,System.Boolean)">
            <summary>
               Gets a play count frame from a specified tag, optionally
               creating it if it does not exist.
            </summary>
            <param name="tag">
               A <see cref="T:TagLib.Id3v2.Tag" /> object to search in.
            </param>
            <param name="create">
               A <see cref="T:System.Boolean" /> specifying whether or not to create
               and add a new frame to the tag if a match is not found.
            </param>
            <returns>
               A <see cref="T:TagLib.Id3v2.PlayCountFrame" /> object containing the
               matching frame, or <see langword="null" /> if a match
               wasn't found and <paramref name="create" /> is <see
               langword="false" />.
            </returns>
        </member>
        <member name="M:TagLib.Id3v2.PlayCountFrame.ParseFields(TagLib.ByteVector,System.Byte)">
            <summary>
               Populates the values in the current instance by parsing
               its field data in a specified version.
            </summary>
            <param name="data">
               A <see cref="T:TagLib.ByteVector" /> object containing the
               extracted field data.
            </param>
            <param name="version">
               A <see cref="T:System.Byte" /> indicating the ID3v2 version the
               field data is encoded in.
            </param>
        </member>
        <member name="M:TagLib.Id3v2.PlayCountFrame.RenderFields(System.Byte)">
            <summary>
               Renders the values in the current instance into field
               data for a specified version.
            </summary>
            <param name="version">
               A <see cref="T:System.Byte" /> indicating the ID3v2 version the
               field data is to be encoded in.
            </param>
            <returns>
               A <see cref="T:TagLib.ByteVector" /> object containing the
               rendered field data.
            </returns>
        </member>
        <member name="M:TagLib.Id3v2.PlayCountFrame.Clone">
            <summary>
               Creates a deep copy of the current instance.
            </summary>
            <returns>
               A new <see cref="T:TagLib.Id3v2.Frame" /> object identical to the
               current instance.
            </returns>
        </member>
        <member name="T:TagLib.Id3v2.PopularimeterFrame">
            <summary>
               This class extends <see cref="T:TagLib.Id3v2.Frame" />, implementing support for
               ID3v2 Popularimeter (POPM) Frames.
            </summary>
        </member>
        <member name="F:TagLib.Id3v2.PopularimeterFrame.user">
            <summary>
               Contains the email of the user this frame belongs to.
            </summary>
        </member>
        <member name="M:TagLib.Id3v2.PopularimeterFrame.#ctor(System.String)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Id3v2.PopularimeterFrame" /> for a specified user with a
               rating and play count of zero.
            </summary>
            <remarks>
               When a frame is created, it is not automatically added to
               the tag. Consider using <see cref="M:TagLib.Id3v2.PopularimeterFrame.Get(TagLib.Id3v2.Tag,System.String,System.Boolean)" /> for more
               integrated frame creation.
            </remarks>
        </member>
        <member name="M:TagLib.Id3v2.PopularimeterFrame.#ctor(TagLib.ByteVector,System.Byte)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Id3v2.PopularimeterFrame" /> by reading its raw data in a
               specified ID3v2 version.
            </summary>
            <param name="data">
               A <see cref="T:TagLib.ByteVector" /> object starting with the raw
               representation of the new frame.
            </param>
            <param name="version">
               A <see cref="T:System.Byte" /> indicating the ID3v2 version the
               raw frame is encoded in.
            </param>
        </member>
        <member name="M:TagLib.Id3v2.PopularimeterFrame.#ctor(TagLib.ByteVector,System.Int32,TagLib.Id3v2.FrameHeader,System.Byte)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Id3v2.PopularimeterFrame" /> by reading its raw data in a
               specified ID3v2 version.
            </summary>
            <param name="data">
               A <see cref="T:TagLib.ByteVector" /> object containing the raw
               representation of the new frame.
            </param>
            <param name="offset">
               A <see cref="T:System.Int32" /> indicating at what offset in
               <paramref name="data" /> the frame actually begins.
            </param>
            <param name="header">
               A <see cref="T:TagLib.Id3v2.FrameHeader" /> containing the header of the
               frame found at <paramref name="offset" /> in the data.
            </param>
            <param name="version">
               A <see cref="T:System.Byte" /> indicating the ID3v2 version the
               raw frame is encoded in.
            </param>
        </member>
        <member name="P:TagLib.Id3v2.PopularimeterFrame.User">
            <summary>
               Gets and sets the user to whom the current instance
               belongs.
            </summary>
            <value>
               A <see cref="T:System.String" /> containing the user to whom the
               current instance belongs.
            </value>
        </member>
        <member name="P:TagLib.Id3v2.PopularimeterFrame.Rating">
            <summary>
               Gets and sets the rating of the current instance.
            </summary>
            <value>
               A <see cref="T:System.Byte" /> containing the rating of the
               current instance.
            </value>
        </member>
        <member name="P:TagLib.Id3v2.PopularimeterFrame.PlayCount">
            <summary>
               Gets and sets the play count of the current instance.
            </summary>
            <value>
               A <see cref="T:System.UInt64" /> containing the play count of the
               current instance.
            </value>
        </member>
        <member name="M:TagLib.Id3v2.PopularimeterFrame.Get(TagLib.Id3v2.Tag,System.String,System.Boolean)">
            <summary>
               Gets a popularimeter frame from a specified tag,
               optionally creating it if it does not exist.
            </summary>
            <param name="tag">
               A <see cref="T:TagLib.Id3v2.Tag" /> object to search in.
            </param>
            <param name="user">
               A <see cref="T:System.String" /> containing the user to search for
               in the current instance.
            </param>
            <param name="create">
               A <see cref="T:System.Boolean" /> specifying whether or not to create
               and add a new frame to the tag if a match is not found.
            </param>
            <returns>
               A <see cref="T:TagLib.Id3v2.PopularimeterFrame" /> object containing the
               matching frame, or <see langword="null" /> if a match
               wasn't found and <paramref name="create" /> is <see
               langword="false" />.
            </returns>
        </member>
        <member name="M:TagLib.Id3v2.PopularimeterFrame.ParseFields(TagLib.ByteVector,System.Byte)">
            <summary>
               Populates the values in the current instance by parsing
               its field data in a specified version.
            </summary>
            <param name="data">
               A <see cref="T:TagLib.ByteVector" /> object containing the
               extracted field data.
            </param>
            <param name="version">
               A <see cref="T:System.Byte" /> indicating the ID3v2 version the
               field data is encoded in.
            </param>
        </member>
        <member name="M:TagLib.Id3v2.PopularimeterFrame.RenderFields(System.Byte)">
            <summary>
               Renders the values in the current instance into field
               data for a specified version.
            </summary>
            <param name="version">
               A <see cref="T:System.Byte" /> indicating the ID3v2 version the
               field data is to be encoded in.
            </param>
            <returns>
               A <see cref="T:TagLib.ByteVector" /> object containing the
               rendered field data.
            </returns>
        </member>
        <member name="M:TagLib.Id3v2.PopularimeterFrame.Clone">
            <summary>
               Creates a deep copy of the current instance.
            </summary>
            <returns>
               A new <see cref="T:TagLib.Id3v2.Frame" /> object identical to the
               current instance.
            </returns>
        </member>
        <member name="T:TagLib.Id3v2.PrivateFrame">
             <summary>
                This class extends <see cref="T:TagLib.Id3v2.Frame" />, implementing support for
                ID3v2 Private (PRIV) Frames.
             </summary>
             <remarks>
                <para>A <see cref="T:TagLib.Id3v2.PrivateFrame" /> should be used for storing
                values specific to the application that cannot or should not be
                stored in another frame type.</para>
             </remarks>
             <example>
                <para>Serializing a database entry and storing it in a private
                field.</para>
                <code lang="C#">
             using System;
             using System.IO;
             using System.Runtime.Serialization;
             using System.Text;
             using System.Xml.Serialization;
             using TagLib.Id3v2;
            
             public static class DbUtil
             {
             	public static void StoreDatabaseEntry (Tag tag, ISerializable dbEntry)
             	{
             		StringWriter data = new StringWriter (new StringBuilder ());
             		XmlSerializer serializer = new XmlSerializer (dbEntry.GetType ());
             		serializer.Serialize (data, dbEntry);
             		PrivateFrame frame = PrivateFrame.Get (tag, "org.MyProgram.DatabaseEntry", true);
             		frame.PrivateData = Encoding.UTF8.GetBytes (data.ToString ());
             	}
             	
             	public static object GetDatabaseEntry (Tag tag, Type type)
             	{
             		PrivateFrame frame = PrivateFrame.Get (tag, "org.MyProgram.DatabaseEntry", false);
             		if (frame == null)
             			return null;
             	
             		XmlSerializer serializer = new XmlSerializer (type);
             		return serializer.Deserialize (new MemoryStream (frame.PrivateData));
             	}
             }
                </code>
                <code lang="C++">
             #using &lt;System.dll>
             #using &lt;System.Xml.dll>
             #using &lt;taglib-sharp.dll>
             
             using System;
             using System::IO;
             using System::Runtime::Serialization;
             using System::Text;
             using System::Xml::Serialization;
             using TagLib::Id3v2;
             
             public ref class DbUtil abstract sealed
             {
             public:
             	static void StoreDatabaseEntry (Tag^ tag, ISerializable^ dbEntry)
             	{
             		StringWriter^ data = gcnew StringWriter (gcnew StringBuilder);
             		XmlSerializer serializer = gcnew XmlSerializer (dbEntry->GetType ());
             		serializer->Serialize (data, dbEntry);
             		PrivateFrame frame = PrivateFrame::Get (tag, L"org.MyProgram.DatabaseEntry", true);
             		frame.PrivateData = Encoding::UTF8->GetBytes (data->ToString ());
             	}
             	
             	static Object^ GetDatabaseEntry (Tag^ tag, Type^ type)
             	{
             		PrivateFrame^ frame = PrivateFrame::Get (tag, L"org.MyProgram.DatabaseEntry", false);
             		if (frame == null)
             			return null;
             	
             		XmlSerializer serializer = gcnew XmlSerializer (type);
             		return serializer->Deserialize (gcnew MemoryStream (frame->PrivateData));
             	}
             }
                </code>
                <code lang="VB">
             Imports System
             Imports System.IO
             Imports System.Runtime.Serialization
             Imports System.Text
             Imports System.Xml.Serialization
             Imports TagLib.Id3v2
            
             Public Shared Class DbUtil
             	Public Shared Sub StoreDatabaseEntry (tag As Tag, dbEntry As ISerializable)
             		Dim data As New StringWriter (New StringBuilder ())
             		Dim serializer As New XmlSerializer (dbEntry.GetType ())
             		serializer.Serialize (data, dbEntry)
             		Dim frame As PrivateFrame = PrivateFrame.Get (tag, "org.MyProgram.DatabaseEntry", True)
             		frame.PrivateData = Encoding.UTF8.GetBytes (data.ToString ())
             	End Sub
             	
             	Public Shared Sub GetDatabaseEntry (tag As Tag, type As Type)
             		Dim frame As PrivateFrame = PrivateFrame.Get (tag, "org.MyProgram.DatabaseEntry", False)
             		If frame Is Nothing Then Return Nothing
             	
             		Dim serializer As XmlSerializer = New XmlSerializer (type)
             		Return serializer.Deserialize (New MemoryStream (frame.PrivateData))
             	End Sub
             End Class
                </code>
                <code lang="Boo">
             import System
             import System.IO
             import System.Runtime.Serialization
             import System.Text
             import System.Xml.Serialization
             import TagLib.Id3v2
             
             public static class DbUtil:
             	static def StoreDatabaseEntry (tag as Tag, dbEntry as ISerializable):
             		data as StringWriter = StringWriter (StringBuilder ())
             		serializer as XmlSerializer = XmlSerializer (dbEntry.GetType ())
             		serializer.Serialize (data, dbEntry)
             		frame as PrivateFrame = PrivateFrame.Get (tag, "org.MyProgram.DatabaseEntry", true)
             		frame.PrivateData = Encoding.UTF8.GetBytes (data.ToString ())
            	
             	static def GetDatabaseEntry (tag As Tag, type As Type):
             		frame as PrivateFrame = PrivateFrame.Get (tag, "org.MyProgram.DatabaseEntry", false)
             		if frame == null:
            			return null
             		
             		serializer as XmlSerializer = XmlSerializer (type)
             		return serializer.Deserialize (MemoryStream (frame.PrivateData))
                </code>
             </example>
        </member>
        <member name="M:TagLib.Id3v2.PrivateFrame.#ctor(System.String,TagLib.ByteVector)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Id3v2.PrivateFrame" /> for a specified owner and data.
            </summary>
            <param name="owner">
               A <see cref="T:System.String" /> containing the owner of the new
               frame.
            </param>
            <param name="data">
               A <see cref="T:TagLib.ByteVector" /> object containing the data
               for the new frame.
            </param>
            <remarks>
               When a frame is created, it is not automatically added to
               the tag. Consider using <see cref="M:TagLib.Id3v2.PrivateFrame.Get(TagLib.Id3v2.Tag,System.String,System.Boolean)" /> for more
               integrated frame creation.
            </remarks>
        </member>
        <member name="M:TagLib.Id3v2.PrivateFrame.#ctor(System.String)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Id3v2.PrivateFrame" /> without data for a specified
               owner.
            </summary>
            <param name="owner">
               A <see cref="T:System.String" /> containing the owner of the new
               frame.
            </param>
            <remarks>
               When a frame is created, it is not automatically added to
               the tag. Consider using <see cref="M:TagLib.Id3v2.PrivateFrame.Get(TagLib.Id3v2.Tag,System.String,System.Boolean)" /> for more
               integrated frame creation.
            </remarks>
        </member>
        <member name="M:TagLib.Id3v2.PrivateFrame.#ctor(TagLib.ByteVector,System.Byte)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Id3v2.PrivateFrame" /> by reading its raw data in a
               specified ID3v2 version.
            </summary>
            <param name="data">
               A <see cref="T:TagLib.ByteVector" /> object starting with the raw
               representation of the new frame.
            </param>
            <param name="version">
               A <see cref="T:System.Byte" /> indicating the ID3v2 version the
               raw frame is encoded in.
            </param>
        </member>
        <member name="M:TagLib.Id3v2.PrivateFrame.#ctor(TagLib.ByteVector,System.Int32,TagLib.Id3v2.FrameHeader,System.Byte)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Id3v2.PrivateFrame" /> by reading its raw data in a
               specified ID3v2 version.
            </summary>
            <param name="data">
               A <see cref="T:TagLib.ByteVector" /> object containing the raw
               representation of the new frame.
            </param>
            <param name="offset">
               A <see cref="T:System.Int32" /> indicating at what offset in
               <paramref name="data" /> the frame actually begins.
            </param>
            <param name="header">
               A <see cref="T:TagLib.Id3v2.FrameHeader" /> containing the header of the
               frame found at <paramref name="offset" /> in the data.
            </param>
            <param name="version">
               A <see cref="T:System.Byte" /> indicating the ID3v2 version the
               raw frame is encoded in.
            </param>
        </member>
        <member name="P:TagLib.Id3v2.PrivateFrame.Owner">
            <summary>
               Gets the owner of the current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> containing the owner of the
               current instance.
            </value>
            <remarks>
               There should only be one frame with a given owner per
               tag.
            </remarks>
        </member>
        <member name="P:TagLib.Id3v2.PrivateFrame.PrivateData">
            <summary>
               Gets and sets the private data stored in the current
               instance.
            </summary>
            <value>
               A <see cref="T:TagLib.ByteVector" /> containing the private data
               stored in the current instance.
            </value>
        </member>
        <member name="M:TagLib.Id3v2.PrivateFrame.Get(TagLib.Id3v2.Tag,System.String,System.Boolean)">
            <summary>
               Gets a specified private frame from the specified tag,
               optionally creating it if it does not exist.
            </summary>
            <param name="tag">
               A <see cref="T:TagLib.Id3v2.Tag" /> object to search in.
            </param>
            <param name="owner">
               A <see cref="T:System.String" /> specifying the owner to match.
            </param>
            <param name="create">
               A <see cref="T:System.Boolean" /> specifying whether or not to create
               and add a new frame to the tag if a match is not found.
            </param>
            <returns>
               A <see cref="T:TagLib.Id3v2.PrivateFrame" /> object containing the
               matching frame, or <see langword="null" /> if a match
               wasn't found and <paramref name="create" /> is <see
               langword="false" />.
            </returns>
        </member>
        <member name="M:TagLib.Id3v2.PrivateFrame.ParseFields(TagLib.ByteVector,System.Byte)">
            <summary>
               Populates the values in the current instance by parsing
               its field data in a specified version.
            </summary>
            <param name="data">
               A <see cref="T:TagLib.ByteVector" /> object containing the
               extracted field data.
            </param>
            <param name="version">
               A <see cref="T:System.Byte" /> indicating the ID3v2 version the
               field data is encoded in.
            </param>
        </member>
        <member name="M:TagLib.Id3v2.PrivateFrame.RenderFields(System.Byte)">
            <summary>
               Renders the values in the current instance into field
               data for a specified version.
            </summary>
            <param name="version">
               A <see cref="T:System.Byte" /> indicating the ID3v2 version the
               field data is to be encoded in.
            </param>
            <returns>
               A <see cref="T:TagLib.ByteVector" /> object containing the
               rendered field data.
            </returns>
            <exception cref="T:System.NotImplementedException">
               <paramref name="version" /> is less than 3. ID3v2.2 does
               not support this frame.
            </exception>
        </member>
        <member name="M:TagLib.Id3v2.PrivateFrame.Clone">
            <summary>
               Creates a deep copy of the current instance.
            </summary>
            <returns>
               A new <see cref="T:TagLib.Id3v2.Frame" /> object identical to the
               current instance.
            </returns>
        </member>
        <member name="T:TagLib.Id3v2.ChannelType">
            <summary>
               Specified the type of channel data to get from or set to a
               <see cref="T:TagLib.Id3v2.RelativeVolumeFrame" /> object.
            </summary>
        </member>
        <member name="F:TagLib.Id3v2.ChannelType.Other">
            <summary>
               The channel data is for some other speaker.
            </summary>
        </member>
        <member name="F:TagLib.Id3v2.ChannelType.MasterVolume">
            <summary>
               The channel data is for the master volume.
            </summary>
        </member>
        <member name="F:TagLib.Id3v2.ChannelType.FrontRight">
            <summary>
               The channel data is for the front right speaker.
            </summary>
        </member>
        <member name="F:TagLib.Id3v2.ChannelType.FrontLeft">
            <summary>
               The channel data is for the front left speaker.
            </summary>
        </member>
        <member name="F:TagLib.Id3v2.ChannelType.BackRight">
            <summary>
               The channel data is for the back right speaker.
            </summary>
        </member>
        <member name="F:TagLib.Id3v2.ChannelType.BackLeft">
            <summary>
               The channel data is for the back left speaker.
            </summary>
        </member>
        <member name="F:TagLib.Id3v2.ChannelType.FrontCentre">
            <summary>
               The channel data is for the front center speaker.
            </summary>
        </member>
        <member name="F:TagLib.Id3v2.ChannelType.BackCentre">
            <summary>
               The channel data is for the back center speaker.
            </summary>
        </member>
        <member name="F:TagLib.Id3v2.ChannelType.Subwoofer">
            <summary>
               The channel data is for the subwoofer.
            </summary>
        </member>
        <member name="T:TagLib.Id3v2.RelativeVolumeFrame">
            <summary>
               This class extends <see cref="T:TagLib.Id3v2.Frame" />, implementing support for
               ID3v2 Relative Volume (RVA2) Frames.
            </summary>
        </member>
        <member name="F:TagLib.Id3v2.RelativeVolumeFrame.channels">
            <summary>
               Contains the channel data.
            </summary>
        </member>
        <member name="M:TagLib.Id3v2.RelativeVolumeFrame.#ctor(System.String)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Id3v2.RelativeVolumeFrame" /> with a specified
               identifier.
            </summary>
            <param name="identification">
               A <see cref="T:System.String" /> object containing the
               identification to use for the new frame.
            </param>
        </member>
        <member name="M:TagLib.Id3v2.RelativeVolumeFrame.#ctor(TagLib.ByteVector,System.Byte)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Id3v2.RelativeVolumeFrame" /> by reading its raw data in
               a specified ID3v2 version.
            </summary>
            <param name="data">
               A <see cref="T:TagLib.ByteVector" /> object starting with the raw
               representation of the new frame.
            </param>
            <param name="version">
               A <see cref="T:System.Byte" /> indicating the ID3v2 version the
               raw frame is encoded in.
            </param>
        </member>
        <member name="M:TagLib.Id3v2.RelativeVolumeFrame.#ctor(TagLib.ByteVector,System.Int32,TagLib.Id3v2.FrameHeader,System.Byte)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Id3v2.RelativeVolumeFrame" /> by reading its raw data in
               a specified ID3v2 version.
            </summary>
            <param name="data">
               A <see cref="T:TagLib.ByteVector" /> object containing the raw
               representation of the new frame.
            </param>
            <param name="offset">
               A <see cref="T:System.Int32" /> indicating at what offset in
               <paramref name="data" /> the frame actually begins.
            </param>
            <param name="header">
               A <see cref="T:TagLib.Id3v2.FrameHeader" /> containing the header of the
               frame found at <paramref name="offset" /> in the data.
            </param>
            <param name="version">
               A <see cref="T:System.Byte" /> indicating the ID3v2 version the
               raw frame is encoded in.
            </param>
        </member>
        <member name="P:TagLib.Id3v2.RelativeVolumeFrame.Identification">
            <summary>
               Gets the identification used for the current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> object containing the
               identification used for the current instance.
            </value>
        </member>
        <member name="P:TagLib.Id3v2.RelativeVolumeFrame.Channels">
            <summary>
               Gets a list of the channels in the current instance that
               contain a value.
            </summary>
            <value>
               A <see cref="T:ChannelType[]" /> containing the channels
               which have a value set in the current instance.
            </value>
        </member>
        <member name="M:TagLib.Id3v2.RelativeVolumeFrame.ToString">
            <summary>
               Creates a text description of the current instance.
            </summary>
            <returns>
               A <see cref="T:System.String" /> object containing a description
               of the current instance.
            </returns>
        </member>
        <member name="M:TagLib.Id3v2.RelativeVolumeFrame.GetVolumeAdjustmentIndex(TagLib.Id3v2.ChannelType)">
            <summary>
               Gets the volume adjustment index for a specified channel.
            </summary>
            <param name="type">
               A <see cref="T:TagLib.Id3v2.ChannelType" /> value specifying which
               channel to get the value for.
            </param>
            <returns>
               A <see cref="T:System.Int16" /> value containing the volume
               adjustment index.
            </returns>
            <remarks>
               The volume adjustment index is simply the volume
               adjustment multiplied by 512.
            </remarks>
            <seealso cref="M:TagLib.Id3v2.RelativeVolumeFrame.SetVolumeAdjustmentIndex(TagLib.Id3v2.ChannelType,System.Int16)"/>
            <seealso cref="M:TagLib.Id3v2.RelativeVolumeFrame.GetVolumeAdjustment(TagLib.Id3v2.ChannelType)"/>
        </member>
        <member name="M:TagLib.Id3v2.RelativeVolumeFrame.SetVolumeAdjustmentIndex(TagLib.Id3v2.ChannelType,System.Int16)">
            <summary>
               Sets the volume adjustment index for a specified channel.
            </summary>
            <param name="type">
               A <see cref="T:TagLib.Id3v2.ChannelType" /> value specifying which
               channel to set the value for.
            </param>
            <param name="index">
               A <see cref="T:System.Int16" /> value containing the volume
               adjustment index.
            </param>
            <seealso cref="M:TagLib.Id3v2.RelativeVolumeFrame.GetVolumeAdjustmentIndex(TagLib.Id3v2.ChannelType)"/>
            <seealso cref="M:TagLib.Id3v2.RelativeVolumeFrame.SetVolumeAdjustment(TagLib.Id3v2.ChannelType,System.Single)"/>
        </member>
        <member name="M:TagLib.Id3v2.RelativeVolumeFrame.GetVolumeAdjustment(TagLib.Id3v2.ChannelType)">
            <summary>
               Gets the volume adjustment for a specified channel.
            </summary>
            <param name="type">
               A <see cref="T:TagLib.Id3v2.ChannelType" /> value specifying which
               channel to get the value for.
            </param>
            <returns>
               A <see cref="T:System.Single" /> value containing the volume
               adjustment in decibles.
            </returns>
            <remarks>
               The value can be between -64dB and +64dB.
            </remarks>
            <seealso cref="M:TagLib.Id3v2.RelativeVolumeFrame.SetVolumeAdjustment(TagLib.Id3v2.ChannelType,System.Single)"/>
            <seealso cref="M:TagLib.Id3v2.RelativeVolumeFrame.GetVolumeAdjustmentIndex(TagLib.Id3v2.ChannelType)"/>
        </member>
        <member name="M:TagLib.Id3v2.RelativeVolumeFrame.SetVolumeAdjustment(TagLib.Id3v2.ChannelType,System.Single)">
            <summary>
               Sets the volume adjustment for a specified channel.
            </summary>
            <param name="type">
               A <see cref="T:TagLib.Id3v2.ChannelType" /> value specifying which
               channel to set the value for.
            </param>
            <param name="adjustment">
               A <see cref="T:System.Single" /> value containing the volume
               adjustment in decibles.
            </param>
            <remarks>
               The value can be between -64dB and +64dB.
            </remarks>
            <seealso cref="M:TagLib.Id3v2.RelativeVolumeFrame.GetVolumeAdjustment(TagLib.Id3v2.ChannelType)"/>
            <seealso cref="M:TagLib.Id3v2.RelativeVolumeFrame.SetVolumeAdjustmentIndex(TagLib.Id3v2.ChannelType,System.Int16)"/>
        </member>
        <member name="M:TagLib.Id3v2.RelativeVolumeFrame.GetPeakVolumeIndex(TagLib.Id3v2.ChannelType)">
            <summary>
               Gets the peak volume index for a specified channel.
            </summary>
            <param name="type">
               A <see cref="T:TagLib.Id3v2.ChannelType" /> value specifying which
               channel to get the value for.
            </param>
            <returns>
               A <see cref="T:System.UInt64" /> value containing the peak volume
               index.
            </returns>
            <remarks>
               The peak volume index is simply the peak volume
               multiplied by 512.
            </remarks>
            <seealso cref="M:TagLib.Id3v2.RelativeVolumeFrame.SetPeakVolumeIndex(TagLib.Id3v2.ChannelType,System.UInt64)"/>
            <seealso cref="M:TagLib.Id3v2.RelativeVolumeFrame.GetPeakVolume(TagLib.Id3v2.ChannelType)"/>
        </member>
        <member name="M:TagLib.Id3v2.RelativeVolumeFrame.SetPeakVolumeIndex(TagLib.Id3v2.ChannelType,System.UInt64)">
            <summary>
               Sets the peak volume index for a specified channel.
            </summary>
            <param name="type">
               A <see cref="T:TagLib.Id3v2.ChannelType" /> value specifying which
               channel to set the value for.
            </param>
            <param name="index">
               A <see cref="T:System.UInt64" /> value containing the peak volume
               index.
            </param>
            <remarks>
               The peak volume index is simply the peak volume
               multiplied by 512.
            </remarks>
            <seealso cref="M:TagLib.Id3v2.RelativeVolumeFrame.GetPeakVolumeIndex(TagLib.Id3v2.ChannelType)"/>
            <seealso cref="M:TagLib.Id3v2.RelativeVolumeFrame.SetPeakVolume(TagLib.Id3v2.ChannelType,System.Double)"/>
        </member>
        <member name="M:TagLib.Id3v2.RelativeVolumeFrame.GetPeakVolume(TagLib.Id3v2.ChannelType)">
            <summary>
               Gets the peak volume for a specified channel.
            </summary>
            <param name="type">
               A <see cref="T:TagLib.Id3v2.ChannelType" /> value specifying which
               channel to get the value for.
            </param>
            <returns>
               A <see cref="T:System.Double" /> value containing the peak volume.
            </returns>
            <seealso cref="M:TagLib.Id3v2.RelativeVolumeFrame.SetPeakVolume(TagLib.Id3v2.ChannelType,System.Double)"/>
            <seealso cref="M:TagLib.Id3v2.RelativeVolumeFrame.GetPeakVolumeIndex(TagLib.Id3v2.ChannelType)"/>
        </member>
        <member name="M:TagLib.Id3v2.RelativeVolumeFrame.SetPeakVolume(TagLib.Id3v2.ChannelType,System.Double)">
            <summary>
               Sets the peak volume for a specified channel.
            </summary>
            <param name="type">
               A <see cref="T:TagLib.Id3v2.ChannelType" /> value specifying which
               channel to set the value for.
            </param>
            <param name="peak">
               A <see cref="T:System.Double" /> value containing the peak volume.
            </param>
            <seealso cref="M:TagLib.Id3v2.RelativeVolumeFrame.GetPeakVolume(TagLib.Id3v2.ChannelType)"/>
            <seealso cref="M:TagLib.Id3v2.RelativeVolumeFrame.SetPeakVolumeIndex(TagLib.Id3v2.ChannelType,System.UInt64)"/>
        </member>
        <member name="M:TagLib.Id3v2.RelativeVolumeFrame.Get(TagLib.Id3v2.Tag,System.String,System.Boolean)">
            <summary>
               Gets a specified volume adjustment frame from the
               specified tag, optionally creating it if it does not
               exist.
            </summary>
            <param name="tag">
               A <see cref="T:TagLib.Id3v2.Tag" /> object to search in.
            </param>
            <param name="identification">
               A <see cref="T:System.String" /> specifying the identification to
               match.
            </param>
            <param name="create">
               A <see cref="T:System.Boolean" /> specifying whether or not to create
               and add a new frame to the tag if a match is not found.
            </param>
            <returns>
               A <see cref="T:TagLib.Id3v2.RelativeVolumeFrame" /> object containing
               the matching frame, or <see langword="null" /> if a match
               wasn't found and <paramref name="create" /> is <see
               langword="false" />.
            </returns>
        </member>
        <member name="M:TagLib.Id3v2.RelativeVolumeFrame.ParseFields(TagLib.ByteVector,System.Byte)">
            <summary>
               Populates the values in the current instance by parsing
               its field data in a specified version.
            </summary>
            <param name="data">
               A <see cref="T:TagLib.ByteVector" /> object containing the
               extracted field data.
            </param>
            <param name="version">
               A <see cref="T:System.Byte" /> indicating the ID3v2 version the
               field data is encoded in.
            </param>
            <exception cref="T:TagLib.CorruptFileException">
               <paramref name="data" /> contains less than 5 bytes.
            </exception>
        </member>
        <member name="M:TagLib.Id3v2.RelativeVolumeFrame.RenderFields(System.Byte)">
            <summary>
               Renders the values in the current instance into field
               data for a specified version.
            </summary>
            <param name="version">
               A <see cref="T:System.Byte" /> indicating the ID3v2 version the
               field data is to be encoded in.
            </param>
            <returns>
               A <see cref="T:TagLib.ByteVector" /> object containing the
               rendered field data.
            </returns>
        </member>
        <member name="M:TagLib.Id3v2.RelativeVolumeFrame.Clone">
            <summary>
               Creates a deep copy of the current instance.
            </summary>
            <returns>
               A new <see cref="T:TagLib.Id3v2.Frame" /> object identical to the
               current instance.
            </returns>
        </member>
        <member name="T:TagLib.Id3v2.SynchronisedLyricsFrame">
            <summary>
               This class extends <see cref="T:TagLib.Id3v2.Frame" />, implementing support for
               ID3v2 Synchronised Lyrics and Text (SYLT) Frames.
            </summary>
        </member>
        <member name="F:TagLib.Id3v2.SynchronisedLyricsFrame.language">
            <summary>
               Contains the ISO-639-2 language code.
            </summary>
        </member>
        <member name="F:TagLib.Id3v2.SynchronisedLyricsFrame.text">
            <summary>
               Contains the text.
            </summary>
        </member>
        <member name="M:TagLib.Id3v2.SynchronisedLyricsFrame.#ctor(System.String,System.String,TagLib.Id3v2.SynchedTextType,TagLib.StringType)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Id3v2.SynchronisedLyricsFrame" /> with a specified
               description, ISO-639-2 language code, text type, and text
               encoding.
            </summary>
            <param name="description">
               A <see cref="T:System.String" /> object containing the description
               of the new instnace.
            </param>
            <param name="language">
               A <see cref="T:System.String" /> object containing the ISO-639-2
               language code of the new instance.
            </param>
            <param name="type">
               A <see cref="T:TagLib.Id3v2.SynchedTextType" /> containing the type of
               text to be stored in the new instance.
            </param>
            <param name="encoding">
               A <see cref="T:TagLib.StringType" /> containing the text encoding
               to use when rendering the new instance.
            </param>
            <remarks>
               When a frame is created, it is not automatically added to
               the tag. Consider using <see cref="M:TagLib.Id3v2.SynchronisedLyricsFrame.Get(TagLib.Id3v2.Tag,System.String,System.String,TagLib.Id3v2.SynchedTextType,System.Boolean)" /> for more
               integrated frame creation.
            </remarks>
        </member>
        <member name="M:TagLib.Id3v2.SynchronisedLyricsFrame.#ctor(System.String,System.String,TagLib.Id3v2.SynchedTextType)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Id3v2.SynchronisedLyricsFrame" /> with a specified
               description, ISO-639-2 language code, and text type.
            </summary>
            <param name="description">
               A <see cref="T:System.String" /> object containing the description
               of the new instnace.
            </param>
            <param name="language">
               A <see cref="T:System.String" /> object containing the ISO-639-2
               language code of the new instance.
            </param>
            <param name="type">
               A <see cref="T:TagLib.Id3v2.SynchedTextType" /> containing the type of
               text to be stored in the new instance.
            </param>
            <remarks>
               When a frame is created, it is not automatically added to
               the tag. Consider using <see cref="M:TagLib.Id3v2.SynchronisedLyricsFrame.Get(TagLib.Id3v2.Tag,System.String,System.String,TagLib.Id3v2.SynchedTextType,System.Boolean)" /> for more
               integrated frame creation.
            </remarks>
        </member>
        <member name="M:TagLib.Id3v2.SynchronisedLyricsFrame.#ctor(TagLib.ByteVector,System.Byte)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Id3v2.SynchronisedLyricsFrame" /> by reading its raw data
               in a specified ID3v2 version.
            </summary>
            <param name="data">
               A <see cref="T:TagLib.ByteVector" /> object starting with the raw
               representation of the new instance.
            </param>
            <param name="version">
               A <see cref="T:System.Byte" /> indicating the ID3v2 version the
               raw frame is encoded in.
            </param>
        </member>
        <member name="M:TagLib.Id3v2.SynchronisedLyricsFrame.#ctor(TagLib.ByteVector,System.Int32,TagLib.Id3v2.FrameHeader,System.Byte)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Id3v2.SynchronisedLyricsFrame" /> by reading its raw data
               in a specified ID3v2 version.
            </summary>
            <param name="data">
               A <see cref="T:TagLib.ByteVector" /> object containing the raw
               representation of the new instance.
            </param>
            <param name="offset">
               A <see cref="T:System.Int32" /> indicating at what offset in
               <paramref name="data" /> the frame actually begins.
            </param>
            <param name="header">
               A <see cref="T:TagLib.Id3v2.FrameHeader" /> containing the header of the
               frame found at <paramref name="offset" /> in the data.
            </param>
            <param name="version">
               A <see cref="T:System.Byte" /> indicating the ID3v2 version the
               raw frame is encoded in.
            </param>
        </member>
        <member name="P:TagLib.Id3v2.SynchronisedLyricsFrame.TextEncoding">
            <summary>
               Gets and sets the text encoding to use when storing the
               current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> containing the text encoding to
               use when storing the current instance.
            </value>
            <remarks>
               This encoding is overridden when rendering if <see
               cref="P:TagLib.Id3v2.Tag.ForceDefaultEncoding" /> is <see
               langword="true" /> or the render version does not support
               it.
            </remarks>
        </member>
        <member name="P:TagLib.Id3v2.SynchronisedLyricsFrame.Language">
            <summary>
               Gets and sets the ISO-639-2 language code stored in the
               current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> containing the ISO-639-2 language
               code stored in the current instance.
            </value>
            <remarks>
               There should only be one frame with a matching
               description, type, and ISO-639-2 language code per tag.
            </remarks>
        </member>
        <member name="P:TagLib.Id3v2.SynchronisedLyricsFrame.Description">
            <summary>
               Gets and sets the description stored in the current
               instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> containing the description
               stored in the current instance.
            </value>
            <remarks>
               There should only be one frame with a matching
               description, type, and ISO-639-2 language code per tag.
            </remarks>
        </member>
        <member name="P:TagLib.Id3v2.SynchronisedLyricsFrame.Format">
            <summary>
               Gets and sets the timestamp format used by the current
               instance.
            </summary>
            <value>
               A <see cref="T:TagLib.Id3v2.TimestampFormat" /> value describing the
               timestamp format used by the current instance.
            </value>
        </member>
        <member name="P:TagLib.Id3v2.SynchronisedLyricsFrame.Type">
            <summary>
               Gets and sets the type of text contained in the current
               instance.
            </summary>
            <value>
               A <see cref="T:TagLib.Id3v2.TimestampFormat" /> value describing the
               type of text contained in the current instance.
            </value>
        </member>
        <member name="P:TagLib.Id3v2.SynchronisedLyricsFrame.Text">
            <summary>
               Gets and sets the text contained in the current
               instance.
            </summary>
            <value>
               A <see cref="T:SynchedText[]" /> containing the text
               contained in the current instance.
            </value>
        </member>
        <member name="M:TagLib.Id3v2.SynchronisedLyricsFrame.Get(TagLib.Id3v2.Tag,System.String,System.String,TagLib.Id3v2.SynchedTextType,System.Boolean)">
            <summary>
               Gets a specified lyrics frame from the specified tag,
               optionally creating it if it does not exist.
            </summary>
            <param name="tag">
               A <see cref="T:TagLib.Id3v2.Tag" /> object to search in.
            </param>
            <param name="description">
               A <see cref="T:System.String" /> object specifying the description
               to match.
            </param>
            <param name="language">
               A <see cref="T:System.String" /> object specifying the ISO-639-2
               language code to match.
            </param>
            <param name="type">
               A <see cref="T:TagLib.Id3v2.SynchedTextType" /> value specifying the
               text type to match.
            </param>
            <param name="create">
               A <see cref="T:System.Boolean" /> specifying whether or not to create
               and add a new frame to the tag if a match is not found.
            </param>
            <returns>
               A <see cref="T:TagLib.Id3v2.SynchronisedLyricsFrame" /> object
               containing the matching frame, or <see langword="null" />
               if a match wasn't found and <paramref name="create" /> is
               <see langword="false" />.
            </returns>
        </member>
        <member name="M:TagLib.Id3v2.SynchronisedLyricsFrame.GetPreferred(TagLib.Id3v2.Tag,System.String,System.String,TagLib.Id3v2.SynchedTextType)">
            <summary>
               Gets a specified lyrics frame from the specified tag,
               trying to to match the description and language but
               accepting an incomplete match.
            </summary>
            <param name="tag">
               A <see cref="T:TagLib.Id3v2.Tag" /> object to search in.
            </param>
            <param name="description">
               A <see cref="T:System.String" /> object specifying the description
               to match.
            </param>
            <param name="language">
               A <see cref="T:System.String" /> object specifying the ISO-639-2
               language code to match.
            </param>
            <param name="type">
               A <see cref="T:TagLib.Id3v2.SynchedTextType" /> value specifying the
               text type to match.
            </param>
            <returns>
               A <see cref="T:TagLib.Id3v2.SynchronisedLyricsFrame" /> object
               containing the matching frame, or <see langword="null" />
               if a match wasn't found.
            </returns>
            <remarks>
               <para>The method tries matching with the following order
               of precidence:</para>
               <list type="number">
                  <item><term>The first frame with a matching
                  description, language, and type.</term></item>
                  <item><term>The first frame with a matching
                  description and language.</term></item>
                  <item><term>The first frame with a matching
                  language.</term></item>
                  <item><term>The first frame with a matching
                  description.</term></item>
                  <item><term>The first frame with a matching
                  type.</term></item>
                  <item><term>The first frame.</term></item>
               </list>
            </remarks>
        </member>
        <member name="M:TagLib.Id3v2.SynchronisedLyricsFrame.ParseFields(TagLib.ByteVector,System.Byte)">
            <summary>
               Populates the values in the current instance by parsing
               its field data in a specified version.
            </summary>
            <param name="data">
               A <see cref="T:TagLib.ByteVector" /> object containing the
               extracted field data.
            </param>
            <param name="version">
               A <see cref="T:System.Byte" /> indicating the ID3v2 version the
               field data is encoded in.
            </param>
        </member>
        <member name="M:TagLib.Id3v2.SynchronisedLyricsFrame.RenderFields(System.Byte)">
            <summary>
               Renders the values in the current instance into field
               data for a specified version.
            </summary>
            <param name="version">
               A <see cref="T:System.Byte" /> indicating the ID3v2 version the
               field data is to be encoded in.
            </param>
            <returns>
               A <see cref="T:TagLib.ByteVector" /> object containing the
               rendered field data.
            </returns>
        </member>
        <member name="M:TagLib.Id3v2.SynchronisedLyricsFrame.Clone">
            <summary>
               Creates a deep copy of the current instance.
            </summary>
            <returns>
               A new <see cref="T:TagLib.Id3v2.Frame" /> object identical to the
               current instance.
            </returns>
        </member>
        <member name="T:TagLib.Id3v2.SynchedText">
            <summary>
               This structure contains a single entry in a <see
               cref="T:TagLib.Id3v2.SynchronisedLyricsFrame" /> object.
            </summary>
        </member>
        <member name="M:TagLib.Id3v2.SynchedText.#ctor(System.Int64,System.String)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Id3v2.SynchedText" /> with a specified time and text.
            </summary>
            <param name="time">
               A <see cref="T:System.Int64" /> value representing an amount of
               time in a format define in the class using it. The
               specific format is specified in <see
               cref="P:TagLib.Id3v2.SynchronisedLyricsFrame.Format" />.
            </param>
            <param name="text">
               A <see cref="T:System.String" /> object containing the text
               for the point in time.
            </param>
        </member>
        <member name="P:TagLib.Id3v2.SynchedText.Time">
            <summary>
               Gets and sets the time offset of the current instance.
            </summary>
            <value>
               A <see cref="T:System.Int64" /> value representing an amount of
               time in a format define in the class using it. The
               specific format is specified in <see
               cref="P:TagLib.Id3v2.SynchronisedLyricsFrame.Format" />.
            </value>
        </member>
        <member name="P:TagLib.Id3v2.SynchedText.Text">
            <summary>
               Gets and sets the text for the point in time represented
               by the current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> object containing the text
               for the point in time.
            </value>
        </member>
        <member name="T:TagLib.Id3v2.TableOfContentsFrame">
             <summary>
                This class extends <see cref="T:TagLib.Id3v2.Frame" /> to provide support for
                Table of Contents Frames, i.e. "<c>CTOC</c>",
                (ID3v2 Chapter Frame Addendum 1.0, https://id3.org/id3v2-chapters-1.0).
             </summary>
             <remarks>
                The <see cref="T:TagLib.Id3v2.TableOfContentsFrame"/> is special in that it can hold
                an arbitrary amount of sub-frames, which are made available here as a
                List of <see cref="T:TagLib.Id3v2.Frame"/>s in the property <see cref="P:TagLib.Id3v2.TableOfContentsFrame.SubFrames"/>.
                
                A tag may contain multiple <see cref="T:TagLib.Id3v2.TableOfContentsFrame"/>s, there
                may however be only one top-level "<c>CTOC</c>" as stated by the
                property <see cref="P:TagLib.Id3v2.TableOfContentsFrame.IsTopLevel"/>.
            
                Each <see cref="T:TagLib.Id3v2.TableOfContentsFrame"/> must have an identifying string
                that is unique across all <see cref="T:TagLib.Id3v2.TableOfContentsFrame"/>s and
                <see cref="T:TagLib.Id3v2.ChapterFrame"/>s in the tag. This is the <see cref="P:TagLib.Id3v2.TableOfContentsFrame.Id"/>
                property. It is not intended for humans and players will not display it.
                For humans, add a "<c>TIT2</c>" <see cref="T:TagLib.Id3v2.TextInformationFrame"/>.
             </remarks>
        </member>
        <member name="M:TagLib.Id3v2.TableOfContentsFrame.#ctor">
            <summary>
               Constructs and initializes a new empty instance of <see
               cref="T:TagLib.Id3v2.TableOfContentsFrame" />.
            </summary>
        </member>
        <member name="M:TagLib.Id3v2.TableOfContentsFrame.#ctor(System.String)">
            <summary>
               Constructs and initializes a new empty instance of <see
               cref="T:TagLib.Id3v2.TableOfContentsFrame" /> with the given TOC Id.
            </summary>
        </member>
        <member name="M:TagLib.Id3v2.TableOfContentsFrame.#ctor(System.String,System.String)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Id3v2.TableOfContentsFrame" /> with the given TOC Id
               and adds a TIT2 <see cref="T:TagLib.Id3v2.TextInformationFrame"/>
               with the given title.
            </summary>
        </member>
        <member name="M:TagLib.Id3v2.TableOfContentsFrame.#ctor(TagLib.ByteVector,System.Byte)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Id3v2.TableOfContentsFrame" /> by reading its raw data in
               a specified ID3v2 version.
            </summary>
            <param name="data">
               A <see cref="T:TagLib.ByteVector" /> object starting with the raw
               representation of the new frame.
            </param>
            <param name="version">
               A <see cref="T:System.Byte" /> indicating the ID3v2 version the
               raw frame is encoded in.
            </param>
        </member>
        <member name="M:TagLib.Id3v2.TableOfContentsFrame.#ctor(TagLib.ByteVector,System.Int32,TagLib.Id3v2.FrameHeader,System.Byte)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Id3v2.TableOfContentsFrame" /> by reading its raw data in a
               specified ID3v2 version.
            </summary>
            <param name="data">
               A <see cref="T:TagLib.ByteVector" /> object containing the raw
               representation of the new frame.
            </param>
            <param name="offset">
               A <see cref="T:System.Int32" /> indicating at what offset in
               <paramref name="data" /> the frame actually begins.
            </param>
            <param name="header">
               A <see cref="T:TagLib.Id3v2.FrameHeader" /> containing the header of the
               frame found at <paramref name="offset" /> in the data.
            </param>
            <param name="version">
               A <see cref="T:System.Byte" /> indicating the ID3v2 version the
               raw frame is encoded in.
            </param>
        </member>
        <member name="P:TagLib.Id3v2.TableOfContentsFrame.Id">
            <summary>
               Gets and sets the internal table of contents id.
               This should be <see cref="F:TagLib.StringType.Latin1" />
               and must be unique with respect to any other
               "<c>CTOC</c>" or "<c>CHAP</c>" frame in the tag.
            </summary>
        </member>
        <member name="P:TagLib.Id3v2.TableOfContentsFrame.IsTopLevel">
            <summary>
               Gets and sets the boolean stating that this is the root
               of all "<c>CTOC</c>"s. As such there must be only one
               "<c>CTOC</c>" with this set to true.
            </summary>
        </member>
        <member name="P:TagLib.Id3v2.TableOfContentsFrame.IsOrdered">
            <summary>
               Gets and sets the boolean stating that this table of
               contents’ chapters should be played in order.
            </summary>
        </member>
        <member name="P:TagLib.Id3v2.TableOfContentsFrame.ChapterIds">
            <summary>
               Gets and sets the list of chapters in this table of contents
               identified by their <see cref="P:TagLib.Id3v2.ChapterFrame.Id"/>s.
               Because the number of chapters is stored in this frame using
               only one byte for parsing purposes, this should not contain
               more than 255 chapters.
            </summary>
        </member>
        <member name="P:TagLib.Id3v2.TableOfContentsFrame.SubFrames">
            <summary>
               Gets and sets the descriptive sub-fields for this chapter. It
               is recommended by the spec to have at least a "<c>TIT2</c>"
               <see cref="T:TagLib.Id3v2.TextInformationFrame"/> with the chapter title, but
               it can contain anything.
            </summary>
            <value>
               A List of arbitrary <see cref="T:TagLib.Id3v2.Frame" />s.
            </value>
        </member>
        <member name="M:TagLib.Id3v2.TableOfContentsFrame.ParseFields(TagLib.ByteVector,System.Byte)">
            <summary>
               Populates the values in the current instance by parsing
               its field data in a specified version.
            </summary>
            <param name="data">
               A <see cref="T:TagLib.ByteVector" /> object containing the
               extracted field data.
            </param>
            <param name="version">
               A <see cref="T:System.Byte" /> indicating the ID3v2 version the
               field data is encoded in.
            </param>
        </member>
        <member name="M:TagLib.Id3v2.TableOfContentsFrame.RenderFields(System.Byte)">
            <summary>
               Renders the values in the current instance into field
               data for a specified version.
            </summary>
            <param name="version">
               A <see cref="T:System.Byte" /> indicating the ID3v2 version the
               field data is to be encoded in.
            </param>
            <returns>
               A <see cref="T:TagLib.ByteVector" /> object containing the
               rendered field data.
            </returns>
        </member>
        <member name="M:TagLib.Id3v2.TableOfContentsFrame.Clone">
            <summary>
               Creates a deep copy of the current instance.
            </summary>
            <returns>
               A new <see cref="T:TagLib.Id3v2.Frame" /> object identical to the
               current instance.
            </returns>
        </member>
        <member name="T:TagLib.Id3v2.TermsOfUseFrame">
            <summary>
               This class extends <see cref="T:TagLib.Id3v2.Frame" />, implementing support for
               ID3v2 Terms of Use (USER) Frames.
            </summary>
            <remarks>
               This frame contains license text or restrictions on the use of a
               media file.
            </remarks>
        </member>
        <member name="F:TagLib.Id3v2.TermsOfUseFrame.language">
            <summary>
               Contains the ISO-639-2 language code of the current
               instance.
            </summary>
        </member>
        <member name="M:TagLib.Id3v2.TermsOfUseFrame.#ctor(System.String,TagLib.StringType)">
            <summary>
               Constructs and intializes a new instance of <see
               cref="T:TagLib.Id3v2.TermsOfUseFrame" /> with a specified language and
               encoding.
            </summary>
            <param name="language">
               A <see cref="T:System.String" /> containing the ISO-639-2 language
               code of the new frame.
            </param>
            <param name="encoding">
               A <see cref="T:TagLib.StringType" /> containing the text encoding
               to use when rendering the new frame.
            </param>
            <remarks>
               When a frame is created, it is not automatically added to
               the tag. Consider using <see cref="M:TagLib.Id3v2.TermsOfUseFrame.Get(TagLib.Id3v2.Tag,System.String,System.Boolean)" /> for more
               integrated frame creation.
            </remarks>
        </member>
        <member name="M:TagLib.Id3v2.TermsOfUseFrame.#ctor(System.String)">
            <summary>
               Constructs and intializes a new instance of <see
               cref="T:TagLib.Id3v2.TermsOfUseFrame" /> with a specified language.
            </summary>
            <param name="language">
               A <see cref="T:System.String" /> containing the ISO-639-2 language
               code of the new frame.
            </param>
            <remarks>
               When a frame is created, it is not automatically added to
               the tag. Consider using <see cref="M:TagLib.Id3v2.TermsOfUseFrame.Get(TagLib.Id3v2.Tag,System.String,System.Boolean)" /> for more
               integrated frame creation.
            </remarks>
        </member>
        <member name="M:TagLib.Id3v2.TermsOfUseFrame.#ctor(TagLib.ByteVector,System.Byte)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Id3v2.TermsOfUseFrame" /> by reading its raw data in a
               specified ID3v2 version.
            </summary>
            <param name="data">
               A <see cref="T:TagLib.ByteVector" /> object starting with the raw
               representation of the new frame.
            </param>
            <param name="version">
               A <see cref="T:System.Byte" /> indicating the ID3v2 version the
               raw frame is encoded in.
            </param>
        </member>
        <member name="M:TagLib.Id3v2.TermsOfUseFrame.#ctor(TagLib.ByteVector,System.Int32,TagLib.Id3v2.FrameHeader,System.Byte)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Id3v2.TermsOfUseFrame" /> by reading its raw data in a
               specified ID3v2 version.
            </summary>
            <param name="data">
               A <see cref="T:TagLib.ByteVector" /> object containing the raw
               representation of the new frame.
            </param>
            <param name="offset">
               A <see cref="T:System.Int32" /> indicating at what offset in
               <paramref name="data" /> the frame actually begins.
            </param>
            <param name="header">
               A <see cref="T:TagLib.Id3v2.FrameHeader" /> containing the header of the
               frame found at <paramref name="offset" /> in the data.
            </param>
            <param name="version">
               A <see cref="T:System.Byte" /> indicating the ID3v2 version the
               raw frame is encoded in.
            </param>
        </member>
        <member name="P:TagLib.Id3v2.TermsOfUseFrame.TextEncoding">
            <summary>
               Gets and sets the text encoding to use when storing the
               current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> containing the text encoding to
               use when storing the current instance.
            </value>
            <remarks>
               This encoding is overridden when rendering if <see
               cref="P:TagLib.Id3v2.Tag.ForceDefaultEncoding" /> is <see
               langword="true" /> or the render version does not support
               it.
            </remarks>
        </member>
        <member name="P:TagLib.Id3v2.TermsOfUseFrame.Language">
            <summary>
               Gets and sets the ISO-639-2 language code stored in the
               current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> containing the ISO-639-2 language
               code stored in the current instance.
            </value>
            <remarks>
               There should only be one file with a matching 
               ISO-639-2 language code per tag.
            </remarks>
        </member>
        <member name="P:TagLib.Id3v2.TermsOfUseFrame.Text">
            <summary>
               Gets and sets the terms of use stored in the current
               instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> object containing the terms of
               use.
            </value>
        </member>
        <member name="M:TagLib.Id3v2.TermsOfUseFrame.ToString">
            <summary>
               Gets a string representation of the current instance.
            </summary>
            <returns>
               A <see cref="T:System.String" /> containing the terms of use.
            </returns>
        </member>
        <member name="M:TagLib.Id3v2.TermsOfUseFrame.Get(TagLib.Id3v2.Tag,System.String,System.Boolean)">
            <summary>
               Gets a specified terms of use frame from the specified
               tag, optionally creating it if it does not exist.
            </summary>
            <param name="tag">
               A <see cref="T:TagLib.Id3v2.Tag" /> object to search in.
            </param>
            <param name="language">
               A <see cref="T:System.String" /> specifying the ISO-639-2 language
              code to match.
            </param>
            <param name="create">
               A <see cref="T:System.Boolean" /> specifying whether or not to create
               and add a new frame to the tag if a match is not found.
            </param>
            <returns>
               A <see cref="T:TagLib.Id3v2.TermsOfUseFrame" /> object containing the
               matching frame, or <see langword="null" /> if a match
               wasn't found and <paramref name="create" /> is <see
               langword="false" />.
            </returns>
        </member>
        <member name="M:TagLib.Id3v2.TermsOfUseFrame.GetPreferred(TagLib.Id3v2.Tag,System.String)">
            <summary>
               Gets a specified terms of use frame from the specified
               tag, trying to to match the language but accepting one
               with a different language if a match was not found.
            </summary>
            <param name="tag">
               A <see cref="T:TagLib.Id3v2.Tag" /> object to search in.
            </param>
            <param name="language">
               A <see cref="T:System.String" /> specifying the ISO-639-2 language
              code to match.
            </param>
            <returns>
               A <see cref="T:TagLib.Id3v2.TermsOfUseFrame" /> object containing the
               matching frame, or <see langword="null" /> if a match
               wasn't found.
            </returns>
        </member>
        <member name="M:TagLib.Id3v2.TermsOfUseFrame.ParseFields(TagLib.ByteVector,System.Byte)">
            <summary>
               Populates the values in the current instance by parsing
               its field data in a specified version.
            </summary>
            <param name="data">
               A <see cref="T:TagLib.ByteVector" /> object containing the
               extracted field data.
            </param>
            <param name="version">
               A <see cref="T:System.Byte" /> indicating the ID3v2 version the
               field data is encoded in.
            </param>
        </member>
        <member name="M:TagLib.Id3v2.TermsOfUseFrame.RenderFields(System.Byte)">
            <summary>
               Renders the values in the current instance into field
               data for a specified version.
            </summary>
            <param name="version">
               A <see cref="T:System.Byte" /> indicating the ID3v2 version the
               field data is to be encoded in.
            </param>
            <returns>
               A <see cref="T:TagLib.ByteVector" /> object containing the
               rendered field data.
            </returns>
        </member>
        <member name="M:TagLib.Id3v2.TermsOfUseFrame.Clone">
            <summary>
               Creates a deep copy of the current instance.
            </summary>
            <returns>
               A new <see cref="T:TagLib.Id3v2.Frame" /> object identical to the
               current instance.
            </returns>
        </member>
        <member name="T:TagLib.Id3v2.TextInformationFrame">
            <summary>
               This class extends <see cref="T:TagLib.Id3v2.Frame" /> to provide support ID3v2
               Text Information Frames (Section 4.2), covering "<c>T000</c>" to
               "<c>TZZZ</c>", excluding "<c>TXXX</c>".
            </summary>
            <remarks>
               <para>Text Information Frames contain the most commonly used
               values in tagging, including the artist, the track name, and just
               about any value that can be expressed as text.</para>
               <para>The following table contains types and descriptions as
               found in the ID3 2.4.0 native frames specification. (Copyright
               (C) Martin Nilsson 2000.)</para>
               
               <list type="table">
                  <listheader>
                     <term>ID</term>
                     <description>Description</description>
                  </listheader>
                  <item>
                     <term>TIT1</term>
                     <description>The 'Content group description' frame is used
                     if the sound belongs to a larger category of sounds/music.
                     For example, classical music is often sorted in different
                     musical sections (e.g. "Piano Concerto", "Weather -
                     Hurricane").</description>
                  </item>
                  <item>
                     <term>TIT2</term>
                     <description>The 'Title/Songname/Content description' frame
                     is the actual name of the piece (e.g. "Adagio", "Hurricane
                     Donna").</description>
                  </item>
                  <item>
                     <term>TIT3</term>
                     <description>The 'Subtitle/Description refinement' frame is
                     used for information directly related to the contents title
                     (e.g. "Op. 16" or "Performed live at
                     Wembley").</description>
                  </item>
                  <item>
                     <term>TALB</term>
                     <description>The 'Album/Movie/Show title' frame is intended
                     for the title of the recording (or source of sound) from
                     which the audio in the file is taken.</description>
                  </item>
                  <item>
                     <term>TOAL</term>
                     <description>The 'Original album/movie/show title' frame is
                     intended for the title of the original recording (or source
                     of sound), if for example the music in the file should be a
                     cover of a previously released song.</description>
                  </item>
                  <item>
                     <term>TRCK</term>
                     <description>The 'Track number/Position in set' frame is a
                     numeric string containing the order number of the
                     audio-file on its original recording. This MAY be extended
                     with a "/" character and a numeric string containing the
                     total number of tracks/elements on the original recording.
                     E.g. "4/9".</description>
                  </item>
                  <item>
                     <term>TPOS</term>
                     <description>The 'Part of a set' frame is a numeric string
                     that describes which part of a set the audio came from.
                     This frame is used if the source described in the "TALB"
                     frame is divided into several mediums, e.g. a double CD.
                     The value MAY be extended with a "/" character and a
                     numeric string containing the total number of parts in the
                     set. E.g. "1/2".</description>
                  </item>
                  <item>
                     <term>TSST</term>
                     <description>The 'Set subtitle' frame is intended for the
                     subtitle of the part of a set this track belongs
                     to.</description>
                  </item>
                  <item>
                     <term>TSRC</term>
                     <description>The 'ISRC' frame should contain the
                     International Standard Recording Code [ISRC] (12
                     characters).</description>
                  </item>
                  <item>
                     <term>TPE1</term>
                     <description>The
                     'Lead artist/Lead performer/Soloist/Performing group' is
                     used for the main artist.</description>
                  </item>
                  <item>
                     <term>TPE2</term>
                     <description>The 'Band/Orchestra/Accompaniment' frame is
                     used for additional information about the performers in the
                     recording.</description>
                  </item>
                  <item>
                     <term>TPE3</term>
                     <description>The 'Conductor' frame is used for the name of
                     the conductor.</description>
                  </item>
                  <item>
                     <term>TPE4</term>
                     <description>The 'Interpreted, remixed, or otherwise
                     modified by' frame contains more information about the
                     people behind a remix and similar interpretations of
                     another existing piece.</description>
                  </item>
                  <item>
                     <term>TOPE</term>
                     <description>The 'Original artist/performer' frame is
                     intended for the performer of the original recording, if
                     for example the music in the file should be a cover of a
                     previously released song.</description>
                  </item>
                  <item>
                     <term>TEXT</term>
                     <description>The 'Lyricist/Text writer' frame is intended
                     for the writer of the text or lyrics in the
                     recording.</description>
                  </item>
                  <item>
                     <term>TOLY</term>
                     <description>The 'Original lyricist/text writer' frame is
                     intended for the text writer of the original recording, if
                     for example the music in the file should be a cover of a
                     previously released song.</description>
                  </item>
                  <item>
                     <term>TCOM</term>
                     <description>The 'Composer' frame is intended for the name
                     of the composer.</description>
                  </item>
                  <item>
                     <term>TMCL</term>
                     <description>The 'Musician credits list' is intended as a
                     mapping between instruments and the musician that played
                     it. Every odd field is an instrument and every even is an
                     artist or a comma delimited list of artists.</description>
                  </item>
                  <item>
                     <term>TIPL</term>
                     <description>The 'Involved people list' is very similar to
                     the musician credits list, but maps between functions, like
                     producer, and names.</description>
                  </item>
                  <item>
                     <term>TENC</term>
                     <description>The 'Encoded by' frame contains the name of
                     the person or organisation that encoded the audio file.
                     This field may contain a copyright message, if the audio
                     file also is copyrighted by the encoder.</description>
                  </item>
                  <item>
                     <term>TBPM</term>
                     <description>The 'BPM' frame contains the number of beats
                     per minute in the main part of the audio. The BPM is an
                     integer and represented as a numerical
                     string.</description>
                  </item>
                  <item>
                     <term>TLEN</term>
                     <description>The 'Length' frame contains the length of the
                     audio file in milliseconds, represented as a numeric
                     string.</description>
                  </item>
                  <item>
                     <term>TKEY</term>
                     <description>The 'Initial key' frame contains the musical
                     key in which the sound starts. It is represented as a
                     string with a maximum length of three characters. The
                     ground keys are represented with "A","B","C","D","E", "F"
                     and "G" and halfkeys represented with "b" and "#". Minor is
                     represented as "m", e.g. "Dbm". Off key is represented with
                     an "o" only.</description>
                  </item>
                  <item>
                     <term>TLAN</term>
                     <description>The 'Language' frame should contain the
                     languages of the text or lyrics spoken or sung in the
                     audio. The language is represented with three characters
                     according to ISO-639-2. If more than one language is used
                     in the text their language codes should follow according to
                     the amount of their usage.</description>
                  </item>
                  <item>
                     <term>TCON</term>
                     <description>The 'Content type', which ID3v1 was stored as
                     a one byte numeric value only, is now a string. You may use
                     one or several of the ID3v1 types as numerical strings, or,
                     since the category list would be impossible to maintain
                     with accurate and up to date categories, define your
                     own.</description>
                  </item>
                  <item>
                     <term>TFLT</term>
                     <description>The 'File type' frame indicates which type of
                     audio this tag defines. (See the specification for more
                     details.)</description>
                  </item>
                  <item>
                     <term>TMED</term>
                     <description>The 'Media type' frame describes from which
                     media the sound originated. (See the specification for more
                     details.)</description>
                  </item>
                  <item>
                     <term>TMOO</term>
                     <description>The 'Mood' frame is intended to reflect the
                     mood of the audio with a few keywords, e.g. "Romantic" or
                     "Sad".</description>
                  </item>
                  <item>
                     <term>TCOP</term>
                     <description>The 'Copyright message' frame, in which the
                     string must begin with a year and a space character (making
                     five characters), is intended for the copyright holder of
                     the original sound, not the audio file itself. The absence
                     of this frame means only that the copyright information is
                     unavailable or has been removed, and must not be
                     interpreted to mean that the audio is public domain. Every
                     time this field is displayed the field must be preceded
                     with "Copyright " (C) " ", where (C) is one character
                     showing a C in a circle.</description>
                  </item>
                  <item>
                     <term>TPRO</term>
                     <description>The 'Produced notice' frame, in which the
                     string must begin with a year and a space character (making
                     five characters), is intended for the production copyright
                     holder of the original sound, not the audio file itself.
                     The absence of this frame means only that the production
                     copyright information is unavailable or has been removed,
                     and must not be interpreted to mean that the audio is
                     public domain. Every time this field is displayed the field
                     must be preceded with "Produced " (P) " ", where (P) is one
                     character showing a P in a circle.</description>
                  </item>
                  <item>
                     <term>TPUB</term>
                     <description>The 'Publisher' frame simply contains the name
                     of the label or publisher.</description>
                  </item>
                  <item>
                     <term>TOWN</term>
                     <description>The 'File owner/licensee' frame contains the
                     name of the owner or licensee of the file and it's
                     contents.</description>
                  </item>
                  <item>
                     <term>TRSN</term>
                     <description>The 'Internet radio station name' frame
                     contains the name of the internet radio station from which
                     the audio is streamed.</description>
                  </item>
                  <item>
                     <term>TRSO</term>
                     <description>The 'Internet radio station owner' frame
                     contains the name of the owner of the internet radio
                     station from which the audio is streamed.</description>
                  </item>
                  <item>
                     <term>TOFN</term>
                     <description>The 'Original filename' frame contains the
                     preferred filename for the file, since some media doesn't
                     allow the desired length of the filename. The filename is
                     case sensitive and includes its suffix.</description>
                  </item>
                  <item>
                     <term>TDLY</term>
                     <description>The 'Playlist delay' defines the numbers of
                     milliseconds of silence that should be inserted before this
                     audio. The value zero indicates that this is a part of a
                     multifile audio track that should be played
                     continuously.</description>
                  </item>
                  <item>
                     <term>TDEN</term>
                     <description>The 'Encoding time' frame contains a timestamp
                     describing when the audio was encoded. Timestamp format is
                     described in the ID3v2 structure document.</description>
                  </item>
                  <item>
                     <term>TDOR</term>
                     <description>The 'Original release time' frame contains a
                     timestamp describing when the original recording of the
                     audio was released. Timestamp format is described in the
                     ID3v2 structure document.</description>
                  </item>
                  <item>
                     <term>TDRC</term>
                     <description>The 'Recording time' frame contains a
                     timestamp describing when the audio was recorded. Timestamp
                     format is described in the ID3v2 structure
                     document.</description>
                  </item>
                  <item>
                     <term>TDRL</term>
                     <description>The 'Release time' frame contains a timestamp
                     describing when the audio was first released. Timestamp
                     format is described in the ID3v2 structure
                     document.</description>
                  </item>
                  <item>
                     <term>TDTG</term>
                     <description>The 'Tagging time' frame contains a timestamp
                     describing then the audio was tagged. Timestamp format is
                     described in the ID3v2 structure document.</description>
                  </item>
                  <item>
                     <term>TSSE</term>
                     <description>The 'Software/Hardware and settings used for
                     encoding' frame includes the used audio encoder and its
                     settings when the file was encoded. Hardware refers to
                     hardware encoders, not the computer on which a program was
                     run.</description>
                  </item>
                  <item>
                     <term>TSOA</term>
                     <description>The 'Album sort order' frame defines a string
                     which should be used instead of the album name (TALB) for
                     sorting purposes. E.g. an album named "A Soundtrack" might
                     preferably be sorted as "Soundtrack".</description>
                  </item>
                  <item>
                     <term>TSOP</term>
                     <description>The 'Performer sort order' frame defines a
                     string which should be used instead of the performer (TPE2)
                     for sorting purposes.</description>
                  </item>
                  <item>
                     <term>TSOT</term>
                     <description>The 'Title sort order' frame defines a string
                     which should be used instead of the title (TIT2) for
                     sorting purposes.</description>
                  </item>
               </list>
            </remarks>
        </member>
        <member name="F:TagLib.Id3v2.TextInformationFrame.encoding">
            <summary>
               Contains the encoding to use for the text.
            </summary>
        </member>
        <member name="F:TagLib.Id3v2.TextInformationFrame.text_fields">
            <summary>
               Contains the text fields.
            </summary>
        </member>
        <member name="F:TagLib.Id3v2.TextInformationFrame.raw_data">
            <summary>
               Contains the raw data from the frame, or <see
               langword="null" /> if it has been processed.
            </summary>
            <remarks>
               Rather than processing the data when the frame is loaded,
               it is parsed on demand, reducing the ammount of
               unnecessary conversion.
            </remarks>
        </member>
        <member name="F:TagLib.Id3v2.TextInformationFrame.raw_version">
            <summary>
               Contains the ID3v2 version of <see cref="F:TagLib.Id3v2.TextInformationFrame.raw_data" />.
            </summary>
        </member>
        <member name="F:TagLib.Id3v2.TextInformationFrame.raw_encoding">
            <summary>
               Contains the Encoding of the raw_data
            </summary>
        </member>
        <member name="M:TagLib.Id3v2.TextInformationFrame.#ctor(TagLib.ByteVector,TagLib.StringType)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Id3v2.TextInformationFrame" /> with a specified
               identifier and text encoding.
            </summary>
            <param name="ident">
               A <see cref="T:TagLib.ByteVector" /> object containing an ID3v2.4
               frame identifier.
            </param>
            <param name="encoding">
               A <see cref="T:TagLib.StringType" /> value specifying the encoding
               to use for the new instance.
            </param>
        </member>
        <member name="M:TagLib.Id3v2.TextInformationFrame.#ctor(TagLib.ByteVector)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Id3v2.TextInformationFrame" /> with a specified
               identifer.
            </summary>
            <param name="ident">
               A <see cref="T:TagLib.ByteVector" /> object containing an ID3v2.4
               frame identifier.
            </param>
        </member>
        <member name="M:TagLib.Id3v2.TextInformationFrame.#ctor(TagLib.ByteVector,System.Byte)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Id3v2.TextInformationFrame" /> by reading its raw
               contents in a specified ID3v2 version.
            </summary>
            <param name="data">
               A <see cref="T:TagLib.ByteVector" /> object starting with the
               frame to read.
            </param>
            <param name="version">
               A <see cref="T:System.Byte" /> value containing the ID3v2 version
               in which <paramref name="data" /> is encoded.
            </param>
        </member>
        <member name="M:TagLib.Id3v2.TextInformationFrame.#ctor(TagLib.ByteVector,System.Int32,TagLib.Id3v2.FrameHeader,System.Byte)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Id3v2.TextInformationFrame" /> by reading its raw
               contents from a specifed position in a <see
               cref="T:TagLib.ByteVector" /> object in a specified ID3v2 version.
            </summary>
            <param name="data">
               A <see cref="T:TagLib.ByteVector" /> object containing the frame
               to read.
            </param>
            <param name="offset">
               A <see cref="T:System.Int32" /> value specifying the offset in
               <paramref name="data" /> at which the frame begins.
            </param>
            <param name="header">
               A <see cref="T:TagLib.Id3v2.FrameHeader" /> value containing the header
               that would be read in the frame.
            </param>
            <param name="version">
               A <see cref="T:System.Byte" /> value containing the ID3v2 version
               in which <paramref name="data" /> is encoded.
            </param>
        </member>
        <member name="P:TagLib.Id3v2.TextInformationFrame.FieldList">
            <summary>
               Gets the text contained in the current instance.
            </summary>
            <value>
               A <see cref="T:TagLib.StringCollection" /> object containing the
               text contained in the current instance.
            </value>
            <remarks>
               Modifying the contents of the returned value will not
               modify the contents of the current instance.
            </remarks>
        </member>
        <member name="P:TagLib.Id3v2.TextInformationFrame.Text">
             <summary>
                Gets and sets the text contained in the current
                instance.
             </summary>
             <value>
                A <see cref="T:string[]" /> containing the text contained
                in the current instance.
             </value>
             <remarks>
                <para>Modifying the contents of the returned value will
                not modify the contents of the current instance. The
                value must be reassigned for the value to change.</para>
             </remarks>
             <example>
                <para>Modifying the values text values of a frame.</para>
                <code> TextInformationFrame frame = TextInformationFrame.Get (myTag, "TPE1", true);
             /* Upper casing all the text: */
             string[] text = frame.Text;
             for (int i = 0; i &lt; text.Length; i++)
            	text [i] = text [i].ToUpper ();
             frame.Text = text;
            
             /* Replacing the value completely: */
             frame.Text = new string [] {"DJ Jazzy Jeff"};</code>
             </example>
        </member>
        <member name="P:TagLib.Id3v2.TextInformationFrame.TextEncoding">
            <summary>
               Gets and sets the text encoding to use when rendering
               the current instance.
            </summary>
            <value>
               A <see cref="T:TagLib.StringType" /> value specifying the encoding
               to use when rendering the current instance.
            </value>
            <remarks>
               This value will be overwritten if <see
               cref="P:TagLib.Id3v2.Tag.ForceDefaultEncoding" /> is <see
               langword="true" />.
            </remarks>
        </member>
        <member name="M:TagLib.Id3v2.TextInformationFrame.SetText(TagLib.StringCollection)">
            <summary>
               Sets the text contained in the current instance.
            </summary>
            <param name="fields">
               A <see cref="T:TagLib.StringCollection" /> object containing text
               to store in the current instance.
            </param>
        </member>
        <member name="M:TagLib.Id3v2.TextInformationFrame.SetText(System.String[])">
            <summary>
               Sets the text contained in the current instance.
            </summary>
            <param name="text">
               A <see cref="T:string[]" /> containing text to store in the
               current instance.
            </param>
        </member>
        <member name="M:TagLib.Id3v2.TextInformationFrame.ToString">
            <summary>
               Gets a string representation of the current instance.
            </summary>
            <returns>
               A <see cref="T:System.String" /> containing the joined text.
            </returns>
        </member>
        <member name="M:TagLib.Id3v2.TextInformationFrame.Render(System.Byte)">
            <summary>
               Renders the current instance, encoded in a specified
               ID3v2 version.
            </summary>
            <param name="version">
               A <see cref="T:System.Byte" /> value specifying the version of
               ID3v2 to use when encoding the current instance.
            </param>
            <returns>
               A <see cref="T:TagLib.ByteVector" /> object containing the
               rendered version of the current instance.
            </returns>
        </member>
        <member name="M:TagLib.Id3v2.TextInformationFrame.Get(TagLib.Id3v2.Tag,TagLib.ByteVector,TagLib.StringType,System.Boolean)">
            <summary>
               Gets a <see cref="T:TagLib.Id3v2.TextInformationFrame" /> object of a
               specified type from a specified tag, optionally creating
               and adding one with a specified encoding if none is
               found.
            </summary>
            <param name="tag">
               A <see cref="T:TagLib.Id3v2.Tag" /> object to search for the specified
               tag in.
            </param>
            <param name="ident">
               A <see cref="T:TagLib.ByteVector" /> object containing the frame
               identifer to search for.
            </param>
            <param name="encoding">
               A <see cref="T:TagLib.StringType" /> value specifying the encoding
               to use if a new frame is created.
            </param>
            <param name="create">
               A <see cref="T:System.Boolean" /> value specifying whether or not to
               create a new frame if an existing frame was not found.
            </param>
            <returns>
               A <see cref="T:TagLib.Id3v2.TextInformationFrame" /> object containing
               the frame found in or added to <paramref name="tag" /> or
               <see langword="null" /> if no value was found <paramref
               name="create" /> is <see langword="false" />.
            </returns>
            <remarks>
               To create a frame without having to specify the encoding,
               use <see cref="M:TagLib.Id3v2.TextInformationFrame.Get(TagLib.Id3v2.Tag,TagLib.ByteVector,System.Boolean)" />.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="tag" /> or <paramref name="ident" /> is
               <see langword="null" />.
            </exception>
            <exception cref="T:System.ArgumentException">
               <paramref name="ident" /> is not exactly four bytes long.
            </exception>
        </member>
        <member name="M:TagLib.Id3v2.TextInformationFrame.Get(TagLib.Id3v2.Tag,TagLib.ByteVector,System.Boolean)">
            <summary>
               Gets a <see cref="T:TagLib.Id3v2.TextInformationFrame" /> object of a
               specified type from a specified tag, optionally creating
               and adding one if none is found.
            </summary>
            <param name="tag">
               A <see cref="T:TagLib.Id3v2.Tag" /> object to search for the specified
               tag in.
            </param>
            <param name="ident">
               A <see cref="T:TagLib.ByteVector" /> object containing the frame
               identifer to search for.
            </param>
            <param name="create">
               A <see cref="T:System.Boolean" /> value specifying whether or not to
               create a new frame if an existing frame was not found.
            </param>
            <returns>
               A <see cref="T:TagLib.Id3v2.TextInformationFrame" /> object containing
               the frame found in or added to <paramref name="tag" /> or
               <see langword="null" /> if no value was found <paramref
               name="create" /> is <see langword="false" />.
            </returns>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="tag" /> or <paramref name="ident" /> is
               <see langword="null" />.
            </exception>
            <exception cref="T:System.ArgumentException">
               <paramref name="ident" /> is not exactly four bytes long.
            </exception>
        </member>
        <member name="M:TagLib.Id3v2.TextInformationFrame.Get(TagLib.Id3v2.Tag,TagLib.ByteVector)">
            <summary>
               Gets a <see cref="T:TagLib.Id3v2.TextInformationFrame" /> object of a
               specified type from a specified tag.
            </summary>
            <param name="tag">
               A <see cref="T:TagLib.Id3v2.Tag" /> object to search for the specified
               tag in.
            </param>
            <param name="ident">
               A <see cref="T:TagLib.ByteVector" /> object containing the frame
               identifer to search for.
            </param>
            <returns>
               A <see cref="T:TagLib.Id3v2.TextInformationFrame" /> object containing
               the frame found in <paramref name="tag" /> or <see
               langword="null" /> if no value was found.
            </returns>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="tag" /> or <paramref name="ident" /> is
               <see langword="null" />.
            </exception>
            <exception cref="T:System.ArgumentException">
               <paramref name="ident" /> is not exactly four bytes long.
            </exception>
        </member>
        <member name="M:TagLib.Id3v2.TextInformationFrame.ParseFields(TagLib.ByteVector,System.Byte)">
            <summary>
               Populates the values in the current instance by parsing
               its field data in a specified version.
            </summary>
            <param name="data">
               A <see cref="T:TagLib.ByteVector" /> object containing the
               extracted field data.
            </param>
            <param name="version">
               A <see cref="T:System.Byte" /> indicating the ID3v2 version the
               field data is encoded in.
            </param>
        </member>
        <member name="M:TagLib.Id3v2.TextInformationFrame.ParseRawData">
            <summary>
               Performs the actual parsing of the raw data.
            </summary>
            <remarks>
               Because of the high parsing cost and relatively low usage
               of the class, <see cref="M:TagLib.Id3v2.TextInformationFrame.ParseFields(TagLib.ByteVector,System.Byte)" /> only stores the
               field data so it can be parsed on demand. Whenever a
               property or method is called which requires the data,
               this method is called, and only on the first call does it
               actually parse the data.
            </remarks>
        </member>
        <member name="M:TagLib.Id3v2.TextInformationFrame.RenderFields(System.Byte)">
            <summary>
               Renders the values in the current instance into field
               data for a specified version.
            </summary>
            <param name="version">
               A <see cref="T:System.Byte" /> indicating the ID3v2 version the
               field data is to be encoded in.
            </param>
            <returns>
               A <see cref="T:TagLib.ByteVector" /> object containing the
               rendered field data.
            </returns>
        </member>
        <member name="M:TagLib.Id3v2.TextInformationFrame.Clone">
            <summary>
               Creates a deep copy of the current instance.
            </summary>
            <returns>
               A new <see cref="T:TagLib.Id3v2.Frame" /> object identical to the
               current instance.
            </returns>
        </member>
        <member name="T:TagLib.Id3v2.UserTextInformationFrame">
            <summary>
               This class extends <see cref="T:TagLib.Id3v2.TextInformationFrame" /> to provide
               support for ID3v2 User Text Information (TXXX) Frames.
            </summary>
        </member>
        <member name="M:TagLib.Id3v2.UserTextInformationFrame.#ctor(System.String,TagLib.StringType)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Id3v2.UserTextInformationFrame" /> with a specified
               description and text encoding.
            </summary>
            <param name="description">
               A <see cref="T:System.String" /> containing the description of the
               new frame.
            </param>
            <param name="encoding">
               A <see cref="T:TagLib.StringType" /> containing the text encoding
               to use when rendering the new frame.
            </param>
            <remarks>
               When a frame is created, it is not automatically added to
               the tag. Consider using <see
               cref="M:TagLib.Id3v2.UserTextInformationFrame.Get(TagLib.Id3v2.Tag,System.String,TagLib.StringType,System.Boolean)" /> for more
               integrated frame creation.
            </remarks>
        </member>
        <member name="M:TagLib.Id3v2.UserTextInformationFrame.#ctor(System.String)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Id3v2.UserTextInformationFrame" /> with a specified
               description.
            </summary>
            <param name="description">
               A <see cref="T:System.String" /> containing the description of the
               new frame.
            </param>
            <remarks>
               When a frame is created, it is not automatically added to
               the tag. Consider using <see
               cref="M:TagLib.Id3v2.UserTextInformationFrame.Get(TagLib.Id3v2.Tag,System.String,System.Boolean)" /> for more integrated frame
               creation.
            </remarks>
        </member>
        <member name="M:TagLib.Id3v2.UserTextInformationFrame.#ctor(TagLib.ByteVector,System.Byte)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Id3v2.UserTextInformationFrame" /> by reading its raw
               data in a specified ID3v2 version.
            </summary>
            <param name="data">
               A <see cref="T:TagLib.ByteVector" /> object starting with the raw
               representation of the new frame.
            </param>
            <param name="version">
               A <see cref="T:System.Byte" /> indicating the ID3v2 version the
               raw frame is encoded in.
            </param>
        </member>
        <member name="M:TagLib.Id3v2.UserTextInformationFrame.#ctor(TagLib.ByteVector,System.Int32,TagLib.Id3v2.FrameHeader,System.Byte)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Id3v2.UserTextInformationFrame" /> by reading its raw
               data in a specified ID3v2 version.
            </summary>
            <param name="data">
               A <see cref="T:TagLib.ByteVector" /> object containing the raw
               representation of the new frame.
            </param>
            <param name="offset">
               A <see cref="T:System.Int32" /> indicating at what offset in
               <paramref name="data" /> the frame actually begins.
            </param>
            <param name="header">
               A <see cref="T:TagLib.Id3v2.FrameHeader" /> containing the header of the
               frame found at <paramref name="offset" /> in the data.
            </param>
            <param name="version">
               A <see cref="T:System.Byte" /> indicating the ID3v2 version the
               raw frame is encoded in.
            </param>
        </member>
        <member name="P:TagLib.Id3v2.UserTextInformationFrame.Description">
            <summary>
               Gets and sets the description stored in the current
               instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> containing the description
               stored in the current instance.
            </value>
            <remarks>
               There should only be one frame with a matching
               description per tag.
            </remarks>
        </member>
        <member name="P:TagLib.Id3v2.UserTextInformationFrame.Text">
            <summary>
               Gets and sets the text contained in the current
               instance.
            </summary>
            <value>
               A <see cref="T:string[]" /> containing the text contained
               in the current instance.
            </value>
            <remarks>
               <para>Modifying the contents of the returned value will
               not modify the contents of the current instance. The
               value must be reassigned for the value to change.</para>
            </remarks>
        </member>
        <member name="M:TagLib.Id3v2.UserTextInformationFrame.ToString">
            <summary>
               Gets a string representation of the current instance.
            </summary>
            <returns>
               A <see cref="T:System.String" /> containing the joined text.
            </returns>
        </member>
        <member name="M:TagLib.Id3v2.UserTextInformationFrame.Get(TagLib.Id3v2.Tag,System.String,TagLib.StringType,System.Boolean,System.Boolean)">
            <summary>
               Gets a specified user text frame from the specified tag,
               optionally creating it if it does not exist and optionally
               searching for the frame case-insensitive.
            </summary>
            <param name="tag">
               A <see cref="T:TagLib.Id3v2.Tag" /> object to search in.
            </param>
            <param name="description">
               A <see cref="T:System.String" /> specifying the description to
               match.
            </param>
            <param name="type">
               A <see cref="T:TagLib.StringType" /> specifying the encoding to
               use if creating a new frame.
            </param>
            <param name="create">
               A <see cref="T:System.Boolean" /> specifying whether or not to create
               and add a new frame to the tag if a match is not found.
            </param>
            <param name="caseSensitive">
               A <see cref="T:System.Boolean" /> specifying whether or not to search
               for the frame case-sensitive.
            </param>
            <returns>
               A <see cref="T:TagLib.Id3v2.UserTextInformationFrame" /> object
               containing the matching frame, or <see langword="null" />
               if a match wasn't found and <paramref name="create" /> is
               <see langword="false" />.
            </returns>
        </member>
        <member name="M:TagLib.Id3v2.UserTextInformationFrame.Get(TagLib.Id3v2.Tag,System.String,TagLib.StringType,System.Boolean)">
            <summary>
               Gets a specified user text frame from the specified tag,
               optionally creating it if it does not exist.
            </summary>
            <param name="tag">
               A <see cref="T:TagLib.Id3v2.Tag" /> object to search in.
            </param>
            <param name="description">
               A <see cref="T:System.String" /> specifying the description to
               match.
            </param>
            <param name="type">
               A <see cref="T:TagLib.StringType" /> specifying the encoding to
               use if creating a new frame.
            </param>
            <param name="create">
               A <see cref="T:System.Boolean" /> specifying whether or not to create
               and add a new frame to the tag if a match is not found.
            </param>
            <returns>
               A <see cref="T:TagLib.Id3v2.UserTextInformationFrame" /> object
               containing the matching frame, or <see langword="null" />
               if a match wasn't found and <paramref name="create" /> is
               <see langword="false" />.
            </returns>
        </member>
        <member name="M:TagLib.Id3v2.UserTextInformationFrame.Get(TagLib.Id3v2.Tag,System.String,System.Boolean)">
            <summary>
               Gets a specified user text frame from the specified tag,
               optionally creating it if it does not exist.
            </summary>
            <param name="tag">
               A <see cref="T:TagLib.Id3v2.Tag" /> object to search in.
            </param>
            <param name="description">
               A <see cref="T:System.String" /> specifying the description to
               match.
            </param>
            <param name="create">
               A <see cref="T:System.Boolean" /> specifying whether or not to create
               and add a new frame to the tag if a match is not found.
            </param>
            <returns>
               A <see cref="T:TagLib.Id3v2.UserTextInformationFrame" /> object
               containing the matching frame, or <see langword="null" />
               if a match wasn't found and <paramref name="create" /> is
               <see langword="false" />.
            </returns>
        </member>
        <member name="M:TagLib.Id3v2.UserTextInformationFrame.Get(TagLib.Id3v2.Tag,System.String)">
            <summary>
               Gets a specified user text frame from the specified tag.
            </summary>
            <param name="tag">
               A <see cref="T:TagLib.Id3v2.Tag" /> object to search in.
            </param>
            <param name="description">
               A <see cref="T:System.String" /> specifying the description to
               match.
            </param>
            <returns>
               A <see cref="T:TagLib.Id3v2.UserTextInformationFrame" /> object
               containing the matching frame, or <see langword="null" />
               if a match wasn't found.
            </returns>
        </member>
        <member name="T:TagLib.Id3v2.UniqueFileIdentifierFrame">
            <summary>
               This class extends <see cref="T:TagLib.Id3v2.Frame" />, implementing support for
               ID3v2 Unique File Identifier (UFID) Frames.
            </summary>
        </member>
        <member name="M:TagLib.Id3v2.UniqueFileIdentifierFrame.#ctor(System.String,TagLib.ByteVector)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Id3v2.UniqueFileIdentifierFrame" /> with a specified
               owner and identifier data.
            </summary>
            <param name="owner">
               A <see cref="T:System.String" /> containing the owner of the new
               frame.
            </param>
            <param name="identifier">
               A <see cref="T:TagLib.ByteVector" /> object containing the
               identifier for the new frame.
            </param>
            <remarks>
               When a frame is created, it is not automatically added to
               the tag. Consider using <see
               cref="M:TagLib.Id3v2.UniqueFileIdentifierFrame.Get(TagLib.Id3v2.Tag,System.String,System.Boolean)" /> for more integrated frame
               creation.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="owner" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:TagLib.Id3v2.UniqueFileIdentifierFrame.#ctor(System.String)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Id3v2.UniqueFileIdentifierFrame" /> with a specified
               owner.
            </summary>
            <param name="owner">
               A <see cref="T:System.String" /> containing the owner of the new
               frame.
            </param>
            <remarks>
               When a frame is created, it is not automatically added to
               the tag. Consider using <see
               cref="M:TagLib.Id3v2.UniqueFileIdentifierFrame.Get(TagLib.Id3v2.Tag,System.String,System.Boolean)" /> for more integrated frame
               creation.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="owner" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:TagLib.Id3v2.UniqueFileIdentifierFrame.#ctor(TagLib.ByteVector,System.Byte)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Id3v2.UniqueFileIdentifierFrame" /> by reading its raw
               data in a specified ID3v2 version.
            </summary>
            <param name="data">
               A <see cref="T:TagLib.ByteVector" /> object starting with the raw
               representation of the new frame.
            </param>
            <param name="version">
               A <see cref="T:System.Byte" /> indicating the ID3v2 version the
               raw frame is encoded in.
            </param>
        </member>
        <member name="M:TagLib.Id3v2.UniqueFileIdentifierFrame.#ctor(TagLib.ByteVector,System.Int32,TagLib.Id3v2.FrameHeader,System.Byte)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Id3v2.UniqueFileIdentifierFrame" /> by reading its raw
               data in a specified ID3v2 version.
            </summary>
            <param name="data">
               A <see cref="T:TagLib.ByteVector" /> object containing the raw
               representation of the new frame.
            </param>
            <param name="offset">
               A <see cref="T:System.Int32" /> indicating at what offset in
               <paramref name="data" /> the frame actually begins.
            </param>
            <param name="header">
               A <see cref="T:TagLib.Id3v2.FrameHeader" /> containing the header of the
               frame found at <paramref name="offset" /> in the data.
            </param>
            <param name="version">
               A <see cref="T:System.Byte" /> indicating the ID3v2 version the
               raw frame is encoded in.
            </param>
        </member>
        <member name="P:TagLib.Id3v2.UniqueFileIdentifierFrame.Owner">
            <summary>
               Gets and sets the owner of the current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> containing the owner of the
               current instance.
            </value>
            <remarks>
               There should only be one frame with a matching owner per
               tag.
            </remarks>
        </member>
        <member name="P:TagLib.Id3v2.UniqueFileIdentifierFrame.Identifier">
            <summary>
               Gets and sets the identifier data stored in the current
               instance.
            </summary>
            <value>
               A <see cref="T:TagLib.ByteVector" /> object containiner the unique
               file identifier frame.
            </value>
        </member>
        <member name="M:TagLib.Id3v2.UniqueFileIdentifierFrame.Get(TagLib.Id3v2.Tag,System.String,System.Boolean)">
            <summary>
               Gets a specified unique file identifer frame from the
               specified tag, optionally creating it if it does not
               exist.
            </summary>
            <param name="tag">
               A <see cref="T:TagLib.Id3v2.Tag" /> object to search in.
            </param>
            <param name="owner">
               A <see cref="T:System.String" /> specifying the owner to match.
            </param>
            <param name="create">
               A <see cref="T:System.Boolean" /> specifying whether or not to create
               and add a new frame to the tag if a match is not found.
            </param>
            <returns>
               A <see cref="T:TagLib.Id3v2.UserTextInformationFrame" /> object
               containing the matching frame, or <see langword="null" />
               if a match wasn't found and <paramref name="create" /> is
               <see langword="false" />.
            </returns>
        </member>
        <member name="M:TagLib.Id3v2.UniqueFileIdentifierFrame.ParseFields(TagLib.ByteVector,System.Byte)">
            <summary>
               Populates the values in the current instance by parsing
               its field data in a specified version.
            </summary>
            <param name="data">
               A <see cref="T:TagLib.ByteVector" /> object containing the
               extracted field data.
            </param>
            <param name="version">
               A <see cref="T:System.Byte" /> indicating the ID3v2 version the
               field data is encoded in.
            </param>
        </member>
        <member name="M:TagLib.Id3v2.UniqueFileIdentifierFrame.RenderFields(System.Byte)">
            <summary>
               Renders the values in the current instance into field
               data for a specified version.
            </summary>
            <param name="version">
               A <see cref="T:System.Byte" /> indicating the ID3v2 version the
               field data is to be encoded in.
            </param>
            <returns>
               A <see cref="T:TagLib.ByteVector" /> object containing the
               rendered field data.
            </returns>
        </member>
        <member name="M:TagLib.Id3v2.UniqueFileIdentifierFrame.Clone">
            <summary>
               Creates a deep copy of the current instance.
            </summary>
            <returns>
               A new <see cref="T:TagLib.Id3v2.Frame" /> object identical to the
               current instance.
            </returns>
        </member>
        <member name="T:TagLib.Id3v2.UnknownFrame">
            <summary>
               This class extends <see cref="T:TagLib.Id3v2.Frame" /> to provide a fallback
               type when no other frame class works for a given frame.
            </summary>
        </member>
        <member name="M:TagLib.Id3v2.UnknownFrame.#ctor(TagLib.ByteVector,TagLib.ByteVector)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Id3v2.UnknownFrame" /> with a specified type.
            </summary>
            <param name="type">
               A <see cref="T:TagLib.ByteVector" /> object containing an ID3v2.4
               frame identifier.
            </param>
            <param name="data">
               A <see cref="T:TagLib.ByteVector"/> object containing the contents
               of the frame.
            </param>
        </member>
        <member name="M:TagLib.Id3v2.UnknownFrame.#ctor(TagLib.ByteVector)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Id3v2.UnknownFrame" /> with a specified type.
            </summary>
            <param name="type">
               A <see cref="T:TagLib.ByteVector" /> object containing an ID3v2.4
               frame identifier.
            </param>
        </member>
        <member name="M:TagLib.Id3v2.UnknownFrame.#ctor(TagLib.ByteVector,System.Byte)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Id3v2.UnknownFrame" /> by reading its raw data in a
               specified ID3v2 version.
            </summary>
            <param name="data">
               A <see cref="T:TagLib.ByteVector" /> object starting with the raw
               representation of the new frame.
            </param>
            <param name="version">
               A <see cref="T:System.Byte" /> indicating the ID3v2 version the
               raw frame is encoded in.
            </param>
        </member>
        <member name="M:TagLib.Id3v2.UnknownFrame.#ctor(TagLib.ByteVector,System.Int32,TagLib.Id3v2.FrameHeader,System.Byte)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Id3v2.UnknownFrame" /> by reading its raw data in a
               specified ID3v2 version.
            </summary>
            <param name="data">
               A <see cref="T:TagLib.ByteVector" /> object containing the raw
               representation of the new frame.
            </param>
            <param name="offset">
               A <see cref="T:System.Int32" /> indicating at what offset in
               <paramref name="data" /> the frame actually begins.
            </param>
            <param name="header">
               A <see cref="T:TagLib.Id3v2.FrameHeader" /> containing the header of the
               frame found at <paramref name="offset" /> in the data.
            </param>
            <param name="version">
               A <see cref="T:System.Byte" /> indicating the ID3v2 version the
               raw frame is encoded in.
            </param>
        </member>
        <member name="P:TagLib.Id3v2.UnknownFrame.Data">
            <summary>
               Gets and sets the field data in the current instance.
            </summary>
            <value>
               A <see cref="T:TagLib.ByteVector" /> containing the field data.
            </value>
        </member>
        <member name="M:TagLib.Id3v2.UnknownFrame.ParseFields(TagLib.ByteVector,System.Byte)">
            <summary>
               Populates the values in the current instance by parsing
               its field data in a specified version.
            </summary>
            <param name="data">
               A <see cref="T:TagLib.ByteVector" /> object containing the
               extracted field data.
            </param>
            <param name="version">
               A <see cref="T:System.Byte" /> indicating the ID3v2 version the
               field data is encoded in.
            </param>
        </member>
        <member name="M:TagLib.Id3v2.UnknownFrame.RenderFields(System.Byte)">
            <summary>
               Renders the values in the current instance into field
               data for a specified version.
            </summary>
            <param name="version">
               A <see cref="T:System.Byte" /> indicating the ID3v2 version the
               field data is to be encoded in.
            </param>
            <returns>
               A <see cref="T:TagLib.ByteVector" /> object containing the
               rendered field data.
            </returns>
        </member>
        <member name="T:TagLib.Id3v2.UnsynchronisedLyricsFrame">
            <summary>
               This class extends <see cref="T:TagLib.Id3v2.Frame" />, implementing support for
               ID3v2 Unsynchronised Lyrics (USLT) Frames.
            </summary>
        </member>
        <member name="F:TagLib.Id3v2.UnsynchronisedLyricsFrame.language">
            <summary>
               Contains the ISO-639-2 language code of the current
               instance.
            </summary>
        </member>
        <member name="F:TagLib.Id3v2.UnsynchronisedLyricsFrame.description">
            <summary>
               Contains the description of the current instance.
            </summary>
        </member>
        <member name="F:TagLib.Id3v2.UnsynchronisedLyricsFrame.text">
            <summary>
               Contains the lyrics text of the current instance.
            </summary>
        </member>
        <member name="M:TagLib.Id3v2.UnsynchronisedLyricsFrame.#ctor(System.String,System.String,TagLib.StringType)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Id3v2.UnsynchronisedLyricsFrame" /> with a specified
               description, ISO-639-2 language code, and text encoding.
            </summary>
            <param name="description">
               A <see cref="T:System.String" /> containing the description of the
               new frame.
            </param>
            <param name="language">
               A <see cref="T:System.String" /> containing the ISO-639-2 language
               code of the new frame.
            </param>
            <param name="encoding">
               A <see cref="T:TagLib.StringType" /> containing the text encoding
               to use when rendering the new frame.
            </param>
            <remarks>
               When a frame is created, it is not automatically added to
               the tag. Consider using <see cref="M:TagLib.Id3v2.UnsynchronisedLyricsFrame.Get(TagLib.Id3v2.Tag,System.String,System.String,System.Boolean)" /> for more
               integrated frame creation.
            </remarks>
        </member>
        <member name="M:TagLib.Id3v2.UnsynchronisedLyricsFrame.#ctor(System.String,System.String)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Id3v2.UnsynchronisedLyricsFrame" /> with a specified
               description and ISO-639-2 language code.
            </summary>
            <param name="description">
               A <see cref="T:System.String" /> containing the description of the
               new frame.
            </param>
            <param name="language">
               A <see cref="T:System.String" /> containing the ISO-639-2 language
               code of the new frame.
            </param>
            <remarks>
               When a frame is created, it is not automatically added to
               the tag. Consider using <see cref="M:TagLib.Id3v2.UnsynchronisedLyricsFrame.Get(TagLib.Id3v2.Tag,System.String,System.String,System.Boolean)" /> for more
               integrated frame creation.
            </remarks>
        </member>
        <member name="M:TagLib.Id3v2.UnsynchronisedLyricsFrame.#ctor(System.String)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Id3v2.UnsynchronisedLyricsFrame" /> with a specified
               description.
            </summary>
            <param name="description">
               A <see cref="T:System.String" /> containing the description of the
               new frame.
            </param>
            <remarks>
               When a frame is created, it is not automatically added to
               the tag. Consider using <see cref="M:TagLib.Id3v2.UnsynchronisedLyricsFrame.Get(TagLib.Id3v2.Tag,System.String,System.String,System.Boolean)" /> for more
               integrated frame creation.
            </remarks>
        </member>
        <member name="M:TagLib.Id3v2.UnsynchronisedLyricsFrame.#ctor(TagLib.ByteVector,System.Byte)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Id3v2.UnsynchronisedLyricsFrame" /> by reading its raw
               data in a specified ID3v2 version.
            </summary>
            <param name="data">
               A <see cref="T:TagLib.ByteVector" /> object starting with the raw
               representation of the new frame.
            </param>
            <param name="version">
               A <see cref="T:System.Byte" /> indicating the ID3v2 version the
               raw frame is encoded in.
            </param>
        </member>
        <member name="M:TagLib.Id3v2.UnsynchronisedLyricsFrame.#ctor(TagLib.ByteVector,System.Int32,TagLib.Id3v2.FrameHeader,System.Byte)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Id3v2.UnsynchronisedLyricsFrame" /> by reading its raw
               data in a specified ID3v2 version.
            </summary>
            <param name="data">
               A <see cref="T:TagLib.ByteVector" /> object containing the raw
               representation of the new frame.
            </param>
            <param name="offset">
               A <see cref="T:System.Int32" /> indicating at what offset in
               <paramref name="data" /> the frame actually begins.
            </param>
            <param name="header">
               A <see cref="T:TagLib.Id3v2.FrameHeader" /> containing the header of the
               frame found at <paramref name="offset" /> in the data.
            </param>
            <param name="version">
               A <see cref="T:System.Byte" /> indicating the ID3v2 version the
               raw frame is encoded in.
            </param>
        </member>
        <member name="P:TagLib.Id3v2.UnsynchronisedLyricsFrame.TextEncoding">
            <summary>
               Gets and sets the text encoding to use when storing the
               current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> containing the text encoding to
               use when storing the current instance.
            </value>
            <remarks>
               This encoding is overridden when rendering if <see
               cref="P:TagLib.Id3v2.Tag.ForceDefaultEncoding" /> is <see
               langword="true" /> or the render version does not support
               it.
            </remarks>
        </member>
        <member name="P:TagLib.Id3v2.UnsynchronisedLyricsFrame.Language">
            <summary>
               Gets and sets the ISO-639-2 language code stored in the
               current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> containing the ISO-639-2 language
               code stored in the current instance.
            </value>
            <remarks>
               There should only be one file with a matching description
               and ISO-639-2 language code per tag.
            </remarks>
        </member>
        <member name="P:TagLib.Id3v2.UnsynchronisedLyricsFrame.Description">
            <summary>
               Gets and sets the description stored in the current
               instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> containing the description
               stored in the current instance.
            </value>
            <remarks>
               There should only be one frame with a matching
               description and ISO-639-2 language code per tag.
            </remarks>
        </member>
        <member name="P:TagLib.Id3v2.UnsynchronisedLyricsFrame.Text">
            <summary>
               Gets and sets the lyrical text stored in the current
               instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> containing the lyrical text
               stored in the current instance.
            </value>
        </member>
        <member name="M:TagLib.Id3v2.UnsynchronisedLyricsFrame.ToString">
            <summary>
               Gets a string representation of the current instance.
            </summary>
            <returns>
               A <see cref="T:System.String" /> containing the lyrical text.
            </returns>
        </member>
        <member name="M:TagLib.Id3v2.UnsynchronisedLyricsFrame.Get(TagLib.Id3v2.Tag,System.String,System.String,System.Boolean)">
            <summary>
               Gets a specified lyrics frame from the specified tag,
               optionally creating it if it does not exist.
            </summary>
            <param name="tag">
               A <see cref="T:TagLib.Id3v2.Tag" /> object to search in.
            </param>
            <param name="description">
               A <see cref="T:System.String" /> specifying the description to
               match.
            </param>
            <param name="language">
               A <see cref="T:System.String" /> specifying the ISO-639-2 language
              code to match.
            </param>
            <param name="create">
               A <see cref="T:System.Boolean" /> specifying whether or not to create
               and add a new frame to the tag if a match is not found.
            </param>
            <returns>
               A <see cref="T:TagLib.Id3v2.UnsynchronisedLyricsFrame" /> object
               containing the matching frame, or <see langword="null" />
               if a match wasn't found and <paramref name="create" /> is
               <see langword="false" />.
            </returns>
        </member>
        <member name="M:TagLib.Id3v2.UnsynchronisedLyricsFrame.GetPreferred(TagLib.Id3v2.Tag,System.String,System.String)">
            <summary>
               Gets a specified comments frame from the specified tag,
               trying to to match the description and language but
               accepting an incomplete match.
            </summary>
            <param name="tag">
               A <see cref="T:TagLib.Id3v2.Tag" /> object to search in.
            </param>
            <param name="description">
               A <see cref="T:System.String" /> specifying the description to
               match.
            </param>
            <param name="language">
               A <see cref="T:System.String" /> specifying the ISO-639-2 language
              code to match.
            </param>
            <returns>
               A <see cref="T:TagLib.Id3v2.UnsynchronisedLyricsFrame" /> object
               containing the matching frame, or <see langword="null" />
               if a match wasn't found.
            </returns>
            <remarks>
               <para>The method tries matching with the following order
               of precidence:</para>
               <list type="number">
                  <item><term>The first frame with a matching
                  description and language.</term></item>
                  <item><term>The first frame with a matching
                  language.</term></item>
                  <item><term>The first frame with a matching
                  description.</term></item>
                  <item><term>The first frame.</term></item>
               </list>
            </remarks>
        </member>
        <member name="M:TagLib.Id3v2.UnsynchronisedLyricsFrame.ParseFields(TagLib.ByteVector,System.Byte)">
            <summary>
               Populates the values in the current instance by parsing
               its field data in a specified version.
            </summary>
            <param name="data">
               A <see cref="T:TagLib.ByteVector" /> object containing the
               extracted field data.
            </param>
            <param name="version">
               A <see cref="T:System.Byte" /> indicating the ID3v2 version the
               field data is encoded in.
            </param>
        </member>
        <member name="M:TagLib.Id3v2.UnsynchronisedLyricsFrame.RenderFields(System.Byte)">
            <summary>
               Renders the values in the current instance into field
               data for a specified version.
            </summary>
            <param name="version">
               A <see cref="T:System.Byte" /> indicating the ID3v2 version the
               field data is to be encoded in.
            </param>
            <returns>
               A <see cref="T:TagLib.ByteVector" /> object containing the
               rendered field data.
            </returns>
        </member>
        <member name="M:TagLib.Id3v2.UnsynchronisedLyricsFrame.Clone">
            <summary>
               Creates a deep copy of the current instance.
            </summary>
            <returns>
               A new <see cref="T:TagLib.Id3v2.Frame" /> object identical to the
               current instance.
            </returns>
        </member>
        <member name="T:TagLib.Id3v2.UrlLinkFrame">
             <summary>
                This class extends <see cref="T:TagLib.Id3v2.Frame" /> to provide support ID3v2
                Url Link Frames (Section 4.3.1), covering "<c>W000</c>" to
                "<c>WZZZ</c>", excluding "<c>WXXX</c>".
             </summary>
             <remarks>
                <para>With these frames dynamic data such as webpages with touring
                information, price information or plain ordinary news can be added to
                the tag. There may only be one URL [URL] link frame of its kind in an
                tag, except when stated otherwise in the frame description. If the
                text string is followed by a string termination, all the following
                information should be ignored and not be displayed.</para>
                <para>The following table contains types and descriptions as
                found in the ID3 2.4.0 native frames specification. (Copyright
                (C) Martin Nilsson 2000.)</para>
            
                <list type="table">
                   <listheader>
                      <term>ID</term>
                      <description>Description</description>
                   </listheader>
                   <item>
                      <term>WCOM</term>
                      <description>The 'Commercial information' frame is a URL pointing at a webpage
                      with information such as where the album can be bought. There may be
                      more than one "WCOM" frame in a tag, but not with the same content.
                      </description>
                   </item>
                   <item>
                      <term>WCOP</term>
                      <description>The 'Copyright/Legal information' frame is a URL pointing at a
                      webpage where the terms of use and ownership of the file is described.
                      </description>
                   </item>
                   <item>
                      <term>WOAF</term>
                      <description>The 'Official audio file webpage' frame is a URL pointing at a file
                      specific webpage.
                      </description>
                   </item>
                   <item>
                      <term>WOAR</term>
                      <description>The 'Official artist/performer webpage' frame is a URL pointing at
                      the artists official webpage. There may be more than one "WOAR" frame
                      in a tag if the audio contains more than one performer, but not with
                      the same content.
                      </description>
                   </item>
                   <item>
                      <term>WOAS</term>
                      <description>The 'Official audio source webpage' frame is a URL pointing at the
                      official webpage for the source of the audio file, e.g. a movie.
                      </description>
                   </item>
                   <item>
                      <term>WORS</term>
                      <description>The 'Official Internet radio station homepage' contains a URL
                      pointing at the homepage of the internet radio station.
                      </description>
                   </item>
                   <item>
                      <term>WPAY</term>
                      <description>The 'Payment' frame is a URL pointing at a webpage that will handle
                      the process of paying for this file.
                      </description>
                   </item>
                   <item>
                      <term>WPUB</term>
                      <description>The 'Publishers official webpage' frame is a URL pointing at the
                      official webpage for the publisher.
                      </description>
                   </item>
                </list>
             </remarks>
        </member>
        <member name="F:TagLib.Id3v2.UrlLinkFrame.encoding">
            <summary>
               Contains the encoding to use for the text.
            </summary>
        </member>
        <member name="F:TagLib.Id3v2.UrlLinkFrame.text_fields">
            <summary>
               Contains the text fields.
            </summary>
        </member>
        <member name="F:TagLib.Id3v2.UrlLinkFrame.raw_data">
            <summary>
               Contains the raw data from the frame, or
               <see langword="null" /> if it has been processed.
            </summary>
            <remarks>
               Rather than processing the data when the frame is loaded,
               it is parsed on demand, reducing the ammount of
               unnecessary conversion.
            </remarks>
        </member>
        <member name="F:TagLib.Id3v2.UrlLinkFrame.raw_version">
            <summary>
               Contains the ID3v2 version of <see cref="F:TagLib.Id3v2.UrlLinkFrame.raw_data" />.
            </summary>
        </member>
        <member name="M:TagLib.Id3v2.UrlLinkFrame.#ctor(TagLib.ByteVector)">
            <summary>
               Constructs and initializes a new instance of
               <see cref="T:TagLib.Id3v2.UrlLinkFrame" /> with a specified
               identifier and text encoding.
            </summary>
            <param name="ident">
               A <see cref="T:TagLib.ByteVector" /> object containing an ID3v2.4
               frame identifier.
            </param>
        </member>
        <member name="M:TagLib.Id3v2.UrlLinkFrame.#ctor(TagLib.ByteVector,System.Byte)">
            <summary>
               Constructs and initializes a new instance of
               <see cref="T:TagLib.Id3v2.UrlLinkFrame" /> by reading its raw
               contents in a specified ID3v2 version.
            </summary>
            <param name="data">
               A <see cref="T:TagLib.ByteVector" /> object starting with the
               frame to read.
            </param>
            <param name="version">
               A <see cref="T:System.Byte" /> value containing the ID3v2 version
               in which <paramref name="data" /> is encoded.
            </param>
        </member>
        <member name="M:TagLib.Id3v2.UrlLinkFrame.#ctor(TagLib.ByteVector,System.Int32,TagLib.Id3v2.FrameHeader,System.Byte)">
            <summary>
               Constructs and initializes a new instance of
               <see cref="T:TagLib.Id3v2.UrlLinkFrame" /> by reading its raw
               contents from a specifed position in a
               <see cref="T:TagLib.ByteVector" /> object in a specified ID3v2 version.
            </summary>
            <param name="data">
               A <see cref="T:TagLib.ByteVector" /> object containing the frame
               to read.
            </param>
            <param name="offset">
               A <see cref="T:System.Int32" /> value specifying the offset in
               <paramref name="data" /> at which the frame begins.
            </param>
            <param name="header">
               A <see cref="T:TagLib.Id3v2.FrameHeader" /> value containing the header
               that would be read in the frame.
            </param>
            <param name="version">
               A <see cref="T:System.Byte" /> value containing the ID3v2 version
               in which <paramref name="data" /> is encoded.
            </param>
        </member>
        <member name="P:TagLib.Id3v2.UrlLinkFrame.Text">
             <summary>
                Gets and sets the text contained in the current
                instance.
             </summary>
             <value>
                A <see cref="T:string[]" /> containing the text contained
                in the current instance.
             </value>
             <remarks>
                <para>Modifying the contents of the returned value will
                not modify the contents of the current instance. The
                value must be reassigned for the value to change.</para>
             </remarks>
             <example>
                <para>Modifying the values text values of a frame.</para>
                <code> UrlLinkFrame frame = UrlLinkFrame.Get (myTag, "WCOP", true);
             /* Upper casing all the text: */
             string[] text = frame.Text;
             for (int i = 0; i &lt; text.Length; i++)
            	text [i] = text [i].ToUpper ();
             frame.Text = text;
            
             /* Replacing the value completely: */
             frame.Text = new string [] {"http://www.somewhere.com"};</code>
             </example>
        </member>
        <member name="P:TagLib.Id3v2.UrlLinkFrame.TextEncoding">
            <summary>
               Gets and sets the text encoding to use when rendering
               the current instance.
            </summary>
            <value>
               A <see cref="T:TagLib.StringType" /> value specifying the encoding
               to use when rendering the current instance.
            </value>
            <remarks>
               This value will be overwritten if
               <see cref="P:TagLib.Id3v2.Tag.ForceDefaultEncoding" /> is
               <see langword="true" />.
            </remarks>
        </member>
        <member name="M:TagLib.Id3v2.UrlLinkFrame.ToString">
            <summary>
               Gets a string representation of the current instance.
            </summary>
            <returns>
               A <see cref="T:System.String" /> containing the joined text.
            </returns>
        </member>
        <member name="M:TagLib.Id3v2.UrlLinkFrame.Get(TagLib.Id3v2.Tag,TagLib.ByteVector,System.Boolean)">
            <summary>
               Gets a <see cref="T:TagLib.Id3v2.UrlLinkFrame" /> object of a
               specified type from a specified tag, optionally creating
               and adding one with a specified encoding if none is
               found.
            </summary>
            <param name="tag">
               A <see cref="T:TagLib.Id3v2.Tag" /> object to search for the specified
               tag in.
            </param>
            <param name="ident">
               A <see cref="T:TagLib.ByteVector" /> object containing the frame
               identifer to search for.
            </param>
            <param name="create">
               A <see cref="T:System.Boolean" /> value specifying whether or not to
               create a new frame if an existing frame was not found.
            </param>
            <returns>
               A <see cref="T:TagLib.Id3v2.UrlLinkFrame" /> object containing
               the frame found in or added to <paramref name="tag" /> or
               <see langword="null" /> if no value was found
               <paramref name="create" /> is <see langword="false" />.
            </returns>
            <remarks>
               To create a frame without having to specify the encoding,
               use <see cref="M:TagLib.Id3v2.UrlLinkFrame.Get(TagLib.Id3v2.Tag,TagLib.ByteVector,System.Boolean)" />.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="tag" /> or <paramref name="ident" /> is
               <see langword="null" />.
            </exception>
            <exception cref="T:System.ArgumentException">
               <paramref name="ident" /> is not exactly four bytes long.
            </exception>
        </member>
        <member name="M:TagLib.Id3v2.UrlLinkFrame.ParseFields(TagLib.ByteVector,System.Byte)">
            <summary>
               Populates the values in the current instance by parsing
               its field data in a specified version.
            </summary>
            <param name="data">
               A <see cref="T:TagLib.ByteVector" /> object containing the
               extracted field data.
            </param>
            <param name="version">
               A <see cref="T:System.Byte" /> indicating the ID3v2 version the
               field data is encoded in.
            </param>
        </member>
        <member name="M:TagLib.Id3v2.UrlLinkFrame.ParseRawData">
            <summary>
               Performs the actual parsing of the raw data.
            </summary>
            <remarks>
               Because of the high parsing cost and relatively low usage
               of the class, <see cref="M:TagLib.Id3v2.UrlLinkFrame.ParseFields(TagLib.ByteVector,System.Byte)" /> only stores the
               field data so it can be parsed on demand. Whenever a
               property or method is called which requires the data,
               this method is called, and only on the first call does it
               actually parse the data.
            </remarks>
        </member>
        <member name="M:TagLib.Id3v2.UrlLinkFrame.RenderFields(System.Byte)">
            <summary>
               Renders the values in the current instance into field
               data for a specified version.
            </summary>
            <param name="version">
               A <see cref="T:System.Byte" /> indicating the ID3v2 version the
               field data is to be encoded in.
            </param>
            <returns>
               A <see cref="T:TagLib.ByteVector" /> object containing the
               rendered field data.
            </returns>
        </member>
        <member name="M:TagLib.Id3v2.UrlLinkFrame.Clone">
            <summary>
               Creates a deep copy of the current instance.
            </summary>
            <returns>
               A new <see cref="T:TagLib.Id3v2.Frame" /> object identical to the
               current instance.
            </returns>
        </member>
        <member name="T:TagLib.Id3v2.UserUrlLinkFrame">
            <summary>
               This class extends <see cref="T:TagLib.Id3v2.UrlLinkFrame" /> to provide
               support for ID3v2 User Url Link (WXXX) Frames.
            </summary>
        </member>
        <member name="M:TagLib.Id3v2.UserUrlLinkFrame.#ctor(System.String,TagLib.StringType)">
            <summary>
               Constructs and initializes a new instance of
               <see cref="T:TagLib.Id3v2.UserUrlLinkFrame" /> with a specified
               description and text encoding.
            </summary>
            <param name="description">
               A <see cref="T:System.String" /> containing the description of the
               new frame.
            </param>
            <param name="encoding">
               A <see cref="T:TagLib.StringType" /> containing the text encoding
               to use when rendering the new frame.
            </param>
            <remarks>
               When a frame is created, it is not automatically added to
               the tag. Consider using
               <see cref="M:TagLib.Id3v2.UserUrlLinkFrame.Get(TagLib.Id3v2.Tag,System.String,TagLib.StringType,System.Boolean)" /> for more
               integrated frame creation.
            </remarks>
        </member>
        <member name="M:TagLib.Id3v2.UserUrlLinkFrame.#ctor(System.String)">
            <summary>
               Constructs and initializes a new instance of
               <see cref="T:TagLib.Id3v2.UserUrlLinkFrame" /> with a specified
               description.
            </summary>
            <param name="description">
               A <see cref="T:System.String" /> containing the description of the
               new frame.
            </param>
            <remarks>
               When a frame is created, it is not automatically added to
               the tag. Consider using
               <see cref="M:TagLib.Id3v2.UserUrlLinkFrame.Get(TagLib.Id3v2.Tag,System.String,System.Boolean)" /> for more integrated frame
               creation.
            </remarks>
        </member>
        <member name="M:TagLib.Id3v2.UserUrlLinkFrame.#ctor(TagLib.ByteVector,System.Byte)">
            <summary>
               Constructs and initializes a new instance of
               <see cref="T:TagLib.Id3v2.UserUrlLinkFrame" /> by reading its raw
               data in a specified ID3v2 version.
            </summary>
            <param name="data">
               A <see cref="T:TagLib.ByteVector" /> object starting with the raw
               representation of the new frame.
            </param>
            <param name="version">
               A <see cref="T:System.Byte" /> indicating the ID3v2 version the
               raw frame is encoded in.
            </param>
        </member>
        <member name="M:TagLib.Id3v2.UserUrlLinkFrame.#ctor(TagLib.ByteVector,System.Int32,TagLib.Id3v2.FrameHeader,System.Byte)">
            <summary>
               Constructs and initializes a new instance of
               <see cref="T:TagLib.Id3v2.UserUrlLinkFrame" /> by reading its raw
               data in a specified ID3v2 version.
            </summary>
            <param name="data">
               A <see cref="T:TagLib.ByteVector" /> object containing the raw
               representation of the new frame.
            </param>
            <param name="offset">
               A <see cref="T:System.Int32" /> indicating at what offset in
               <paramref name="data" /> the frame actually begins.
            </param>
            <param name="header">
               A <see cref="T:TagLib.Id3v2.FrameHeader" /> containing the header of the
               frame found at <paramref name="offset" /> in the data.
            </param>
            <param name="version">
               A <see cref="T:System.Byte" /> indicating the ID3v2 version the
               raw frame is encoded in.
            </param>
        </member>
        <member name="P:TagLib.Id3v2.UserUrlLinkFrame.Description">
            <summary>
               Gets and sets the description stored in the current
               instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> containing the description
               stored in the current instance.
            </value>
            <remarks>
               There should only be one frame with a matching
               description per tag.
            </remarks>
        </member>
        <member name="P:TagLib.Id3v2.UserUrlLinkFrame.Text">
            <summary>
               Gets and sets the text contained in the current
               instance.
            </summary>
            <value>
               A <see cref="T:string[]" /> containing the text contained
               in the current instance.
            </value>
            <remarks>
               <para>Modifying the contents of the returned value will
               not modify the contents of the current instance. The
               value must be reassigned for the value to change.</para>
            </remarks>
        </member>
        <member name="M:TagLib.Id3v2.UserUrlLinkFrame.ToString">
            <summary>
               Gets a string representation of the current instance.
            </summary>
            <returns>
               A <see cref="T:System.String" /> containing the joined text.
            </returns>
        </member>
        <member name="M:TagLib.Id3v2.UserUrlLinkFrame.Get(TagLib.Id3v2.Tag,System.String,TagLib.StringType,System.Boolean)">
            <summary>
               Gets a specified user text frame from the specified tag,
               optionally creating it if it does not exist.
            </summary>
            <param name="tag">
               A <see cref="T:TagLib.Id3v2.Tag" /> object to search in.
            </param>
            <param name="description">
               A <see cref="T:System.String" /> specifying the description to
               match.
            </param>
            <param name="type">
               A <see cref="T:TagLib.StringType" /> specifying the encoding to
               use if creating a new frame.
            </param>
            <param name="create">
               A <see cref="T:System.Boolean" /> specifying whether or not to create
               and add a new frame to the tag if a match is not found.
            </param>
            <returns>
               A <see cref="T:TagLib.Id3v2.UserUrlLinkFrame" /> object
               containing the matching frame, or <see langword="null" />
               if a match wasn't found and <paramref name="create" /> is
               <see langword="false" />.
            </returns>
        </member>
        <member name="M:TagLib.Id3v2.UserUrlLinkFrame.Get(TagLib.Id3v2.Tag,System.String,System.Boolean)">
            <summary>
               Gets a specified user text frame from the specified tag,
               optionally creating it if it does not exist.
            </summary>
            <param name="tag">
               A <see cref="T:TagLib.Id3v2.Tag" /> object to search in.
            </param>
            <param name="description">
               A <see cref="T:System.String" /> specifying the description to
               match.
            </param>
            <param name="create">
               A <see cref="T:System.Boolean" /> specifying whether or not to create
               and add a new frame to the tag if a match is not found.
            </param>
            <returns>
               A <see cref="T:TagLib.Id3v2.UserUrlLinkFrame" /> object
               containing the matching frame, or <see langword="null" />
               if a match wasn't found and <paramref name="create" /> is
               <see langword="false" />.
            </returns>
        </member>
        <member name="T:TagLib.Id3v2.FrameType">
            <summary>
               <see cref="T:TagLib.Id3v2.FrameType" /> provides references to different frame
               types used by the library.
            </summary>
            <remarks>
               <para>This class is used to severely reduce the number of times
               these types are created in <see cref="T:TagLib.Id3v2.Tag" />,
               greatly improving the speed at which warm files are read. It is,
               however, not necessary for external users to use this class. While
               the library may use <c>GetTextAsString (FrameType.TIT2);</c> an
               external user could use <c>tag.GetTextAsString ("TIT2");</c> with
               the same result.</para>
            </remarks>
        </member>
        <member name="T:TagLib.Id3v2.HeaderFlags">
            <summary>
               Indicates the flags applied to a <see cref="T:TagLib.Id3v2.Header" /> object.
            </summary>
        </member>
        <member name="F:TagLib.Id3v2.HeaderFlags.None">
            <summary>
               The header contains no flags.
            </summary>
        </member>
        <member name="F:TagLib.Id3v2.HeaderFlags.Unsynchronisation">
            <summary>
               The tag described by the header has been unsynchronized.
            </summary>
        </member>
        <member name="F:TagLib.Id3v2.HeaderFlags.ExtendedHeader">
            <summary>
               The tag described by the header has contains an extended
               header.
            </summary>
        </member>
        <member name="F:TagLib.Id3v2.HeaderFlags.ExperimentalIndicator">
            <summary>
               The tag described by the header is experimental.
            </summary>
        </member>
        <member name="F:TagLib.Id3v2.HeaderFlags.FooterPresent">
            <summary>
               The tag described by the header contains a footer.
            </summary>
        </member>
        <member name="T:TagLib.Id3v2.Header">
            <summary>
               This structure provides a representation of an ID3v2 tag header
               which can be read from and written to disk.
            </summary>
        </member>
        <member name="F:TagLib.Id3v2.Header.major_version">
            <summary>
               Contains the tag's major version.
            </summary>
        </member>
        <member name="F:TagLib.Id3v2.Header.flags">
            <summary>
               Contains tag's flags.
            </summary>
        </member>
        <member name="F:TagLib.Id3v2.Header.Size">
            <summary>
               The size of a ID3v2 header.
            </summary>
        </member>
        <member name="F:TagLib.Id3v2.Header.FileIdentifier">
            <summary>
               The identifier used to recognize a ID3v2 headers.
            </summary>
            <value>
               "ID3"
            </value>
        </member>
        <member name="M:TagLib.Id3v2.Header.#ctor(TagLib.ByteVector)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Id3v2.Header" /> by reading it from raw header data.
            </summary>
            <param name="data">
               A <see cref="T:TagLib.ByteVector" /> object containing the raw
               data to build the new instance from.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="data" /> is <see langword="null" />.
            </exception>
            <exception cref="T:TagLib.CorruptFileException">
               <paramref name="data" /> is smaller than <see
               cref="F:TagLib.Id3v2.Header.Size" />, does not begin with <see
               cref="F:TagLib.Id3v2.Header.FileIdentifier" />, contains invalid flag data,
               or contains invalid size data.
            </exception>
        </member>
        <member name="P:TagLib.Id3v2.Header.MajorVersion">
            <summary>
               Gets and sets the major version of the tag described by
               the current instance.
            </summary>
            <value>
               A <see cref="T:System.Byte" /> value specifying the ID3v2 version
               of tag described by the current instance.
            </value>
            <remarks>
               When the version is set, unsupported header flags will
               automatically be removed from the tag.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
               <paramref name="value" /> is less than 2 or more than 4.
            </exception>
        </member>
        <member name="P:TagLib.Id3v2.Header.RevisionNumber">
            <summary>
               Gets and sets the version revision number of the tag
               represented by the current instance.
            </summary>
            <value>
               A <see cref="T:System.Byte" /> value containing the version
               revision number of the tag represented by the current
               instance.
            </value>
            <remarks>
               This value should always be zeroed. A non-zero value
               indicates an experimental or new version of the format
               which may not be completely understood by the current
               implementation. Some software may refuse to read tags
               with a non-zero value.
            </remarks>
        </member>
        <member name="P:TagLib.Id3v2.Header.Flags">
            <summary>
               Gets and sets the flags applied to the current instance.
            </summary>
            <value>
               A bitwise combined <see cref="T:TagLib.Id3v2.HeaderFlags" /> value
               containing the flags applied to the current instance.
            </value>
            <exception cref="T:System.ArgumentException">
               <paramref name="value" /> contains a flag not supported
               by the the ID3v2 version of the current instance.
            </exception>
        </member>
        <member name="P:TagLib.Id3v2.Header.TagSize">
            <summary>
               Gets and sets the size of the tag described by the
               current instance, minus the header and footer.
            </summary>
            <value>
               A <see cref="T:System.UInt32" /> value containing the size of the
               tag described by the current instance.
            </value>
        </member>
        <member name="P:TagLib.Id3v2.Header.CompleteTagSize">
            <summary>
               Gets the complete size of the tag described by the
               current instance, including the header and footer.
            </summary>
            <value>
               A <see cref="T:System.UInt32" /> value containing the complete size
               of the tag described by the current instance.
            </value>
        </member>
        <member name="M:TagLib.Id3v2.Header.Render">
            <summary>
               Renders the current instance as a raw ID3v2 header.
            </summary>
            <returns>
               A <see cref="T:TagLib.ByteVector" /> object containing the
               rendered header.
            </returns>
        </member>
        <member name="T:TagLib.Id3v2.SynchData">
            <summary>
               This static class provides support for encoding and decoding
               unsynchronized data and numbers.
            </summary>
            <remarks>
               Unsynchronization is designed so that portions of the tag won't
               be misinterpreted as MPEG audio stream headers by removing the
               possibility of the synch bytes occuring in the tag.
            </remarks>
        </member>
        <member name="M:TagLib.Id3v2.SynchData.ToUInt(TagLib.ByteVector)">
            <summary>
               Decodes synchronized integer data into a <see
               cref="T:System.UInt32" /> value.
            </summary>
            <param name="data">
               A <see cref="T:TagLib.ByteVector" /> object containing the number
               to decode. Only the first 4 bytes of this value will be
               used.
            </param>
            <returns>
               A <see cref="T:System.UInt32" /> value containing the decoded
               number.
            </returns>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="data" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:TagLib.Id3v2.SynchData.FromUInt(System.UInt32)">
            <summary>
               Encodes a <see cref="T:System.UInt32" /> value as synchronized
               integer data.
            </summary>
            <param name="value">
               A <see cref="T:System.UInt32" /> value containing the number to
               encode.
            </param>
            <returns>
               A <see cref="T:TagLib.ByteVector" /> object containing the encoded
               number.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
               <paramref name="value" /> is greater than 268435455.
            </exception>
        </member>
        <member name="M:TagLib.Id3v2.SynchData.UnsynchByteVector(TagLib.ByteVector)">
            <summary>
               Unsynchronizes a <see cref="T:TagLib.ByteVector" /> object by
               inserting empty bytes where necessary.
            </summary>
            <param name="data">
               A <see cref="T:TagLib.ByteVector" /> object to unsynchronize.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="data" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:TagLib.Id3v2.SynchData.ResynchByteVector(TagLib.ByteVector)">
            <summary>
               Resynchronizes a <see cref="T:TagLib.ByteVector" /> object by
               removing the added bytes.
            </summary>
            <param name="data">
               A <see cref="T:TagLib.ByteVector" /> object to resynchronize.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="data" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="T:TagLib.Id3v2.SynchedTextType">
            <summary>
               Specifies the type of text contained in a <see
               cref="T:TagLib.Id3v2.SynchronisedLyricsFrame" />.
            </summary>
        </member>
        <member name="F:TagLib.Id3v2.SynchedTextType.Other">
            <summary>
               The text is some other type of text.
            </summary>
        </member>
        <member name="F:TagLib.Id3v2.SynchedTextType.Lyrics">
            <summary>
               The text contains lyrical data.
            </summary>
        </member>
        <member name="F:TagLib.Id3v2.SynchedTextType.TextTranscription">
            <summary>
               The text contains a transcription.
            </summary>
        </member>
        <member name="F:TagLib.Id3v2.SynchedTextType.Movement">
            <summary>
               The text lists the movements in the piece.
            </summary>
        </member>
        <member name="F:TagLib.Id3v2.SynchedTextType.Events">
            <summary>
               The text describes events that occur.
            </summary>
        </member>
        <member name="F:TagLib.Id3v2.SynchedTextType.Chord">
            <summary>
               The text contains chord changes that occur in the music.
            </summary>
        </member>
        <member name="F:TagLib.Id3v2.SynchedTextType.Trivia">
            <summary>
               The text contains trivia or "pop up" information about
               the media.
            </summary>
        </member>
        <member name="F:TagLib.Id3v2.SynchedTextType.WebpageUrls">
            <summary>
               The text contains URL's for relevant webpages.
            </summary>
        </member>
        <member name="F:TagLib.Id3v2.SynchedTextType.ImageUrls">
            <summary>
                The text contains URL's for relevant images.
            </summary>
        </member>
        <member name="T:TagLib.Id3v2.Tag">
            <summary>
               This class extends <see cref="T:TagLib.Tag" /> and implements <see
               cref="T:System.Collections.Generic.IEnumerable`1" /> to provide support for reading and
               writing ID3v2 tags.
            </summary>
        </member>
        <member name="F:TagLib.Id3v2.Tag.language">
            <summary>
               Contains the language to use for language specific
               fields.
            </summary>
        </member>
        <member name="F:TagLib.Id3v2.Tag.default_version">
            <summary>
               Contains the field to use for new tags.
            </summary>
        </member>
        <member name="F:TagLib.Id3v2.Tag.header">
            <summary>
               Contains the tag's header.
            </summary>
        </member>
        <member name="F:TagLib.Id3v2.Tag.extended_header">
            <summary>
               Contains the tag's extended header.
            </summary>
        </member>
        <member name="F:TagLib.Id3v2.Tag.frame_list">
            <summary>
               Contains the tag's frames.
            </summary>
        </member>
        <member name="F:TagLib.Id3v2.Tag.performers_role">
            <summary>
            Store the PerformersRole property
            </summary>
        </member>
        <member name="M:TagLib.Id3v2.Tag.#ctor">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Id3v2.Tag" /> with no contents.
            </summary>
        </member>
        <member name="M:TagLib.Id3v2.Tag.#ctor(TagLib.File,System.Int64,TagLib.ReadStyle)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Id3v2.Tag" /> by reading the contents from a specified
               position in a specified file.
            </summary>
            <param name="file">
               A <see cref="T:TagLib.File" /> object containing the file from
               which the contents of the new instance is to be read.
            </param>
            <param name="position">
               A <see cref="T:System.Int64" /> value specify at what position to
               read the tag.
            </param>
            <param name="style">
               A <see cref="T:TagLib.ReadStyle"/> value specifying how the media
               data is to be read into the current instance.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="file" /> is <see langword="null" />.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
               <paramref name="position" /> is less than zero or greater
               than the size of the file.
            </exception>
        </member>
        <member name="M:TagLib.Id3v2.Tag.#ctor(TagLib.ByteVector)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Id3v2.Tag" /> by reading the contents from a specified
               <see cref="T:TagLib.ByteVector" /> object.
            </summary>
            <param name="data">
               A <see cref="T:TagLib.ByteVector" /> object to read the tag from.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="data" /> is <see langword="null" />.
            </exception>
            <exception cref="T:TagLib.CorruptFileException">
               <paramref name="data" /> does not contain enough data.
            </exception>
        </member>
        <member name="M:TagLib.Id3v2.Tag.GetTextAsString(TagLib.ByteVector)">
            <summary>
               Gets the text value from a specified Text Information
               Frame.
            </summary>
            <param name="ident">
               A <see cref="T:TagLib.ByteVector" /> object containing the frame
               identifier of the Text Information Frame to get the value
               from.
            </param>
            <returns>
               A <see cref="T:System.String" /> object containing the text of the
               specified frame, or <see langword="null" /> if no value
               was found.
            </returns>
        </member>
        <member name="M:TagLib.Id3v2.Tag.GetFrames">
            <summary>
               Gets all frames contained in the current instance.
            </summary>
            <returns>
               A <see cref="T:System.Collections.Generic.IEnumerable`1" /> object enumerating
               through the frames.
            </returns>
        </member>
        <member name="M:TagLib.Id3v2.Tag.GetFrames(TagLib.ByteVector)">
            <summary>
               Gets all frames with a specified identifier contained in
               the current instance.
            </summary>
            <param name="ident">
               A <see cref="T:TagLib.ByteVector" /> object containing the
               identifier of the frames to return.
            </param>
            <returns>
               A <see cref="T:System.Collections.Generic.IEnumerable`1" /> object enumerating
               through the frames.
            </returns>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="ident" /> is <see langword="null" />.
            </exception>
            <exception cref="T:System.ArgumentException">
               <paramref name="ident" /> is not exactly four bytes long.
            </exception>
        </member>
        <member name="M:TagLib.Id3v2.Tag.GetFrames``1">
            <summary>
               Gets all frames with of a specified type contained in
               the current instance.
            </summary>
            <typeparam name="T">
               The type of object, derived from <see cref="T:TagLib.Id3v2.Frame" />,
               to return from in the current instance.
            </typeparam>
            <returns>
               A <see cref="T:System.Collections.Generic.IEnumerable`1" /> object enumerating
               through the frames.
            </returns>
        </member>
        <member name="M:TagLib.Id3v2.Tag.GetFrames``1(TagLib.ByteVector)">
            <summary>
               Gets all frames with a of type <typeparamref name="T" />
               with a specified identifier contained in the current
               instance.
            </summary>
            <typeparam name="T">
               The type of object, derived from <see cref="T:TagLib.Id3v2.Frame" />,
               to return from in the current instance.
            </typeparam>
            <param name="ident">
               A <see cref="T:TagLib.ByteVector" /> object containing the
               identifier of the frames to return.
            </param>
            <returns>
               A <see cref="T:System.Collections.Generic.IEnumerable`1" /> object enumerating
               through the frames.
            </returns>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="ident" /> is <see langword="null" />.
            </exception>
            <exception cref="T:System.ArgumentException">
               <paramref name="ident" /> is not exactly four bytes long.
            </exception>
        </member>
        <member name="M:TagLib.Id3v2.Tag.AddFrame(TagLib.Id3v2.Frame)">
            <summary>
               Adds a frame to the current instance.
            </summary>
            <param name="frame">
               A <see cref="T:TagLib.Id3v2.Frame" /> object to add to the current
               instance.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="frame" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:TagLib.Id3v2.Tag.ReplaceFrame(TagLib.Id3v2.Frame,TagLib.Id3v2.Frame)">
            <summary>
               Replaces an existing frame with a new one in the list
               contained in the current instance, or adds a new one if
               the existing one is not contained.
            </summary>
            <param name="oldFrame">
               A <see cref="T:TagLib.Id3v2.Frame" /> object to be replaced.
            </param>
            <param name="newFrame">
               A <see cref="T:TagLib.Id3v2.Frame" /> object to add to the current
               instance.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="oldFrame" /> or <paramref name="newFrame"
               /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:TagLib.Id3v2.Tag.RemoveFrame(TagLib.Id3v2.Frame)">
            <summary>
               Removes a specified frame from the current instance.
            </summary>
            <param name="frame">
               A <see cref="T:TagLib.Id3v2.Frame" /> object to remove from the current
               instance.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="frame" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:TagLib.Id3v2.Tag.RemoveFrames(TagLib.ByteVector)">
            <summary>
               Removes all frames with a specified identifier from the
               current instance.
            </summary>
            <param name="ident">
               A <see cref="T:TagLib.ByteVector" /> object containing the
               identifier of the frames to remove.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="ident" /> is <see langword="null" />.
            </exception>
            <exception cref="T:System.ArgumentException">
               <paramref name="ident" /> is not exactly four bytes long.
            </exception>
        </member>
        <member name="M:TagLib.Id3v2.Tag.SetTextFrame(TagLib.ByteVector,System.String[])">
            <summary>
               Sets the text for a specified Text Information Frame.
            </summary>
            <param name="ident">
               A <see cref="T:TagLib.ByteVector" /> object containing the
               identifier of the frame to set the data for.
            </param>
            <param name="text">
               A <see cref="T:string[]" /> containing the text to set for
               the specified frame, or <see langword="null" /> to unset
               the value.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="ident" /> is <see langword="null" />.
            </exception>
            <exception cref="T:System.ArgumentException">
               <paramref name="ident" /> is not exactly four bytes long.
            </exception>
        </member>
        <member name="M:TagLib.Id3v2.Tag.SetTextFrame(TagLib.ByteVector,TagLib.StringCollection)">
            <summary>
               Sets the text for a specified Text Information Frame.
            </summary>
            <param name="ident">
               A <see cref="T:TagLib.ByteVector" /> object containing the
               identifier of the frame to set the data for.
            </param>
            <param name="text">
               A <see cref="T:TagLib.StringCollection" /> object containing the
               text to set for the specified frame, or <see
               langword="null" /> to unset the value.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="ident" /> is <see langword="null" />.
            </exception>
            <exception cref="T:System.ArgumentException">
               <paramref name="ident" /> is not exactly four bytes long.
            </exception>
        </member>
        <member name="M:TagLib.Id3v2.Tag.SetNumberFrame(TagLib.ByteVector,System.UInt32,System.UInt32,System.String)">
            <summary>
               Sets the numeric values for a specified Text Information
               Frame.
            </summary>
            <param name="ident">
               A <see cref="T:TagLib.ByteVector" /> object containing the
               identifier of the frame to set the data for.
            </param>
            <param name="number">
               A <see cref="T:System.UInt32" /> value containing the number to
               store.
            </param>
            <param name="count">
               A <see cref="T:System.UInt32" /> value representing a total which
               <paramref name="number" /> is a part of, or zero if
               <paramref name="number" /> is not part of a set.
            </param>
            <param name="format">
               A <see cref="T:System.String" /> value representing the format
               to be used to repreesent the <paramref name="number"/>.
               Default: simple decimal number ("0").
            </param>
            <remarks>
               If both <paramref name="number" /> and <paramref
               name="count" /> are equal to zero, the value will be
               cleared. If <paramref name="count" /> is zero, <paramref
               name="number" /> by itself will be stored. Otherwise, the
               values will be stored as "<paramref name="number"
               />/<paramref name="count" />".
            </remarks>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="ident" /> is <see langword="null" />.
            </exception>
            <exception cref="T:System.ArgumentException">
               <paramref name="ident" /> is not exactly four bytes long.
            </exception>
        </member>
        <member name="M:TagLib.Id3v2.Tag.Render">
            <summary>
               Renders the current instance as a raw ID3v2 tag.
            </summary>
            <returns>
               A <see cref="T:TagLib.ByteVector" /> object containing the
               rendered tag.
            </returns>
            <remarks>
               By default, tags will be rendered in the version they
               were loaded in, and new tags using the version specified
               by <see cref="P:TagLib.Id3v2.Tag.DefaultVersion" />. If <see
               cref="P:TagLib.Id3v2.Tag.ForceDefaultVersion" /> is <see langword="true" />,
               all tags will be rendered in using the version specified
               by <see cref="P:TagLib.Id3v2.Tag.DefaultVersion" />, except for tags with
               footers, which must be in version 4.
            </remarks>
        </member>
        <member name="P:TagLib.Id3v2.Tag.Flags">
            <summary>
               Gets and sets the header flags applied to the current
               instance.
            </summary>
            <value>
               A bitwise combined <see cref="T:TagLib.Id3v2.HeaderFlags" /> value
               containing flags applied to the current instance.
            </value>
        </member>
        <member name="P:TagLib.Id3v2.Tag.Version">
            <summary>
               Gets and sets the ID3v2 version of the current instance.
            </summary>
            <value>
               A <see cref="T:System.Byte" /> value specifying the ID3v2 version
               of the current instance.
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">
               <paramref name="value" /> is less than 2 or more than 4.
            </exception>
        </member>
        <member name="P:TagLib.Id3v2.Tag.Language">
            <summary>
               Gets and sets the ISO-639-2 language code to use when
               searching for and storing language specific values.
            </summary>
            <value>
               A <see cref="T:System.String" /> object containing an ISO-639-2
               language code fto use when searching for and storing
               language specific values.
            </value>
            <remarks>
               If the language is unknown, "   " is the appropriate
               filler.
            </remarks>
        </member>
        <member name="P:TagLib.Id3v2.Tag.DefaultVersion">
            <summary>
               Gets and sets the the default version to use when
               creating new tags.
            </summary>
            <value>
               A <see cref="T:System.Byte" /> value specifying the default ID3v2
               version. The default version for this library is 3.
            </value>
            <remarks>
               If <see cref="P:TagLib.Id3v2.Tag.ForceDefaultVersion" /> is <see
               langword="true" />, all tags will be rendered with this
               version.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
               <paramref name="value" /> is less than 2 or more than 4.
            </exception>
        </member>
        <member name="P:TagLib.Id3v2.Tag.ForceDefaultVersion">
            <summary>
               Gets and sets whether or not to save all tags in the
               default version rather than their original version.
            </summary>
            <value>
               If <see langword="true"/>, tags will be saved in
               <see cref="P:TagLib.Id3v2.Tag.DefaultVersion" /> rather than their original
               format, with the exception of tags with footers, which
               will be saved in version 4.
            </value>
        </member>
        <member name="P:TagLib.Id3v2.Tag.DefaultEncoding">
            <summary>
               Gets and sets the encoding to use when creating new
               frames.
            </summary>
            <value>
               A <see cref="T:TagLib.StringType" /> value specifying the encoding
               to use when creating new frames.
            </value>
        </member>
        <member name="P:TagLib.Id3v2.Tag.ForceDefaultEncoding">
            <summary>
               Gets and sets whether or not to render all frames with
               the default encoding rather than their original encoding.
            </summary>
            <value>
               If <see langword="true"/>, fames will be rendered in
               <see cref="P:TagLib.Id3v2.Tag.DefaultEncoding" /> rather than their original
               encoding.
            </value>
        </member>
        <member name="P:TagLib.Id3v2.Tag.UseNumericGenres">
            <summary>
               Gets and sets whether or not to use ID3v1 style numeric
               genres when possible.
            </summary>
            <value>
               A <see cref="T:System.Boolean" /> value specifying whether or not to
               use genres with numeric values when possible.
            </value>
            <remarks>
               If <see langword="true" />, TagLib# will try looking up
               the numeric genre code when storing the value. For
               ID3v2.2 and ID3v2.3, "Rock" would be stored as "(17)" and
               for ID3v2.4 it would be stored as "17".
            </remarks>
        </member>
        <member name="M:TagLib.Id3v2.Tag.Read(TagLib.File,System.Int64,TagLib.ReadStyle)">
            <summary>
               Populates the current instance be reading in a tag from
               a specified position in a specified file.
            </summary>
            <param name="file">
               A <see cref="T:TagLib.File" /> object to read the tag from.
            </param>
            <param name="position">
               A <see cref="T:System.Int64" /> value specifying the seek position
               at which to read the tag.
            </param>
            <param name="style">
               A <see cref="T:TagLib.ReadStyle"/> value specifying how the media
               data is to be read into the current instance.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="file" /> is <see langword="null" />.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
               <paramref name="position" /> is less than 0 or greater
               than the size of the file.
            </exception>
        </member>
        <member name="M:TagLib.Id3v2.Tag.Parse(TagLib.ByteVector,TagLib.File,System.Int64,TagLib.ReadStyle)">
            <summary>
               Populates the current instance by parsing the contents of
               a raw ID3v2 tag, minus the header.
            </summary>
            <param name="data">
               A <see cref="T:TagLib.ByteVector" /> object containing the content
               of an ID3v2 tag, minus the header.
            </param>
            <param name="file">
               A <see cref="T:TagLib.File"/> object containing
               abstraction of the file to read. 
               Ignored if <paramref name="data"/> is not null.
            </param>
            <param name="position">
               A <see cref="T:System.Int32" /> value reference specifying at what
               index in <paramref name="file" />
               at which the frame begins. 
            </param>
            <param name="style">
               A <see cref="T:TagLib.ReadStyle"/> value specifying how the media
               data is to be read into the current instance.
            </param>
            <remarks>
               This method must only be called after the internal
               header has been read from the file, otherwise the data
               cannot be parsed correctly.
            </remarks>
        </member>
        <member name="M:TagLib.Id3v2.Tag.GetTextAsArray(TagLib.ByteVector)">
            <summary>
               Gets the text values from a specified Text Information
               Frame.
            </summary>
            <param name="ident">
               A <see cref="T:TagLib.ByteVector" /> object containing the frame
               identifier of the Text Information Frame to get the value
               from.
            </param>
            <returns>
               A <see cref="T:string[]" /> containing the text of the
               specified frame, or an empty array if no values were
               found.
            </returns>
        </member>
        <member name="M:TagLib.Id3v2.Tag.GetTextAsUInt32(TagLib.ByteVector,System.Int32)">
            <summary>
               Gets an integer value from a "/" delimited list in a
               specified Text Information Frame.
            </summary>
            <param name="ident">
               A <see cref="T:TagLib.ByteVector" /> object containing the frame
               identifier of the Text Information Frame to read from.
            </param>
            <param name="index">
               A <see cref="T:System.Int32" /> value specifying the index in the
               integer list of the value to return.
            </param>
            <returns>
               A <see cref="T:System.UInt32" /> value read from the list in the
               frame, or 0 if the value wasn't found.
            </returns>
        </member>
        <member name="M:TagLib.Id3v2.Tag.GetUserTextAsString(System.String,System.Boolean)">
            <summary>
            Gets a TXXX frame via reference of the description field, optionally searching for the
            frame in a case-sensitive manner.
            </summary>
            <param name="description">String containing the description field</param>
            <param name="caseSensitive">case-sensitive search if true.</param>
            <returns>UserTextInformationFrame (TXXX) that corresponds to the description</returns>
        </member>
        <member name="M:TagLib.Id3v2.Tag.GetUserTextAsString(System.String)">
            <summary>
            Gets a TXXX frame via reference of the description field.
            </summary>
            <param name="description">String containing the description field</param>
            <returns>UserTextInformationFrame (TXXX) that corresponds to the description</returns>
        </member>
        <member name="M:TagLib.Id3v2.Tag.SetUserTextAsString(System.String,System.String,System.Boolean)">
            <summary>
            Creates and/or sets a UserTextInformationFrame (TXXX)  with the given
            description and text, optionally searching for the frame in a case-sensitive manner.
            </summary>
            <param name="description">String containing the Description field for the
            TXXX frame</param>
            <param name="text">String containing the Text field for the TXXX frame</param>
            <param name="caseSensitive">case-sensitive search if true.</param>
        </member>
        <member name="M:TagLib.Id3v2.Tag.SetUserTextAsString(System.String,System.String)">
            <summary>
            Creates and/or sets a UserTextInformationFrame (TXXX)  with the given
            description and text.
            </summary>
            <param name="description">String containing the Description field for the
            TXXX frame</param>
            <param name="text">String containing the Text field for the TXXX frame</param>
        </member>
        <member name="M:TagLib.Id3v2.Tag.GetUfidText(System.String)">
            <summary>
            Gets the text from a particular UFID frame, referenced by the owner field
            </summary>
            <param name="owner">String containing the "Owner" data</param>
            <returns>String containing the text from the UFID frame, or null</returns>
        </member>
        <member name="M:TagLib.Id3v2.Tag.SetUfidText(System.String,System.String)">
            <summary>
            Creates and/or sets the text for a UFID frame, referenced by owner
            </summary>
            <param name="owner">String containing the Owner field</param>
            <param name="text">String containing the text to set for the frame</param>
        </member>
        <member name="M:TagLib.Id3v2.Tag.MakeFirstOfType(TagLib.Id3v2.Frame)">
            <summary>
               Moves a specified frame so it is the first of its type in
               the tag.
            </summary>
            <param name="frame">
               A <see cref="T:TagLib.Id3v2.Frame" /> object to make the first of its
               type.
            </param>
        </member>
        <member name="M:TagLib.Id3v2.Tag.GetEnumerator">
            <summary>
               Gets an enumerator for enumerating through the frames.
            </summary>
            <returns>
               A <see cref="T:System.Collections.IEnumerator`1" /> for
               enumerating through the frames.
            </returns>
        </member>
        <member name="P:TagLib.Id3v2.Tag.TagTypes">
            <summary>
               Gets the tag types contained in the current instance.
            </summary>
            <value>
               Always <see cref="F:TagLib.TagTypes.Id3v2" />.
            </value>
        </member>
        <member name="P:TagLib.Id3v2.Tag.Title">
            <summary>
               Gets and sets the title for the media described by the
               current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> object containing the title for
               the media described by the current instance or <see
               langword="null" /> if no value is present.
            </value>
            <remarks>
               This property is implemented using the "TIT2" Text
               Information Frame.
            </remarks>
        </member>
        <member name="P:TagLib.Id3v2.Tag.TitleSort">
            <summary>
               Gets and sets the sort names of the Title of the
               media represented by the current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> containing the sort names for
               the Title of the media described by the current instance,
               or null if no value is present. 
            </value>
            <remarks>
               This property is implemented using the "TSOT" Text
               Information Frame.
            </remarks>
        </member>
        <member name="P:TagLib.Id3v2.Tag.Subtitle">
            <summary>
               Gets and sets a short description, one-liner. 
               It represents the tagline of the Video/music.
            </summary>
            <value>
               A <see cref="T:System.String" /> containing the subtitle
               the media represented by the current instance 
               or an empty array if no value is present.
            </value>
            <remarks>
               <para>This field gives a nice/short precision to 
               the title, which is typically below the title on the
               front cover of a media.
               For example, for "Back to the future", this would be 
               "It's About Time". 
               </para>
            </remarks>
            <remarks>
               This property is implemented using the "TIT3" Text
               Information Frame.
            </remarks>
        </member>
        <member name="P:TagLib.Id3v2.Tag.Description">
            <summary>
               Gets and sets a short description of the media.
               For a music, this could be the comment that the artist
               made of its artwork. For a video, this should be a 
               short summary of the story/plot, but a spoiler. This
               should give the impression of what to expect in the
               media.
            </summary>
            <value>
               A <see cref="T:System.String" /> containing the subtitle
               the media represented by the current instance 
               or an empty array if no value is present.
            </value>
            <remarks>
               <para>This is especially relevant for a movie.
               For example, for "Back to the Future 2", this could be
               "After visiting 2015, Marty McFly must repeat his visit 
               to 1955 to prevent disastrous changes to 1985...without
               interfering with his first trip".
               </para>
            </remarks>
        </member>
        <member name="P:TagLib.Id3v2.Tag.Performers">
            <summary>
               Gets and sets the performers or artists who performed in
               the media described by the current instance.
            </summary>
            <value>
               A <see cref="T:string[]" /> containing the performers or
               artists who performed in the media described by the
               current instance or an empty array if no value is
               present.
            </value>
            <remarks>
               This property is implemented using the "TPE1" Text
               Information Frame.
            </remarks>
        </member>
        <member name="P:TagLib.Id3v2.Tag.PerformersSort">
            <summary>
               Gets and sets the sort names of the performers or artists
               who performed in the media described by the current instance.
            </summary>
            <value>
               A <see cref="T:string[]" /> containing the sort names for
               the performers or artists who performed in the media
               described by the current instance, or an empty array if
               no value is present. 
            </value>
            <remarks>
               This property is implemented using the "TSOP" Text
               Information Frame. http://www.id3.org/id3v2.4.0-frames
            </remarks>
        </member>
        <member name="P:TagLib.Id3v2.Tag.PerformersRole">
            <summary>
               Gets and sets the Charaters for a video media, or
               instruments played for music media. 
               This should match the <see cref="P:TagLib.Id3v2.Tag.Performers"/> array (for
               each person correspond one/more role). Several roles for
               the same artist/actor can be made up with semicolons. 
               For example, "Marty McFly; Marty McFly Jr.; Marlene McFly".
            </summary>
            <remarks>
               <para> This is typically usefull for movies, although the
               instrument played by each artist in a music may be of
               relevance.
               </para>
               <para>It is highly important to match each role to the 
               performers. This means that a role may be <see 
               langword="null"/> to keep the match between a
               Performers[i] and PerformersRole[i].
               </para>
            </remarks>
            <remarks>
               This property is implemented using the "TMCL" Text
               Information Frame: The 'Musician credits list' is 
               intended as a mapping between instruments and the 
               musician that played it.Every odd field is an 
               instrument and every even is an artist or a comma 
               delimited list of artists.
            </remarks>
        </member>
        <member name="P:TagLib.Id3v2.Tag.AlbumArtistsSort">
            <summary>
               Gets and sets the sort names of the band or artist who is 
               credited in the creation of the entire album or collection
               containing the media described by the current instance.
            </summary>
            <value>
               A <see cref="T:string[]" /> containing the sort names for
               the performers or artists who performed in the media
               described by the current instance, or an empty array if
               no value is present. 
            </value>
            <remarks>
               This property is implemented using the "TSO2" Text
               Information Frame. http://www.id3.org/iTunes
            </remarks>
        </member>
        <member name="P:TagLib.Id3v2.Tag.AlbumArtists">
            <summary>
               Gets and sets the band or artist who is credited in the
               creation of the entire album or collection containing the
               media described by the current instance.
            </summary>
            <value>
               A <see cref="T:string[]" /> containing the band or artist
               who is credited in the creation of the entire album or
               collection containing the media described by the current
               instance or an empty array if no value is present.
            </value>
            <remarks>
               This property is implemented using the "TPE2" Text
               Information Frame.
            </remarks>
        </member>
        <member name="P:TagLib.Id3v2.Tag.Composers">
            <summary>
               Gets and sets the composers of the media represented by
               the current instance.
            </summary>
            <value>
               A <see cref="T:string[]" /> containing the composers of the
               media represented by the current instance or an empty
               array if no value is present.
            </value>
            <remarks>
               This property is implemented using the "TCOM" Text
               Information Frame.
            </remarks>
        </member>
        <member name="P:TagLib.Id3v2.Tag.ComposersSort">
            <summary>
               Gets and sets the sort names of the composers of the
               media represented by the current instance.
            </summary>
            <value>
               A <see cref="T:string[]" /> containing the sort names for
               the performers or artists who performed in the media
               described by the current instance, or an empty array if
               no value is present. 
            </value>
            <remarks>
               This property is implemented using the "TSOC" Text
               Information Frame. http://www.id3.org/id3v2.4.0-frames
            </remarks>
        </member>
        <member name="P:TagLib.Id3v2.Tag.Album">
            <summary>
               Gets and sets the album of the media represented by the
               current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> object containing the album of
               the media represented by the current instance or <see
               langword="null" /> if no value is present.
            </value>
            <remarks>
               This property is implemented using the "TALB" Text
               Information Frame.
            </remarks>
        </member>
        <member name="P:TagLib.Id3v2.Tag.AlbumSort">
            <summary>
               Gets and sets the sort names of the Album title of the
               media represented by the current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> containing the sort names for
               the Title in the media described by the current instance,
               or null if no value is present. 
            </value>
            <remarks>
               This property is implemented using the "TSOA" Text
               Information Frame. http://www.id3.org/id3v2.4.0-frames
            </remarks>
        </member>
        <member name="P:TagLib.Id3v2.Tag.Comment">
            <summary>
               Gets and sets a user comment on the media represented by
               the current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> object containing user comments
               on the media represented by the current instance or <see
               langword="null" /> if no value is present.
            </value>
            <remarks>
               This property is implemented using the "COMM" Comments
               Frame with an empty description and the language
               specified by <see cref="P:TagLib.Id3v2.Tag.Language" />.
            </remarks>
        </member>
        <member name="P:TagLib.Id3v2.Tag.Genres">
            <summary>
               Gets and sets the genres of the media represented by the
               current instance.
            </summary>
            <value>
               A <see cref="T:string[]" /> containing the genres of the
               media represented by the current instance or an empty
               array if no value is present.
            </value>
            <remarks>
               This property is implemented using the "TCON" Text
               Information Frame.
            </remarks>
        </member>
        <member name="P:TagLib.Id3v2.Tag.Year">
            <summary>
               Gets and sets the year that the media represented by the
               current instance was recorded.
            </summary>
            <value>
               A <see cref="T:System.UInt32" /> containing the year that the media
               represented by the current instance was created or zero
               if no value is present.
            </value>
            <remarks>
               This property is implemented using the "TDRC" Text
               Information Frame. If a value greater than 9999 is set,
               this property will be cleared.
            </remarks>
        </member>
        <member name="P:TagLib.Id3v2.Tag.Track">
            <summary>
               Gets and sets the position of the media represented by
               the current instance in its containing album.
            </summary>
            <value>
               A <see cref="T:System.UInt32" /> containing the position of the
               media represented by the current instance in its
               containing album or zero if not specified.
            </value>
            <remarks>
               This property is implemented using the "TRCK" Text
               Information Frame.
            </remarks>
        </member>
        <member name="P:TagLib.Id3v2.Tag.TrackCount">
            <summary>
               Gets and sets the number of tracks in the album
               containing the media represented by the current instance.
            </summary>
            <value>
               A <see cref="T:System.UInt32" /> containing the number of tracks in
               the album containing the media represented by the current
               instance or zero if not specified.
            </value>
            <remarks>
               This property is implemented using the "TRCK" Text
               Information Frame.
            </remarks>
        </member>
        <member name="P:TagLib.Id3v2.Tag.Disc">
            <summary>
               Gets and sets the number of the disc containing the media
               represented by the current instance in the boxed set.
            </summary>
            <value>
               A <see cref="T:System.UInt32" /> containing the number of the disc
               containing the media represented by the current instance
               in the boxed set.
            </value>
            <remarks>
               This property is implemented using the "TPOS" Text
               Information Frame.
            </remarks>
        </member>
        <member name="P:TagLib.Id3v2.Tag.DiscCount">
            <summary>
               Gets and sets the number of discs in the boxed set
               containing the media represented by the current instance.
            </summary>
            <value>
               A <see cref="T:System.UInt32" /> containing the number of discs in
               the boxed set containing the media represented by the
               current instance or zero if not specified.
            </value>
            <remarks>
               This property is implemented using the "TPOS" Text
               Information Frame.
            </remarks>
        </member>
        <member name="P:TagLib.Id3v2.Tag.Lyrics">
            <summary>
               Gets and sets the lyrics or script of the media
               represented by the current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> object containing the lyrics or
               script of the media represented by the current instance
               or <see langword="null" /> if no value is present.
            </value>
            <remarks>
               This property is implemented using the "USLT"
               Unsynchronized Lyrics Frame with an empty description and
               the language specified by <see cref="P:TagLib.Id3v2.Tag.Language" />.
            </remarks>
        </member>
        <member name="P:TagLib.Id3v2.Tag.Grouping">
            <summary>
               Gets and sets the grouping on the album which the media
               in the current instance belongs to.
            </summary>
            <value>
               A <see cref="T:System.String" /> object containing the grouping on
               the album which the media in the current instance belongs
               to or <see langword="null" /> if no value is present.
            </value>
            <remarks>
               This property is implemented using the "TIT1" Text
               Information Frame.
            </remarks>
        </member>
        <member name="P:TagLib.Id3v2.Tag.BeatsPerMinute">
            <summary>
               Gets and sets the number of beats per minute in the audio
               of the media represented by the current instance.
            </summary>
            <value>
               A <see cref="T:System.UInt32" /> containing the number of beats per
               minute in the audio of the media represented by the
               current instance, or zero if not specified.
            </value>
            <remarks>
               This property is implemented using the "TBPM" Text
               Information Frame.
            </remarks>
        </member>
        <member name="P:TagLib.Id3v2.Tag.Conductor">
            <summary>
               Gets and sets the conductor or director of the media
               represented by the current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> object containing the conductor
               or director of the media represented by the current
               instance or <see langword="null" /> if no value present.
            </value>
            <remarks>
               This property is implemented using the "TPE3" Text
               Information Frame.
            </remarks>
        </member>
        <member name="P:TagLib.Id3v2.Tag.Copyright">
            <summary>
               Gets and sets the copyright information for the media
               represented by the current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> object containing the copyright
               information for the media represented by the current
               instance or <see langword="null" /> if no value present.
            </value>
            <remarks>
               This property is implemented using the "TCOP" Text
               Information Frame.
            </remarks>
        </member>
        <member name="P:TagLib.Id3v2.Tag.DateTagged">
            <summary>
               Gets and sets the date at which the tag has been written.
            </summary>
            <value>
               A nullable <see cref="T:System.DateTime" /> object containing the 
               date at which the tag has been written, or <see 
               langword="null" /> if no value present.
            </value>
            <remarks>
               This property is implemented using the "TDTG" Timestamp
               Information Frame.
            </remarks>
        </member>
        <member name="P:TagLib.Id3v2.Tag.MusicBrainzArtistId">
            <summary>
               Gets and sets the MusicBrainz ArtistID
            </summary>
            <value>
               A <see cref="T:System.String" /> containing the MusicBrainz
               ArtistID for the media described by the current 
               instance, or null if no value is present. 
            </value>
            <remarks>
               This property is implemented using the "TXXX:MusicBrainz Artist Id" frame.
               http://musicbrainz.org/doc/PicardTagMapping
            </remarks>
        </member>
        <member name="P:TagLib.Id3v2.Tag.MusicBrainzReleaseGroupId">
            <summary>
               Gets and sets the MusicBrainz ReleaseGroupID
            </summary>
            <value>
               A <see cref="T:System.String" /> containing the MusicBrainz
               ReleaseGroupID for the media described by the current 
               instance, or null if no value is present. 
            </value>
            <remarks>
               This property is implemented using the "TXXX:MusicBrainz Release Group Id" frame.
               http://musicbrainz.org/doc/PicardTagMapping
            </remarks>
        </member>
        <member name="P:TagLib.Id3v2.Tag.MusicBrainzReleaseId">
            <summary>
               Gets and sets the MusicBrainz ReleaseID
            </summary>
            <value>
               A <see cref="T:System.String" /> containing the MusicBrainz
               ReleaseID for the media described by the current 
               instance, or null if no value is present. 
            </value>
            <remarks>
               This property is implemented using the "TXXX:MusicBrainz Album Id" frame.
               http://musicbrainz.org/doc/PicardTagMapping
            </remarks>
        </member>
        <member name="P:TagLib.Id3v2.Tag.MusicBrainzReleaseArtistId">
            <summary>
               Gets and sets the MusicBrainz ReleaseArtistID
            </summary>
            <value>
               A <see cref="T:System.String" /> containing the MusicBrainz
               ReleaseArtistID for the media described by the current 
               instance, or null if no value is present. 
            </value>
            <remarks>
               This property is implemented using the "TXXX:MusicBrainz Album Artist Id" frame.
               http://musicbrainz.org/doc/PicardTagMapping
            </remarks>
        </member>
        <member name="P:TagLib.Id3v2.Tag.MusicBrainzTrackId">
            <summary>
               Gets and sets the MusicBrainz TrackID
            </summary>
            <value>
               A <see cref="T:System.String" /> containing the MusicBrainz
               TrackID for the media described by the current 
               instance, or null if no value is present. 
            </value>
            <remarks>
               This property is implemented using the "UFID:http://musicbrainz.org" frame.
               http://musicbrainz.org/doc/PicardTagMapping
            </remarks>
        </member>
        <member name="P:TagLib.Id3v2.Tag.MusicBrainzDiscId">
            <summary>
               Gets and sets the MusicBrainz DiscID
            </summary>
            <value>
               A <see cref="T:System.String" /> containing the MusicBrainz
               DiscID for the media described by the current 
               instance, or null if no value is present. 
            </value>
            <remarks>
               This property is implemented using the "TXXX:MusicBrainz Disc Id" frame.
               http://musicbrainz.org/doc/PicardTagMapping
            </remarks>
        </member>
        <member name="P:TagLib.Id3v2.Tag.MusicIpId">
            <summary>
               Gets and sets the MusicIP PUID
            </summary>
            <value>
               A <see cref="T:System.String" /> containing the MusicIP PUID
               for the media described by the current 
               instance, or null if no value is present. 
            </value>
            <remarks>
               This property is implemented using the "TXXX:MusicIP PUID" frame.
               http://musicbrainz.org/doc/PicardTagMapping
            </remarks>
        </member>
        <member name="P:TagLib.Id3v2.Tag.AmazonId">
            <summary>
               Gets and sets the Amazon ID (ASIN)
            </summary>
            <value>
               A <see cref="T:System.String" /> containing the Amazon Id
               for the media described by the current 
               instance, or null if no value is present. 
            </value>
            <remarks>
               This property is implemented using the "TXXX:ASIN" frame.
               http://musicbrainz.org/doc/PicardTagMapping
            </remarks>
        </member>
        <member name="P:TagLib.Id3v2.Tag.MusicBrainzReleaseStatus">
            <summary>
               Gets and sets the MusicBrainz ReleaseStatus
            </summary>
            <value>
               A <see cref="T:System.String" /> containing the MusicBrainz
               ReleaseStatus for the media described by the current 
               instance, or null if no value is present. 
            </value>
            <remarks>
               This property is implemented using the "TXXX:MusicBrainz Album Status" frame.
               http://musicbrainz.org/doc/PicardTagMapping
            </remarks>
        </member>
        <member name="P:TagLib.Id3v2.Tag.MusicBrainzReleaseType">
            <summary>
               Gets and sets the MusicBrainz ReleaseType
            </summary>
            <value>
               A <see cref="T:System.String" /> containing the MusicBrainz
               ReleaseType for the media described by the current 
               instance, or null if no value is present. 
            </value>
            <remarks>
               This property is implemented using the "TXXX:MusicBrainz Album Type" frame.
               http://musicbrainz.org/doc/PicardTagMapping
            </remarks>
        </member>
        <member name="P:TagLib.Id3v2.Tag.MusicBrainzReleaseCountry">
            <summary>
               Gets and sets the MusicBrainz ReleaseCountry
            </summary>
            <value>
               A <see cref="T:System.String" /> containing the MusicBrainz
               ReleaseCountry for the media described by the current 
               instance, or null if no value is present. 
            </value>
            <remarks>
               This property is implemented using the "TXXX:MusicBrainz Album Release Country" frame.
               http://musicbrainz.org/doc/PicardTagMapping
            </remarks>
        </member>
        <member name="P:TagLib.Id3v2.Tag.ReplayGainTrackGain">
            <summary>
               Gets and sets the ReplayGain track gain in dB.
            </summary>
            <value>
               A <see cref="T:System.Boolean" /> value in dB for the track gain as
               per the ReplayGain specification.
            </value>
            <remarks>
               This property is implemented using the "TXXX:REPLAYGAIN_TRACK_GAIN" frame.
               http://wiki.hydrogenaudio.org/index.php?title=ReplayGain_specification#ID3v2
            </remarks>
        </member>
        <member name="P:TagLib.Id3v2.Tag.ReplayGainTrackPeak">
            <summary>
               Gets and sets the ReplayGain track peak sample.
            </summary>
            <value>
               A <see cref="T:System.Boolean" /> value for the track peak as per the
               ReplayGain specification.
            </value>
            <remarks>
               This property is implemented using the "TXXX:REPLAYGAIN_TRACK_PEAK" frame.
               http://wiki.hydrogenaudio.org/index.php?title=ReplayGain_specification#ID3v2
            </remarks>
        </member>
        <member name="P:TagLib.Id3v2.Tag.ReplayGainAlbumGain">
            <summary>
               Gets and sets the ReplayGain album gain in dB.
            </summary>
            <value>
               A <see cref="T:System.Boolean" /> value in dB for the album gain as
               per the ReplayGain specification.
            </value>
            <remarks>
               This property is implemented using the "TXXX:REPLAYGAIN_ALBUM_GAIN" frame.
               http://wiki.hydrogenaudio.org/index.php?title=ReplayGain_specification#ID3v2
            </remarks>
        </member>
        <member name="P:TagLib.Id3v2.Tag.ReplayGainAlbumPeak">
            <summary>
               Gets and sets the ReplayGain album peak sample.
            </summary>
            <value>
               A <see cref="T:System.Boolean" /> value for the album peak as per the
               ReplayGain specification.
            </value>
            <remarks>
               This property is implemented using the "TXXX:REPLAYGAIN_ALBUM_PEAK" frame.
               http://wiki.hydrogenaudio.org/index.php?title=ReplayGain_specification#ID3v2
            </remarks>
        </member>
        <member name="P:TagLib.Id3v2.Tag.InitialKey">
            <summary>
               Gets and sets the initial key of the song.
            </summary>
            <value>
               A <see cref="T:System.String" /> object containing the initial key of the song.
            </value>
            <remarks>
               This property is implemented using the "TKEY" field.
            </remarks>
        </member>
        <member name="P:TagLib.Id3v2.Tag.RemixedBy">
            <summary>
               Gets and sets the remixer of the song.
            </summary>
            <value>
               A <see cref="T:System.String" /> object containing the remixer of the song.
            </value>
            <remarks>
               This property is implemented using the "TPE4" field.
            </remarks>
        </member>
        <member name="P:TagLib.Id3v2.Tag.Publisher">
            <summary>
               Gets and sets the publisher of the song.
            </summary>
            <value>
               A <see cref="T:System.String" /> object containing the publisher of the song.
            </value>
            <remarks>
               This property is implemented using the "TPUB" field.
            </remarks>
        </member>
        <member name="P:TagLib.Id3v2.Tag.ISRC">
            <summary>
               Gets and sets the ISRC (International Standard Recording Code) of the song.
            </summary>
            <value>
               A <see cref="T:System.String" /> object containing the ISRC of the song.
            </value>
            <remarks>
               This property is implemented using the "TSRC" field.
            </remarks>
        </member>
        <member name="P:TagLib.Id3v2.Tag.Length">
            <summary>
               Gets and sets the length of the media represented
               by the current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> object containing the length of
               the media represented by the current instance or <see
               langword="null" /> if no value is present.
            </value>
            <remarks>
               <para>This field represents the label or length of the album the
               media belongs to. </para>
               <para>For example, "00:15:00".</para>
            </remarks>
        </member>
        <member name="P:TagLib.Id3v2.Tag.Pictures">
            <summary>
               Gets and sets a collection of pictures associated with
               the media represented by the current instance.
            </summary>
            <value>
               A <see cref="T:IPicture[]" /> containing a collection of
               pictures associated with the media represented by the
               current instance or an empty array if none are present.
            </value>
            <remarks>
               This property is implemented using the "APIC" Attached
               Picture Frame.
            </remarks>
        </member>
        <member name="P:TagLib.Id3v2.Tag.IsEmpty">
            <summary>
               Gets whether or not the current instance is empty.
            </summary>
            <value>
               <see langword="true" /> if the current instance does not
               any values. Otherwise <see langword="false" />.
            </value>
        </member>
        <member name="M:TagLib.Id3v2.Tag.Clear">
            <summary>
               Clears the values stored in the current instance.
            </summary>
        </member>
        <member name="P:TagLib.Id3v2.Tag.IsCompilation">
            <summary>
               Gets and sets whether or not the album described by the
               current instance is a compilation.
            </summary>
            <value>
               A <see cref="T:System.Boolean" /> value indicating whether or not the
               album described by the current instance is a compilation.
            </value>
            <remarks>
               This property is implemented using the "TCMP" Text
               Information Frame to provide support for a feature of the
               Apple iPod and iTunes products.
            </remarks>
        </member>
        <member name="M:TagLib.Id3v2.Tag.CopyTo(TagLib.Tag,System.Boolean)">
            <summary>
               Copies the values from the current instance to another
               <see cref="T:TagLib.Tag" />, optionally overwriting
               existing values.
            </summary>
            <param name="target">
               A <see cref="T:TagLib.Tag" /> object containing the target
               tag to copy values to.
            </param>
            <param name="overwrite">
               A <see cref="T:System.Boolean" /> specifying whether or not to copy
               values over existing one.
            </param>
            <remarks>
               <para>If <paramref name="target" /> is of type <see
               cref="T:TagLib.Ape.Tag" /> a complete copy of all values
               will be performed. Otherwise, only standard values will
               be copied.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="target" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:TagLib.Id3v2.Tag.Clone">
            <summary>
               Creates a deep copy of the current instance.
            </summary>
            <returns>
               A new <see cref="T:TagLib.Id3v2.Tag" /> object identical to the current
               instance.
            </returns>
        </member>
        <member name="T:TagLib.Id3v2.TimestampFormat">
            <summary>
               Specifies the timestamp format used by a <see
               cref="T:TagLib.Id3v2.SynchronisedLyricsFrame" /> and <see cref="T:TagLib.Id3v2.EventTimeCodesFrame"/>.
            </summary>
        </member>
        <member name="F:TagLib.Id3v2.TimestampFormat.Unknown">
            <summary>
               The timestamp is of unknown format.
            </summary>
        </member>
        <member name="F:TagLib.Id3v2.TimestampFormat.AbsoluteMpegFrames">
            <summary>
               The timestamp represents the number of MPEG frames since
               the beginning of the audio stream.
            </summary>
        </member>
        <member name="F:TagLib.Id3v2.TimestampFormat.AbsoluteMilliseconds">
            <summary>
               The timestamp represents the number of milliseconds since
               the beginning of the audio stream.
            </summary>
        </member>
        <member name="T:TagLib.IFD.Entries.ByteIFDEntry">
            <summary>
               Contains a byte value
            </summary>
        </member>
        <member name="P:TagLib.IFD.Entries.ByteIFDEntry.Tag">
            <value>
               The ID of the tag, the current instance belongs to
            </value>
        </member>
        <member name="P:TagLib.IFD.Entries.ByteIFDEntry.Value">
            <value>
               The value which is stored by the current instance
            </value>
        </member>
        <member name="M:TagLib.IFD.Entries.ByteIFDEntry.#ctor(System.UInt16,System.Byte)">
            <summary>
               Construcor.
            </summary>
            <param name="tag">
               A <see cref="T:System.UInt16"/> with the tag ID of the entry this instance
               represents
            </param>
            <param name="value">
               A <see cref="T:System.Byte"/> to be stored
            </param>
        </member>
        <member name="M:TagLib.IFD.Entries.ByteIFDEntry.Render(System.Boolean,System.UInt32,System.UInt16@,System.UInt32@)">
            <summary>
               Renders the current instance to a <see cref="T:TagLib.ByteVector"/>
            </summary>
            <param name="is_bigendian">
               A <see cref="T:System.Boolean"/> indicating the endianess for rendering.
            </param>
            <param name="offset">
               A <see cref="T:System.UInt32"/> with the offset, the data is stored.
            </param>
            <param name="type">
               A <see cref="T:System.UInt16"/> the ID of the type, which is rendered
            </param>
            <param name="count">
               A <see cref="T:System.UInt32"/> with the count of the values which are
               rendered.
            </param>
            <returns>
               A <see cref="T:TagLib.ByteVector"/> with the rendered data.
            </returns>
        </member>
        <member name="T:TagLib.IFD.Entries.ByteVectorIFDEntry">
            <summary>
               Contains an BYTE value with a count > 1 (byte sequence).
            </summary>
        </member>
        <member name="P:TagLib.IFD.Entries.ByteVectorIFDEntry.Tag">
            <value>
               The ID of the tag, the current instance belongs to
            </value>
        </member>
        <member name="P:TagLib.IFD.Entries.ByteVectorIFDEntry.Data">
            <value>
               The data which is stored by the current instance
            </value>
        </member>
        <member name="M:TagLib.IFD.Entries.ByteVectorIFDEntry.#ctor(System.UInt16,TagLib.ByteVector)">
            <summary>
               Construcor.
            </summary>
            <param name="tag">
               A <see cref="T:System.UInt16"/> with the tag ID of the entry this instance
               represents
            </param>
            <param name="data">
               A <see cref="T:TagLib.ByteVector"/> to be stored
            </param>
        </member>
        <member name="M:TagLib.IFD.Entries.ByteVectorIFDEntry.Render(System.Boolean,System.UInt32,System.UInt16@,System.UInt32@)">
            <summary>
               Renders the current instance to a <see cref="T:TagLib.ByteVector"/>
            </summary>
            <param name="is_bigendian">
               A <see cref="T:System.Boolean"/> indicating the endianess for rendering.
            </param>
            <param name="offset">
               A <see cref="T:System.UInt32"/> with the offset, the data is stored.
            </param>
            <param name="type">
               A <see cref="T:System.UInt16"/> the ID of the type, which is rendered
            </param>
            <param name="count">
               A <see cref="T:System.UInt32"/> with the count of the values which are
               rendered.
            </param>
            <returns>
               A <see cref="T:TagLib.ByteVector"/> with the rendered data.
            </returns>
        </member>
        <member name="T:TagLib.IFD.Entries.LongArrayIFDEntry">
            <summary>
               Contains a LONG value with a count > 1
            </summary>
        </member>
        <member name="M:TagLib.IFD.Entries.LongArrayIFDEntry.#ctor(System.UInt16,System.UInt32[])">
            <summary>
               Construcor.
            </summary>
            <param name="tag">
               A <see cref="T:System.UInt16"/> with the tag ID of the entry this instance
               represents
            </param>
            <param name="values">
               A <see cref="T:System.UInt32[]"/> to be stored
            </param>
        </member>
        <member name="M:TagLib.IFD.Entries.LongArrayIFDEntry.Render(System.Boolean,System.UInt32,System.UInt16@,System.UInt32@)">
            <summary>
               Renders the current instance to a <see cref="T:TagLib.ByteVector"/>
            </summary>
            <param name="is_bigendian">
               A <see cref="T:System.Boolean"/> indicating the endianess for rendering.
            </param>
            <param name="offset">
               A <see cref="T:System.UInt32"/> with the offset, the data is stored.
            </param>
            <param name="type">
               A <see cref="T:System.UInt16"/> the ID of the type, which is rendered
            </param>
            <param name="count">
               A <see cref="T:System.UInt32"/> with the count of the values which are
               rendered.
            </param>
            <returns>
               A <see cref="T:TagLib.ByteVector"/> with the rendered data.
            </returns>
        </member>
        <member name="T:TagLib.IFD.Entries.LongIFDEntry">
            <summary>
               Contains a LONG value.
            </summary>
        </member>
        <member name="P:TagLib.IFD.Entries.LongIFDEntry.Tag">
            <value>
               The ID of the tag, the current instance belongs to
            </value>
        </member>
        <member name="P:TagLib.IFD.Entries.LongIFDEntry.Value">
            <value>
               The value which is stored by the current instance
            </value>
        </member>
        <member name="M:TagLib.IFD.Entries.LongIFDEntry.#ctor(System.UInt16,System.UInt32)">
            <summary>
               Construcor.
            </summary>
            <param name="tag">
               A <see cref="T:System.UInt16"/> with the tag ID of the entry this instance
               represents
            </param>
            <param name="value">
               A <see cref="T:System.UInt32"/> to be stored
            </param>
        </member>
        <member name="M:TagLib.IFD.Entries.LongIFDEntry.Render(System.Boolean,System.UInt32,System.UInt16@,System.UInt32@)">
            <summary>
               Renders the current instance to a <see cref="T:TagLib.ByteVector"/>
            </summary>
            <param name="is_bigendian">
               A <see cref="T:System.Boolean"/> indicating the endianess for rendering.
            </param>
            <param name="offset">
               A <see cref="T:System.UInt32"/> with the offset, the data is stored.
            </param>
            <param name="type">
               A <see cref="T:System.UInt16"/> the ID of the type, which is rendered
            </param>
            <param name="count">
               A <see cref="T:System.UInt32"/> with the count of the values which are
               rendered.
            </param>
            <returns>
               A <see cref="T:TagLib.ByteVector"/> with the rendered data.
            </returns>
        </member>
        <member name="T:TagLib.IFD.Entries.MakernoteType">
            <summary>
               An enum to represent the manufactor of the makernote
               The information of the makernote types is from:
               http://exiv2.org/makernote.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Entries.MakernoteType.Unknown">
            <summary>
               The manufactor could not be determined
            </summary>
        </member>
        <member name="F:TagLib.IFD.Entries.MakernoteType.Canon">
            <summary>
               Canon makernote.
               Standard IFD without a special prefix.
            </summary>
        </member>
        <member name="F:TagLib.IFD.Entries.MakernoteType.Panasonic">
            <summary>
               Panasonic makernote.
               "Panasonic\0\0\0" prefix and IFD starting at offset 12.
               The next-IFD pointer is missing
            </summary>
        </member>
        <member name="F:TagLib.IFD.Entries.MakernoteType.Leica">
            <summary>
               Leica makernote.
               "LEICA\0\0\0" prefix and IFD starting at offset 10.
            </summary>
        </member>
        <member name="F:TagLib.IFD.Entries.MakernoteType.Pentax">
            <summary>
               Pentax makernote.
               "AOC\0" + 2 unknown bytes as prefix. The IFD starts at
               offset 6.
            </summary>
        </member>
        <member name="F:TagLib.IFD.Entries.MakernoteType.Nikon1">
            <summary>
               Nikon makernote (type 1).
               Standard IFD without a special prefix.
            </summary>
        </member>
        <member name="F:TagLib.IFD.Entries.MakernoteType.Nikon2">
            <summary>
               Nikon makernote (type 2).
               "Nikon\0" + 2 unknown bytes prefix. The IFD starts at
               offset 8.
            </summary>
        </member>
        <member name="F:TagLib.IFD.Entries.MakernoteType.Nikon3">
            <summary>
               Nikon makernote (type 3).
               "Nikon\0" + 4 bytes with verison code + Tiff header.
               The IFD starts usually at offset 18. The offsets of the IFD
               are relative to start of the Tiff header (byte 10)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Entries.MakernoteType.Olympus1">
            <summary>
               Olympus makernote (type 1).
               "OLYMP\0" + 2 unknown bytes as prefix. The IFD starts at
               offset 8.
            </summary>
        </member>
        <member name="F:TagLib.IFD.Entries.MakernoteType.Olympus2">
            <summary>
               Olympus makernote (type 2)
               "OLYMPUS\0II" + 2 unknown bytes as prefix. The IFD starts at
               offset 12. The offsets of the IFD are relative to the
               beginning of the makernote.
            </summary>
        </member>
        <member name="F:TagLib.IFD.Entries.MakernoteType.Sony">
            <summary>
               Sony makernote (type 1).
               "SONY DSC \0\0\0" as prefix. The IFD starts at offset 12. A
               next-IFD pointer is missing.
            </summary>
        </member>
        <member name="T:TagLib.IFD.Entries.MakernoteIFDEntry">
            <summary>
               Contains a Makernote IFD.
            </summary>
            <remarks>
               Makernote IFDs are mostly of the same form. They start with and
               Manufactor specific prefix indicating the type and contain then
               a IFD structure.
               It must be distinguished, where the offsets in the IFD belongs to.
               For some makernotes the offset refers to the beginning of the
               surrounding metadata IFD structure, for others they refer to the
               start of the makernote.
               In addition the endianess of the makernote can be different to the
               endianess of the surrounding metadata.
               This class takes care about all those things.
            </remarks>
        </member>
        <member name="F:TagLib.IFD.Entries.MakernoteIFDEntry.prefix">
            <value>
               Stores the prefix of the makernote
            </value>
        </member>
        <member name="F:TagLib.IFD.Entries.MakernoteIFDEntry.ifd_offset">
            <value>
               Stores the offset of the IFD contained in makernote
            </value>
        </member>
        <member name="F:TagLib.IFD.Entries.MakernoteIFDEntry.absolute_offset">
            <value>
               Indicates, if the offsets are relative to the current makernote
               or absolut to the base_offset of the surrounding IFD.
            </value>
        </member>
        <member name="F:TagLib.IFD.Entries.MakernoteIFDEntry.is_bigendian">
            <value>
               Stores, if the makernote is encoded in big- or little endian.
               If the field is <see langword="null"/>, the endianess of the
               surrounding IFD is used.
            </value>
        </member>
        <member name="P:TagLib.IFD.Entries.MakernoteIFDEntry.Tag">
            <value>
               The ID of the tag, the current instance belongs to
            </value>
        </member>
        <member name="P:TagLib.IFD.Entries.MakernoteIFDEntry.MakernoteType">
            <value>
               The type of the makernote the current instance represents
            </value>
        </member>
        <member name="P:TagLib.IFD.Entries.MakernoteIFDEntry.Structure">
            <value>
               The pure <see cref="T:TagLib.IFD.IFDStructure"/> which is stored by the
               makernote.
            </value>
        </member>
        <member name="M:TagLib.IFD.Entries.MakernoteIFDEntry.#ctor(System.UInt16,TagLib.IFD.IFDStructure,TagLib.IFD.Entries.MakernoteType,TagLib.ByteVector,System.UInt32,System.Boolean,System.Nullable{System.Boolean})">
            <summary>
               Construcor.
            </summary>
            <param name="tag">
               A <see cref="T:System.UInt16"/> with the tag ID of the entry this instance
               represents
            </param>
            <param name="structure">
               A <see cref="T:TagLib.IFD.IFDStructure"/> with the IFD structure, which is stored by this
               instance
            </param>
            <param name="makernoteType">
               A <see cref="P:TagLib.IFD.Entries.MakernoteIFDEntry.MakernoteType"/> with the type of the makernote.
            </param>
            <param name="prefix">
               A <see cref="T:TagLib.ByteVector"/> containing the prefix, which should be rendered
               before the real IFD.
            </param>
            <param name="ifdOffset">
               A <see cref="T:System.UInt32"/> with the offset in addition to the relative
               offsets in the IFD
            </param>
            <param name="absoluteOffset">
               A <see cref="T:System.Boolean"/> indicating if the offsets of the IFD are relative
               to the <paramref name="ifdOffset"/>, or absolut to the base offset of the
               surrounding IFD.
            </param>
            <param name="is_bigendian">
               A <see cref="T:System.Nullable"/> indicating if the current IFD is encoded in
               big- or little endian. It it is <see langword="null"/>, the endianess of the
               surrounding IFD is used.
            </param>
        </member>
        <member name="M:TagLib.IFD.Entries.MakernoteIFDEntry.#ctor(System.UInt16,TagLib.IFD.IFDStructure,TagLib.IFD.Entries.MakernoteType)">
            <summary>
               Constructor. Creates a makernote instance just containing an IFD and
               without any special prefix or offset behavior.
            </summary>
            <param name="tag">
               A <see cref="T:System.UInt16"/> with the tag ID of the entry this instance
               represents
            </param>
            <param name="structure">
               A <see cref="T:TagLib.IFD.IFDStructure"/> with the IFD structure, which is stored by this
               instance
            </param>
            <param name="makernote_type">
               A <see cref="P:TagLib.IFD.Entries.MakernoteIFDEntry.MakernoteType"/> with the type of the makernote.
            </param>
        </member>
        <member name="M:TagLib.IFD.Entries.MakernoteIFDEntry.Render(System.Boolean,System.UInt32,System.UInt16@,System.UInt32@)">
            <summary>
               Renders the current instance to a <see cref="T:TagLib.ByteVector"/>
            </summary>
            <param name="is_bigendian">
               A <see cref="T:System.Boolean"/> indicating the endianess for rendering.
            </param>
            <param name="offset">
               A <see cref="T:System.UInt32"/> with the offset, the data is stored.
            </param>
            <param name="type">
               A <see cref="T:System.UInt16"/> the ID of the type, which is rendered
            </param>
            <param name="count">
               A <see cref="T:System.UInt32"/> with the count of the values which are
               rendered.
            </param>
            <returns>
               A <see cref="T:TagLib.ByteVector"/> with the rendered data.
            </returns>
        </member>
        <member name="T:TagLib.IFD.Entries.Rational">
            <summary>
               Representation of an unsigned rational value
            </summary>
        </member>
        <member name="F:TagLib.IFD.Entries.Rational.denominator">
            <summary>
               The denominator of the rational value
            </summary>
        </member>
        <member name="M:TagLib.IFD.Entries.Rational.#ctor(System.UInt32,System.UInt32)">
            <summary>
               Creates a new Rational value
            </summary>
            <param name="numerator">
               A <see cref="T:System.UInt32"/> with the numerator of the
               rational value
            </param>
            <param name="denominator">
               A <see cref="T:System.UInt32"/> with the denominator of the
               rational value. It must be not 0.
            </param>
        </member>
        <member name="M:TagLib.IFD.Entries.Rational.Reduce">
            <summary>
               Returns a rational value with reduced nominator and denominator
            </summary>
            <returns>
            A <see cref="T:TagLib.IFD.Entries.Rational"/>
            </returns>
        </member>
        <member name="M:TagLib.IFD.Entries.Rational.ToString(System.String,System.IFormatProvider)">
            <summary>
               Formatprovider to allow formatting of a value. <see cref="T:System.IFormattable"/>
            </summary>
            <param name="format">
               A <see cref="T:System.String"/>. <see cref="T:System.IFormattable"/>
            </param>
            <param name="provider">
               A <see cref="T:System.IFormatProvider"/>. <see cref="T:System.IFormattable"/>
            </param>
            <returns>
               A <see cref="T:System.String"/> formated according to the given parameter
            </returns>
        </member>
        <member name="M:TagLib.IFD.Entries.Rational.ToString">
            <summary>
               Converts the value to a <see cref="T:System.String"/>.
            </summary>
            <returns>
               A <see cref="T:System.String"/> with the current value.
            </returns>
        </member>
        <member name="P:TagLib.IFD.Entries.Rational.Numerator">
            <value>
               The numerator of the rational value
            </value>
        </member>
        <member name="P:TagLib.IFD.Entries.Rational.Denominator">
            <value>
               The denominator of the rational value
            </value>
            <remarks>
               Cannot be 0.
            </remarks>
        </member>
        <member name="M:TagLib.IFD.Entries.Rational.op_Implicit(TagLib.IFD.Entries.Rational)~System.Double">
            <summary>
               Cast the <see cref="T:TagLib.IFD.Entries.Rational"/> value to a <see cref="T:System.Double"/>.
            </summary>
            <param name="rat">
               A <see cref="T:TagLib.IFD.Entries.Rational"/> with the value to cast.
            </param>
            <returns>
               A <see cref="T:System.Double"/> with the double.
            </returns>
        </member>
        <member name="T:TagLib.IFD.Entries.RationalArrayIFDEntry">
            <summary>
               Contains a RATIONAL value with a count > 1
            </summary>
        </member>
        <member name="M:TagLib.IFD.Entries.RationalArrayIFDEntry.#ctor(System.UInt16,TagLib.IFD.Entries.Rational[])">
            <summary>
               Construcor.
            </summary>
            <param name="tag">
               A <see cref="T:System.UInt16"/> with the tag ID of the entry this instance
               represents
            </param>
            <param name="entries">
               A <see cref="T:Rational[]"/> to be stored
            </param>
        </member>
        <member name="M:TagLib.IFD.Entries.RationalArrayIFDEntry.Render(System.Boolean,System.UInt32,System.UInt16@,System.UInt32@)">
            <summary>
               Renders the current instance to a <see cref="T:TagLib.ByteVector"/>
            </summary>
            <param name="is_bigendian">
               A <see cref="T:System.Boolean"/> indicating the endianess for rendering.
            </param>
            <param name="offset">
               A <see cref="T:System.UInt32"/> with the offset, the data is stored.
            </param>
            <param name="type">
               A <see cref="T:System.UInt16"/> the ID of the type, which is rendered
            </param>
            <param name="count">
               A <see cref="T:System.UInt32"/> with the count of the values which are
               rendered.
            </param>
            <returns>
               A <see cref="T:TagLib.ByteVector"/> with the rendered data.
            </returns>
        </member>
        <member name="T:TagLib.IFD.Entries.RationalIFDEntry">
            <summary>
               Contains a RATIONAL value.
            </summary>
        </member>
        <member name="P:TagLib.IFD.Entries.RationalIFDEntry.Tag">
            <value>
               The ID of the tag, the current instance belongs to
            </value>
        </member>
        <member name="P:TagLib.IFD.Entries.RationalIFDEntry.Value">
            <value>
               The value which is stored by the current instance
            </value>
        </member>
        <member name="M:TagLib.IFD.Entries.RationalIFDEntry.#ctor(System.UInt16,TagLib.IFD.Entries.Rational)">
            <summary>
               Construcor.
            </summary>
            <param name="tag">
               A <see cref="T:System.UInt16"/> with the tag ID of the entry this instance
               represents
            </param>
            <param name="value">
            A <see cref="T:TagLib.IFD.Entries.Rational"/>
            </param>
        </member>
        <member name="M:TagLib.IFD.Entries.RationalIFDEntry.Render(System.Boolean,System.UInt32,System.UInt16@,System.UInt32@)">
            <summary>
               Renders the current instance to a <see cref="T:TagLib.ByteVector"/>
            </summary>
            <param name="is_bigendian">
               A <see cref="T:System.Boolean"/> indicating the endianess for rendering.
            </param>
            <param name="offset">
               A <see cref="T:System.UInt32"/> with the offset, the data is stored.
            </param>
            <param name="type">
               A <see cref="T:System.UInt16"/> the ID of the type, which is rendered
            </param>
            <param name="count">
               A <see cref="T:System.UInt32"/> with the count of the values which are
               rendered.
            </param>
            <returns>
               A <see cref="T:TagLib.ByteVector"/> with the rendered data.
            </returns>
        </member>
        <member name="T:TagLib.IFD.Entries.SByteIFDEntry">
            <summary>
               Contains a signed byte value
            </summary>
        </member>
        <member name="P:TagLib.IFD.Entries.SByteIFDEntry.Tag">
            <value>
               The ID of the tag, the current instance belongs to
            </value>
        </member>
        <member name="P:TagLib.IFD.Entries.SByteIFDEntry.Value">
            <value>
               The value which is stored by the current instance
            </value>
        </member>
        <member name="M:TagLib.IFD.Entries.SByteIFDEntry.#ctor(System.UInt16,System.SByte)">
            <summary>
               Construcor.
            </summary>
            <param name="tag">
               A <see cref="T:System.UInt16"/> with the tag ID of the entry this instance
               represents
            </param>
            <param name="value">
               A <see cref="T:System.SByte"/> to be stored
            </param>
        </member>
        <member name="M:TagLib.IFD.Entries.SByteIFDEntry.Render(System.Boolean,System.UInt32,System.UInt16@,System.UInt32@)">
            <summary>
               Renders the current instance to a <see cref="T:TagLib.ByteVector"/>
            </summary>
            <param name="is_bigendian">
               A <see cref="T:System.Boolean"/> indicating the endianess for rendering.
            </param>
            <param name="offset">
               A <see cref="T:System.UInt32"/> with the offset, the data is stored.
            </param>
            <param name="type">
               A <see cref="T:System.UInt16"/> the ID of the type, which is rendered
            </param>
            <param name="count">
               A <see cref="T:System.UInt32"/> with the count of the values which are
               rendered.
            </param>
            <returns>
               A <see cref="T:TagLib.ByteVector"/> with the rendered data.
            </returns>
        </member>
        <member name="T:TagLib.IFD.Entries.ShortArrayIFDEntry">
            <summary>
               Contains a SHORT value with a count > 1
            </summary>
        </member>
        <member name="M:TagLib.IFD.Entries.ShortArrayIFDEntry.#ctor(System.UInt16,System.UInt16[])">
            <summary>
               Construcor.
            </summary>
            <param name="tag">
               A <see cref="T:System.UInt16"/> with the tag ID of the entry this instance
               represents
            </param>
            <param name="values">
               A <see cref="T:System.UInt16[]"/> to be stored
            </param>
        </member>
        <member name="M:TagLib.IFD.Entries.ShortArrayIFDEntry.Render(System.Boolean,System.UInt32,System.UInt16@,System.UInt32@)">
            <summary>
               Renders the current instance to a <see cref="T:TagLib.ByteVector"/>
            </summary>
            <param name="is_bigendian">
               A <see cref="T:System.Boolean"/> indicating the endianess for rendering.
            </param>
            <param name="offset">
               A <see cref="T:System.UInt32"/> with the offset, the data is stored.
            </param>
            <param name="type">
               A <see cref="T:System.UInt16"/> the ID of the type, which is rendered
            </param>
            <param name="count">
               A <see cref="T:System.UInt32"/> with the count of the values which are
               rendered.
            </param>
            <returns>
               A <see cref="T:TagLib.ByteVector"/> with the rendered data.
            </returns>
        </member>
        <member name="T:TagLib.IFD.Entries.ShortIFDEntry">
            <summary>
               Contains a SHORT value.
            </summary>
        </member>
        <member name="P:TagLib.IFD.Entries.ShortIFDEntry.Tag">
            <value>
               The ID of the tag, the current instance belongs to
            </value>
        </member>
        <member name="P:TagLib.IFD.Entries.ShortIFDEntry.Value">
            <value>
               The value which is stored by the current instance
            </value>
        </member>
        <member name="M:TagLib.IFD.Entries.ShortIFDEntry.#ctor(System.UInt16,System.UInt16)">
            <summary>
               Construcor.
            </summary>
            <param name="tag">
               A <see cref="T:System.UInt16"/> with the tag ID of the entry this instance
               represents
            </param>
            <param name="value">
               A <see cref="T:System.UInt16"/> to be stored
            </param>
        </member>
        <member name="M:TagLib.IFD.Entries.ShortIFDEntry.Render(System.Boolean,System.UInt32,System.UInt16@,System.UInt32@)">
            <summary>
               Renders the current instance to a <see cref="T:TagLib.ByteVector"/>
            </summary>
            <param name="is_bigendian">
               A <see cref="T:System.Boolean"/> indicating the endianess for rendering.
            </param>
            <param name="offset">
               A <see cref="T:System.UInt32"/> with the offset, the data is stored.
            </param>
            <param name="type">
               A <see cref="T:System.UInt16"/> the ID of the type, which is rendered
            </param>
            <param name="count">
               A <see cref="T:System.UInt32"/> with the count of the values which are
               rendered.
            </param>
            <returns>
               A <see cref="T:TagLib.ByteVector"/> with the rendered data.
            </returns>
        </member>
        <member name="T:TagLib.IFD.Entries.SLongArrayIFDEntry">
            <summary>
               Contains a SLONG value with a count > 1
            </summary>
        </member>
        <member name="M:TagLib.IFD.Entries.SLongArrayIFDEntry.#ctor(System.UInt16,System.Int32[])">
            <summary>
               Construcor.
            </summary>
            <param name="tag">
               A <see cref="T:System.UInt16"/> with the tag ID of the entry this instance
               represents
            </param>
            <param name="values">
               A <see cref="T:System.Int32[]"/> to be stored
            </param>
        </member>
        <member name="M:TagLib.IFD.Entries.SLongArrayIFDEntry.Render(System.Boolean,System.UInt32,System.UInt16@,System.UInt32@)">
            <summary>
               Renders the current instance to a <see cref="T:TagLib.ByteVector"/>
            </summary>
            <param name="is_bigendian">
               A <see cref="T:System.Boolean"/> indicating the endianess for rendering.
            </param>
            <param name="offset">
               A <see cref="T:System.UInt32"/> with the offset, the data is stored.
            </param>
            <param name="type">
               A <see cref="T:System.UInt16"/> the ID of the type, which is rendered
            </param>
            <param name="count">
               A <see cref="T:System.UInt32"/> with the count of the values which are
               rendered.
            </param>
            <returns>
               A <see cref="T:TagLib.ByteVector"/> with the rendered data.
            </returns>
        </member>
        <member name="T:TagLib.IFD.Entries.SLongIFDEntry">
            <summary>
               Contains a signed LONG value.
            </summary>
        </member>
        <member name="P:TagLib.IFD.Entries.SLongIFDEntry.Tag">
            <value>
               The ID of the tag, the current instance belongs to
            </value>
        </member>
        <member name="P:TagLib.IFD.Entries.SLongIFDEntry.Value">
            <value>
               The value which is stored by the current instance
            </value>
        </member>
        <member name="M:TagLib.IFD.Entries.SLongIFDEntry.#ctor(System.UInt16,System.Int32)">
            <summary>
               Construcor.
            </summary>
            <param name="tag">
               A <see cref="T:System.UInt16"/> with the tag ID of the entry this instance
               represents
            </param>
            <param name="value">
               A <see cref="T:System.Int32"/> to be stored
            </param>
        </member>
        <member name="M:TagLib.IFD.Entries.SLongIFDEntry.Render(System.Boolean,System.UInt32,System.UInt16@,System.UInt32@)">
            <summary>
               Renders the current instance to a <see cref="T:TagLib.ByteVector"/>
            </summary>
            <param name="is_bigendian">
               A <see cref="T:System.Boolean"/> indicating the endianess for rendering.
            </param>
            <param name="offset">
               A <see cref="T:System.UInt32"/> with the offset, the data is stored.
            </param>
            <param name="type">
               A <see cref="T:System.UInt16"/> the ID of the type, which is rendered
            </param>
            <param name="count">
               A <see cref="T:System.UInt32"/> with the count of the values which are
               rendered.
            </param>
            <returns>
               A <see cref="T:TagLib.ByteVector"/> with the rendered data.
            </returns>
        </member>
        <member name="T:TagLib.IFD.Entries.SRational">
            <summary>
               Representation of a signed rational value
            </summary>
        </member>
        <member name="F:TagLib.IFD.Entries.SRational.denominator">
            <summary>
               The denominator of the rational value
            </summary>
        </member>
        <member name="M:TagLib.IFD.Entries.SRational.#ctor(System.Int32,System.Int32)">
            <summary>
               Creates a new Rational value
            </summary>
            <param name="numerator">
               A <see cref="T:System.Int32"/> with the numerator of the
               rational value
            </param>
            <param name="denominator">
               A <see cref="T:System.Int32"/> with the denominator of the
               rational value. It must be not 0.
            </param>
        </member>
        <member name="M:TagLib.IFD.Entries.SRational.Reduce">
            <summary>
               Returns a rational value with reduced nominator and denominator
            </summary>
            <returns>
               A <see cref="T:TagLib.IFD.Entries.SRational"/>
            </returns>
        </member>
        <member name="M:TagLib.IFD.Entries.SRational.ToString(System.String,System.IFormatProvider)">
            <summary>
               Formatprovider to allow formatting of a value. <see cref="T:System.IFormattable"/>
            </summary>
            <param name="format">
               A <see cref="T:System.String"/>. <see cref="T:System.IFormattable"/>
            </param>
            <param name="provider">
               A <see cref="T:System.IFormatProvider"/>. <see cref="T:System.IFormattable"/>
            </param>
            <returns>
               A <see cref="T:System.String"/> formated according to the given parameter
            </returns>
        </member>
        <member name="M:TagLib.IFD.Entries.SRational.ToString">
            <summary>
               Converts the value to a <see cref="T:System.String"/>.
            </summary>
            <returns>
               A <see cref="T:System.String"/> with the current value.
            </returns>
        </member>
        <member name="P:TagLib.IFD.Entries.SRational.Numerator">
            <value>
               The numerator of the rational value
            </value>
        </member>
        <member name="P:TagLib.IFD.Entries.SRational.Denominator">
            <value>
               The denominator of the rational value
            </value>
            <remarks>
               Cannot be 0.
            </remarks>
        </member>
        <member name="M:TagLib.IFD.Entries.SRational.op_Implicit(TagLib.IFD.Entries.SRational)~System.Double">
            <summary>
               Cast the <see cref="T:TagLib.IFD.Entries.Rational"/> value to a <see cref="T:System.Double"/>.
            </summary>
            <param name="rat">
               A <see cref="T:TagLib.IFD.Entries.Rational"/> with the value to cast.
            </param>
            <returns>
               A <see cref="T:System.Double"/> with the double.
            </returns>
        </member>
        <member name="T:TagLib.IFD.Entries.SRationalArrayIFDEntry">
            <summary>
               Contains a SRATIONAL value with a count > 1
            </summary>
        </member>
        <member name="M:TagLib.IFD.Entries.SRationalArrayIFDEntry.#ctor(System.UInt16,TagLib.IFD.Entries.SRational[])">
            <summary>
               Construcor.
            </summary>
            <param name="tag">
               A <see cref="T:System.UInt16"/> with the tag ID of the entry this instance
               represents
            </param>
            <param name="entries">
               A <see cref="T:SRational[]"/> to be stored
            </param>
        </member>
        <member name="M:TagLib.IFD.Entries.SRationalArrayIFDEntry.Render(System.Boolean,System.UInt32,System.UInt16@,System.UInt32@)">
            <summary>
               Renders the current instance to a <see cref="T:TagLib.ByteVector"/>
            </summary>
            <param name="is_bigendian">
               A <see cref="T:System.Boolean"/> indicating the endianess for rendering.
            </param>
            <param name="offset">
               A <see cref="T:System.UInt32"/> with the offset, the data is stored.
            </param>
            <param name="type">
               A <see cref="T:System.UInt16"/> the ID of the type, which is rendered
            </param>
            <param name="count">
               A <see cref="T:System.UInt32"/> with the count of the values which are
               rendered.
            </param>
            <returns>
               A <see cref="T:TagLib.ByteVector"/> with the rendered data.
            </returns>
        </member>
        <member name="T:TagLib.IFD.Entries.SRationalIFDEntry">
            <summary>
               Contains a SRATIONAL value.
            </summary>
        </member>
        <member name="P:TagLib.IFD.Entries.SRationalIFDEntry.Tag">
            <value>
               The ID of the tag, the current instance belongs to
            </value>
        </member>
        <member name="P:TagLib.IFD.Entries.SRationalIFDEntry.Value">
            <value>
               The value which is stored by the current instance
            </value>
        </member>
        <member name="M:TagLib.IFD.Entries.SRationalIFDEntry.#ctor(System.UInt16,TagLib.IFD.Entries.SRational)">
            <summary>
               Construcor.
            </summary>
            <param name="tag">
               A <see cref="T:System.UInt16"/> with the tag ID of the entry this instance
               represents
            </param>
            <param name="value">
               A <see cref="T:TagLib.IFD.Entries.SRational"/> to be stored
            </param>
        </member>
        <member name="M:TagLib.IFD.Entries.SRationalIFDEntry.Render(System.Boolean,System.UInt32,System.UInt16@,System.UInt32@)">
            <summary>
               Renders the current instance to a <see cref="T:TagLib.ByteVector"/>
            </summary>
            <param name="is_bigendian">
               A <see cref="T:System.Boolean"/> indicating the endianess for rendering.
            </param>
            <param name="offset">
               A <see cref="T:System.UInt32"/> with the offset, the data is stored.
            </param>
            <param name="type">
               A <see cref="T:System.UInt16"/> the ID of the type, which is rendered
            </param>
            <param name="count">
               A <see cref="T:System.UInt32"/> with the count of the values which are
               rendered.
            </param>
            <returns>
               A <see cref="T:TagLib.ByteVector"/> with the rendered data.
            </returns>
        </member>
        <member name="T:TagLib.IFD.Entries.SShortArrayIFDEntry">
            <summary>
               Contains a SSHORT value with a count > 1
            </summary>
        </member>
        <member name="M:TagLib.IFD.Entries.SShortArrayIFDEntry.#ctor(System.UInt16,System.Int16[])">
            <summary>
               Construcor.
            </summary>
            <param name="tag">
               A <see cref="T:System.UInt16"/> with the tag ID of the entry this instance
               represents
            </param>
            <param name="values">
               A <see cref="T:System.Int16[]"/> to be stored
            </param>
        </member>
        <member name="M:TagLib.IFD.Entries.SShortArrayIFDEntry.Render(System.Boolean,System.UInt32,System.UInt16@,System.UInt32@)">
            <summary>
               Renders the current instance to a <see cref="T:TagLib.ByteVector"/>
            </summary>
            <param name="is_bigendian">
               A <see cref="T:System.Boolean"/> indicating the endianess for rendering.
            </param>
            <param name="offset">
               A <see cref="T:System.UInt32"/> with the offset, the data is stored.
            </param>
            <param name="type">
               A <see cref="T:System.UInt16"/> the ID of the type, which is rendered
            </param>
            <param name="count">
               A <see cref="T:System.UInt32"/> with the count of the values which are
               rendered.
            </param>
            <returns>
               A <see cref="T:TagLib.ByteVector"/> with the rendered data.
            </returns>
        </member>
        <member name="T:TagLib.IFD.Entries.SShortIFDEntry">
            <summary>
               Contains a Signed SHORT value.
            </summary>
        </member>
        <member name="P:TagLib.IFD.Entries.SShortIFDEntry.Tag">
            <value>
               The ID of the tag, the current instance belongs to
            </value>
        </member>
        <member name="P:TagLib.IFD.Entries.SShortIFDEntry.Value">
            <value>
               The value which is stored by the current instance
            </value>
        </member>
        <member name="M:TagLib.IFD.Entries.SShortIFDEntry.#ctor(System.UInt16,System.UInt16)">
            <summary>
               Construcor.
            </summary>
            <param name="tag">
               A <see cref="T:System.UInt16"/> with the tag ID of the entry this instance
               represents
            </param>
            <param name="value">
               A <see cref="T:System.Int16"/> to be stored
            </param>
        </member>
        <member name="M:TagLib.IFD.Entries.SShortIFDEntry.Render(System.Boolean,System.UInt32,System.UInt16@,System.UInt32@)">
            <summary>
               Renders the current instance to a <see cref="T:TagLib.ByteVector"/>
            </summary>
            <param name="is_bigendian">
               A <see cref="T:System.Boolean"/> indicating the endianess for rendering.
            </param>
            <param name="offset">
               A <see cref="T:System.UInt32"/> with the offset, the data is stored.
            </param>
            <param name="type">
               A <see cref="T:System.UInt16"/> the ID of the type, which is rendered
            </param>
            <param name="count">
               A <see cref="T:System.UInt32"/> with the count of the values which are
               rendered.
            </param>
            <returns>
               A <see cref="T:TagLib.ByteVector"/> with the rendered data.
            </returns>
        </member>
        <member name="T:TagLib.IFD.Entries.StringIFDEntry">
            <summary>
               Contains an ASCII STRING value.
            </summary>
        </member>
        <member name="P:TagLib.IFD.Entries.StringIFDEntry.Tag">
            <value>
               The ID of the tag, the current instance belongs to
            </value>
        </member>
        <member name="P:TagLib.IFD.Entries.StringIFDEntry.Value">
            <value>
               The value which is stored by the current instance
            </value>
        </member>
        <member name="M:TagLib.IFD.Entries.StringIFDEntry.#ctor(System.UInt16,System.String)">
            <summary>
               Construcor.
            </summary>
            <param name="tag">
               A <see cref="T:System.UInt16"/> with the tag ID of the entry this instance
               represents
            </param>
            <param name="value">
               A <see cref="T:System.String"/> to be stored
            </param>
        </member>
        <member name="M:TagLib.IFD.Entries.StringIFDEntry.Render(System.Boolean,System.UInt32,System.UInt16@,System.UInt32@)">
            <summary>
               Renders the current instance to a <see cref="T:TagLib.ByteVector"/>
            </summary>
            <param name="is_bigendian">
               A <see cref="T:System.Boolean"/> indicating the endianess for rendering.
            </param>
            <param name="offset">
               A <see cref="T:System.UInt32"/> with the offset, the data is stored.
            </param>
            <param name="type">
               A <see cref="T:System.UInt16"/> the ID of the type, which is rendered
            </param>
            <param name="count">
               A <see cref="T:System.UInt32"/> with the count of the values which are
               rendered.
            </param>
            <returns>
               A <see cref="T:TagLib.ByteVector"/> with the rendered data.
            </returns>
        </member>
        <member name="T:TagLib.IFD.Entries.StripOffsetsIFDEntry">
            <summary>
               Contains the offsets to the image data strips.
            </summary>
        </member>
        <member name="F:TagLib.IFD.Entries.StripOffsetsIFDEntry.byte_counts">
            <value>
               Store the strip length to read them before writing.
            </value>
        </member>
        <member name="F:TagLib.IFD.Entries.StripOffsetsIFDEntry.file">
            <value>
               The file the offsets belong to
            </value>
        </member>
        <member name="M:TagLib.IFD.Entries.StripOffsetsIFDEntry.#ctor(System.UInt16,System.UInt32[],System.UInt32[],TagLib.File)">
            <summary>
               Constructor.
            </summary>
            <param name="tag">
               A <see cref="T:System.UInt16"/> with the tag ID of the entry this instance
               represents
            </param>
            <param name="values">
               A <see cref="T:System.UInt32[]"/> with the strip offsets.
            </param>
            <param name="byte_counts">
               The length of the strips.
            </param>
            <param name="file">
               The file from which the strips will be read.
            </param>
        </member>
        <member name="M:TagLib.IFD.Entries.StripOffsetsIFDEntry.Render(System.Boolean,System.UInt32,System.UInt16@,System.UInt32@)">
            <summary>
               Renders the current instance to a <see cref="T:TagLib.ByteVector"/>
            </summary>
            <param name="is_bigendian">
               A <see cref="T:System.Boolean"/> indicating the endianess for rendering.
            </param>
            <param name="offset">
               A <see cref="T:System.UInt32"/> with the offset, the data is stored.
            </param>
            <param name="type">
               A <see cref="T:System.UInt16"/> the ID of the type, which is rendered
            </param>
            <param name="count">
               A <see cref="T:System.UInt32"/> with the count of the values which are
               rendered.
            </param>
            <returns>
               A <see cref="T:TagLib.ByteVector"/> with the rendered data.
            </returns>
        </member>
        <member name="T:TagLib.IFD.Entries.SubIFDArrayEntry">
            <summary>
               Contains the SubIFDs IFD entry.
            </summary>
        </member>
        <member name="P:TagLib.IFD.Entries.SubIFDArrayEntry.Tag">
            <value>
               The ID of the tag, the current instance belongs to
            </value>
        </member>
        <member name="P:TagLib.IFD.Entries.SubIFDArrayEntry.Entries">
            <value>
               The structures of the IFDs to which this entry points.
            </value>
        </member>
        <member name="M:TagLib.IFD.Entries.SubIFDArrayEntry.#ctor(System.UInt16,System.Collections.Generic.List{TagLib.IFD.IFDStructure})">
            <summary>
               Constructor.
            </summary>
            <param name="tag">
               A <see cref="T:System.UInt16"/> with the tag ID of the entry this instance
               represents
            </param>
            <param name="entries">
               A set of ifd structures.
            </param>
        </member>
        <member name="M:TagLib.IFD.Entries.SubIFDArrayEntry.Render(System.Boolean,System.UInt32,System.UInt16@,System.UInt32@)">
            <summary>
               Renders the current instance to a <see cref="T:TagLib.ByteVector"/>
            </summary>
            <param name="is_bigendian">
               A <see cref="T:System.Boolean"/> indicating the endianess for rendering.
            </param>
            <param name="offset">
               A <see cref="T:System.UInt32"/> with the offset, the data is stored.
            </param>
            <param name="type">
               A <see cref="T:System.UInt16"/> the ID of the type, which is rendered
            </param>
            <param name="count">
               A <see cref="T:System.UInt32"/> with the count of the values which are
               rendered.
            </param>
            <returns>
               A <see cref="T:TagLib.ByteVector"/> with the rendered data.
            </returns>
        </member>
        <member name="T:TagLib.IFD.Entries.SubIFDEntry">
            <summary>
               Contains a Sub IFD.
            </summary>
        </member>
        <member name="P:TagLib.IFD.Entries.SubIFDEntry.Tag">
            <value>
               The ID of the tag, the current instance belongs to
            </value>
        </member>
        <member name="P:TagLib.IFD.Entries.SubIFDEntry.Type">
            <value>
               The type of the IFD entry.
            </value>
        </member>
        <member name="P:TagLib.IFD.Entries.SubIFDEntry.Count">
            <value>
               The count of the IFD entry.
            </value>
        </member>
        <member name="P:TagLib.IFD.Entries.SubIFDEntry.Structure">
            <value>
               The structure of the sub-ifd which is stored by the current
               instance
            </value>
        </member>
        <member name="P:TagLib.IFD.Entries.SubIFDEntry.ChildCount">
            <value>
               The number of entries in the entire IFD.
            </value>
        </member>
        <member name="M:TagLib.IFD.Entries.SubIFDEntry.#ctor(System.UInt16,System.UInt16,System.UInt32,TagLib.IFD.IFDStructure)">
            <summary>
               Construcor.
            </summary>
            <param name="tag">
               A <see cref="T:System.UInt16"/> with the tag ID of the entry this instance
               represents
            </param>
            <param name="type">
               A <see cref="T:System.UInt16"/> with the type of the IFD entry.
            </param>
            <param name="count">
               A <see cref="T:System.UInt32"/> with the count of the IFD entry.
            </param>
            <param name="structure">
               A <see cref="T:TagLib.IFD.IFDStructure"/> to be stored
            </param>
        </member>
        <member name="M:TagLib.IFD.Entries.SubIFDEntry.Render(System.Boolean,System.UInt32,System.UInt16@,System.UInt32@)">
            <summary>
               Renders the current instance to a <see cref="T:TagLib.ByteVector"/>
            </summary>
            <param name="is_bigendian">
               A <see cref="T:System.Boolean"/> indicating the endianess for rendering.
            </param>
            <param name="offset">
               A <see cref="T:System.UInt32"/> with the offset, the data is stored.
            </param>
            <param name="type">
               A <see cref="T:System.UInt16"/> the ID of the type, which is rendered
            </param>
            <param name="count">
               A <see cref="T:System.UInt32"/> with the count of the values which are
               rendered.
            </param>
            <returns>
               A <see cref="T:TagLib.ByteVector"/> with the rendered data.
            </returns>
        </member>
        <member name="T:TagLib.IFD.Entries.ThumbnailDataIFDEntry">
            <summary>
               Contains the data of a Thumbnail. Since the thumbnail is
               referenced by two long entries (offset to the data and length)
               we need to take care of this special case.
               This entry acts as the offset-entry but holds also the
               thumbail data. When rendering the entry, we have to render the
               data but write a long entry.
            </summary>
        </member>
        <member name="P:TagLib.IFD.Entries.ThumbnailDataIFDEntry.Tag">
            <value>
               The ID of the tag, the current instance belongs to
            </value>
        </member>
        <member name="P:TagLib.IFD.Entries.ThumbnailDataIFDEntry.Data">
            <value>
               The data of the thumbnail which is stored by the current instance
            </value>
        </member>
        <member name="M:TagLib.IFD.Entries.ThumbnailDataIFDEntry.#ctor(System.UInt16,TagLib.ByteVector)">
            <summary>
               Construcor.
            </summary>
            <param name="tag">
               A <see cref="T:System.UInt16"/> with the tag ID of the entry this instance
               represents
            </param>
            <param name="data">
               A <see cref="T:TagLib.ByteVector"/> with the thumbnail data to be stored
            </param>
        </member>
        <member name="M:TagLib.IFD.Entries.ThumbnailDataIFDEntry.Render(System.Boolean,System.UInt32,System.UInt16@,System.UInt32@)">
            <summary>
               Renders the current instance to a <see cref="T:TagLib.ByteVector"/>
            </summary>
            <param name="is_bigendian">
               A <see cref="T:System.Boolean"/> indicating the endianess for rendering.
            </param>
            <param name="offset">
               A <see cref="T:System.UInt32"/> with the offset, the data is stored.
            </param>
            <param name="type">
               A <see cref="T:System.UInt16"/> the ID of the type, which is rendered
            </param>
            <param name="count">
               A <see cref="T:System.UInt32"/> with the count of the values which are
               rendered.
            </param>
            <returns>
               A <see cref="T:TagLib.ByteVector"/> with the rendered data.
            </returns>
        </member>
        <member name="T:TagLib.IFD.Entries.UndefinedIFDEntry">
            <summary>
               Contains an Undefined value type, represented by a byte vector
            </summary>
        </member>
        <member name="P:TagLib.IFD.Entries.UndefinedIFDEntry.Tag">
            <value>
               The ID of the tag, the current instance belongs to
            </value>
        </member>
        <member name="P:TagLib.IFD.Entries.UndefinedIFDEntry.Data">
            <value>
               The data which is stored by the current instance
            </value>
        </member>
        <member name="M:TagLib.IFD.Entries.UndefinedIFDEntry.#ctor(System.UInt16,TagLib.ByteVector)">
            <summary>
               Construcor.
            </summary>
            <param name="tag">
               A <see cref="T:System.UInt16"/> with the tag ID of the entry this instance
               represents
            </param>
            <param name="data">
               A <see cref="T:TagLib.ByteVector"/> to be stored
            </param>
        </member>
        <member name="M:TagLib.IFD.Entries.UndefinedIFDEntry.Render(System.Boolean,System.UInt32,System.UInt16@,System.UInt32@)">
            <summary>
               Renders the current instance to a <see cref="T:TagLib.ByteVector"/>
            </summary>
            <param name="is_bigendian">
               A <see cref="T:System.Boolean"/> indicating the endianess for rendering.
            </param>
            <param name="offset">
               A <see cref="T:System.UInt32"/> with the offset, the data is stored.
            </param>
            <param name="type">
               A <see cref="T:System.UInt16"/> the ID of the type, which is rendered
            </param>
            <param name="count">
               A <see cref="T:System.UInt32"/> with the count of the values which are
               rendered.
            </param>
            <returns>
               A <see cref="T:TagLib.ByteVector"/> with the rendered data.
            </returns>
        </member>
        <member name="T:TagLib.IFD.Entries.UserCommentIFDEntry">
            <summary>
               Contains an ASCII STRING value.
            </summary>
        </member>
        <member name="F:TagLib.IFD.Entries.UserCommentIFDEntry.COMMENT_ASCII_CODE">
            <summary>
              Marker for an ASCII-encoded UserComment tag.
            </summary>
        </member>
        <member name="F:TagLib.IFD.Entries.UserCommentIFDEntry.COMMENT_JIS_CODE">
            <summary>
              Marker for a JIS-encoded UserComment tag.
            </summary>
        </member>
        <member name="F:TagLib.IFD.Entries.UserCommentIFDEntry.COMMENT_UNICODE_CODE">
            <summary>
              Marker for a UNICODE-encoded UserComment tag.
            </summary>
        </member>
        <member name="F:TagLib.IFD.Entries.UserCommentIFDEntry.COMMENT_BAD_UNICODE_CODE">
            <summary>
              Corrupt marker that seems to be resembling unicode.
            </summary>
        </member>
        <member name="F:TagLib.IFD.Entries.UserCommentIFDEntry.COMMENT_UNDEFINED_CODE">
            <summary>
              Marker for a UserComment tag with undefined encoding.
            </summary>
        </member>
        <member name="P:TagLib.IFD.Entries.UserCommentIFDEntry.Tag">
            <value>
               The ID of the tag, the current instance belongs to
            </value>
        </member>
        <member name="P:TagLib.IFD.Entries.UserCommentIFDEntry.Value">
            <value>
               The value which is stored by the current instance
            </value>
        </member>
        <member name="M:TagLib.IFD.Entries.UserCommentIFDEntry.#ctor(System.UInt16,System.String)">
            <summary>
               Construcor.
            </summary>
            <param name="tag">
               A <see cref="T:System.UInt16"/> with the tag ID of the entry this instance
               represents
            </param>
            <param name="value">
               A <see cref="T:System.String"/> to be stored
            </param>
        </member>
        <member name="M:TagLib.IFD.Entries.UserCommentIFDEntry.#ctor(System.UInt16,TagLib.ByteVector,TagLib.File)">
            <summary>
               Construcor.
            </summary>
            <param name="tag">
               A <see cref="T:System.UInt16"/> with the tag ID of the entry this instance
               represents
            </param>
            <param name="data">
               A <see cref="T:TagLib.ByteVector"/> to be stored
            </param>
            <param name="file">
               The file that's currently being parsed, used for reporting corruptions.
            </param>
        </member>
        <member name="M:TagLib.IFD.Entries.UserCommentIFDEntry.Render(System.Boolean,System.UInt32,System.UInt16@,System.UInt32@)">
            <summary>
               Renders the current instance to a <see cref="T:TagLib.ByteVector"/>
            </summary>
            <param name="is_bigendian">
               A <see cref="T:System.Boolean"/> indicating the endianess for rendering.
            </param>
            <param name="offset">
               A <see cref="T:System.UInt32"/> with the offset, the data is stored.
            </param>
            <param name="type">
               A <see cref="T:System.UInt16"/> the ID of the type, which is rendered
            </param>
            <param name="count">
               A <see cref="T:System.UInt32"/> with the count of the values which are
               rendered.
            </param>
            <returns>
               A <see cref="T:TagLib.ByteVector"/> with the rendered data.
            </returns>
        </member>
        <member name="T:TagLib.IFD.IFDDirectory">
            <summary>
               Contains the entries in this IFD.
            </summary>
        </member>
        <member name="T:TagLib.IFD.IFDEntry">
            <summary>
               An IFD entry, which is a key/value pair inside an IFD.
            </summary>
        </member>
        <member name="P:TagLib.IFD.IFDEntry.Tag">
            <value>
               The ID of the tag, the current instance belongs to
            </value>
        </member>
        <member name="M:TagLib.IFD.IFDEntry.Render(System.Boolean,System.UInt32,System.UInt16@,System.UInt32@)">
            <summary>
               Renders the current instance to a <see cref="T:TagLib.ByteVector"/>
            </summary>
            <param name="is_bigendian">
               A <see cref="T:System.Boolean"/> indicating the endianess for rendering.
            </param>
            <param name="offset">
               A <see cref="T:System.UInt32"/> with the offset, the data is stored.
            </param>
            <param name="type">
               A <see cref="T:System.UInt16"/> the ID of the type, which is rendered
            </param>
            <param name="count">
               A <see cref="T:System.UInt32"/> with the count of the values which are
               rendered.
            </param>
            <returns>
               A <see cref="T:TagLib.ByteVector"/> with the rendered data.
            </returns>
        </member>
        <member name="T:TagLib.IFD.ArrayIFDEntry`1">
            <summary>
               This class abstracts common stuff for array IFD entries
            </summary>
        </member>
        <member name="P:TagLib.IFD.ArrayIFDEntry`1.Tag">
            <value>
               The ID of the tag, the current instance belongs to
            </value>
        </member>
        <member name="P:TagLib.IFD.ArrayIFDEntry`1.Values">
            <value>
               The values stored by the current instance.
            </value>
        </member>
        <member name="M:TagLib.IFD.ArrayIFDEntry`1.#ctor(System.UInt16)">
            <summary>
               Constructor.
            </summary>
            <param name="tag">
               A <see cref="T:System.UInt16"/> with the tag ID of the entry this instance
               represents
            </param>
        </member>
        <member name="M:TagLib.IFD.ArrayIFDEntry`1.Render(System.Boolean,System.UInt32,System.UInt16@,System.UInt32@)">
            <summary>
               Renders the current instance to a <see cref="T:TagLib.ByteVector"/>
            </summary>
            <param name="is_bigendian">
               A <see cref="T:System.Boolean"/> indicating the endianess for rendering.
            </param>
            <param name="offset">
               A <see cref="T:System.UInt32"/> with the offset, the data is stored.
            </param>
            <param name="type">
               A <see cref="T:System.UInt16"/> the ID of the type, which is rendered
            </param>
            <param name="count">
               A <see cref="T:System.UInt32"/> with the count of the values which are
               rendered.
            </param>
            <returns>
               A <see cref="T:TagLib.ByteVector"/> with the rendered data.
            </returns>
        </member>
        <member name="T:TagLib.IFD.IFDEntryType">
            <summary>
               A type indicator, which identifies how the corresponding value
               field should be interpreted.
            </summary>
        </member>
        <member name="F:TagLib.IFD.IFDEntryType.Unknown">
            <summary>
               Unknown (shouldn't occur)
            </summary>
        </member>
        <member name="F:TagLib.IFD.IFDEntryType.Byte">
            <summary>
               8-bit unsigned integer.
            </summary>
        </member>
        <member name="F:TagLib.IFD.IFDEntryType.Ascii">
            <summary>
               8-bit byte that contains a 7-bit ASCII code; the last byte
               must be NUL (binary zero).
            </summary>
        </member>
        <member name="F:TagLib.IFD.IFDEntryType.Short">
            <summary>
               16-bit (2-byte) unsigned integer.
            </summary>
        </member>
        <member name="F:TagLib.IFD.IFDEntryType.Long">
            <summary>
               32-bit (4-byte) unsigned integer.
            </summary>
        </member>
        <member name="F:TagLib.IFD.IFDEntryType.Rational">
            <summary>
               Two LONGs: the first represents the numerator of a
               fraction; the second, the denominator.
            </summary>
        </member>
        <member name="F:TagLib.IFD.IFDEntryType.SByte">
            <summary>
               An 8-bit signed (twos-complement) integer.
            </summary>
        </member>
        <member name="F:TagLib.IFD.IFDEntryType.Undefined">
            <summary>
               An 8-bit byte that may contain anything, depending on
               the definition of the field.
            </summary>
        </member>
        <member name="F:TagLib.IFD.IFDEntryType.SShort">
            <summary>
               A 16-bit (2-byte) signed (twos-complement) integer.
            </summary>
        </member>
        <member name="F:TagLib.IFD.IFDEntryType.SLong">
            <summary>
               A 32-bit (4-byte) signed (twos-complement) integer.
            </summary>
        </member>
        <member name="F:TagLib.IFD.IFDEntryType.SRational">
            <summary>
               Two SLONG’s: the first represents the numerator of a
               fraction, the second the denominator.
            </summary>
        </member>
        <member name="F:TagLib.IFD.IFDEntryType.Float">
            <summary>
               Single precision (4-byte) IEEE format.
            </summary>
        </member>
        <member name="F:TagLib.IFD.IFDEntryType.Double">
            <summary>
               Double precision (8-byte) IEEE format.
            </summary>
        </member>
        <member name="F:TagLib.IFD.IFDEntryType.IFD">
            <summary>
               IFD
            </summary>
        </member>
        <member name="T:TagLib.IFD.IFDReader">
            <summary>
                This class contains all the IFD reading and parsing code.
            </summary>
        </member>
        <member name="F:TagLib.IFD.IFDReader.file">
            <summary>
               The <see cref="T:TagLib.File" /> where this IFD is found in.
            </summary>
        </member>
        <member name="F:TagLib.IFD.IFDReader.is_bigendian">
            <summary>
               If IFD is encoded in BigEndian or not
            </summary>
        </member>
        <member name="F:TagLib.IFD.IFDReader.structure">
            <summary>
               The IFD structure that will be populated
            </summary>
        </member>
        <member name="F:TagLib.IFD.IFDReader.base_offset">
            <summary>
                A <see cref="T:System.Int64"/> value describing the base were the IFD offsets
                refer to. E.g. in Jpegs the IFD are located in an Segment and the offsets
                inside the IFD refer from the beginning of this segment. So base_offset must
                contain the beginning of the segment.
            </summary>
        </member>
        <member name="F:TagLib.IFD.IFDReader.ifd_offset">
            <summary>
                A <see cref="T:System.UInt32"/> value with the beginning of the IFD relative to
                base_offset.
            </summary>
        </member>
        <member name="F:TagLib.IFD.IFDReader.max_offset">
            <summary>
               A <see cref="T:System.UInt32"/> with the maximal offset, which should occur in the
               IFD. Greater offsets, would reference beyond the considered data.
            </summary>
        </member>
        <member name="F:TagLib.IFD.IFDReader.parse_makernote">
            <summary>
               Whether or not the makernote should be parsed.
            </summary>
        </member>
        <member name="P:TagLib.IFD.IFDReader.ShouldParseMakernote">
            <summary>
               Whether or not the makernote should be parsed.
            </summary>
        </member>
        <member name="M:TagLib.IFD.IFDReader.#ctor(TagLib.File,System.Boolean,TagLib.IFD.IFDStructure,System.Int64,System.UInt32,System.UInt32)">
            <summary>
               Constructor. Reads an IFD from given file, using the given endianness.
            </summary>
            <param name="file">
               A <see cref="T:TagLib.File"/> to read from.
            </param>
            <param name="is_bigendian">
                A <see cref="T:System.Boolean"/>, it must be true, if the data of the IFD should be
                read as bigendian, otherwise false.
            </param>
            <param name="structure">
               A <see cref="T:TagLib.IFD.IFDStructure"/> that will be populated.
            </param>
            <param name="base_offset">
                A <see cref="T:System.Int64"/> value describing the base were the IFD offsets
                refer to. E.g. in Jpegs the IFD are located in an Segment and the offsets
                inside the IFD refer from the beginning of this segment. So <paramref
                name="base_offset"/> must contain the beginning of the segment.
            </param>
            <param name="ifd_offset">
                A <see cref="T:System.UInt32"/> value with the beginning of the IFD relative to
                <paramref name="base_offset"/>.
            </param>
            <param name="max_offset">
            	A <see cref="T:System.UInt32"/> value with maximal possible offset. This is to limit
                the size of the possible data;
            </param>
        </member>
        <member name="M:TagLib.IFD.IFDReader.Read">
            <summary>
               Read all IFD segments from the file.
            </summary>
        </member>
        <member name="M:TagLib.IFD.IFDReader.Read(System.Int32)">
            <summary>
               Read IFD segments from the file.
            </summary>
            <para>
               The number of IFDs that may be read can be restricted using the count
               parameter. This might be needed for fiels that have invalid next-ifd
               pointers (such as some IFDs in the Nikon Makernote). This condition is
               tested in the Nikon2 unit test, which contains such a file.
            </para>
            <param name="count">
                A <see cref="T:System.Int32"/> with the maximal number of IFDs to read.
                Passing -1 means unlimited.
            </param>
        </member>
        <member name="M:TagLib.IFD.IFDReader.StartIFDLoopDetect">
            <summary>
               Add to the reference count for the IFD loop detection.
            </summary>
        </member>
        <member name="M:TagLib.IFD.IFDReader.DetectIFDLoop(System.Int64)">
            <summary>
               Attempts to detect whether or not this file has an endless IFD loop.
            </summary>
            <param name="offset">
               A <see cref="T:System.UInt32"/> with the offset at which the next IFD
               can be found.
            </param>
            <returns>
               True if we have gone into a loop, false otherwise.
            </returns>
        </member>
        <member name="M:TagLib.IFD.IFDReader.StopIFDLoopDetect">
            <summary>
               End the IFD loop detection, cleanup if we're the last.
            </summary>
        </member>
        <member name="M:TagLib.IFD.IFDReader.ReadIFD(System.Int64,System.UInt32,System.UInt32)">
            <summary>
               Reads an IFD from file at position <paramref name="offset"/> relative
               to <paramref name="baseOffset"/>.
            </summary>
            <param name="baseOffset">
               A <see cref="T:System.Int64"/> with the base offset which every offset
               in IFD is relative to.
            </param>
            <param name="offset">
               A <see cref="T:System.UInt32"/> with the offset of the IFD relative to
               <paramref name="baseOffset"/>
            </param>
            <param name="maxOffset">
               A <see cref="T:System.UInt32"/> with the maximal offset to consider for
               the IFD.
            </param>
            <returns>
               A <see cref="T:System.UInt32"/> with the offset of the next IFD, the
               offset is also relative to <paramref name="baseOffset"/>
            </returns>
        </member>
        <member name="M:TagLib.IFD.IFDReader.CreateIFDEntry(System.UInt16,System.UInt16,System.UInt32,System.Int64,TagLib.ByteVector,System.UInt32)">
            <summary>
               Creates an IFDEntry from the given values. This method is used for
               every entry. Custom parsing can be hooked in by overriding the
               <see cref="M:TagLib.IFD.IFDReader.ParseIFDEntry(System.UInt16,System.UInt16,System.UInt32,System.Int64,System.UInt32)"/> method.
            </summary>
            <param name="tag">
               A <see cref="T:System.UInt16"/> with the tag of the entry.
            </param>
            <param name="type">
               A <see cref="T:System.UInt16"/> with the type of the entry.
            </param>
            <param name="count">
               A <see cref="T:System.UInt32"/> with the data count of the entry.
            </param>
            <param name="baseOffset">
               A <see cref="T:System.Int64"/> with the base offset which every
               offsets in the IFD are relative to.
            </param>
            <param name="offsetData">
               A <see cref="T:TagLib.ByteVector"/> containing exactly 4 byte with the data
               of the offset of the entry. Since this field isn't interpreted as
               an offset if the data can be directly stored in the 4 byte, we
               pass the <see cref="T:TagLib.ByteVector"/> to easier interpret it.
            </param>
            <param name="maxOffset">
               A <see cref="T:System.UInt32"/> with the maximal offset to consider for
               the IFD.
            </param>
            <returns>
               A <see cref="T:TagLib.IFD.IFDEntry"/> with the given parameter.
            </returns>
        </member>
        <member name="M:TagLib.IFD.IFDReader.ReadShort">
            <summary>
               Reads a 2-byte signed short from the current file.
            </summary>
            <returns>
               A <see cref="T:System.Int16" /> value containing the short read
               from the current instance.
            </returns>
        </member>
        <member name="M:TagLib.IFD.IFDReader.ReadUShort">
            <summary>
               Reads a 2-byte unsigned short from the current file.
            </summary>
            <returns>
               A <see cref="T:System.UInt16" /> value containing the short read
               from the current instance.
            </returns>
        </member>
        <member name="M:TagLib.IFD.IFDReader.ReadInt">
            <summary>
               Reads a 4-byte int from the current file.
            </summary>
            <returns>
               A <see cref="T:System.UInt32" /> value containing the int read
               from the current instance.
            </returns>
        </member>
        <member name="M:TagLib.IFD.IFDReader.ReadUInt">
            <summary>
               Reads a 4-byte unsigned int from the current file.
            </summary>
            <returns>
               A <see cref="T:System.UInt32" /> value containing the int read
               from the current instance.
            </returns>
        </member>
        <member name="M:TagLib.IFD.IFDReader.ReadRational">
            <summary>
               Reads a <see cref="T:TagLib.IFD.Entries.Rational"/> by two following unsigned
               int from the current file.
            </summary>
            <returns>
               A <see cref="T:TagLib.IFD.Entries.Rational"/> value created by the read values.
            </returns>
        </member>
        <member name="M:TagLib.IFD.IFDReader.ReadSRational">
            <summary>
               Reads a <see cref="T:TagLib.IFD.Entries.SRational"/> by two following unsigned
               int from the current file.
            </summary>
            <returns>
               A <see cref="T:TagLib.IFD.Entries.SRational"/> value created by the read values.
            </returns>
        </member>
        <member name="M:TagLib.IFD.IFDReader.ReadUShortArray(System.UInt32)">
            <summary>
               Reads an array of 2-byte shorts from the current file.
            </summary>
            <returns>
               An array of <see cref="T:System.UInt16" /> values containing the
               shorts read from the current instance.
            </returns>
        </member>
        <member name="M:TagLib.IFD.IFDReader.ReadShortArray(System.UInt32)">
            <summary>
               Reads an array of 2-byte signed shorts from the current file.
            </summary>
            <returns>
               An array of <see cref="T:System.Int16" /> values containing the
               shorts read from the current instance.
            </returns>
        </member>
        <member name="M:TagLib.IFD.IFDReader.ReadIntArray(System.UInt32)">
            <summary>
               Reads an array of 4-byte int from the current file.
            </summary>
            <returns>
               An array of <see cref="T:System.Int32" /> values containing the
               shorts read from the current instance.
            </returns>
        </member>
        <member name="M:TagLib.IFD.IFDReader.ReadUIntArray(System.UInt32)">
            <summary>
               Reads an array of 4-byte unsigned int from the current file.
            </summary>
            <returns>
               An array of <see cref="T:System.UInt32" /> values containing the
               shorts read from the current instance.
            </returns>
        </member>
        <member name="M:TagLib.IFD.IFDReader.ReadAsciiString(System.Int32)">
            <summary>
               Reads an ASCII string from the current file.
            </summary>
            <returns>
               A <see cref="T:System.String" /> read from the current instance.
            </returns>
            <remarks>
               The exif standard allows to store multiple string separated
               by '\0' in one ASCII-field. On the other hand some programs
               (e.g. CanonZoomBrowser) fill some ASCII fields by trailing
               '\0's.
               We follow the Adobe practice as described in XMP Specification
               Part 3 (Storeage in Files), and process the ASCII string only
               to the first '\0'.
            </remarks>
        </member>
        <member name="M:TagLib.IFD.IFDReader.FixupDirectory(System.Int64,TagLib.IFD.IFDDirectory)">
            <summary>
               Performs some fixups to a read <see cref="T:TagLib.IFD.IFDDirectory"/>. For some
               special cases multiple <see cref="T:TagLib.IFD.IFDEntry"/> instances contained
               in the directory are needed. Therfore, we do the fixups after reading the
               whole directory to be sure, all entries are present.
            </summary>
            <param name="baseOffset">
               A <see cref="T:System.Int64"/> value with the base offset, all offsets in the
               directory refers to.
            </param>
            <param name="directory">
               A <see cref="T:TagLib.IFD.IFDDirectory"/> instance which was read and needs fixes.
            </param>
        </member>
        <member name="M:TagLib.IFD.IFDReader.ParseIFDEntry(System.UInt16,System.UInt16,System.UInt32,System.Int64,System.UInt32)">
            <summary>
               Try to parse the given IFD entry, used to discover format-specific entries.
            </summary>
            <param name="tag">
               A <see cref="T:System.UInt16"/> with the tag of the entry.
            </param>
            <param name="type">
               A <see cref="T:System.UInt16"/> with the type of the entry.
            </param>
            <param name="count">
               A <see cref="T:System.UInt32"/> with the data count of the entry.
            </param>
            <param name="baseOffset">
               A <see cref="T:System.Int64"/> with the base offset which every offsets in the
               IFD are relative to.
            </param>
            <param name="offset">
               A <see cref="T:System.UInt32"/> with the offset of the entry.
            </param>
            <returns>
               A <see cref="T:TagLib.IFD.IFDEntry"/> with the given parameters, or null if none was parsed, after
               which the normal TIFF parsing is used.
            </returns>
        </member>
        <member name="M:TagLib.IFD.IFDReader.CreateSubIFDReader(TagLib.File,System.Boolean,TagLib.IFD.IFDStructure,System.Int64,System.UInt32,System.UInt32)">
            <summary>
               Create a reader for Sub IFD entries.
            </summary>
            <param name="file">
               A <see cref="T:TagLib.File"/> to read from.
            </param>
            <param name="isBigendian">
                A <see cref="T:System.Boolean"/>, it must be true, if the data of the IFD should be
                read as bigendian, otherwise false.
            </param>
            <param name="structure">
               A <see cref="T:TagLib.IFD.IFDStructure"/> that will be populated.
            </param>
            <param name="baseOffset">
               A <see cref="T:System.Int64"/> with the base offset which every offsets in the
               IFD are relative to.
            </param>
            <param name="offset">
               A <see cref="T:System.UInt32"/> with the offset of the entry.
            </param>
            <param name="maxOffset">
               A <see cref="T:System.UInt32"/> with the maximal offset to consider for
               the IFD.
            </param>
            <returns>
               A <see cref="T:TagLib.IFD.IFDReader"/> which can be used to read the specified sub IFD.
            </returns>
        </member>
        <member name="T:TagLib.IFD.IFDRenderer">
            <summary>
                This class contains all the IFD rendering code.
            </summary>
        </member>
        <member name="F:TagLib.IFD.IFDRenderer.structure">
            <summary>
               The IFD structure that will be rendered.
            </summary>
        </member>
        <member name="F:TagLib.IFD.IFDRenderer.is_bigendian">
            <summary>
               If IFD should be encoded in BigEndian or not.
            </summary>
        </member>
        <member name="F:TagLib.IFD.IFDRenderer.ifd_offset">
            <summary>
               A <see cref="T:System.UInt32"/> value with the offset of the
               current IFD. All offsets inside the IFD must be adjusted
               according to this given offset.
            </summary>
        </member>
        <member name="M:TagLib.IFD.IFDRenderer.#ctor(System.Boolean,TagLib.IFD.IFDStructure,System.UInt32)">
            <summary>
               Constructor. Will render the given IFD structure.
            </summary>
            <param name="is_bigendian">
               If IFD should be encoded in BigEndian or not.
            </param>
            <param name="structure">
               The IFD structure that will be rendered.
            </param>
            <param name="ifd_offset">
               A <see cref="T:System.UInt32"/> value with the offset of the
               current IFD. All offsets inside the IFD must be adjusted
               according to this given offset.
            </param>
        </member>
        <member name="M:TagLib.IFD.IFDRenderer.Render">
            <summary>
               Renders the current instance to a <see cref="T:TagLib.ByteVector"/>.
            </summary>
            <returns>
               A <see cref="T:TagLib.ByteVector"/> containing the rendered IFD.
            </returns>
        </member>
        <member name="M:TagLib.IFD.IFDRenderer.RenderIFD(TagLib.IFD.IFDDirectory,System.UInt32,System.Boolean)">
            <summary>
               Renders the IFD to an ByteVector where the offset of the IFD
               itself is <paramref name="ifd_offset"/> and all offsets
               contained in the IFD are adjusted accroding it.
            </summary>
            <param name="directory">
               A <see cref="T:TagLib.IFD.IFDDirectory"/> with the directory to render.
            </param>
            <param name="ifd_offset">
               A <see cref="T:System.UInt32"/> with the offset of the IFD
            </param>
            <param name="last">
               A <see cref="T:System.Boolean"/> which is true, if the IFD is
               the last one, i.e. the offset to the next IFD, which is
               stored inside the IFD, is 0. If the value is false, the
               offset to the next IFD is set that it starts directly after
               the current one.
            </param>
            <returns>
               A <see cref="T:TagLib.ByteVector"/> with the rendered IFD.
            </returns>
        </member>
        <member name="M:TagLib.IFD.IFDRenderer.RenderEntry(TagLib.ByteVector,System.UInt16,System.UInt16,System.UInt32,System.UInt32)">
            <summary>
               Adds the data of a single entry to <paramref name="entry_data"/>.
            </summary>
            <param name="entry_data">
               A <see cref="T:TagLib.ByteVector"/> to add the entry to.
            </param>
            <param name="tag">
               A <see cref="T:System.UInt16"/> with the tag of the entry.
            </param>
            <param name="type">
               A <see cref="T:System.UInt16"/> with the type of the entry.
            </param>
            <param name="count">
               A <see cref="T:System.UInt32"/> with the data count of the entry,
            </param>
            <param name="offset">
               A <see cref="T:System.UInt32"/> with the offset field of the entry.
            </param>
        </member>
        <member name="M:TagLib.IFD.IFDRenderer.RenderEntryData(TagLib.IFD.IFDEntry,TagLib.ByteVector,TagLib.ByteVector,System.UInt32)">
            <summary>
               Renders a complete entry together with the data. The entry itself
               is stored in <paramref name="entry_data"/> and the data of the
               entry is stored in <paramref name="offset_data"/> if it cannot be
               stored in the offset. This method is called for every <see
               cref="T:TagLib.IFD.IFDEntry"/> of this IFD and can be overwritten in subclasses
               to provide special behavior.
            </summary>
            <param name="entry">
               A <see cref="T:TagLib.IFD.IFDEntry"/> with the entry to render.
            </param>
            <param name="entry_data">
               A <see cref="T:TagLib.ByteVector"/> to add the entry to.
            </param>
            <param name="offset_data">
               A <see cref="T:TagLib.ByteVector"/> to add the entry data to if it cannot be
               stored in the offset field.
            </param>
            <param name="data_offset">
               A <see cref="T:System.UInt32"/> with the offset, were the data of the
               entries starts. It is needed to adjust the offsets of the entries
               itself.
            </param>
        </member>
        <member name="M:TagLib.IFD.IFDRenderer.CreateSubRenderer(System.Boolean,TagLib.IFD.IFDStructure,System.UInt32)">
            <summary>
               Constructs a new IFD Renderer used to render a <see cref="T:TagLib.IFD.Entries.SubIFDEntry"/>.
            </summary>
            <param name="is_bigendian">
               If IFD should be encoded in BigEndian or not.
            </param>
            <param name="structure">
               The IFD structure that will be rendered.
            </param>
            <param name="ifd_offset">
               A <see cref="T:System.UInt32"/> value with the offset of the
               current IFD. All offsets inside the IFD must be adjusted
               according to this given offset.
            </param>
        </member>
        <member name="T:TagLib.IFD.IFDStructure">
            <summary>
               This class resembles the structure of a TIFF file. It can either be a
               top-level IFD, or a nested IFD (in the case of Exif).
            </summary>
        </member>
        <member name="F:TagLib.IFD.IFDStructure.directories">
            <summary>
               Contains the IFD directories in this tag.
            </summary>
        </member>
        <member name="P:TagLib.IFD.IFDStructure.Directories">
            <summary>
               Gets the IFD directories contained in the current instance.
            </summary>
            <value>
               An array of <see cref="T:TagLib.IFD.IFDDirectory"/> instances.
            </value>
        </member>
        <member name="M:TagLib.IFD.IFDStructure.ContainsTag(System.Int32,System.UInt16)">
            <summary>
               Checks, if a value for the given tag is contained in the IFD.
            </summary>
            <param name="directory">
               A <see cref="T:System.Int32"/> value with the directory index that
               contains the tag.
            </param>
            <param name="tag">
               A <see cref="T:System.UInt16"/> value with the tag.
            </param>
            <returns>
               A <see cref="T:System.Boolean"/>, which is true, if the tag is already
               contained in the IFD, otherwise false.
            </returns>
        </member>
        <member name="M:TagLib.IFD.IFDStructure.RemoveTag(System.Int32,System.UInt16)">
            <summary>
               Removes a given tag from the IFD.
            </summary>
            <param name="directory">
               A <see cref="T:System.Int32"/> value with the directory index that
               contains the tag to remove.
            </param>
            <param name="tag">
               A <see cref="T:System.UInt16"/> value with the tag to remove.
            </param>
        </member>
        <member name="M:TagLib.IFD.IFDStructure.RemoveTag(System.Int32,TagLib.IFD.Tags.IFDEntryTag)">
            <summary>
               Removes a given tag from the IFD.
            </summary>
            <param name="directory">
               A <see cref="T:System.Int32"/> value with the directory index that
               contains the tag to remove.
            </param>
            <param name="entry_tag">
               A <see cref="T:TagLib.IFD.Tags.IFDEntryTag"/> value with the tag to remove.
            </param>
        </member>
        <member name="M:TagLib.IFD.IFDStructure.AddEntry(System.Int32,TagLib.IFD.IFDEntry)">
            <summary>
               Adds an <see cref="T:TagLib.IFD.IFDEntry"/> to the IFD, if it is not already
               contained in, it fails otherwise.
            </summary>
            <param name="directory">
               A <see cref="T:System.Int32"/> value with the directory index that
               should contain the tag that will be added.
            </param>
            <param name="entry">
               A <see cref="T:TagLib.IFD.IFDEntry"/> to add to the IFD.
            </param>
        </member>
        <member name="M:TagLib.IFD.IFDStructure.SetEntry(System.Int32,TagLib.IFD.IFDEntry)">
            <summary>
               Adds an <see cref="T:TagLib.IFD.IFDEntry"/> to the IFD. If it is already contained
               in the IFD, it is overwritten.
            </summary>
            <param name="directory">
               A <see cref="T:System.Int32"/> value with the directory index that
               contains the tag that will be set.
            </param>
            <param name="entry">
               A <see cref="T:TagLib.IFD.IFDEntry"/> to add to the IFD.
            </param>
        </member>
        <member name="M:TagLib.IFD.IFDStructure.GetEntry(System.Int32,System.UInt16)">
            <summary>
              Returns the <see cref="T:TagLib.IFD.IFDEntry"/> belonging to the given tag.
            </summary>
            <param name="directory">
               A <see cref="T:System.Int32"/> with the directory that contains
               the wanted tag.
            </param>
            <param name="tag">
               A <see cref="T:System.UInt16"/> with the tag to get.
            </param>
            <returns>
               A <see cref="T:TagLib.IFD.IFDEntry"/> belonging to the given tag, or
               null, if no such tag is contained in the IFD.
            </returns>
        </member>
        <member name="M:TagLib.IFD.IFDStructure.GetEntry(System.Int32,TagLib.IFD.Tags.IFDEntryTag)">
            <summary>
              Returns the <see cref="T:TagLib.IFD.IFDEntry"/> belonging to the given tag.
            </summary>
            <param name="directory">
               A <see cref="T:System.Int32"/> with the directory that contains
               the wanted tag.
            </param>
            <param name="entry_tag">
               A <see cref="T:TagLib.IFD.Tags.IFDEntryTag"/> with the tag to get.
            </param>
            <returns>
               A <see cref="T:TagLib.IFD.IFDEntry"/> belonging to the given tag, or
               null, if no such tag is contained in the IFD.
            </returns>
        </member>
        <member name="M:TagLib.IFD.IFDStructure.GetStringValue(System.Int32,System.UInt16)">
            <summary>
               Returns the <see cref="T:System.String"/> stored in the
               entry defined by <paramref name="entry_tag"/>.
            </summary>
            <param name="directory">
               A <see cref="T:System.Int32"/> with the number of the directory
               to search for the entry.
            </param>
            <param name="entry_tag">
               A <see cref="T:System.UInt16"/> with the tag of the entry
            </param>
            <returns>
               A <see cref="T:System.String"/> with the value stored in the entry
               or <see langword="null" /> if no such entry is contained or it
               does not contain a <see cref="T:System.String"/> value.
            </returns>
        </member>
        <member name="M:TagLib.IFD.IFDStructure.GetByteValue(System.Int32,System.UInt16)">
            <summary>
               Returns a <see cref="T:System.Nullable"/> containing the
               <see cref="T:System.Byte"/> stored in the entry defined
               by <paramref name="entry_tag"/>.
            </summary>
            <param name="directory">
               A <see cref="T:System.Int32"/> with the number of the directory
               to search for the entry.
            </param>
            <param name="entry_tag">
               A <see cref="T:System.UInt16"/> with the tag of the entry
            </param>
            <returns>
               A <see cref="T:System.Nullable"/> containing the
               <see cref="T:System.Byte"/> stored in the entry, or
               <see langword="null" /> if no such entry is contained or it
               does not contain a <see cref="T:System.Byte"/> value.
            </returns>
        </member>
        <member name="M:TagLib.IFD.IFDStructure.GetLongValue(System.Int32,System.UInt16)">
            <summary>
               Returns a <see cref="T:System.Nullable"/> containing the
               <see cref="T:System.UInt32"/> stored in the entry defined
               by <paramref name="entry_tag"/>.
            </summary>
            <param name="directory">
               A <see cref="T:System.Int32"/> with the number of the directory
               to search for the entry.
            </param>
            <param name="entry_tag">
               A <see cref="T:System.UInt16"/> with the tag of the entry
            </param>
            <returns>
               A <see cref="T:System.Nullable"/> containing the
               <see cref="T:System.UInt32"/> stored in the entry, or
               <see langword="null" /> if no such entry is contained or it
               does not contain a <see cref="T:System.UInt32"/> value.
            </returns>
        </member>
        <member name="M:TagLib.IFD.IFDStructure.GetRationalValue(System.Int32,System.UInt16)">
            <summary>
               Returns a <see cref="T:System.Nullable"/> containing the
               <see cref="T:System.Double"/> stored in the entry defined
               by <paramref name="entry_tag"/>. The entry can be of type
               <see cref="T:TagLib.IFD.Entries.RationalIFDEntry"/> or
               <see cref="T:TagLib.IFD.Entries.SRationalIFDEntry"/>
            </summary>
            <param name="directory">
               A <see cref="T:System.Int32"/> with the number of the directory
               to search for the entry.
            </param>
            <param name="entry_tag">
               A <see cref="T:System.UInt16"/> with the tag of the entry
            </param>
            <returns>
               A <see cref="T:System.Nullable"/> containing the
               <see cref="T:System.Double"/> stored in the entry, or
               <see langword="null" /> if no such entry is contained.
            </returns>
        </member>
        <member name="M:TagLib.IFD.IFDStructure.GetDateTimeValue(System.Int32,System.UInt16)">
            <summary>
               Returns a <see cref="T:System.Nullable"/> containing the
               <see cref="T:System.DateTime"/> stored in the entry defined
               by <paramref name="entry_tag"/>. The entry must be of type
               <see cref="T:TagLib.IFD.Entries.StringIFDEntry"/> and contain an datestring
               according to the Exif specification.
            </summary>
            <param name="directory">
               A <see cref="T:System.Int32"/> with the number of the directory
               to search for the entry.
            </param>
            <param name="entry_tag">
               A <see cref="T:System.UInt16"/> with the tag of the entry
            </param>
            <returns>
               A <see cref="T:System.Nullable"/> containing the
               <see cref="T:System.DateTime"/> stored in the entry, or
               <see langword="null" /> if no such entry is contained or it
               does not contain a valid value.
            </returns>
        </member>
        <member name="M:TagLib.IFD.IFDStructure.SetStringValue(System.Int32,System.UInt16,System.String)">
            <summary>
               Adds a <see cref="T:TagLib.IFD.Entries.StringIFDEntry"/> to the directory with tag
               given by <paramref name="entry_tag"/> and value given by <paramref name="value"/>
            </summary>
            <param name="directory">
               A <see cref="T:System.Int32"/> with the number of the directory
               to add the entry to.
            </param>
            <param name="entry_tag">
               A <see cref="T:System.UInt16"/> with the tag of the entry
            </param>
            <param name="value">
               A <see cref="T:System.String"/> with the value to add. If it is <see langword="null" />
               an possibly already contained entry is removed for given tag.
            </param>
        </member>
        <member name="M:TagLib.IFD.IFDStructure.SetByteValue(System.Int32,System.UInt16,System.Byte)">
            <summary>
               Adds a <see cref="T:TagLib.IFD.Entries.ByteIFDEntry"/> to the directory with tag
               given by <paramref name="entry_tag"/> and value given by <paramref name="value"/>
            </summary>
            <param name="directory">
               A <see cref="T:System.Int32"/> with the number of the directory
               to add the entry to.
            </param>
            <param name="entry_tag">
               A <see cref="T:System.UInt16"/> with the tag of the entry
            </param>
            <param name="value">
               A <see cref="T:System.Byte"/> with the value to add.
            </param>
        </member>
        <member name="M:TagLib.IFD.IFDStructure.SetLongValue(System.Int32,System.UInt16,System.UInt32)">
            <summary>
               Adds a <see cref="T:TagLib.IFD.Entries.LongIFDEntry"/> to the directory with tag
               given by <paramref name="entry_tag"/> and value given by <paramref name="value"/>
            </summary>
            <param name="directory">
               A <see cref="T:System.Int32"/> with the number of the directory
               to add the entry to.
            </param>
            <param name="entry_tag">
               A <see cref="T:System.UInt16"/> with the tag of the entry
            </param>
            <param name="value">
               A <see cref="T:System.UInt32"/> with the value to add.
            </param>
        </member>
        <member name="M:TagLib.IFD.IFDStructure.SetRationalValue(System.Int32,System.UInt16,System.Double)">
            <summary>
               Adds a <see cref="T:TagLib.IFD.Entries.RationalIFDEntry"/> to the directory with tag
               given by <paramref name="entry_tag"/> and value given by <paramref name="value"/>
            </summary>
            <param name="directory">
               A <see cref="T:System.Int32"/> with the number of the directory
               to add the entry to.
            </param>
            <param name="entry_tag">
               A <see cref="T:System.UInt16"/> with the tag of the entry
            </param>
            <param name="value">
               A <see cref="T:System.Double"/> with the value to add. It must be possible to
               represent the value by a <see cref="T:TagLib.IFD.Entries.Rational"/>.
            </param>
        </member>
        <member name="M:TagLib.IFD.IFDStructure.SetDateTimeValue(System.Int32,System.UInt16,System.DateTime)">
            <summary>
               Adds a <see cref="T:TagLib.IFD.Entries.StringIFDEntry"/> to the directory with tag
               given by <paramref name="entry_tag"/> and value given by <paramref name="value"/>.
               The value is stored as a date string according to the Exif specification.
            </summary>
            <param name="directory">
               A <see cref="T:System.Int32"/> with the number of the directory
               to add the entry to.
            </param>
            <param name="entry_tag">
               A <see cref="T:System.UInt16"/> with the tag of the entry
            </param>
            <param name="value">
               A <see cref="T:System.DateTime"/> with the value to add.
            </param>
        </member>
        <member name="T:TagLib.IFD.IFDTag">
            <summary>
               Contains the metadata for one IFD (Image File Directory).
            </summary>
        </member>
        <member name="F:TagLib.IFD.IFDTag.exif_ifd">
            <summary>
               A reference to the Exif IFD (which can be found by following the
               pointer in IFD0, ExifIFD tag). This variable should not be used
               directly, use the <see cref="P:TagLib.IFD.IFDTag.ExifIFD"/> property instead.
            </summary>
        </member>
        <member name="F:TagLib.IFD.IFDTag.gps_ifd">
            <summary>
               A reference to the GPS IFD (which can be found by following the
               pointer in IFD0, GPSIFD tag). This variable should not be used
               directly, use the <see cref="P:TagLib.IFD.IFDTag.GPSIFD"/> property instead.
            </summary>
        </member>
        <member name="P:TagLib.IFD.IFDTag.Structure">
            <value>
               The IFD structure referenced by the current instance
            </value>
        </member>
        <member name="P:TagLib.IFD.IFDTag.ExifIFD">
            <summary>
               The Exif IFD. Will create one if the file doesn't alread have it.
            </summary>
            <remarks>
               <para>Note how this also creates an empty IFD for exif, even if
               you don't set a value. That's okay, empty nested IFDs get ignored
               when rendering.</para>
            </remarks>
        </member>
        <member name="P:TagLib.IFD.IFDTag.GPSIFD">
            <summary>
               The GPS IFD. Will create one if the file doesn't alread have it.
            </summary>
            <remarks>
               <para>Note how this also creates an empty IFD for GPS, even if
               you don't set a value. That's okay, empty nested IFDs get ignored
               when rendering.</para>
            </remarks>
        </member>
        <member name="P:TagLib.IFD.IFDTag.TagTypes">
            <summary>
               Gets the tag types contained in the current instance.
            </summary>
            <value>
               Always <see cref="F:TagLib.TagTypes.TiffIFD" />.
            </value>
        </member>
        <member name="M:TagLib.IFD.IFDTag.#ctor">
            <summary>
               Constructor. Creates an empty IFD tag. Can be populated manually, or via
               <see cref="T:TagLib.IFD.IFDReader"/>.
            </summary>
        </member>
        <member name="M:TagLib.IFD.IFDTag.Clear">
            <summary>
               Clears the values stored in the current instance.
            </summary>
        </member>
        <member name="P:TagLib.IFD.IFDTag.Comment">
            <summary>
               Gets or sets the comment for the image described
               by the current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> containing the comment of the
               current instace.
            </value>
        </member>
        <member name="P:TagLib.IFD.IFDTag.Copyright">
            <summary>
               Gets and sets the copyright information for the media
               represented by the current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> object containing the copyright
               information for the media represented by the current
               instance or <see langword="null" /> if no value present.
            </value>
        </member>
        <member name="P:TagLib.IFD.IFDTag.Creator">
            <summary>
               Gets or sets the creator of the image.
            </summary>
            <value>
               A <see cref="T:System.String" /> with the name of the creator.
            </value>
        </member>
        <member name="P:TagLib.IFD.IFDTag.Software">
            <summary>
               Gets or sets the software the image, the current instance
               belongs to, was created with.
            </summary>
            <value>
               A <see cref="T:System.String" /> containing the name of the
               software the current instace was created with.
            </value>
        </member>
        <member name="P:TagLib.IFD.IFDTag.DateTime">
            <summary>
               Gets or sets the time when the image, the current instance
               belongs to, was taken.
            </summary>
            <value>
               A <see cref="T:System.Nullable"/> with the time the image was taken.
            </value>
        </member>
        <member name="P:TagLib.IFD.IFDTag.DateTimeOriginal">
            <summary>
               The time of capturing.
            </summary>
            <value>
               A <see cref="T:System.Nullable"/> with the time of capturing.
            </value>
        </member>
        <member name="P:TagLib.IFD.IFDTag.DateTimeDigitized">
            <summary>
               The time of digitization.
            </summary>
            <value>
               A <see cref="T:System.Nullable"/> with the time of digitization.
            </value>
        </member>
        <member name="P:TagLib.IFD.IFDTag.Latitude">
            <summary>
               Gets or sets the latitude of the GPS coordinate the current
               image was taken.
            </summary>
            <value>
               A <see cref="T:System.Nullable"/> with the latitude ranging from -90.0
               to +90.0 degrees.
            </value>
        </member>
        <member name="P:TagLib.IFD.IFDTag.Longitude">
            <summary>
               Gets or sets the longitude of the GPS coordinate the current
               image was taken.
            </summary>
            <value>
               A <see cref="T:System.Nullable"/> with the longitude ranging from -180.0
               to +180.0 degrees.
            </value>
        </member>
        <member name="P:TagLib.IFD.IFDTag.Altitude">
            <summary>
               Gets or sets the altitude of the GPS coordinate the current
               image was taken. The unit is meter.
            </summary>
            <value>
               A <see cref="T:System.Nullable"/> with the altitude. A positive value
               is above sea level, a negative one below sea level. The unit is meter.
            </value>
        </member>
        <member name="P:TagLib.IFD.IFDTag.ExposureTime">
            <summary>
               Gets the exposure time the image, the current instance belongs
               to, was taken with.
            </summary>
            <value>
               A <see cref="T:System.Nullable"/> with the exposure time in seconds.
            </value>
        </member>
        <member name="P:TagLib.IFD.IFDTag.FNumber">
            <summary>
               Gets the FNumber the image, the current instance belongs
               to, was taken with.
            </summary>
            <value>
               A <see cref="T:System.Nullable"/> with the FNumber.
            </value>
        </member>
        <member name="P:TagLib.IFD.IFDTag.ISOSpeedRatings">
            <summary>
               Gets the ISO speed the image, the current instance belongs
               to, was taken with.
            </summary>
            <value>
               A <see cref="T:System.Nullable"/> with the ISO speed as defined in ISO 12232.
            </value>
        </member>
        <member name="P:TagLib.IFD.IFDTag.FocalLength">
            <summary>
               Gets the focal length the image, the current instance belongs
               to, was taken with.
            </summary>
            <value>
               A <see cref="T:System.Nullable"/> with the focal length in millimeters.
            </value>
        </member>
        <member name="P:TagLib.IFD.IFDTag.FocalLengthIn35mmFilm">
            <summary>
               Gets the focal length the image, the current instance belongs
               to, was taken with, assuming a 35mm film camera.
            </summary>
            <value>
               A <see cref="T:System.Nullable"/> with the focal length in 35mm equivalent in millimeters.
            </value>
        </member>
        <member name="P:TagLib.IFD.IFDTag.Orientation">
            <summary>
               Gets or sets the orientation of the image described
               by the current instance.
            </summary>
            <value>
               A <see cref="T:TagLib.Image.ImageOrientation" /> containing the orientation of the
               image
            </value>
        </member>
        <member name="P:TagLib.IFD.IFDTag.Make">
            <summary>
               Gets the manufacture of the recording equipment the image, the
               current instance belongs to, was taken with.
            </summary>
            <value>
               A <see cref="T:System.String" /> with the manufacture name.
            </value>
        </member>
        <member name="P:TagLib.IFD.IFDTag.Model">
            <summary>
               Gets the model name of the recording equipment the image, the
               current instance belongs to, was taken with.
            </summary>
            <value>
               A <see cref="T:System.String" /> with the model name.
            </value>
        </member>
        <member name="M:TagLib.IFD.IFDTag.InitGpsDirectory">
            <summary>
               Initilazies the GPS IFD with some basic entries.
            </summary>
        </member>
        <member name="M:TagLib.IFD.IFDTag.DegreeToRationals(System.Double)">
            <summary>
               Converts a given (positive) angle value to three rationals like they
               are used to store an angle for GPS data.
            </summary>
            <param name="angle">
               A <see cref="T:System.Double"/> between 0.0d and 180.0d with the angle
               in degrees
            </param>
            <returns>
               A <see cref="T:TagLib.IFD.Entries.Rational"/> representing the same angle by degree, minutes
               and seconds of the angle.
            </returns>
        </member>
        <member name="T:TagLib.IFD.Makernotes.Nikon3MakernoteReader">
            <summary>
                This class contains Nikon3 makernote specific reading logic.
            </summary>
        </member>
        <member name="M:TagLib.IFD.Makernotes.Nikon3MakernoteReader.#ctor(TagLib.File,System.Boolean,TagLib.IFD.IFDStructure,System.Int64,System.UInt32,System.UInt32)">
            <summary>
               Constructor. Reads an IFD from given file, using the given endianness.
            </summary>
            <param name="file">
               A <see cref="T:TagLib.File"/> to read from.
            </param>
            <param name="is_bigendian">
                A <see cref="T:System.Boolean"/>, it must be true, if the data of the IFD should be
                read as bigendian, otherwise false.
            </param>
            <param name="structure">
               A <see cref="T:TagLib.IFD.IFDStructure"/> that will be populated.
            </param>
            <param name="base_offset">
                A <see cref="T:System.Int64"/> value describing the base were the IFD offsets
                refer to. E.g. in Jpegs the IFD are located in an Segment and the offsets
                inside the IFD refer from the beginning of this segment. So <paramref
                name="base_offset"/> must contain the beginning of the segment.
            </param>
            <param name="ifd_offset">
                A <see cref="T:System.UInt32"/> value with the beginning of the IFD relative to
                <paramref name="base_offset"/>.
            </param>
            <param name="max_offset">
            	A <see cref="T:System.UInt32"/> value with maximal possible offset. This is to limit
                the size of the possible data;
            </param>
        </member>
        <member name="M:TagLib.IFD.Makernotes.Nikon3MakernoteReader.ParseIFDEntry(System.UInt16,System.UInt16,System.UInt32,System.Int64,System.UInt32)">
            <summary>
               Try to parse the given IFD entry, used to discover format-specific entries.
            </summary>
            <param name="tag">
               A <see cref="T:System.UInt16"/> with the tag of the entry.
            </param>
            <param name="type">
               A <see cref="T:System.UInt16"/> with the type of the entry.
            </param>
            <param name="count">
               A <see cref="T:System.UInt32"/> with the data count of the entry.
            </param>
            <param name="base_offset">
               A <see cref="T:System.Int64"/> with the base offset which every offsets in the
               IFD are relative to.
            </param>
            <param name="offset">
               A <see cref="T:System.UInt32"/> with the offset of the entry.
            </param>
            <returns>
               A <see cref="T:TagLib.IFD.IFDEntry"/> with the given parameters, or null if none was parsed, after
               which the normal TIFF parsing is used.
            </returns>
        </member>
        <member name="T:TagLib.IFD.Tags.CanonFileInfoEntryTag">
            <summary>
               Label tags for Canon File Info.
               Based on http://www.exiv2.org/tags-canon.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.CanonFileInfoEntryTag.FileNumber">
            <summary>
               File Number. (Hex: 0X0001)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.CanonFileInfoEntryTag.BracketMode">
            <summary>
               Bracket Mode. (Hex: 0X0003)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.CanonFileInfoEntryTag.BracketValue">
            <summary>
               Bracket Value. (Hex: 0X0004)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.CanonFileInfoEntryTag.BracketShotNumber">
            <summary>
               Bracket Shot Number. (Hex: 0X0005)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.CanonFileInfoEntryTag.RawJpgQuality">
            <summary>
               Raw Jpg Quality. (Hex: 0X0006)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.CanonFileInfoEntryTag.RawJpgSize">
            <summary>
               Raw Jpg Size. (Hex: 0X0007)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.CanonFileInfoEntryTag.NoiseReduction">
            <summary>
               Noise Reduction. (Hex: 0X0008)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.CanonFileInfoEntryTag.WBBracketMode">
            <summary>
               WB Bracket Mode. (Hex: 0X0009)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.CanonFileInfoEntryTag.WBBracketValueAB">
            <summary>
               WB Bracket Value AB. (Hex: 0X000C)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.CanonFileInfoEntryTag.WBBracketValueGM">
            <summary>
               WB Bracket Value GM. (Hex: 0X000D)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.CanonFileInfoEntryTag.FilterEffect">
            <summary>
               Filter Effect. (Hex: 0X000E)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.CanonFileInfoEntryTag.ToningEffect">
            <summary>
               Toning Effect. (Hex: 0X000F)
            </summary>
        </member>
        <member name="T:TagLib.IFD.Tags.CanonMakerNoteEntryTag">
            <summary>
               Label tags for Canon Makernote.
               Based on http://www.burren.cx/david/canon.html and http://www.exiv2.org/tags-canon.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.CanonMakerNoteEntryTag.Unknown0">
            <summary>
               Unknown field at tag 0x0000. (Hex: 0x0000)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.CanonMakerNoteEntryTag.CameraSettings">
            <summary>
               Camera Settings. (Hex: 0x0001)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.CanonMakerNoteEntryTag.FocalLength">
            <summary>
               Focal Length. (Hex: 0x0002)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.CanonMakerNoteEntryTag.Unknown3">
            <summary>
               Unknown field at tag 0x0000. (Hex: 0x0003)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.CanonMakerNoteEntryTag.ShotInfo">
            <summary>
               Shot Information. (Hex: 0x0004)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.CanonMakerNoteEntryTag.Panorama">
            <summary>
               Panorama. (Hex: 0x0005)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.CanonMakerNoteEntryTag.ImageType">
            <summary>
               Image Type. (Hex: 0x0006)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.CanonMakerNoteEntryTag.FirmwareVersion">
            <summary>
               Firmware Version. (Hex: 0x0007)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.CanonMakerNoteEntryTag.ImageNumber">
            <summary>
               Image Number. (Hex: 0x0008)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.CanonMakerNoteEntryTag.OwnerName">
            <summary>
               Owner Name. (Hex: 0x0009)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.CanonMakerNoteEntryTag.SerialNumber">
            <summary>
               Serial Number. (Hex: 0x000C)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.CanonMakerNoteEntryTag.Unknown13">
            <summary>
               Unknown field at tag 0x0000. (Hex: 0x000D)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.CanonMakerNoteEntryTag.CustomFunctions">
            <summary>
               Custom Functions. (Hex: 0x000F)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.CanonMakerNoteEntryTag.ModelID">
            <summary>
               Model ID. (Hex: 0x0010)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.CanonMakerNoteEntryTag.PictureInfo">
            <summary>
               Picture Info. (Hex: 0x0012)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.CanonMakerNoteEntryTag.SerialNumberFormat">
            <summary>
               Serial Number Format. (Hex: 0x0015)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.CanonMakerNoteEntryTag.CanonFileInfo">
            <summary>
               Canon File Info. (Hex: 0x0093)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.CanonMakerNoteEntryTag.LensModel">
            <summary>
               Lens Model. (Hex: 0x0095)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.CanonMakerNoteEntryTag.SerialInfo">
            <summary>
               Serial Info. (Hex: 0x0096)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.CanonMakerNoteEntryTag.ProcessingInfo">
            <summary>
               Processing Info. (Hex: 0x00A0)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.CanonMakerNoteEntryTag.WhiteBalanceTable">
            <summary>
               White Balance Table. (Hex: 0x00A9)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.CanonMakerNoteEntryTag.MeasuredColor">
            <summary>
               Measured Color. (Hex: 0x00AA)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.CanonMakerNoteEntryTag.ColorSpace">
            <summary>
               Color Space. (Hex: 0x00B4)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.CanonMakerNoteEntryTag.SensorInfo">
            <summary>
               Sensor Info. (Hex: 0x00E0)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.CanonMakerNoteEntryTag.BlackLevel">
            <summary>
               Black Level. (Hex: 0x4008)
            </summary>
        </member>
        <member name="T:TagLib.IFD.Tags.CanonPictureInfoEntryTag">
            <summary>
               Label tags for Canon Picture Info.
               Based on http://www.exiv2.org/tags-canon.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.CanonPictureInfoEntryTag.ImageWidth">
            <summary>
               Image width. (Hex: 0X0002)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.CanonPictureInfoEntryTag.ImageHeight">
            <summary>
               Image height. (Hex: 0X0003)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.CanonPictureInfoEntryTag.ImageWidthAsShot">
            <summary>
               Image width (as shot). (Hex: 0X0004)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.CanonPictureInfoEntryTag.ImageHeightAsShot">
            <summary>
               Image height (as shot). (Hex: 0X0005)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.CanonPictureInfoEntryTag.AFPointsUsed">
            <summary>
               AF points used. (Hex: 0X0016)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.CanonPictureInfoEntryTag.AFPointsUsed20D">
            <summary>
               AF points used (20D). (Hex: 0X001A)
            </summary>
        </member>
        <member name="T:TagLib.IFD.Tags.ExifEntryTag">
            <summary>
               Entry tags occuring in the Exif IFD
               The complete overview can be obtained at:
               http://www.awaresystems.be/imaging/tiff.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.ExifEntryTag.CFARepeatPatternDim">
            <summary>
                Contains two values representing the minimum rows and columns
                to define the repeating patterns of the color filter array.
                (Hex: 0x828D)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.ExifEntryTag.CFAPattern">
            <summary>
                Contains two values representing the minimum rows and columns
                to define the repeating patterns of the color filter array.
                (Hex: 0x828E)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.ExifEntryTag.ExposureTime">
            <summary>
                Exposure time, given in seconds. (Hex: 0x829A)
                http://www.awaresystems.be/imaging/tiff/tifftags/privateifd/exif/exposuretime.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.ExifEntryTag.FNumber">
            <summary>
                The F number. (Hex: 0x829D)
                http://www.awaresystems.be/imaging/tiff/tifftags/privateifd/exif/fnumber.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.ExifEntryTag.ExposureProgram">
            <summary>
                The class of the program used by the camera to set exposure when the picture is taken. (Hex: 0x8822)
                http://www.awaresystems.be/imaging/tiff/tifftags/privateifd/exif/exposureprogram.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.ExifEntryTag.SpectralSensitivity">
            <summary>
                Indicates the spectral sensitivity of each channel of the camera used. (Hex: 0x8824)
                http://www.awaresystems.be/imaging/tiff/tifftags/privateifd/exif/spectralsensitivity.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.ExifEntryTag.ISOSpeedRatings">
            <summary>
                Indicates the ISO Speed and ISO Latitude of the camera or input device as specified in ISO 12232. (Hex: 0x8827)
                http://www.awaresystems.be/imaging/tiff/tifftags/privateifd/exif/isospeedratings.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.ExifEntryTag.OECF">
            <summary>
                Indicates the Opto-Electric Conversion Function (OECF) specified in ISO 14524. (Hex: 0x8828)
                http://www.awaresystems.be/imaging/tiff/tifftags/privateifd/exif/oecf.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.ExifEntryTag.ExifVersion">
            <summary>
                The version of the supported Exif standard. (Hex: 0x9000)
                http://www.awaresystems.be/imaging/tiff/tifftags/privateifd/exif/exifversion.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.ExifEntryTag.DateTimeOriginal">
            <summary>
                The date and time when the original image data was generated. (Hex: 0x9003)
                http://www.awaresystems.be/imaging/tiff/tifftags/privateifd/exif/datetimeoriginal.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.ExifEntryTag.DateTimeDigitized">
            <summary>
                The date and time when the image was stored as digital data. (Hex: 0x9004)
                http://www.awaresystems.be/imaging/tiff/tifftags/privateifd/exif/datetimedigitized.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.ExifEntryTag.ComponentsConfiguration">
            <summary>
                Specific to compressed data; specifies the channels and complements PhotometricInterpretation (Hex: 0x9101)
                http://www.awaresystems.be/imaging/tiff/tifftags/privateifd/exif/componentsconfiguration.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.ExifEntryTag.CompressedBitsPerPixel">
            <summary>
                Specific to compressed data; states the compressed bits per pixel. (Hex: 0x9102)
                http://www.awaresystems.be/imaging/tiff/tifftags/privateifd/exif/compressedbitsperpixel.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.ExifEntryTag.ShutterSpeedValue">
            <summary>
                Shutter speed. (Hex: 0x9201)
                http://www.awaresystems.be/imaging/tiff/tifftags/privateifd/exif/shutterspeedvalue.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.ExifEntryTag.ApertureValue">
            <summary>
                The lens aperture. (Hex: 0x9202)
                http://www.awaresystems.be/imaging/tiff/tifftags/privateifd/exif/aperturevalue.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.ExifEntryTag.BrightnessValue">
            <summary>
                The value of brightness. (Hex: 0x9203)
                http://www.awaresystems.be/imaging/tiff/tifftags/privateifd/exif/brightnessvalue.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.ExifEntryTag.ExposureBiasValue">
            <summary>
                The exposure bias. (Hex: 0x9204)
                http://www.awaresystems.be/imaging/tiff/tifftags/privateifd/exif/exposurebiasvalue.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.ExifEntryTag.MaxApertureValue">
            <summary>
                The smallest F number of the lens. (Hex: 0x9205)
                http://www.awaresystems.be/imaging/tiff/tifftags/privateifd/exif/maxaperturevalue.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.ExifEntryTag.SubjectDistance">
            <summary>
                The distance to the subject, given in meters. (Hex: 0x9206)
                http://www.awaresystems.be/imaging/tiff/tifftags/privateifd/exif/subjectdistance.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.ExifEntryTag.MeteringMode">
            <summary>
                The metering mode. (Hex: 0x9207)
                http://www.awaresystems.be/imaging/tiff/tifftags/privateifd/exif/meteringmode.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.ExifEntryTag.LightSource">
            <summary>
                The kind of light source. (Hex: 0x9208)
                http://www.awaresystems.be/imaging/tiff/tifftags/privateifd/exif/lightsource.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.ExifEntryTag.Flash">
            <summary>
                Indicates the status of flash when the image was shot. (Hex: 0x9209)
                http://www.awaresystems.be/imaging/tiff/tifftags/privateifd/exif/flash.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.ExifEntryTag.FocalLength">
            <summary>
                The actual focal length of the lens, in mm. (Hex: 0x920A)
                http://www.awaresystems.be/imaging/tiff/tifftags/privateifd/exif/focallength.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.ExifEntryTag.SubjectArea">
            <summary>
                Indicates the location and area of the main subject in the overall scene. (Hex: 0x9214)
                http://www.awaresystems.be/imaging/tiff/tifftags/privateifd/exif/subjectarea.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.ExifEntryTag.MakerNote">
            <summary>
                Manufacturer specific information. (Hex: 0x927C)
                http://www.awaresystems.be/imaging/tiff/tifftags/privateifd/exif/makernote.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.ExifEntryTag.UserComment">
            <summary>
                Keywords or comments on the image; complements ImageDescription. (Hex: 0x9286)
                http://www.awaresystems.be/imaging/tiff/tifftags/privateifd/exif/usercomment.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.ExifEntryTag.SubsecTime">
            <summary>
                A tag used to record fractions of seconds for the DateTime tag. (Hex: 0x9290)
                http://www.awaresystems.be/imaging/tiff/tifftags/privateifd/exif/subsectime.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.ExifEntryTag.SubsecTimeOriginal">
            <summary>
                A tag used to record fractions of seconds for the DateTimeOriginal tag. (Hex: 0x9291)
                http://www.awaresystems.be/imaging/tiff/tifftags/privateifd/exif/subsectimeoriginal.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.ExifEntryTag.SubsecTimeDigitized">
            <summary>
                A tag used to record fractions of seconds for the DateTimeDigitized tag. (Hex: 0x9292)
                http://www.awaresystems.be/imaging/tiff/tifftags/privateifd/exif/subsectimedigitized.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.ExifEntryTag.FlashpixVersion">
            <summary>
                The Flashpix format version supported by a FPXR file. (Hex: 0xA000)
                http://www.awaresystems.be/imaging/tiff/tifftags/privateifd/exif/flashpixversion.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.ExifEntryTag.ColorSpace">
            <summary>
                The color space information tag is always recorded as the color space specifier. (Hex: 0xA001)
                http://www.awaresystems.be/imaging/tiff/tifftags/privateifd/exif/colorspace.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.ExifEntryTag.PixelXDimension">
            <summary>
                Specific to compressed data; the valid width of the meaningful image. (Hex: 0xA002)
                http://www.awaresystems.be/imaging/tiff/tifftags/privateifd/exif/pixelxdimension.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.ExifEntryTag.PixelYDimension">
            <summary>
                Specific to compressed data; the valid height of the meaningful image. (Hex: 0xA003)
                http://www.awaresystems.be/imaging/tiff/tifftags/privateifd/exif/pixelydimension.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.ExifEntryTag.RelatedSoundFile">
            <summary>
                Used to record the name of an audio file related to the image data. (Hex: 0xA004)
                http://www.awaresystems.be/imaging/tiff/tifftags/privateifd/exif/relatedsoundfile.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.ExifEntryTag.FlashEnergy">
            <summary>
                Indicates the strobe energy at the time the image is captured, as measured in Beam Candle Power Seconds (Hex: 0xA20B)
                http://www.awaresystems.be/imaging/tiff/tifftags/privateifd/exif/flashenergy.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.ExifEntryTag.SpatialFrequencyResponse">
            <summary>
                Records the camera or input device spatial frequency table and SFR values in the direction of image width, image height, and diagonal direction, as specified in ISO 12233. (Hex: 0xA20C)
                http://www.awaresystems.be/imaging/tiff/tifftags/privateifd/exif/spatialfrequencyresponse.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.ExifEntryTag.FocalPlaneXResolution">
            <summary>
                Indicates the number of pixels in the image width (X) direction per FocalPlaneResolutionUnit on the camera focal plane. (Hex: 0xA20E)
                http://www.awaresystems.be/imaging/tiff/tifftags/privateifd/exif/focalplanexresolution.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.ExifEntryTag.FocalPlaneYResolution">
            <summary>
                Indicates the number of pixels in the image height (Y) direction per FocalPlaneResolutionUnit on the camera focal plane. (Hex: 0xA20F)
                http://www.awaresystems.be/imaging/tiff/tifftags/privateifd/exif/focalplaneyresolution.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.ExifEntryTag.FocalPlaneResolutionUnit">
            <summary>
                Indicates the unit for measuring FocalPlaneXResolution and FocalPlaneYResolution. (Hex: 0xA210)
                http://www.awaresystems.be/imaging/tiff/tifftags/privateifd/exif/focalplaneresolutionunit.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.ExifEntryTag.SubjectLocation">
            <summary>
                Indicates the location of the main subject in the scene. (Hex: 0xA214)
                http://www.awaresystems.be/imaging/tiff/tifftags/privateifd/exif/subjectlocation.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.ExifEntryTag.ExposureIndex">
            <summary>
                Indicates the exposure index selected on the camera or input device at the time the image is captured. (Hex: 0xA215)
                http://www.awaresystems.be/imaging/tiff/tifftags/privateifd/exif/exposureindex.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.ExifEntryTag.SensingMethod">
            <summary>
                Indicates the image sensor type on the camera or input device. (Hex: 0xA217)
                http://www.awaresystems.be/imaging/tiff/tifftags/privateifd/exif/sensingmethod.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.ExifEntryTag.FileSource">
            <summary>
                Indicates the image source. (Hex: 0xA300)
                http://www.awaresystems.be/imaging/tiff/tifftags/privateifd/exif/filesource.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.ExifEntryTag.SceneType">
            <summary>
                Indicates the type of scene. (Hex: 0xA301)
                http://www.awaresystems.be/imaging/tiff/tifftags/privateifd/exif/scenetype.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.ExifEntryTag.CFAPattern2">
            <summary>
                Indicates the color filter array (CFA) geometric pattern of the image sensor when a one-chip color area sensor is used. (Hex: 0xA302)
                http://www.awaresystems.be/imaging/tiff/tifftags/privateifd/exif/cfapattern.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.ExifEntryTag.CustomRendered">
            <summary>
                Indicates the use of special processing on image data, such as rendering geared to output. (Hex: 0xA401)
                http://www.awaresystems.be/imaging/tiff/tifftags/privateifd/exif/customrendered.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.ExifEntryTag.ExposureMode">
            <summary>
                Indicates the exposure mode set when the image was shot. (Hex: 0xA402)
                http://www.awaresystems.be/imaging/tiff/tifftags/privateifd/exif/exposuremode.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.ExifEntryTag.WhiteBalance">
            <summary>
                Indicates the white balance mode set when the image was shot. (Hex: 0xA403)
                http://www.awaresystems.be/imaging/tiff/tifftags/privateifd/exif/whitebalance.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.ExifEntryTag.DigitalZoomRatio">
            <summary>
                Indicates the digital zoom ratio when the image was shot. (Hex: 0xA404)
                http://www.awaresystems.be/imaging/tiff/tifftags/privateifd/exif/digitalzoomratio.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.ExifEntryTag.FocalLengthIn35mmFilm">
            <summary>
                Indicates the equivalent focal length assuming a 35mm film camera, in mm. (Hex: 0xA405)
                http://www.awaresystems.be/imaging/tiff/tifftags/privateifd/exif/focallengthin35mmfilm.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.ExifEntryTag.SceneCaptureType">
            <summary>
                Indicates the type of scene that was shot. (Hex: 0xA406)
                http://www.awaresystems.be/imaging/tiff/tifftags/privateifd/exif/scenecapturetype.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.ExifEntryTag.GainControl">
            <summary>
                Indicates the degree of overall image gain adjustment. (Hex: 0xA407)
                http://www.awaresystems.be/imaging/tiff/tifftags/privateifd/exif/gaincontrol.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.ExifEntryTag.Contrast">
            <summary>
                Indicates the direction of contrast processing applied by the camera when the image was shot. (Hex: 0xA408)
                http://www.awaresystems.be/imaging/tiff/tifftags/privateifd/exif/contrast.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.ExifEntryTag.Saturation">
            <summary>
                Indicates the direction of saturation processing applied by the camera when the image was shot. (Hex: 0xA409)
                http://www.awaresystems.be/imaging/tiff/tifftags/privateifd/exif/saturation.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.ExifEntryTag.Sharpness">
            <summary>
                Indicates the direction of sharpness processing applied by the camera when the image was shot. (Hex: 0xA40A)
                http://www.awaresystems.be/imaging/tiff/tifftags/privateifd/exif/sharpness.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.ExifEntryTag.DeviceSettingDescription">
            <summary>
                This tag indicates information on the picture-taking conditions of a particular camera model. (Hex: 0xA40B)
                http://www.awaresystems.be/imaging/tiff/tifftags/privateifd/exif/devicesettingdescription.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.ExifEntryTag.SubjectDistanceRange">
            <summary>
                Indicates the distance to the subject. (Hex: 0xA40C)
                http://www.awaresystems.be/imaging/tiff/tifftags/privateifd/exif/subjectdistancerange.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.ExifEntryTag.ImageUniqueID">
            <summary>
                Indicates an identifier assigned uniquely to each image. (Hex: 0xA420)
                http://www.awaresystems.be/imaging/tiff/tifftags/privateifd/exif/imageuniqueid.html
            </summary>
        </member>
        <member name="T:TagLib.IFD.Tags.GPSEntryTag">
            <summary>
               Entry tags occuring in the GPS IFD
               The complete overview can be obtained at:
               http://www.awaresystems.be/imaging/tiff.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.GPSEntryTag.GPSVersionID">
            <summary>
                Indicates the version of GPSInfoIFD. (Hex: 0x0000)
                http://www.awaresystems.be/imaging/tiff/tifftags/privateifd/gps/gpsversionid.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.GPSEntryTag.GPSLatitudeRef">
            <summary>
                Indicates whether the latitude is north or south latitude. (Hex: 0x0001)
                http://www.awaresystems.be/imaging/tiff/tifftags/privateifd/gps/gpslatituderef.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.GPSEntryTag.GPSLatitude">
            <summary>
                Indicates the latitude. (Hex: 0x0002)
                http://www.awaresystems.be/imaging/tiff/tifftags/privateifd/gps/gpslatitude.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.GPSEntryTag.GPSLongitudeRef">
            <summary>
                Indicates whether the longitude is east or west longitude. (Hex: 0x0003)
                http://www.awaresystems.be/imaging/tiff/tifftags/privateifd/gps/gpslongituderef.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.GPSEntryTag.GPSLongitude">
            <summary>
                Indicates the longitude. (Hex: 0x0004)
                http://www.awaresystems.be/imaging/tiff/tifftags/privateifd/gps/gpslongitude.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.GPSEntryTag.GPSAltitudeRef">
            <summary>
                Indicates the altitude used as the reference altitude. (Hex: 0x0005)
                http://www.awaresystems.be/imaging/tiff/tifftags/privateifd/gps/gpsaltituderef.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.GPSEntryTag.GPSAltitude">
            <summary>
                Indicates the altitude based on the reference in GPSAltitudeRef. (Hex: 0x0006)
                http://www.awaresystems.be/imaging/tiff/tifftags/privateifd/gps/gpsaltitude.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.GPSEntryTag.GPSTimeStamp">
            <summary>
                Indicates the time as UTC (Coordinated Universal Time). (Hex: 0x0007)
                http://www.awaresystems.be/imaging/tiff/tifftags/privateifd/gps/gpstimestamp.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.GPSEntryTag.GPSSatellites">
            <summary>
                Indicates the GPS satellites used for measurements. (Hex: 0x0008)
                http://www.awaresystems.be/imaging/tiff/tifftags/privateifd/gps/gpssatellites.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.GPSEntryTag.GPSStatus">
            <summary>
                Indicates the status of the GPS receiver when the image is recorded. (Hex: 0x0009)
                http://www.awaresystems.be/imaging/tiff/tifftags/privateifd/gps/gpsstatus.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.GPSEntryTag.GPSMeasureMode">
            <summary>
                Indicates the GPS measurement mode. (Hex: 0x000A)
                http://www.awaresystems.be/imaging/tiff/tifftags/privateifd/gps/gpsmeasuremode.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.GPSEntryTag.GPSDOP">
            <summary>
                Indicates the GPS DOP (data degree of precision). (Hex: 0x000B)
                http://www.awaresystems.be/imaging/tiff/tifftags/privateifd/gps/gpsdop.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.GPSEntryTag.GPSSpeedRef">
            <summary>
                Indicates the unit used to express the GPS receiver speed of movement. (Hex: 0x000C)
                http://www.awaresystems.be/imaging/tiff/tifftags/privateifd/gps/gpsspeedref.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.GPSEntryTag.GPSSpeed">
            <summary>
                Indicates the speed of GPS receiver movement. (Hex: 0x000D)
                http://www.awaresystems.be/imaging/tiff/tifftags/privateifd/gps/gpsspeed.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.GPSEntryTag.GPSTrackRef">
            <summary>
                Indicates the reference for giving the direction of GPS receiver movement. (Hex: 0x000E)
                http://www.awaresystems.be/imaging/tiff/tifftags/privateifd/gps/gpstrackref.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.GPSEntryTag.GPSTrack">
            <summary>
                Indicates the direction of GPS receiver movement. (Hex: 0x000F)
                http://www.awaresystems.be/imaging/tiff/tifftags/privateifd/gps/gpstrack.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.GPSEntryTag.GPSImgDirectionRef">
            <summary>
                Indicates the reference for giving the direction of the image when it is captured. (Hex: 0x0010)
                http://www.awaresystems.be/imaging/tiff/tifftags/privateifd/gps/gpsimgdirectionref.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.GPSEntryTag.GPSImgDirection">
            <summary>
                Indicates the direction of the image when it was captured. (Hex: 0x0011)
                http://www.awaresystems.be/imaging/tiff/tifftags/privateifd/gps/gpsimgdirection.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.GPSEntryTag.GPSMapDatum">
            <summary>
                Indicates the geodetic survey data used by the GPS receiver. (Hex: 0x0012)
                http://www.awaresystems.be/imaging/tiff/tifftags/privateifd/gps/gpsmapdatum.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.GPSEntryTag.GPSDestLatitudeRef">
            <summary>
                Indicates whether the latitude of the destination point is north or south latitude. (Hex: 0x0013)
                http://www.awaresystems.be/imaging/tiff/tifftags/privateifd/gps/gpsdestlatituderef.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.GPSEntryTag.GPSDestLatitude">
            <summary>
                Indicates the latitude of the destination point. (Hex: 0x0014)
                http://www.awaresystems.be/imaging/tiff/tifftags/privateifd/gps/gpsdestlatitude.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.GPSEntryTag.GPSDestLongitudeRef">
            <summary>
                Indicates whether the longitude of the destination point is east or west longitude. (Hex: 0x0015)
                http://www.awaresystems.be/imaging/tiff/tifftags/privateifd/gps/gpsdestlongituderef.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.GPSEntryTag.GPSDestLongitude">
            <summary>
                Indicates the longitude of the destination point. (Hex: 0x0016)
                http://www.awaresystems.be/imaging/tiff/tifftags/privateifd/gps/gpsdestlongitude.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.GPSEntryTag.GPSDestBearingRef">
            <summary>
                Indicates the reference used for giving the bearing to the destination point. (Hex: 0x0017)
                http://www.awaresystems.be/imaging/tiff/tifftags/privateifd/gps/gpsdestbearingref.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.GPSEntryTag.GPSDestBearing">
            <summary>
                Indicates the bearing to the destination point. (Hex: 0x0018)
                http://www.awaresystems.be/imaging/tiff/tifftags/privateifd/gps/gpsdestbearing.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.GPSEntryTag.GPSDestDistanceRef">
            <summary>
                Indicates the unit used to express the distance to the destination point. (Hex: 0x0019)
                http://www.awaresystems.be/imaging/tiff/tifftags/privateifd/gps/gpsdestdistanceref.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.GPSEntryTag.GPSDestDistance">
            <summary>
                Indicates the distance to the destination point. (Hex: 0x001A)
                http://www.awaresystems.be/imaging/tiff/tifftags/privateifd/gps/gpsdestdistance.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.GPSEntryTag.GPSProcessingMethod">
            <summary>
                A character string recording the name of the method used for location finding. (Hex: 0x001B)
                http://www.awaresystems.be/imaging/tiff/tifftags/privateifd/gps/gpsprocessingmethod.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.GPSEntryTag.GPSAreaInformation">
            <summary>
                A character string recording the name of the GPS area. (Hex: 0x001C)
                http://www.awaresystems.be/imaging/tiff/tifftags/privateifd/gps/gpsareainformation.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.GPSEntryTag.GPSDateStamp">
            <summary>
                A character string recording date and time information relative to UTC (Coordinated Universal Time). (Hex: 0x001D)
                http://www.awaresystems.be/imaging/tiff/tifftags/privateifd/gps/gpsdatestamp.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.GPSEntryTag.GPSDifferential">
            <summary>
                Indicates whether differential correction is applied to the GPS receiver. (Hex: 0x001E)
                http://www.awaresystems.be/imaging/tiff/tifftags/privateifd/gps/gpsdifferential.html
            </summary>
        </member>
        <member name="T:TagLib.IFD.Tags.IFDEntryTag">
            <summary>
               Entry tags occuring in a Tiff IFD, or IFD0 for Jpegs. They are mostly
               defined by the TIFF specification:
               http://partners.adobe.com/public/developer/en/tiff/TIFF6.pdf
               The complete overview can be obtained at:
               http://www.awaresystems.be/imaging/tiff.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.IFDEntryTag.NewSubfileType">
            <summary>
                A general indication of the kind of data contained in this subfile. (Hex: 0x00FE)
                http://www.awaresystems.be/imaging/tiff/tifftags/newsubfiletype.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.IFDEntryTag.SubfileType">
            <summary>
                A general indication of the kind of data contained in this subfile. (Hex: 0x00FF)
                http://www.awaresystems.be/imaging/tiff/tifftags/subfiletype.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.IFDEntryTag.ImageWidth">
            <summary>
                The number of columns in the image, i.e., the number of pixels per row. (Hex: 0x0100)
                http://www.awaresystems.be/imaging/tiff/tifftags/imagewidth.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.IFDEntryTag.ImageLength">
            <summary>
                The number of rows of pixels in the image. (Hex: 0x0101)
                http://www.awaresystems.be/imaging/tiff/tifftags/imagelength.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.IFDEntryTag.BitsPerSample">
            <summary>
                Number of bits per component. (Hex: 0x0102)
                http://www.awaresystems.be/imaging/tiff/tifftags/bitspersample.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.IFDEntryTag.Compression">
            <summary>
                Compression scheme used on the image data. (Hex: 0x0103)
                http://www.awaresystems.be/imaging/tiff/tifftags/compression.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.IFDEntryTag.PhotometricInterpretation">
            <summary>
                The color space of the image data. (Hex: 0x0106)
                http://www.awaresystems.be/imaging/tiff/tifftags/photometricinterpretation.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.IFDEntryTag.Threshholding">
            <summary>
                For black and white TIFF files that represent shades of gray, the technique used to convert from gray to black and white pixels. (Hex: 0x0107)
                http://www.awaresystems.be/imaging/tiff/tifftags/threshholding.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.IFDEntryTag.CellWidth">
            <summary>
                The width of the dithering or halftoning matrix used to create a dithered or halftoned bilevel file. (Hex: 0x0108)
                http://www.awaresystems.be/imaging/tiff/tifftags/cellwidth.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.IFDEntryTag.CellLength">
            <summary>
                The length of the dithering or halftoning matrix used to create a dithered or halftoned bilevel file. (Hex: 0x0109)
                http://www.awaresystems.be/imaging/tiff/tifftags/celllength.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.IFDEntryTag.FillOrder">
            <summary>
                The logical order of bits within a byte. (Hex: 0x010A)
                http://www.awaresystems.be/imaging/tiff/tifftags/fillorder.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.IFDEntryTag.DocumentName">
            <summary>
                The name of the document from which this image was scanned. (Hex: 0x010D)
                http://www.awaresystems.be/imaging/tiff/tifftags/documentname.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.IFDEntryTag.ImageDescription">
            <summary>
                A string that describes the subject of the image. (Hex: 0x010E)
                http://www.awaresystems.be/imaging/tiff/tifftags/imagedescription.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.IFDEntryTag.Make">
            <summary>
                The scanner manufacturer. (Hex: 0x010F)
                http://www.awaresystems.be/imaging/tiff/tifftags/make.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.IFDEntryTag.Model">
            <summary>
                The scanner model name or number. (Hex: 0x0110)
                http://www.awaresystems.be/imaging/tiff/tifftags/model.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.IFDEntryTag.StripOffsets">
            <summary>
                For each strip, the byte offset of that strip. (Hex: 0x0111)
                http://www.awaresystems.be/imaging/tiff/tifftags/stripoffsets.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.IFDEntryTag.Orientation">
            <summary>
                The orientation of the image with respect to the rows and columns. (Hex: 0x0112)
                http://www.awaresystems.be/imaging/tiff/tifftags/orientation.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.IFDEntryTag.SamplesPerPixel">
            <summary>
                The number of components per pixel. (Hex: 0x0115)
                http://www.awaresystems.be/imaging/tiff/tifftags/samplesperpixel.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.IFDEntryTag.RowsPerStrip">
            <summary>
                The number of rows per strip. (Hex: 0x0116)
                http://www.awaresystems.be/imaging/tiff/tifftags/rowsperstrip.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.IFDEntryTag.StripByteCounts">
            <summary>
                For each strip, the number of bytes in the strip after compression. (Hex: 0x0117)
                http://www.awaresystems.be/imaging/tiff/tifftags/stripbytecounts.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.IFDEntryTag.MinSampleValue">
            <summary>
                The minimum component value used. (Hex: 0x0118)
                http://www.awaresystems.be/imaging/tiff/tifftags/minsamplevalue.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.IFDEntryTag.MaxSampleValue">
            <summary>
                The maximum component value used. (Hex: 0x0119)
                http://www.awaresystems.be/imaging/tiff/tifftags/maxsamplevalue.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.IFDEntryTag.XResolution">
            <summary>
                The number of pixels per ResolutionUnit in the ImageWidth direction. (Hex: 0x011A)
                http://www.awaresystems.be/imaging/tiff/tifftags/xresolution.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.IFDEntryTag.YResolution">
            <summary>
                The number of pixels per ResolutionUnit in the ImageLength direction. (Hex: 0x011B)
                http://www.awaresystems.be/imaging/tiff/tifftags/yresolution.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.IFDEntryTag.PlanarConfiguration">
            <summary>
                How the components of each pixel are stored. (Hex: 0x011C)
                http://www.awaresystems.be/imaging/tiff/tifftags/planarconfiguration.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.IFDEntryTag.PageName">
            <summary>
                The name of the page from which this image was scanned. (Hex: 0x011D)
                http://www.awaresystems.be/imaging/tiff/tifftags/pagename.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.IFDEntryTag.XPosition">
            <summary>
                X position of the image. (Hex: 0x011E)
                http://www.awaresystems.be/imaging/tiff/tifftags/xposition.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.IFDEntryTag.YPosition">
            <summary>
                Y position of the image. (Hex: 0x011F)
                http://www.awaresystems.be/imaging/tiff/tifftags/yposition.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.IFDEntryTag.FreeOffsets">
            <summary>
                For each string of contiguous unused bytes in a TIFF file, the byte offset of the string. (Hex: 0x0120)
                http://www.awaresystems.be/imaging/tiff/tifftags/freeoffsets.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.IFDEntryTag.FreeByteCounts">
            <summary>
                For each string of contiguous unused bytes in a TIFF file, the number of bytes in the string. (Hex: 0x0121)
                http://www.awaresystems.be/imaging/tiff/tifftags/freebytecounts.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.IFDEntryTag.GrayResponseUnit">
            <summary>
                The precision of the information contained in the GrayResponseCurve. (Hex: 0x0122)
                http://www.awaresystems.be/imaging/tiff/tifftags/grayresponseunit.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.IFDEntryTag.GrayResponseCurve">
            <summary>
                For grayscale data, the optical density of each possible pixel value. (Hex: 0x0123)
                http://www.awaresystems.be/imaging/tiff/tifftags/grayresponsecurve.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.IFDEntryTag.T4Options">
            <summary>
                Options for Group 3 Fax compression (Hex: 0x0124)
                http://www.awaresystems.be/imaging/tiff/tifftags/t4options.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.IFDEntryTag.T6Options">
            <summary>
                Options for Group 4 Fax compression (Hex: 0x0125)
                http://www.awaresystems.be/imaging/tiff/tifftags/t6options.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.IFDEntryTag.ResolutionUnit">
            <summary>
                The unit of measurement for XResolution and YResolution. (Hex: 0x0128)
                http://www.awaresystems.be/imaging/tiff/tifftags/resolutionunit.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.IFDEntryTag.PageNumber">
            <summary>
                The page number of the page from which this image was scanned. (Hex: 0x0129)
                http://www.awaresystems.be/imaging/tiff/tifftags/pagenumber.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.IFDEntryTag.TransferFunction">
            <summary>
                Describes a transfer function for the image in tabular style. (Hex: 0x012D)
                http://www.awaresystems.be/imaging/tiff/tifftags/transferfunction.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.IFDEntryTag.Software">
            <summary>
                Name and version number of the software package(s) used to create the image. (Hex: 0x0131)
                http://www.awaresystems.be/imaging/tiff/tifftags/software.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.IFDEntryTag.DateTime">
            <summary>
                Date and time of image creation. (Hex: 0x0132)
                http://www.awaresystems.be/imaging/tiff/tifftags/datetime.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.IFDEntryTag.Artist">
            <summary>
                Person who created the image. (Hex: 0x013B)
                http://www.awaresystems.be/imaging/tiff/tifftags/artist.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.IFDEntryTag.HostComputer">
            <summary>
                The computer and/or operating system in use at the time of image creation. (Hex: 0x013C)
                http://www.awaresystems.be/imaging/tiff/tifftags/hostcomputer.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.IFDEntryTag.Predictor">
            <summary>
                A mathematical operator that is applied to the image data before an encoding scheme is applied. (Hex: 0x013D)
                http://www.awaresystems.be/imaging/tiff/tifftags/predictor.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.IFDEntryTag.WhitePoint">
            <summary>
                The chromaticity of the white point of the image. (Hex: 0x013E)
                http://www.awaresystems.be/imaging/tiff/tifftags/whitepoint.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.IFDEntryTag.PrimaryChromaticities">
            <summary>
                The chromaticities of the primaries of the image. (Hex: 0x013F)
                http://www.awaresystems.be/imaging/tiff/tifftags/primarychromaticities.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.IFDEntryTag.ColorMap">
            <summary>
                A color map for palette color images. (Hex: 0x0140)
                http://www.awaresystems.be/imaging/tiff/tifftags/colormap.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.IFDEntryTag.HalftoneHints">
            <summary>
                Conveys to the halftone function the range of gray levels within a colorimetrically-specified image that should retain tonal detail. (Hex: 0x0141)
                http://www.awaresystems.be/imaging/tiff/tifftags/halftonehints.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.IFDEntryTag.TileWidth">
            <summary>
                The tile width in pixels. This is the number of columns in each tile. (Hex: 0x0142)
                http://www.awaresystems.be/imaging/tiff/tifftags/tilewidth.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.IFDEntryTag.TileLength">
            <summary>
                The tile length (height) in pixels. This is the number of rows in each tile. (Hex: 0x0143)
                http://www.awaresystems.be/imaging/tiff/tifftags/tilelength.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.IFDEntryTag.TileOffsets">
            <summary>
                For each tile, the byte offset of that tile, as compressed and stored on disk. (Hex: 0x0144)
                http://www.awaresystems.be/imaging/tiff/tifftags/tileoffsets.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.IFDEntryTag.TileByteCounts">
            <summary>
                For each tile, the number of (compressed) bytes in that tile. (Hex: 0x0145)
                http://www.awaresystems.be/imaging/tiff/tifftags/tilebytecounts.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.IFDEntryTag.BadFaxLines">
            <summary>
                Used in the TIFF-F standard, denotes the number of 'bad' scan lines encountered by the facsimile device. (Hex: 0x0146)
                http://www.awaresystems.be/imaging/tiff/tifftags/badfaxlines.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.IFDEntryTag.CleanFaxData">
            <summary>
                Used in the TIFF-F standard, indicates if 'bad' lines encountered during reception are stored in the data, or if 'bad' lines have been replaced by the receiver. (Hex: 0x0147)
                http://www.awaresystems.be/imaging/tiff/tifftags/cleanfaxdata.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.IFDEntryTag.ConsecutiveBadFaxLines">
            <summary>
                Used in the TIFF-F standard, denotes the maximum number of consecutive 'bad' scanlines received. (Hex: 0x0148)
                http://www.awaresystems.be/imaging/tiff/tifftags/consecutivebadfaxlines.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.IFDEntryTag.SubIFDs">
            <summary>
                Offset to child IFDs. (Hex: 0x014A)
                http://www.awaresystems.be/imaging/tiff/tifftags/subifds.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.IFDEntryTag.InkSet">
            <summary>
                The set of inks used in a separated (PhotometricInterpretation=5) image. (Hex: 0x014C)
                http://www.awaresystems.be/imaging/tiff/tifftags/inkset.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.IFDEntryTag.InkNames">
            <summary>
                The name of each ink used in a separated image. (Hex: 0x014D)
                http://www.awaresystems.be/imaging/tiff/tifftags/inknames.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.IFDEntryTag.NumberOfInks">
            <summary>
                The number of inks. (Hex: 0x014E)
                http://www.awaresystems.be/imaging/tiff/tifftags/numberofinks.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.IFDEntryTag.DotRange">
            <summary>
                The component values that correspond to a 0% dot and 100% dot. (Hex: 0x0150)
                http://www.awaresystems.be/imaging/tiff/tifftags/dotrange.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.IFDEntryTag.TargetPrinter">
            <summary>
                A description of the printing environment for which this separation is intended. (Hex: 0x0151)
                http://www.awaresystems.be/imaging/tiff/tifftags/targetprinter.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.IFDEntryTag.ExtraSamples">
            <summary>
                Description of extra components. (Hex: 0x0152)
                http://www.awaresystems.be/imaging/tiff/tifftags/extrasamples.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.IFDEntryTag.SampleFormat">
            <summary>
                Specifies how to interpret each data sample in a pixel. (Hex: 0x0153)
                http://www.awaresystems.be/imaging/tiff/tifftags/sampleformat.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.IFDEntryTag.SMinSampleValue">
            <summary>
                Specifies the minimum sample value. (Hex: 0x0154)
                http://www.awaresystems.be/imaging/tiff/tifftags/sminsamplevalue.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.IFDEntryTag.SMaxSampleValue">
            <summary>
                Specifies the maximum sample value. (Hex: 0x0155)
                http://www.awaresystems.be/imaging/tiff/tifftags/smaxsamplevalue.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.IFDEntryTag.TransferRange">
            <summary>
                Expands the range of the TransferFunction. (Hex: 0x0156)
                http://www.awaresystems.be/imaging/tiff/tifftags/transferrange.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.IFDEntryTag.ClipPath">
            <summary>
                Mirrors the essentials of PostScript's path creation functionality. (Hex: 0x0157)
                http://www.awaresystems.be/imaging/tiff/tifftags/clippath.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.IFDEntryTag.XClipPathUnits">
            <summary>
                The number of units that span the width of the image, in terms of integer ClipPath coordinates. (Hex: 0x0158)
                http://www.awaresystems.be/imaging/tiff/tifftags/xclippathunits.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.IFDEntryTag.YClipPathUnits">
            <summary>
                The number of units that span the height of the image, in terms of integer ClipPath coordinates. (Hex: 0x0159)
                http://www.awaresystems.be/imaging/tiff/tifftags/yclippathunits.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.IFDEntryTag.Indexed">
            <summary>
                Aims to broaden the support for indexed images to include support for any color space. (Hex: 0x015A)
                http://www.awaresystems.be/imaging/tiff/tifftags/indexed.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.IFDEntryTag.JPEGTables">
            <summary>
                JPEG quantization and/or Huffman tables. (Hex: 0x015B)
                http://www.awaresystems.be/imaging/tiff/tifftags/jpegtables.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.IFDEntryTag.OPIProxy">
            <summary>
                OPI-related. (Hex: 0x015F)
                http://www.awaresystems.be/imaging/tiff/tifftags/opiproxy.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.IFDEntryTag.GlobalParametersIFD">
            <summary>
                Used in the TIFF-FX standard to point to an IFD containing tags that are globally applicable to the complete TIFF file. (Hex: 0x0190)
                http://www.awaresystems.be/imaging/tiff/tifftags/globalparametersifd.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.IFDEntryTag.ProfileType">
            <summary>
                Used in the TIFF-FX standard, denotes the type of data stored in this file or IFD. (Hex: 0x0191)
                http://www.awaresystems.be/imaging/tiff/tifftags/profiletype.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.IFDEntryTag.FaxProfile">
            <summary>
                Used in the TIFF-FX standard, denotes the 'profile' that applies to this file. (Hex: 0x0192)
                http://www.awaresystems.be/imaging/tiff/tifftags/faxprofile.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.IFDEntryTag.CodingMethods">
            <summary>
                Used in the TIFF-FX standard, indicates which coding methods are used in the file. (Hex: 0x0193)
                http://www.awaresystems.be/imaging/tiff/tifftags/codingmethods.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.IFDEntryTag.VersionYear">
            <summary>
                Used in the TIFF-FX standard, denotes the year of the standard specified by the FaxProfile field. (Hex: 0x0194)
                http://www.awaresystems.be/imaging/tiff/tifftags/versionyear.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.IFDEntryTag.ModeNumber">
            <summary>
                Used in the TIFF-FX standard, denotes the mode of the standard specified by the FaxProfile field. (Hex: 0x0195)
                http://www.awaresystems.be/imaging/tiff/tifftags/modenumber.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.IFDEntryTag.Decode">
            <summary>
                Used in the TIFF-F and TIFF-FX standards, holds information about the ITULAB (PhotometricInterpretation = 10) encoding. (Hex: 0x01B1)
                http://www.awaresystems.be/imaging/tiff/tifftags/decode.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.IFDEntryTag.DefaultImageColor">
            <summary>
                Defined in the Mixed Raster Content part of RFC 2301, is the default color needed in areas where no image is available. (Hex: 0x01B2)
                http://www.awaresystems.be/imaging/tiff/tifftags/defaultimagecolor.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.IFDEntryTag.JPEGProc">
            <summary>
                Old-style JPEG compression field. TechNote2 invalidates this part of the specification. (Hex: 0x0200)
                http://www.awaresystems.be/imaging/tiff/tifftags/jpegproc.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.IFDEntryTag.JPEGInterchangeFormat">
            <summary>
                Old-style JPEG compression field. TechNote2 invalidates this part of the specification. (Hex: 0x0201)
                http://www.awaresystems.be/imaging/tiff/tifftags/jpeginterchangeformat.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.IFDEntryTag.JPEGInterchangeFormatLength">
            <summary>
                Old-style JPEG compression field. TechNote2 invalidates this part of the specification. (Hex: 0x0202)
                http://www.awaresystems.be/imaging/tiff/tifftags/jpeginterchangeformatlength.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.IFDEntryTag.JPEGRestartInterval">
            <summary>
                Old-style JPEG compression field. TechNote2 invalidates this part of the specification. (Hex: 0x0203)
                http://www.awaresystems.be/imaging/tiff/tifftags/jpegrestartinterval.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.IFDEntryTag.JPEGLosslessPredictors">
            <summary>
                Old-style JPEG compression field. TechNote2 invalidates this part of the specification. (Hex: 0x0205)
                http://www.awaresystems.be/imaging/tiff/tifftags/jpeglosslesspredictors.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.IFDEntryTag.JPEGPointTransforms">
            <summary>
                Old-style JPEG compression field. TechNote2 invalidates this part of the specification. (Hex: 0x0206)
                http://www.awaresystems.be/imaging/tiff/tifftags/jpegpointtransforms.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.IFDEntryTag.JPEGQTables">
            <summary>
                Old-style JPEG compression field. TechNote2 invalidates this part of the specification. (Hex: 0x0207)
                http://www.awaresystems.be/imaging/tiff/tifftags/jpegqtables.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.IFDEntryTag.JPEGDCTables">
            <summary>
                Old-style JPEG compression field. TechNote2 invalidates this part of the specification. (Hex: 0x0208)
                http://www.awaresystems.be/imaging/tiff/tifftags/jpegdctables.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.IFDEntryTag.JPEGACTables">
            <summary>
                Old-style JPEG compression field. TechNote2 invalidates this part of the specification. (Hex: 0x0209)
                http://www.awaresystems.be/imaging/tiff/tifftags/jpegactables.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.IFDEntryTag.YCbCrCoefficients">
            <summary>
                The transformation from RGB to YCbCr image data. (Hex: 0x0211)
                http://www.awaresystems.be/imaging/tiff/tifftags/ycbcrcoefficients.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.IFDEntryTag.YCbCrSubSampling">
            <summary>
                Specifies the subsampling factors used for the chrominance components of a YCbCr image. (Hex: 0x0212)
                http://www.awaresystems.be/imaging/tiff/tifftags/ycbcrsubsampling.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.IFDEntryTag.YCbCrPositioning">
            <summary>
                Specifies the positioning of subsampled chrominance components relative to luminance samples. (Hex: 0x0213)
                http://www.awaresystems.be/imaging/tiff/tifftags/ycbcrpositioning.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.IFDEntryTag.ReferenceBlackWhite">
            <summary>
                Specifies a pair of headroom and footroom image data values (codes) for each pixel component. (Hex: 0x0214)
                http://www.awaresystems.be/imaging/tiff/tifftags/referenceblackwhite.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.IFDEntryTag.StripRowCounts">
            <summary>
                Defined in the Mixed Raster Content part of RFC 2301, used to replace RowsPerStrip for IFDs with variable-sized strips. (Hex: 0x022F)
                http://www.awaresystems.be/imaging/tiff/tifftags/striprowcounts.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.IFDEntryTag.XMP">
            <summary>
                XML packet containing XMP metadata (Hex: 0x02BC)
                http://www.awaresystems.be/imaging/tiff/tifftags/xmp.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.IFDEntryTag.Rating">
            <summary>
                Rating tag used by Windows (Hex: 0x4746)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.IFDEntryTag.RatingPercent">
            <summary>
                Rating tag used by Windows, value in percent (Hex: 0x4749)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.IFDEntryTag.ImageID">
            <summary>
                OPI-related. (Hex: 0x800D)
                http://www.awaresystems.be/imaging/tiff/tifftags/imageid.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.IFDEntryTag.WangAnnotation">
            <summary>
                Annotation data, as used in 'Imaging for Windows'. (Hex: 0x80A4)
                http://www.awaresystems.be/imaging/tiff/tifftags/wangannotation.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.IFDEntryTag.Copyright">
            <summary>
                Copyright notice. (Hex: 0x8298)
                http://www.awaresystems.be/imaging/tiff/tifftags/copyright.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.IFDEntryTag.MDFileTag">
            <summary>
                Specifies the pixel data format encoding in the Molecular Dynamics GEL file format. (Hex: 0x82A5)
                http://www.awaresystems.be/imaging/tiff/tifftags/mdfiletag.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.IFDEntryTag.MDScalePixel">
            <summary>
                Specifies a scale factor in the Molecular Dynamics GEL file format. (Hex: 0x82A6)
                http://www.awaresystems.be/imaging/tiff/tifftags/mdscalepixel.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.IFDEntryTag.MDColorTable">
            <summary>
                Used to specify the conversion from 16bit to 8bit in the Molecular Dynamics GEL file format. (Hex: 0x82A7)
                http://www.awaresystems.be/imaging/tiff/tifftags/mdcolortable.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.IFDEntryTag.MDLabName">
            <summary>
                Name of the lab that scanned this file, as used in the Molecular Dynamics GEL file format. (Hex: 0x82A8)
                http://www.awaresystems.be/imaging/tiff/tifftags/mdlabname.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.IFDEntryTag.MDSampleInfo">
            <summary>
                Information about the sample, as used in the Molecular Dynamics GEL file format. (Hex: 0x82A9)
                http://www.awaresystems.be/imaging/tiff/tifftags/mdsampleinfo.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.IFDEntryTag.MDPrepDate">
            <summary>
                Date the sample was prepared, as used in the Molecular Dynamics GEL file format. (Hex: 0x82AA)
                http://www.awaresystems.be/imaging/tiff/tifftags/mdprepdate.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.IFDEntryTag.MDPrepTime">
            <summary>
                Time the sample was prepared, as used in the Molecular Dynamics GEL file format. (Hex: 0x82AB)
                http://www.awaresystems.be/imaging/tiff/tifftags/mdpreptime.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.IFDEntryTag.MDFileUnits">
            <summary>
                Units for data in this file, as used in the Molecular Dynamics GEL file format. (Hex: 0x82AC)
                http://www.awaresystems.be/imaging/tiff/tifftags/mdfileunits.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.IFDEntryTag.ModelPixelScaleTag">
            <summary>
                Used in interchangeable GeoTIFF files. (Hex: 0x830E)
                http://www.awaresystems.be/imaging/tiff/tifftags/modelpixelscaletag.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.IFDEntryTag.IPTC">
            <summary>
                IPTC (International Press Telecommunications Council) metadata. (Hex: 0x83BB)
                http://www.awaresystems.be/imaging/tiff/tifftags/iptc.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.IFDEntryTag.INGRPacketDataTag">
            <summary>
                Intergraph Application specific storage. (Hex: 0x847E)
                http://www.awaresystems.be/imaging/tiff/tifftags/ingrpacketdatatag.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.IFDEntryTag.INGRFlagRegisters">
            <summary>
                Intergraph Application specific flags. (Hex: 0x847F)
                http://www.awaresystems.be/imaging/tiff/tifftags/ingrflagregisters.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.IFDEntryTag.IrasBTransformationMatrix">
            <summary>
                Originally part of Intergraph's GeoTIFF tags, but likely understood by IrasB only. (Hex: 0x8480)
                http://www.awaresystems.be/imaging/tiff/tifftags/irasbtransformationmatrix.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.IFDEntryTag.ModelTiepointTag">
            <summary>
                Originally part of Intergraph's GeoTIFF tags, but now used in interchangeable GeoTIFF files. (Hex: 0x8482)
                http://www.awaresystems.be/imaging/tiff/tifftags/modeltiepointtag.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.IFDEntryTag.ModelTransformationTag">
            <summary>
                Used in interchangeable GeoTIFF files. (Hex: 0x85D8)
                http://www.awaresystems.be/imaging/tiff/tifftags/modeltransformationtag.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.IFDEntryTag.Photoshop">
            <summary>
                Collection of Photoshop 'Image Resource Blocks'. (Hex: 0x8649)
                http://www.awaresystems.be/imaging/tiff/tifftags/photoshop.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.IFDEntryTag.ExifIFD">
            <summary>
                A pointer to the Exif IFD. (Hex: 0x8769)
                http://www.awaresystems.be/imaging/tiff/tifftags/exififd.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.IFDEntryTag.ICCProfile">
            <summary>
                ICC profile data. (Hex: 0x8773)
                http://www.awaresystems.be/imaging/tiff/tifftags/iccprofile.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.IFDEntryTag.ImageLayer">
            <summary>
                Defined in the Mixed Raster Content part of RFC 2301, used to denote the particular function of this Image in the mixed raster scheme. (Hex: 0x87AC)
                http://www.awaresystems.be/imaging/tiff/tifftags/imagelayer.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.IFDEntryTag.GeoKeyDirectoryTag">
            <summary>
                Used in interchangeable GeoTIFF files. (Hex: 0x87AF)
                http://www.awaresystems.be/imaging/tiff/tifftags/geokeydirectorytag.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.IFDEntryTag.GeoDoubleParamsTag">
            <summary>
                Used in interchangeable GeoTIFF files. (Hex: 0x87B0)
                http://www.awaresystems.be/imaging/tiff/tifftags/geodoubleparamstag.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.IFDEntryTag.GeoAsciiParamsTag">
            <summary>
                Used in interchangeable GeoTIFF files. (Hex: 0x87B1)
                http://www.awaresystems.be/imaging/tiff/tifftags/geoasciiparamstag.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.IFDEntryTag.GPSIFD">
            <summary>
                A pointer to the Exif-related GPS Info IFD. (Hex: 0x8825)
                http://www.awaresystems.be/imaging/tiff/tifftags/gpsifd.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.IFDEntryTag.HylaFAXFaxRecvParams">
            <summary>
                Used by HylaFAX. (Hex: 0x885C)
                http://www.awaresystems.be/imaging/tiff/tifftags/hylafaxfaxrecvparams.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.IFDEntryTag.HylaFAXFaxSubAddress">
            <summary>
                Used by HylaFAX. (Hex: 0x885D)
                http://www.awaresystems.be/imaging/tiff/tifftags/hylafaxfaxsubaddress.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.IFDEntryTag.HylaFAXFaxRecvTime">
            <summary>
                Used by HylaFAX. (Hex: 0x885E)
                http://www.awaresystems.be/imaging/tiff/tifftags/hylafaxfaxrecvtime.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.IFDEntryTag.ImageSourceData">
            <summary>
                Used by Adobe Photoshop. (Hex: 0x935C)
                http://www.awaresystems.be/imaging/tiff/tifftags/imagesourcedata.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.IFDEntryTag.InteroperabilityIFD">
            <summary>
                A pointer to the Exif-related Interoperability IFD. (Hex: 0xA005)
                http://www.awaresystems.be/imaging/tiff/tifftags/interoperabilityifd.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.IFDEntryTag.GDAL_METADATA">
            <summary>
                Used by the GDAL library, holds an XML list of name=value 'metadata' values about the image as a whole, and about specific samples. (Hex: 0xA480)
                http://www.awaresystems.be/imaging/tiff/tifftags/gdal_metadata.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.IFDEntryTag.GDAL_NODATA">
            <summary>
                Used by the GDAL library, contains an ASCII encoded nodata or background pixel value. (Hex: 0xA481)
                http://www.awaresystems.be/imaging/tiff/tifftags/gdal_nodata.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.IFDEntryTag.OceScanjobDescription">
            <summary>
                Used in the Oce scanning process. (Hex: 0xC427)
                http://www.awaresystems.be/imaging/tiff/tifftags/ocescanjobdescription.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.IFDEntryTag.OceApplicationSelector">
            <summary>
                Used in the Oce scanning process. (Hex: 0xC428)
                http://www.awaresystems.be/imaging/tiff/tifftags/oceapplicationselector.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.IFDEntryTag.OceIdentificationNumber">
            <summary>
                Used in the Oce scanning process. (Hex: 0xC429)
                http://www.awaresystems.be/imaging/tiff/tifftags/oceidentificationnumber.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.IFDEntryTag.OceImageLogicCharacteristics">
            <summary>
                Used in the Oce scanning process. (Hex: 0xC42A)
                http://www.awaresystems.be/imaging/tiff/tifftags/oceimagelogiccharacteristics.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.IFDEntryTag.DNGVersion">
            <summary>
                Used in IFD 0 of DNG files. (Hex: 0xC612)
                http://www.awaresystems.be/imaging/tiff/tifftags/dngversion.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.IFDEntryTag.DNGBackwardVersion">
            <summary>
                Used in IFD 0 of DNG files. (Hex: 0xC613)
                http://www.awaresystems.be/imaging/tiff/tifftags/dngbackwardversion.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.IFDEntryTag.UniqueCameraModel">
            <summary>
                Used in IFD 0 of DNG files. (Hex: 0xC614)
                http://www.awaresystems.be/imaging/tiff/tifftags/uniquecameramodel.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.IFDEntryTag.LocalizedCameraModel">
            <summary>
                Used in IFD 0 of DNG files. (Hex: 0xC615)
                http://www.awaresystems.be/imaging/tiff/tifftags/localizedcameramodel.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.IFDEntryTag.CFAPlaneColor">
            <summary>
                Used in Raw IFD of DNG files. (Hex: 0xC616)
                http://www.awaresystems.be/imaging/tiff/tifftags/cfaplanecolor.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.IFDEntryTag.CFALayout">
            <summary>
                Used in Raw IFD of DNG files. (Hex: 0xC617)
                http://www.awaresystems.be/imaging/tiff/tifftags/cfalayout.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.IFDEntryTag.LinearizationTable">
            <summary>
                Used in Raw IFD of DNG files. (Hex: 0xC618)
                http://www.awaresystems.be/imaging/tiff/tifftags/linearizationtable.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.IFDEntryTag.BlackLevelRepeatDim">
            <summary>
                Used in Raw IFD of DNG files. (Hex: 0xC619)
                http://www.awaresystems.be/imaging/tiff/tifftags/blacklevelrepeatdim.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.IFDEntryTag.BlackLevel">
            <summary>
                Used in Raw IFD of DNG files. (Hex: 0xC61A)
                http://www.awaresystems.be/imaging/tiff/tifftags/blacklevel.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.IFDEntryTag.BlackLevelDeltaH">
            <summary>
                Used in Raw IFD of DNG files. (Hex: 0xC61B)
                http://www.awaresystems.be/imaging/tiff/tifftags/blackleveldeltah.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.IFDEntryTag.BlackLevelDeltaV">
            <summary>
                Used in Raw IFD of DNG files. (Hex: 0xC61C)
                http://www.awaresystems.be/imaging/tiff/tifftags/blackleveldeltav.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.IFDEntryTag.WhiteLevel">
            <summary>
                Used in Raw IFD of DNG files. (Hex: 0xC61D)
                http://www.awaresystems.be/imaging/tiff/tifftags/whitelevel.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.IFDEntryTag.DefaultScale">
            <summary>
                Used in Raw IFD of DNG files. (Hex: 0xC61E)
                http://www.awaresystems.be/imaging/tiff/tifftags/defaultscale.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.IFDEntryTag.DefaultCropOrigin">
            <summary>
                Used in Raw IFD of DNG files. (Hex: 0xC61F)
                http://www.awaresystems.be/imaging/tiff/tifftags/defaultcroporigin.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.IFDEntryTag.DefaultCropSize">
            <summary>
                Used in Raw IFD of DNG files. (Hex: 0xC620)
                http://www.awaresystems.be/imaging/tiff/tifftags/defaultcropsize.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.IFDEntryTag.ColorMatrix1">
            <summary>
                Used in IFD 0 of DNG files. (Hex: 0xC621)
                http://www.awaresystems.be/imaging/tiff/tifftags/colormatrix1.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.IFDEntryTag.ColorMatrix2">
            <summary>
                Used in IFD 0 of DNG files. (Hex: 0xC622)
                http://www.awaresystems.be/imaging/tiff/tifftags/colormatrix2.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.IFDEntryTag.CameraCalibration1">
            <summary>
                Used in IFD 0 of DNG files. (Hex: 0xC623)
                http://www.awaresystems.be/imaging/tiff/tifftags/cameracalibration1.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.IFDEntryTag.CameraCalibration2">
            <summary>
                Used in IFD 0 of DNG files. (Hex: 0xC624)
                http://www.awaresystems.be/imaging/tiff/tifftags/cameracalibration2.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.IFDEntryTag.ReductionMatrix1">
            <summary>
                Used in IFD 0 of DNG files. (Hex: 0xC625)
                http://www.awaresystems.be/imaging/tiff/tifftags/reductionmatrix1.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.IFDEntryTag.ReductionMatrix2">
            <summary>
                Used in IFD 0 of DNG files. (Hex: 0xC626)
                http://www.awaresystems.be/imaging/tiff/tifftags/reductionmatrix2.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.IFDEntryTag.AnalogBalance">
            <summary>
                Used in IFD 0 of DNG files. (Hex: 0xC627)
                http://www.awaresystems.be/imaging/tiff/tifftags/analogbalance.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.IFDEntryTag.AsShotNeutral">
            <summary>
                Used in IFD 0 of DNG files. (Hex: 0xC628)
                http://www.awaresystems.be/imaging/tiff/tifftags/asshotneutral.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.IFDEntryTag.AsShotWhiteXY">
            <summary>
                Used in IFD 0 of DNG files. (Hex: 0xC629)
                http://www.awaresystems.be/imaging/tiff/tifftags/asshotwhitexy.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.IFDEntryTag.BaselineExposure">
            <summary>
                Used in IFD 0 of DNG files. (Hex: 0xC62A)
                http://www.awaresystems.be/imaging/tiff/tifftags/baselineexposure.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.IFDEntryTag.BaselineNoise">
            <summary>
                Used in IFD 0 of DNG files. (Hex: 0xC62B)
                http://www.awaresystems.be/imaging/tiff/tifftags/baselinenoise.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.IFDEntryTag.BaselineSharpness">
            <summary>
                Used in IFD 0 of DNG files. (Hex: 0xC62C)
                http://www.awaresystems.be/imaging/tiff/tifftags/baselinesharpness.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.IFDEntryTag.BayerGreenSplit">
            <summary>
                Used in Raw IFD of DNG files. (Hex: 0xC62D)
                http://www.awaresystems.be/imaging/tiff/tifftags/bayergreensplit.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.IFDEntryTag.LinearResponseLimit">
            <summary>
                Used in IFD 0 of DNG files. (Hex: 0xC62E)
                http://www.awaresystems.be/imaging/tiff/tifftags/linearresponselimit.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.IFDEntryTag.CameraSerialNumber">
            <summary>
                Used in IFD 0 of DNG files. (Hex: 0xC62F)
                http://www.awaresystems.be/imaging/tiff/tifftags/cameraserialnumber.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.IFDEntryTag.LensInfo">
            <summary>
                Used in IFD 0 of DNG files. (Hex: 0xC630)
                http://www.awaresystems.be/imaging/tiff/tifftags/lensinfo.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.IFDEntryTag.ChromaBlurRadius">
            <summary>
                Used in Raw IFD of DNG files. (Hex: 0xC631)
                http://www.awaresystems.be/imaging/tiff/tifftags/chromablurradius.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.IFDEntryTag.AntiAliasStrength">
            <summary>
                Used in Raw IFD of DNG files. (Hex: 0xC632)
                http://www.awaresystems.be/imaging/tiff/tifftags/antialiasstrength.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.IFDEntryTag.DNGPrivateData">
            <summary>
                Used in IFD 0 of DNG files. (Hex: 0xC634)
                http://www.awaresystems.be/imaging/tiff/tifftags/dngprivatedata.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.IFDEntryTag.MakerNoteSafety">
            <summary>
                Used in IFD 0 of DNG files. (Hex: 0xC635)
                http://www.awaresystems.be/imaging/tiff/tifftags/makernotesafety.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.IFDEntryTag.CalibrationIlluminant1">
            <summary>
                Used in IFD 0 of DNG files. (Hex: 0xC65A)
                http://www.awaresystems.be/imaging/tiff/tifftags/calibrationilluminant1.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.IFDEntryTag.CalibrationIlluminant2">
            <summary>
                Used in IFD 0 of DNG files. (Hex: 0xC65B)
                http://www.awaresystems.be/imaging/tiff/tifftags/calibrationilluminant2.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.IFDEntryTag.BestQualityScale">
            <summary>
                Used in Raw IFD of DNG files. (Hex: 0xC65C)
                http://www.awaresystems.be/imaging/tiff/tifftags/bestqualityscale.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.IFDEntryTag.AliasLayerMetadata">
            <summary>
                Alias Sketchbook Pro layer usage description. (Hex: 0xC660)
                http://www.awaresystems.be/imaging/tiff/tifftags/aliaslayermetadata.html
            </summary>
        </member>
        <member name="T:TagLib.IFD.Tags.IOPEntryTag">
            <summary>
               Entry tags occuring in the Interoperability IFD
               The complete overview can be obtained at:
               http://www.awaresystems.be/imaging/tiff.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.IOPEntryTag.InteroperabilityIndex">
            <summary>
                Indicates the identification of the Interoperability rule. (Hex: 0x0001)
                http://www.awaresystems.be/imaging/tiff/tifftags/privateifd/interoperability/interoperabilityindex.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.IOPEntryTag.InteroperabilityVersion">
            <summary>
                Interoperability version. (Hex: 0x0002)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.IOPEntryTag.RelatedImageFileFormat">
            <summary>
                File format of image file. (Hex: 0x1000)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.IOPEntryTag.RelatedImageWidth">
            <summary>
                Image Width. (Hex: 0x1001)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.IOPEntryTag.RelatedImageLength">
            <summary>
                Image Height. (Hex: 0x1002)
            </summary>
        </member>
        <member name="T:TagLib.IFD.Tags.Nikon3MakerNoteEntryTag">
            <summary>
               Nikon format 3 makernote tags.
               Based on http://www.exiv2.org/tags-nikon.html and
               http://park2.wakwak.com/~tsuruzoh/Computer/Digicams/exif-e.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.Nikon3MakerNoteEntryTag.Version">
            <summary>
               Makernote version. (Hex: 0x0001)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.Nikon3MakerNoteEntryTag.ISOSpeed">
            <summary>
               ISO speed setting. (Hex: 0X0002)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.Nikon3MakerNoteEntryTag.ColorMode">
            <summary>
               Color mode. (Hex: 0X0003)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.Nikon3MakerNoteEntryTag.Quality">
            <summary>
               Image quality setting. (Hex: 0X0004)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.Nikon3MakerNoteEntryTag.WhiteBalance">
            <summary>
               White balance. (Hex: 0X0005)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.Nikon3MakerNoteEntryTag.Sharpening">
            <summary>
               Image sharpening setting. (Hex: 0X0006)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.Nikon3MakerNoteEntryTag.Focus">
            <summary>
               Focus mode. (Hex: 0X0007)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.Nikon3MakerNoteEntryTag.FlashSetting">
            <summary>
               Flash setting. (Hex: 0X0008)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.Nikon3MakerNoteEntryTag.FlashDevice">
            <summary>
               Flash device. (Hex: 0X0009)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.Nikon3MakerNoteEntryTag.Unknown10">
            <summary>
               Unknown. (Hex: 0X000A)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.Nikon3MakerNoteEntryTag.WhiteBalanceBias">
            <summary>
               White balance bias. (Hex: 0X000B)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.Nikon3MakerNoteEntryTag.WB_RBLevels">
            <summary>
               WB RB levels. (Hex: 0X000C)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.Nikon3MakerNoteEntryTag.ProgramShift">
            <summary>
               Program shift. (Hex: 0X000D)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.Nikon3MakerNoteEntryTag.ExposureDiff">
            <summary>
               Exposure difference. (Hex: 0X000E)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.Nikon3MakerNoteEntryTag.ISOSelection">
            <summary>
               ISO selection. (Hex: 0X000F)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.Nikon3MakerNoteEntryTag.DataDump">
            <summary>
               Data dump. (Hex: 0X0010)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.Nikon3MakerNoteEntryTag.Preview">
            <summary>
               Offset to an IFD containing a preview image. (Hex: 0x0011)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.Nikon3MakerNoteEntryTag.FlashComp">
            <summary>
               Flash compensation setting. (Hex: 0X0012)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.Nikon3MakerNoteEntryTag.ISOSettings">
            <summary>
               ISO setting. (Hex: 0X0013)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.Nikon3MakerNoteEntryTag.ImageBoundary">
            <summary>
               Image boundary. (Hex: 0X0016)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.Nikon3MakerNoteEntryTag.Unknown23">
            <summary>
               Unknown. (Hex: 0X0017)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.Nikon3MakerNoteEntryTag.FlashBracketComp">
            <summary>
               Flash bracket compensation applied. (Hex: 0X0018)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.Nikon3MakerNoteEntryTag.ExposureBracketComp">
            <summary>
               AE bracket compensation applied. (Hex: 0X0019)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.Nikon3MakerNoteEntryTag.ImageProcessing">
            <summary>
               Image processing. (Hex: 0X001A)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.Nikon3MakerNoteEntryTag.CropHiSpeed">
            <summary>
               Crop high speed. (Hex: 0X001B)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.Nikon3MakerNoteEntryTag.SerialNumber">
            <summary>
               Serial Number. (Hex: 0X001D)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.Nikon3MakerNoteEntryTag.ColorSpace">
            <summary>
               Color space. (Hex: 0X001E)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.Nikon3MakerNoteEntryTag.VRInfo">
            <summary>
               VR info. (Hex: 0X001F)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.Nikon3MakerNoteEntryTag.ImageAuthentication">
            <summary>
               Image authentication. (Hex: 0X0020)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.Nikon3MakerNoteEntryTag.ActiveDLighting">
            <summary>
               ActiveD-lighting. (Hex: 0X0022)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.Nikon3MakerNoteEntryTag.PictureControl">
            <summary>
               Picture control. (Hex: 0X0023)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.Nikon3MakerNoteEntryTag.WorldTime">
            <summary>
               World time. (Hex: 0X0024)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.Nikon3MakerNoteEntryTag.ISOInfo">
            <summary>
               ISO info. (Hex: 0X0025)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.Nikon3MakerNoteEntryTag.VignetteControl">
            <summary>
               Vignette control. (Hex: 0X002A)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.Nikon3MakerNoteEntryTag.ImageAdjustment">
            <summary>
               Image adjustment setting. (Hex: 0X0080)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.Nikon3MakerNoteEntryTag.ToneComp">
            <summary>
               Tone compensation. (Hex: 0X0081)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.Nikon3MakerNoteEntryTag.AuxiliaryLens">
            <summary>
               Auxiliary lens (adapter). (Hex: 0X0082)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.Nikon3MakerNoteEntryTag.LensType">
            <summary>
               Lens type. (Hex: 0X0083)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.Nikon3MakerNoteEntryTag.Lens">
            <summary>
               Lens. (Hex: 0X0084)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.Nikon3MakerNoteEntryTag.FocusDistance">
            <summary>
               Manual focus distance. (Hex: 0X0085)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.Nikon3MakerNoteEntryTag.DigitalZoom">
            <summary>
               Digital zoom setting. (Hex: 0X0086)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.Nikon3MakerNoteEntryTag.FlashMode">
            <summary>
               Mode of flash used. (Hex: 0X0087)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.Nikon3MakerNoteEntryTag.AFInfo">
            <summary>
               AF info. (Hex: 0X0088)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.Nikon3MakerNoteEntryTag.ShootingMode">
            <summary>
               Shooting mode. (Hex: 0X0089)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.Nikon3MakerNoteEntryTag.AutoBracketRelease">
            <summary>
               Auto bracket release. (Hex: 0X008A)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.Nikon3MakerNoteEntryTag.LensFStops">
            <summary>
               Lens FStops. (Hex: 0X008B)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.Nikon3MakerNoteEntryTag.ContrastCurve">
            <summary>
               Contrast curve. (Hex: 0X008C)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.Nikon3MakerNoteEntryTag.ColorHue">
            <summary>
               Color hue. (Hex: 0X008D)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.Nikon3MakerNoteEntryTag.SceneMode">
            <summary>
               Scene mode. (Hex: 0X008F)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.Nikon3MakerNoteEntryTag.LightSource">
            <summary>
               Light source. (Hex: 0X0090)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.Nikon3MakerNoteEntryTag.ShotInfo">
            <summary>
               Shot info. (Hex: 0X0091)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.Nikon3MakerNoteEntryTag.HueAdjustment">
            <summary>
               Hue adjustment. (Hex: 0X0092)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.Nikon3MakerNoteEntryTag.NEFCompression">
            <summary>
               NEF compression. (Hex: 0X0093)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.Nikon3MakerNoteEntryTag.Saturation">
            <summary>
               Saturation. (Hex: 0X0094)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.Nikon3MakerNoteEntryTag.NoiseReduction">
            <summary>
               Noise reduction. (Hex: 0X0095)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.Nikon3MakerNoteEntryTag.LinearizationTable">
            <summary>
               Linearization table. (Hex: 0X0096)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.Nikon3MakerNoteEntryTag.ColorBalance">
            <summary>
               Color balance. (Hex: 0X0097)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.Nikon3MakerNoteEntryTag.LensData">
            <summary>
               Lens data settings. (Hex: 0X0098)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.Nikon3MakerNoteEntryTag.RawImageCenter">
            <summary>
               Raw image center. (Hex: 0X0099)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.Nikon3MakerNoteEntryTag.SensorPixelSize">
            <summary>
               Sensor pixel size. (Hex: 0X009A)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.Nikon3MakerNoteEntryTag.Unknown155">
            <summary>
               Unknown. (Hex: 0X009B)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.Nikon3MakerNoteEntryTag.SceneAssist">
            <summary>
               Scene assist. (Hex: 0X009C)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.Nikon3MakerNoteEntryTag.RetouchHistory">
            <summary>
               Retouch history. (Hex: 0X009E)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.Nikon3MakerNoteEntryTag.Unknown159">
            <summary>
               Unknown. (Hex: 0X009F)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.Nikon3MakerNoteEntryTag.SerialNO">
            <summary>
               Camera serial number, usually starts with "NO= ". (Hex: 0X00A0)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.Nikon3MakerNoteEntryTag.ImageDataSize">
            <summary>
               Image data size. (Hex: 0X00A2)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.Nikon3MakerNoteEntryTag.Unknown163">
            <summary>
               Unknown. (Hex: 0X00A3)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.Nikon3MakerNoteEntryTag.ImageCount">
            <summary>
               Image count. (Hex: 0X00A5)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.Nikon3MakerNoteEntryTag.DeletedImageCount">
            <summary>
               Deleted image count. (Hex: 0X00A6)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.Nikon3MakerNoteEntryTag.ShutterCount">
            <summary>
               Number of shots taken by camera. (Hex: 0X00A7)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.Nikon3MakerNoteEntryTag.FlashInfo">
            <summary>
               Flash info. (Hex: 0X00A8)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.Nikon3MakerNoteEntryTag.ImageOptimization">
            <summary>
               Image optimization. (Hex: 0X00A9)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.Nikon3MakerNoteEntryTag.Saturation2">
            <summary>
               Saturation. (Hex: 0X00AA)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.Nikon3MakerNoteEntryTag.VariProgram">
            <summary>
               Program variation. (Hex: 0X00AB)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.Nikon3MakerNoteEntryTag.ImageStabilization">
            <summary>
               Image stabilization. (Hex: 0X00AC)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.Nikon3MakerNoteEntryTag.AFResponse">
            <summary>
               AF response. (Hex: 0X00AD)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.Nikon3MakerNoteEntryTag.MultiExposure">
            <summary>
               Multi exposure. (Hex: 0X00B0)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.Nikon3MakerNoteEntryTag.HighISONoiseReduction">
            <summary>
               High ISO Noise Reduction. (Hex: 0X00B1)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.Nikon3MakerNoteEntryTag.ToningEffect">
            <summary>
               Toning effect. (Hex: 0X00B3)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.Nikon3MakerNoteEntryTag.AFInfo2">
            <summary>
               AF info 2. (Hex: 0X00B7)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.Nikon3MakerNoteEntryTag.FileInfo">
            <summary>
               File info. (Hex: 0X00B8)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.Nikon3MakerNoteEntryTag.PrintIM">
            <summary>
               PrintIM information. (Hex: 0X0E00)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.Nikon3MakerNoteEntryTag.CaptureData">
            <summary>
               Capture data. (Hex: 0X0E01)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.Nikon3MakerNoteEntryTag.CaptureVersion">
            <summary>
               Capture version. (Hex: 0X0E09)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.Nikon3MakerNoteEntryTag.CaptureOffsets">
            <summary>
               Capture offsets. (Hex: 0X0E0E)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.Nikon3MakerNoteEntryTag.ScanIFD">
            <summary>
               Scan IFD. (Hex: 0X0E10)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.Nikon3MakerNoteEntryTag.ICCProfile">
            <summary>
               ICC profile. (Hex: 0X0E1D)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.Nikon3MakerNoteEntryTag.CaptureOutput">
            <summary>
               Capture output. (Hex: 0X0E1E)
            </summary>
        </member>
        <member name="T:TagLib.IFD.Tags.NikonIsoInfoEntryTag">
            <summary>
               Nikon Iso Info entry tags.
               Based on:
               http://exiv2.org/tags-nikon.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.NikonIsoInfoEntryTag.ISO">
            <summary>
               ISO. (Hex: 0X0000)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.NikonIsoInfoEntryTag.ISOExpansion">
            <summary>
               ISO expansion. (Hex: 0X0004)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.NikonIsoInfoEntryTag.ISO2">
            <summary>
               ISO 2. (Hex: 0X0006)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.NikonIsoInfoEntryTag.ISOExpansion2">
            <summary>
               ISO expansion 2. (Hex: 0X000A)
            </summary>
        </member>
        <member name="T:TagLib.IFD.Tags.NikonLensData3EntryTag">
            <summary>
               Nikon lens data entry tags.
               Based on:
               http://exiv2.org/tags-nikon.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.NikonLensData3EntryTag.Version">
            <summary>
               Version. (Hex: 0X0000)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.NikonLensData3EntryTag.ExitPupilPosition">
            <summary>
               Exit pupil position. (Hex: 0X0004)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.NikonLensData3EntryTag.AFAperture">
            <summary>
               AF aperture. (Hex: 0X0005)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.NikonLensData3EntryTag.FocusPosition">
            <summary>
               Focus position. (Hex: 0X0008)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.NikonLensData3EntryTag.FocusDistance">
            <summary>
               Focus distance. (Hex: 0X000A)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.NikonLensData3EntryTag.FocalLength">
            <summary>
               Focal length. (Hex: 0X000B)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.NikonLensData3EntryTag.LensIDNumber">
            <summary>
               Lens ID number. (Hex: 0X000C)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.NikonLensData3EntryTag.LensFStops">
            <summary>
               Lens F-stops. (Hex: 0X000D)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.NikonLensData3EntryTag.MinFocalLength">
            <summary>
               Min focal length. (Hex: 0X000E)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.NikonLensData3EntryTag.MaxFocalLength">
            <summary>
               Max focal length. (Hex: 0X000F)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.NikonLensData3EntryTag.MaxApertureAtMinFocal">
            <summary>
               Max aperture at min focal length. (Hex: 0X0010)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.NikonLensData3EntryTag.MaxApertureAtMaxFocal">
            <summary>
               Max aperture at max focal length. (Hex: 0X0011)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.NikonLensData3EntryTag.MCUVersion">
            <summary>
               MCU version. (Hex: 0X0012)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.NikonLensData3EntryTag.EffectiveMaxAperture">
            <summary>
               Effective max aperture. (Hex: 0X0013)
            </summary>
        </member>
        <member name="T:TagLib.IFD.Tags.NikonPictureControlEntryTag">
            <summary>
               Nikon picture control entry tags.
               Based on:
               http://exiv2.org/tags-nikon.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.NikonPictureControlEntryTag.Version">
            <summary>
               Version. (Hex: 0X0000)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.NikonPictureControlEntryTag.Name">
            <summary>
               Name. (Hex: 0X0004)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.NikonPictureControlEntryTag.Base">
            <summary>
               Base. (Hex: 0X0018)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.NikonPictureControlEntryTag.Adjust">
            <summary>
               Adjust. (Hex: 0X0030)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.NikonPictureControlEntryTag.QuickAdjust">
            <summary>
               Quick adjust. (Hex: 0X0031)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.NikonPictureControlEntryTag.Sharpness">
            <summary>
               Sharpness. (Hex: 0X0032)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.NikonPictureControlEntryTag.Contrast">
            <summary>
               Contrast. (Hex: 0X0033)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.NikonPictureControlEntryTag.Brightness">
            <summary>
               Brightness. (Hex: 0X0034)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.NikonPictureControlEntryTag.Saturation">
            <summary>
               Saturation. (Hex: 0X0035)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.NikonPictureControlEntryTag.HueAdjustment">
            <summary>
               Hue adjustment. (Hex: 0X0036)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.NikonPictureControlEntryTag.FilterEffect">
            <summary>
               Filter effect. (Hex: 0X0037)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.NikonPictureControlEntryTag.ToningEffect">
            <summary>
               Toning effect. (Hex: 0X0038)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.NikonPictureControlEntryTag.ToningSaturation">
            <summary>
               Toning saturation. (Hex: 0X0039)
            </summary>
        </member>
        <member name="T:TagLib.IFD.Tags.NikonPreviewMakerNoteEntryTag">
            <summary>
               Nikon makernote preview image tags
               The preview image is contained in a sub-IFD stored by the tag
               Nikon3MakerNoteEntryTag.Preview.
               Based on:
               http://www.sno.phy.queensu.ca/~phil/exiftool/TagNames/Nikon.html#PreviewImage
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.NikonPreviewMakerNoteEntryTag.Compression">
            <summary>
                Compression scheme used on the image data. (Hex: 0x0103)
                http://www.awaresystems.be/imaging/tiff/tifftags/compression.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.NikonPreviewMakerNoteEntryTag.XResolution">
            <summary>
                The number of pixels per ResolutionUnit in the ImageWidth direction. (Hex: 0x011A)
                http://www.awaresystems.be/imaging/tiff/tifftags/xresolution.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.NikonPreviewMakerNoteEntryTag.YResolution">
            <summary>
                The number of pixels per ResolutionUnit in the ImageLength direction. (Hex: 0x011B)
                http://www.awaresystems.be/imaging/tiff/tifftags/yresolution.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.NikonPreviewMakerNoteEntryTag.ResolutionUnit">
            <summary>
                The unit of measurement for XResolution and YResolution. (Hex: 0x0128)
                http://www.awaresystems.be/imaging/tiff/tifftags/resolutionunit.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.NikonPreviewMakerNoteEntryTag.PreviewImageStart">
            <summary>
                Start of the preview image data. (Hex: 0x0201)
                http://www.sno.phy.queensu.ca/~phil/exiftool/TagNames/Nikon.html#PreviewImage
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.NikonPreviewMakerNoteEntryTag.PreviewImageLength">
            <summary>
                Length of the preview image data. (Hex: 0x0202)
                http://www.sno.phy.queensu.ca/~phil/exiftool/TagNames/Nikon.html#PreviewImage
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.NikonPreviewMakerNoteEntryTag.YCbCrPositioning">
            <summary>
                Specifies the positioning of subsampled chrominance components relative to luminance samples. (Hex: 0x0213)
                http://www.awaresystems.be/imaging/tiff/tifftags/ycbcrpositioning.html
            </summary>
        </member>
        <member name="T:TagLib.IFD.Tags.NikonShotInfoEntryTag">
            <summary>
               Nikon shot info entry tags.
               Based on:
               http://exiv2.org/tags-nikon.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.NikonShotInfoEntryTag.Version">
            <summary>
               Version. (Hex: 0X0000)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.NikonShotInfoEntryTag.ShutterCount1">
            <summary>
               Shutter count 1. (Hex: 0X006A)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.NikonShotInfoEntryTag.DeletedImageCount">
            <summary>
               Deleted image count. (Hex: 0X006E)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.NikonShotInfoEntryTag.VibrationReduction">
            <summary>
               Vibration reduction. (Hex: 0X0075)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.NikonShotInfoEntryTag.VibrationReduction1">
            <summary>
               . (Hex: 0X0082)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.NikonShotInfoEntryTag.ShutterCount2">
            <summary>
               Shutter count 2. (Hex: 0X0157)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.NikonShotInfoEntryTag.VibrationReduction2">
            <summary>
               Vibration reduction 2. (Hex: 0X01AE)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.NikonShotInfoEntryTag.ISO">
            <summary>
               ISO. (Hex: 0X0256)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.NikonShotInfoEntryTag.ShutterCount">
            <summary>
               Shutter count. (Hex: 0X0276)
            </summary>
        </member>
        <member name="T:TagLib.IFD.Tags.NikonVibrationReductionEntryTag">
            <summary>
               Nikon vibration reduction entry tags.
               Based on:
               http://exiv2.org/tags-nikon.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.NikonVibrationReductionEntryTag.Version">
            <summary>
               Version. (Hex: 0X0000)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.NikonVibrationReductionEntryTag.VibrationReduction">
            <summary>
               Vibration reduction. (Hex: 0X0004)
            </summary>
        </member>
        <member name="T:TagLib.IFD.Tags.NikonWorldTimeEntryTag">
            <summary>
               Nikon world time entry tags.
               Based on:
               http://exiv2.org/tags-nikon.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.NikonWorldTimeEntryTag.Timezone">
            <summary>
               Timezone. (Hex: 0X0000)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.NikonWorldTimeEntryTag.DaylightSavings">
            <summary>
               Daylight savings. (Hex: 0X0002)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.NikonWorldTimeEntryTag.DateDisplayFormat">
            <summary>
               Date display format. (Hex: 0X0003)
            </summary>
        </member>
        <member name="T:TagLib.IFD.Tags.OlympusMakerNoteEntryTag">
            <summary>
               Olympus makernote tags.
               Based on http://www.exiv2.org/tags-olympus.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.OlympusMakerNoteEntryTag.ThumbnailImage">
            <summary>
               Thumbnail image. (Hex: 0X0100)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.OlympusMakerNoteEntryTag.SpecialMode">
            <summary>
               Picture taking mode. (Hex: 0X0200)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.OlympusMakerNoteEntryTag.Quality">
            <summary>
               Image quality setting. (Hex: 0X0201)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.OlympusMakerNoteEntryTag.Macro">
            <summary>
               Macro mode. (Hex: 0X0202)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.OlympusMakerNoteEntryTag.BWMode">
            <summary>
               Black and white mode. (Hex: 0X0203)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.OlympusMakerNoteEntryTag.DigitalZoom">
            <summary>
               Digital zoom ratio. (Hex: 0X0204)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.OlympusMakerNoteEntryTag.FocalPlaneDiagonal">
            <summary>
               Focal plane diagonal. (Hex: 0X0205)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.OlympusMakerNoteEntryTag.LensDistortionParams">
            <summary>
               Lens distortion parameters. (Hex: 0X0206)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.OlympusMakerNoteEntryTag.FirmwareVersion">
            <summary>
               Software firmware version. (Hex: 0X0207)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.OlympusMakerNoteEntryTag.PictureInfo">
            <summary>
               ASCII format data such as [PictureInfo]. (Hex: 0X0208)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.OlympusMakerNoteEntryTag.CameraID">
            <summary>
               Camera ID data. (Hex: 0X0209)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.OlympusMakerNoteEntryTag.PreCaptureFrames">
            <summary>
               Pre-capture frames. (Hex: 0X0300)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.OlympusMakerNoteEntryTag.OneTouchWB">
            <summary>
               One touch white balance. (Hex: 0X0302)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.OlympusMakerNoteEntryTag.SerialNumber">
            <summary>
               Serial number. (Hex: 0X0404)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.OlympusMakerNoteEntryTag.PrintIM">
            <summary>
               PrintIM information. (Hex: 0X0E00)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.OlympusMakerNoteEntryTag.DataDump1">
            <summary>
               Various camera settings 1. (Hex: 0X0F00)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.OlympusMakerNoteEntryTag.DataDump2">
            <summary>
               Various camera settings 2. (Hex: 0X0F01)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.OlympusMakerNoteEntryTag.ShutterSpeed">
            <summary>
               Shutter speed value. (Hex: 0X1000)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.OlympusMakerNoteEntryTag.ISOSpeed">
            <summary>
               ISO speed value. (Hex: 0X1001)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.OlympusMakerNoteEntryTag.ApertureValue">
            <summary>
               Aperture value. (Hex: 0X1002)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.OlympusMakerNoteEntryTag.Brightness">
            <summary>
               Brightness value. (Hex: 0X1003)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.OlympusMakerNoteEntryTag.FlashMode">
            <summary>
               Flash mode. (Hex: 0X1004)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.OlympusMakerNoteEntryTag.FlashDevice">
            <summary>
               Flash device. (Hex: 0X1005)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.OlympusMakerNoteEntryTag.Bracket">
            <summary>
               Exposure compensation value. (Hex: 0X1006)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.OlympusMakerNoteEntryTag.SensorTemperature">
            <summary>
               Sensor temperature. (Hex: 0X1007)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.OlympusMakerNoteEntryTag.LensTemperature">
            <summary>
               Lens temperature. (Hex: 0X1008)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.OlympusMakerNoteEntryTag.FocusMode">
            <summary>
               Focus mode. (Hex: 0X100B)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.OlympusMakerNoteEntryTag.FocusDistance">
            <summary>
               Manual focus distance. (Hex: 0X100C)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.OlympusMakerNoteEntryTag.Zoom">
            <summary>
               Zoom step count. (Hex: 0X100D)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.OlympusMakerNoteEntryTag.MacroFocus">
            <summary>
               Macro focus step count. (Hex: 0X100E)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.OlympusMakerNoteEntryTag.SharpnessFactor">
            <summary>
               Sharpness factor. (Hex: 0X100F)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.OlympusMakerNoteEntryTag.FlashChargeLevel">
            <summary>
               Flash charge level. (Hex: 0X1010)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.OlympusMakerNoteEntryTag.ColorMatrix">
            <summary>
               Color matrix. (Hex: 0X1011)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.OlympusMakerNoteEntryTag.BlackLevel">
            <summary>
               Black level. (Hex: 0X1012)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.OlympusMakerNoteEntryTag.WhiteBalance">
            <summary>
               White balance mode. (Hex: 0X1015)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.OlympusMakerNoteEntryTag.RedBalance">
            <summary>
               Red balance. (Hex: 0X1017)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.OlympusMakerNoteEntryTag.BlueBalance">
            <summary>
               Blue balance. (Hex: 0X1018)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.OlympusMakerNoteEntryTag.SerialNumber2">
            <summary>
               Serial number 2. (Hex: 0X101A)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.OlympusMakerNoteEntryTag.FlashBias">
            <summary>
               Flash exposure compensation. (Hex: 0X1023)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.OlympusMakerNoteEntryTag.ExternalFlashBounce">
            <summary>
               External flash bounce. (Hex: 0X1026)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.OlympusMakerNoteEntryTag.ExternalFlashZoom">
            <summary>
               External flash zoom. (Hex: 0X1027)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.OlympusMakerNoteEntryTag.ExternalFlashMode">
            <summary>
               External flash mode. (Hex: 0X1028)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.OlympusMakerNoteEntryTag.Contrast">
            <summary>
               Contrast setting. (Hex: 0X1029)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.OlympusMakerNoteEntryTag.SharpnessFactor2">
            <summary>
               Sharpness factor. (Hex: 0X102A)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.OlympusMakerNoteEntryTag.ColorControl">
            <summary>
               Color control. (Hex: 0X102B)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.OlympusMakerNoteEntryTag.ValidBits">
            <summary>
               Valid bits. (Hex: 0X102C)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.OlympusMakerNoteEntryTag.CoringFilter">
            <summary>
               Coring filter. (Hex: 0X102D)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.OlympusMakerNoteEntryTag.ImageWidth">
            <summary>
               Image width. (Hex: 0X102E)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.OlympusMakerNoteEntryTag.ImageHeight">
            <summary>
               Image height. (Hex: 0X102F)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.OlympusMakerNoteEntryTag.CompressionRatio">
            <summary>
               Compression ratio. (Hex: 0X1034)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.OlympusMakerNoteEntryTag.Thumbnail">
            <summary>
               Preview image embedded. (Hex: 0X1035)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.OlympusMakerNoteEntryTag.ThumbnailOffset">
            <summary>
               Offset of the preview image. (Hex: 0X1036)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.OlympusMakerNoteEntryTag.ThumbnailLength">
            <summary>
               Size of the preview image. (Hex: 0X1037)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.OlympusMakerNoteEntryTag.CCDScanMode">
            <summary>
               CCD scan mode. (Hex: 0X1039)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.OlympusMakerNoteEntryTag.NoiseReduction">
            <summary>
               Noise reduction. (Hex: 0X103A)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.OlympusMakerNoteEntryTag.InfinityLensStep">
            <summary>
               Infinity lens step. (Hex: 0X103B)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.OlympusMakerNoteEntryTag.NearLensStep">
            <summary>
               Near lens step. (Hex: 0X103C)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.OlympusMakerNoteEntryTag.Equipment">
            <summary>
               Camera equipment sub-IFD. (Hex: 0X2010)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.OlympusMakerNoteEntryTag.CameraSettings">
            <summary>
               Camera Settings sub-IFD. (Hex: 0X2020)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.OlympusMakerNoteEntryTag.RawDevelopment">
            <summary>
               Raw development sub-IFD. (Hex: 0X2030)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.OlympusMakerNoteEntryTag.RawDevelopment2">
            <summary>
               Raw development 2 sub-IFD. (Hex: 0X2031)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.OlympusMakerNoteEntryTag.ImageProcessing">
            <summary>
               Image processing sub-IFD. (Hex: 0X2040)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.OlympusMakerNoteEntryTag.FocusInfo">
            <summary>
               Focus sub-IFD. (Hex: 0X2050)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.OlympusMakerNoteEntryTag.RawInfo">
            <summary>
               Raw sub-IFD. (Hex: 0X3000)
            </summary>
        </member>
        <member name="T:TagLib.IFD.Tags.PanasonicMakerNoteEntryTag">
            <summary>
               Panasonic makernote tags.
               Based on http://www.exiv2.org/tags-panasonic.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.PanasonicMakerNoteEntryTag.Quality">
            <summary>
               Image Quality. (Hex: 0x0001)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.PanasonicMakerNoteEntryTag.FirmwareVersion">
            <summary>
               Firmware version. (Hex: 0X0002)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.PanasonicMakerNoteEntryTag.WhiteBalance">
            <summary>
               White balance setting. (Hex: 0X0003)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.PanasonicMakerNoteEntryTag.Unknown4">
            <summary>
               Unknown. (Hex: 0X0004)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.PanasonicMakerNoteEntryTag.FocusMode">
            <summary>
               Focus mode. (Hex: 0X0007)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.PanasonicMakerNoteEntryTag.AFMode">
            <summary>
               AF mode. (Hex: 0X000F)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.PanasonicMakerNoteEntryTag.ISO">
            <summary>
               ISO Speed. (Hex: 0X0017)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.PanasonicMakerNoteEntryTag.ImageStabilization">
            <summary>
               Image stabilization. (Hex: 0X001A)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.PanasonicMakerNoteEntryTag.Macro">
            <summary>
               Macro mode. (Hex: 0X001C)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.PanasonicMakerNoteEntryTag.ShootingMode">
            <summary>
               Shooting mode. (Hex: 0X001F)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.PanasonicMakerNoteEntryTag.Audio">
            <summary>
               Audio. (Hex: 0X0020)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.PanasonicMakerNoteEntryTag.DataDump">
            <summary>
               Data dump. (Hex: 0X0021)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.PanasonicMakerNoteEntryTag.Unknown34">
            <summary>
               Unknown. (Hex: 0X0022)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.PanasonicMakerNoteEntryTag.WhiteBalanceBias">
            <summary>
               White balance adjustment. (Hex: 0X0023)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.PanasonicMakerNoteEntryTag.FlashBias">
            <summary>
               Flash bias. (Hex: 0X0024)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.PanasonicMakerNoteEntryTag.InternalSerialNumber">
            <summary>
               This number is unique, and contains the date of manufacture, but
               is not the same as the number printed on the camera body.
               (Hex: 0X0025)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.PanasonicMakerNoteEntryTag.ExifVersion">
            <summary>
               Exif version. (Hex: 0X0026)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.PanasonicMakerNoteEntryTag.Unknown39">
            <summary>
               Unknown. (Hex: 0X0027)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.PanasonicMakerNoteEntryTag.ColorEffect">
            <summary>
               Color effect. (Hex: 0X0028)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.PanasonicMakerNoteEntryTag.TimeSincePowerOn">
            <summary>
               Time in 1/100s from when the camera was powered on to when the
               image is written to memory card. (Hex: 0X0029)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.PanasonicMakerNoteEntryTag.BurstMode">
            <summary>
               Burst mode. (Hex: 0X002A)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.PanasonicMakerNoteEntryTag.SequenceNumber">
            <summary>
               Sequence number. (Hex: 0X002B)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.PanasonicMakerNoteEntryTag.Contrast">
            <summary>
               Contrast setting. (Hex: 0X002C)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.PanasonicMakerNoteEntryTag.NoiseReduction">
            <summary>
               Noise reduction. (Hex: 0X002D)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.PanasonicMakerNoteEntryTag.SelfTimer">
            <summary>
               Self timer. (Hex: 0X002E)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.PanasonicMakerNoteEntryTag.Unknown47">
            <summary>
               Unknown. (Hex: 0X002F)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.PanasonicMakerNoteEntryTag.Rotation">
            <summary>
               Rotation. (Hex: 0X0030)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.PanasonicMakerNoteEntryTag.Unknown49">
            <summary>
               Unknown. (Hex: 0X0031)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.PanasonicMakerNoteEntryTag.ColorMode">
            <summary>
               Color mode. (Hex: 0X0032)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.PanasonicMakerNoteEntryTag.BabyAge">
            <summary>
               Baby (or pet) age. (Hex: 0X0033)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.PanasonicMakerNoteEntryTag.OpticalZoomMode">
            <summary>
               Optical zoom mode. (Hex: 0X0034)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.PanasonicMakerNoteEntryTag.ConversionLens">
            <summary>
               Conversion lens. (Hex: 0X0035)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.PanasonicMakerNoteEntryTag.TravelDay">
            <summary>
               Travel day. (Hex: 0X0036)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.PanasonicMakerNoteEntryTag.Contrast2">
            <summary>
               Contrast. (Hex: 0X0039)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.PanasonicMakerNoteEntryTag.WorldTimeLocation">
            <summary>
               World time location. (Hex: 0X003A)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.PanasonicMakerNoteEntryTag.ProgramISO">
            <summary>
               Program ISO. (Hex: 0X003C)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.PanasonicMakerNoteEntryTag.Saturation">
            <summary>
               Saturation. (Hex: 0X0040)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.PanasonicMakerNoteEntryTag.Sharpness">
            <summary>
               Sharpness. (Hex: 0X0041)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.PanasonicMakerNoteEntryTag.FilmMode">
            <summary>
               Film mode. (Hex: 0X0042)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.PanasonicMakerNoteEntryTag.WBAdjustAB">
            <summary>
               WB adjust AB. Positive is a shift toward blue. (Hex: 0X0046)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.PanasonicMakerNoteEntryTag.WBAdjustGM">
            <summary>
               WBAdjustGM. Positive is a shift toward green. (Hex: 0X0047)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.PanasonicMakerNoteEntryTag.LensType">
            <summary>
               Lens type. (Hex: 0X0051)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.PanasonicMakerNoteEntryTag.LensSerialNumber">
            <summary>
               Lens serial number. (Hex: 0X0052)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.PanasonicMakerNoteEntryTag.AccessoryType">
            <summary>
               Accessory type. (Hex: 0X0053)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.PanasonicMakerNoteEntryTag.PrintIM">
            <summary>
               PrintIM information. (Hex: 0X0E00)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.PanasonicMakerNoteEntryTag.Unknown17481">
            <summary>
               Unknown. (Hex: 0X4449)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.PanasonicMakerNoteEntryTag.MakerNoteVersion">
            <summary>
               MakerNote version. (Hex: 0X8000)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.PanasonicMakerNoteEntryTag.SceneMode">
            <summary>
               Scene mode. (Hex: 0X8001)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.PanasonicMakerNoteEntryTag.WBRedLevel">
            <summary>
               WB red level. (Hex: 0X8004)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.PanasonicMakerNoteEntryTag.WBGreenLevel">
            <summary>
               WB green level. (Hex: 0X8005)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.PanasonicMakerNoteEntryTag.WBBlueLevel">
            <summary>
               WB blue level. (Hex: 0X8006)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.PanasonicMakerNoteEntryTag.BabyAge2">
            <summary>
               Baby (or pet) age. (Hex: 0X8010)
            </summary>
        </member>
        <member name="T:TagLib.IFD.Tags.PentaxMakerNoteEntryTag">
            <summary>
               Pentax makernote tags.
               Based on http://www.exiv2.org/tags-pentax.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.PentaxMakerNoteEntryTag.Version">
            <summary>
               Pentax Makernote version. (Hex: 0X0000)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.PentaxMakerNoteEntryTag.Mode">
            <summary>
               Camera shooting mode. (Hex: 0X0001)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.PentaxMakerNoteEntryTag.PreviewResolution">
            <summary>
               Resolution of a preview image. (Hex: 0X0002)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.PentaxMakerNoteEntryTag.PreviewLength">
            <summary>
               Size of an IFD containing a preview image. (Hex: 0X0003)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.PentaxMakerNoteEntryTag.PreviewOffset">
            <summary>
               Offset to an IFD containing a preview image. (Hex: 0X0004)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.PentaxMakerNoteEntryTag.ModelID">
            <summary>
               Pentax model idenfication. (Hex: 0X0005)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.PentaxMakerNoteEntryTag.Date">
            <summary>
               Date. (Hex: 0X0006)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.PentaxMakerNoteEntryTag.Time">
            <summary>
               Time. (Hex: 0X0007)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.PentaxMakerNoteEntryTag.Quality">
            <summary>
               Image quality settings. (Hex: 0X0008)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.PentaxMakerNoteEntryTag.Size">
            <summary>
               Image size settings. (Hex: 0X0009)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.PentaxMakerNoteEntryTag.Flash">
            <summary>
               Flash mode settings. (Hex: 0X000C)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.PentaxMakerNoteEntryTag.Focus">
            <summary>
               Focus mode settings. (Hex: 0X000D)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.PentaxMakerNoteEntryTag.AFPoint">
            <summary>
               Selected AF point. (Hex: 0X000E)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.PentaxMakerNoteEntryTag.AFPointInFocus">
            <summary>
               AF point in focus. (Hex: 0X000F)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.PentaxMakerNoteEntryTag.ExposureTime">
            <summary>
               Exposure time. (Hex: 0X0012)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.PentaxMakerNoteEntryTag.FNumber">
            <summary>
               F-Number. (Hex: 0X0013)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.PentaxMakerNoteEntryTag.ISO">
            <summary>
               ISO sensitivity settings. (Hex: 0X0014)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.PentaxMakerNoteEntryTag.ExposureCompensation">
            <summary>
               Exposure compensation. (Hex: 0X0016)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.PentaxMakerNoteEntryTag.MeteringMode">
            <summary>
               MeteringMode. (Hex: 0X0017)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.PentaxMakerNoteEntryTag.AutoBracketing">
            <summary>
               AutoBracketing. (Hex: 0X0018)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.PentaxMakerNoteEntryTag.WhiteBallance">
            <summary>
               White ballance. (Hex: 0X0019)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.PentaxMakerNoteEntryTag.WhiteBallanceMode">
            <summary>
               White ballance mode. (Hex: 0X001A)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.PentaxMakerNoteEntryTag.BlueBalance">
            <summary>
               Blue color balance. (Hex: 0X001B)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.PentaxMakerNoteEntryTag.RedBalance">
            <summary>
               Red color balance. (Hex: 0X001C)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.PentaxMakerNoteEntryTag.FocalLength">
            <summary>
               FocalLength. (Hex: 0X001D)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.PentaxMakerNoteEntryTag.DigitalZoom">
            <summary>
               Digital zoom. (Hex: 0X001E)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.PentaxMakerNoteEntryTag.Saturation">
            <summary>
               Saturation. (Hex: 0X001F)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.PentaxMakerNoteEntryTag.Contrast">
            <summary>
               Contrast. (Hex: 0X0020)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.PentaxMakerNoteEntryTag.Sharpness">
            <summary>
               Sharpness. (Hex: 0X0021)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.PentaxMakerNoteEntryTag.Location">
            <summary>
               Location. (Hex: 0X0022)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.PentaxMakerNoteEntryTag.Hometown">
            <summary>
               Home town. (Hex: 0X0023)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.PentaxMakerNoteEntryTag.Destination">
            <summary>
               Destination. (Hex: 0X0024)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.PentaxMakerNoteEntryTag.HometownDST">
            <summary>
               Whether day saving time is active in home town. (Hex: 0X0025)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.PentaxMakerNoteEntryTag.DestinationDST">
            <summary>
               Whether day saving time is active in destination. (Hex: 0X0026)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.PentaxMakerNoteEntryTag.DSPFirmwareVersion">
            <summary>
               DSPFirmwareVersion. (Hex: 0X0027)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.PentaxMakerNoteEntryTag.CPUFirmwareVersion">
            <summary>
               CPUFirmwareVersion. (Hex: 0X0028)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.PentaxMakerNoteEntryTag.FrameNumber">
            <summary>
               Frame number. (Hex: 0X0029)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.PentaxMakerNoteEntryTag.EffectiveLV">
            <summary>
               Camera calculated light value, includes exposure compensation. (Hex: 0X002D)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.PentaxMakerNoteEntryTag.ImageProcessing">
            <summary>
               Image processing. (Hex: 0X0032)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.PentaxMakerNoteEntryTag.PictureMode">
            <summary>
               Picture mode. (Hex: 0X0033)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.PentaxMakerNoteEntryTag.DriveMode">
            <summary>
               Drive mode. (Hex: 0X0034)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.PentaxMakerNoteEntryTag.ColorSpace">
            <summary>
               Color space. (Hex: 0X0037)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.PentaxMakerNoteEntryTag.ImageAreaOffset">
            <summary>
               Image area offset. (Hex: 0X0038)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.PentaxMakerNoteEntryTag.RawImageSize">
            <summary>
               Raw image size. (Hex: 0X0039)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.PentaxMakerNoteEntryTag.PreviewImageBorders">
            <summary>
               Preview image borders. (Hex: 0X003E)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.PentaxMakerNoteEntryTag.LensType">
            <summary>
               Lens type. (Hex: 0X003F)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.PentaxMakerNoteEntryTag.SensitivityAdjust">
            <summary>
               Sensitivity adjust. (Hex: 0X0040)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.PentaxMakerNoteEntryTag.DigitalFilter">
            <summary>
               Digital filter. (Hex: 0X0041)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.PentaxMakerNoteEntryTag.Temperature">
            <summary>
               Camera temperature. (Hex: 0X0047)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.PentaxMakerNoteEntryTag.AELock">
            <summary>
               AE lock. (Hex: 0X0048)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.PentaxMakerNoteEntryTag.NoiseReduction">
            <summary>
               Noise reduction. (Hex: 0X0049)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.PentaxMakerNoteEntryTag.FlashExposureCompensation">
            <summary>
               Flash exposure compensation. (Hex: 0X004D)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.PentaxMakerNoteEntryTag.ImageTone">
            <summary>
               Image tone. (Hex: 0X004F)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.PentaxMakerNoteEntryTag.ColorTemperature">
            <summary>
               Colort temperature. (Hex: 0X0050)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.PentaxMakerNoteEntryTag.ShakeReduction">
            <summary>
               Shake reduction information. (Hex: 0X005C)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.PentaxMakerNoteEntryTag.ShutterCount">
            <summary>
               Shutter count. (Hex: 0X005D)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.PentaxMakerNoteEntryTag.DynamicRangeExpansion">
            <summary>
               Dynamic range expansion. (Hex: 0X0069)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.PentaxMakerNoteEntryTag.HighISONoiseReduction">
            <summary>
               High ISO noise reduction. (Hex: 0X0071)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.PentaxMakerNoteEntryTag.AFAdjustment">
            <summary>
               AF Adjustment. (Hex: 0X0072)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.PentaxMakerNoteEntryTag.BlackPoint">
            <summary>
               Black point. (Hex: 0X0200)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.PentaxMakerNoteEntryTag.WhitePoint">
            <summary>
               White point. (Hex: 0X0201)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.PentaxMakerNoteEntryTag.ShotInfo">
            <summary>
               ShotInfo. (Hex: 0X0205)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.PentaxMakerNoteEntryTag.AEInfo">
            <summary>
               AEInfo. (Hex: 0X0206)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.PentaxMakerNoteEntryTag.LensInfo">
            <summary>
               LensInfo. (Hex: 0X0207)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.PentaxMakerNoteEntryTag.FlashInfo">
            <summary>
               FlashInfo. (Hex: 0X0208)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.PentaxMakerNoteEntryTag.AEMeteringSegments">
            <summary>
               AEMeteringSegments. (Hex: 0X0209)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.PentaxMakerNoteEntryTag.FlashADump">
            <summary>
               FlashADump. (Hex: 0X020A)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.PentaxMakerNoteEntryTag.FlashBDump">
            <summary>
               FlashBDump. (Hex: 0X020B)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.PentaxMakerNoteEntryTag.WB_RGGBLevelsDaylight">
            <summary>
               WB_RGGBLevelsDaylight. (Hex: 0X020D)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.PentaxMakerNoteEntryTag.WB_RGGBLevelsShade">
            <summary>
               WB_RGGBLevelsShade. (Hex: 0X020E)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.PentaxMakerNoteEntryTag.WB_RGGBLevelsCloudy">
            <summary>
               WB_RGGBLevelsCloudy. (Hex: 0X020F)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.PentaxMakerNoteEntryTag.WB_RGGBLevelsTungsten">
            <summary>
               WB_RGGBLevelsTungsten. (Hex: 0X0210)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.PentaxMakerNoteEntryTag.WB_RGGBLevelsFluorescentD">
            <summary>
               WB_RGGBLevelsFluorescentD. (Hex: 0X0211)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.PentaxMakerNoteEntryTag.WB_RGGBLevelsFluorescentN">
            <summary>
               WB_RGGBLevelsFluorescentN. (Hex: 0X0212)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.PentaxMakerNoteEntryTag.WB_RGGBLevelsFluorescentW">
            <summary>
               WB_RGGBLevelsFluorescentW. (Hex: 0X0213)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.PentaxMakerNoteEntryTag.WB_RGGBLevelsFlash">
            <summary>
               WB_RGGBLevelsFlash. (Hex: 0X0214)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.PentaxMakerNoteEntryTag.CameraInfo">
            <summary>
               CameraInfo. (Hex: 0X0215)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.PentaxMakerNoteEntryTag.BatteryInfo">
            <summary>
               BatteryInfo. (Hex: 0X0216)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.PentaxMakerNoteEntryTag.AFInfo">
            <summary>
               AFInfo. (Hex: 0X021F)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.PentaxMakerNoteEntryTag.ColorInfo">
            <summary>
               ColorInfo. (Hex: 0X0222)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.PentaxMakerNoteEntryTag.SerialNumber">
            <summary>
               Serial Number. (Hex: 0X0229)
            </summary>
        </member>
        <member name="T:TagLib.IFD.Tags.SonyMakerNoteEntryTag">
            <summary>
               Label tags for Sony Makernote.
               Based on http://www.exiv2.org/tags-sony.html
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.SonyMakerNoteEntryTag.Quality">
            <summary>
               Image quality. (Hex: 0X0102)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.SonyMakerNoteEntryTag.FlashExposureComp">
            <summary>
               Flash exposure compensation in EV. (Hex: 0X0104)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.SonyMakerNoteEntryTag.Teleconverter">
            <summary>
               Teleconverter Model. (Hex: 0X0105)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.SonyMakerNoteEntryTag.WhiteBalanceFineTune">
            <summary>
               White Balance Fine Tune Value. (Hex: 0X0112)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.SonyMakerNoteEntryTag.CameraSettings">
            <summary>
               Camera Settings. (Hex: 0X0114)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.SonyMakerNoteEntryTag.WhiteBalance">
            <summary>
               White balance. (Hex: 0X0115)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.SonyMakerNoteEntryTag.PrintIM">
            <summary>
               PrintIM information. (Hex: 0X0E00)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.SonyMakerNoteEntryTag.MultiBurstMode">
            <summary>
               Multi Burst Mode. (Hex: 0X1000)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.SonyMakerNoteEntryTag.MultiBurstImageWidth">
            <summary>
               Multi Burst Image Width. (Hex: 0X1001)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.SonyMakerNoteEntryTag.MultiBurstImageHeight">
            <summary>
               Multi Burst Image Height. (Hex: 0X1002)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.SonyMakerNoteEntryTag.Panorama">
            <summary>
               Panorama. (Hex: 0X1003)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.SonyMakerNoteEntryTag.PreviewImage">
            <summary>
               Preview Image. (Hex: 0X2001)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.SonyMakerNoteEntryTag.AutoHDR">
            <summary>
               Auto High Definition Range. (Hex: 0X200A)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.SonyMakerNoteEntryTag.ShotInfo">
            <summary>
               Shot Information. (Hex: 0X3000)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.SonyMakerNoteEntryTag.FileFormat">
            <summary>
               File Format. (Hex: 0XB000)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.SonyMakerNoteEntryTag.SonyModelID">
            <summary>
               Sony Model ID. (Hex: 0XB001)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.SonyMakerNoteEntryTag.ColorReproduction">
            <summary>
               Color Reproduction. (Hex: 0XB020)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.SonyMakerNoteEntryTag.ColorTemperature">
            <summary>
               Color Temperature. (Hex: 0XB021)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.SonyMakerNoteEntryTag.ColorCompensationFilter">
            <summary>
               Color Compensation Filter: negative is green, positive is magenta. (Hex: 0XB022)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.SonyMakerNoteEntryTag.SceneMode">
            <summary>
               Scene Mode. (Hex: 0XB023)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.SonyMakerNoteEntryTag.ZoneMatching">
            <summary>
               Zone Matching. (Hex: 0XB024)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.SonyMakerNoteEntryTag.DynamicRangeOptimizer">
            <summary>
               Dynamic Range Optimizer. (Hex: 0XB025)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.SonyMakerNoteEntryTag.ImageStabilization">
            <summary>
               Image stabilization. (Hex: 0XB026)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.SonyMakerNoteEntryTag.LensID">
            <summary>
               Lens identifier. (Hex: 0XB027)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.SonyMakerNoteEntryTag.MinoltaMakerNote">
            <summary>
               Minolta MakerNote. (Hex: 0XB028)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.SonyMakerNoteEntryTag.ColorMode">
            <summary>
               Color Mode. (Hex: 0XB029)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.SonyMakerNoteEntryTag.FullImageSize">
            <summary>
               Full Image Size. (Hex: 0XB02B)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.SonyMakerNoteEntryTag.PreviewImageSize">
            <summary>
               Preview Image Size. (Hex: 0XB02C)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.SonyMakerNoteEntryTag.Macro">
            <summary>
               Macro. (Hex: 0XB040)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.SonyMakerNoteEntryTag.ExposureMode">
            <summary>
               Exposure Mode. (Hex: 0XB041)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.SonyMakerNoteEntryTag.FocusMode">
            <summary>
               Focus mode. (Hex: 0XB042)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.SonyMakerNoteEntryTag.AFMode">
            <summary>
               AF Mode. (Hex: 0XB043)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.SonyMakerNoteEntryTag.AFIlluminator">
            <summary>
               AF Illuminator. (Hex: 0XB044)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.SonyMakerNoteEntryTag.Quality2">
            <summary>
               Quality. (Hex: 0XB047)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.SonyMakerNoteEntryTag.FlashLevel">
            <summary>
               Flash Level. (Hex: 0XB048)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.SonyMakerNoteEntryTag.ReleaseMode">
            <summary>
               Release Mode. (Hex: 0XB049)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.SonyMakerNoteEntryTag.SequenceNumber">
            <summary>
               Shot number in continous burst mode. (Hex: 0XB04A)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.SonyMakerNoteEntryTag.AntiBlur">
            <summary>
               Anti-Blur. (Hex: 0XB04B)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.SonyMakerNoteEntryTag.LongExposureNoiseReduction">
            <summary>
               Long Exposure Noise Reduction. (Hex: 0XB04E)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.SonyMakerNoteEntryTag.DynamicRangeOptimizer2">
            <summary>
               Dynamic Range Optimizer. (Hex: 0XB04F)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.SonyMakerNoteEntryTag.IntelligentAuto">
            <summary>
               Intelligent Auto. (Hex: 0XB052)
            </summary>
        </member>
        <member name="F:TagLib.IFD.Tags.SonyMakerNoteEntryTag.WhiteBalance2">
            <summary>
               White Balance. (Hex: 0XB054)
            </summary>
        </member>
        <member name="T:TagLib.IIM.IIMReader">
            <summary>
            Processes all IPTC-IIM segments
            </summary>
        </member>
        <member name="F:TagLib.IIM.IIMReader.IPTC_IIM_SEGMENT">
            <summary>
            The magic bytes that start a new IPTC-IIM segment
            </summary>
        </member>
        <member name="M:TagLib.IIM.IIMReader.#ctor(TagLib.ByteVector)">
            <summary>
            Constructor
            </summary>
            <param name="data">Bytes contained in the reader</param>
        </member>
        <member name="M:TagLib.IIM.IIMReader.Process">
            <summary>
            Proceed with the reading of the IIM
            </summary>
            <returns></returns>
        </member>
        <member name="T:TagLib.IIM.IIMTag">
            <summary>
            Represents an IIM Tag
            </summary>
        </member>
        <member name="M:TagLib.IIM.IIMTag.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:TagLib.IIM.IIMTag.TagTypes">
            <summary>
            Defines the supported TagType
            </summary>
        </member>
        <member name="M:TagLib.IIM.IIMTag.Clear">
            <summary>
            Clear IIM content
            </summary>
        </member>
        <member name="P:TagLib.IIM.IIMTag.Title">
            <summary>
            Get or Set the Title Tag
            </summary>
        </member>
        <member name="P:TagLib.IIM.IIMTag.Creator">
            <summary>
            Get or Set the Creator Tag
            </summary>
        </member>
        <member name="P:TagLib.IIM.IIMTag.Copyright">
            <summary>
            Get or Set the Copyright Tag
            </summary>
        </member>
        <member name="P:TagLib.IIM.IIMTag.Comment">
            <summary>
            Get or Set the comment Tag
            </summary>
        </member>
        <member name="P:TagLib.IIM.IIMTag.Keywords">
            <summary>
            Get or Set the Keywords Tag
            </summary>
        </member>
        <member name="T:TagLib.ILazy">
            <summary>
               This interface provides generic information about ab object,
               from which the content can be load only on demand.
            </summary>
        </member>
        <member name="P:TagLib.ILazy.IsLoaded">
            <summary>
               Gets an indication whether the object is loaded.
            </summary>
        </member>
        <member name="M:TagLib.ILazy.Load">
            <summary>
            Load the object data if not done yet.
            </summary>
        </member>
        <member name="T:TagLib.Image.Codec">
            <summary>
               A photo codec. Contains basic photo details.
            </summary>
        </member>
        <member name="P:TagLib.Image.Codec.Duration">
            <summary>
               Gets the duration of the media represented by the current
               instance.
            </summary>
            <value>
               A <see cref="T:System.TimeSpan" /> containing the duration of the
               media represented by the current instance.
            </value>
        </member>
        <member name="P:TagLib.Image.Codec.MediaTypes">
            <summary>
               Gets the types of media represented by the current
               instance.
            </summary>
            <value>
               A bitwise combined <see cref="P:TagLib.Image.Codec.MediaTypes" /> containing
               the types of media represented by the current instance.
            </value>
        </member>
        <member name="P:TagLib.Image.Codec.Description">
            <summary>
               Gets a text description of the media represented by the
               current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> object containing a description
               of the media represented by the current instance.
            </value>
        </member>
        <member name="P:TagLib.Image.Codec.PhotoWidth">
            <summary>
               Gets the width of the photo represented by the current
               instance.
            </summary>
            <value>
               A <see cref="T:System.Int32" /> value containing the width of the
               photo represented by the current instance.
            </value>
        </member>
        <member name="P:TagLib.Image.Codec.PhotoHeight">
            <summary>
               Gets the height of the photo represented by the current
               instance.
            </summary>
            <value>
               A <see cref="T:System.Int32" /> value containing the height of the
               photo represented by the current instance.
            </value>
        </member>
        <member name="P:TagLib.Image.Codec.PhotoQuality">
            <summary>
               Gets the (format specific) quality indicator of the photo
               represented by the current instance.
            </summary>
            <value>
               A <see cref="T:System.Int32" /> value indicating the quality. A value
               0 means that there was no quality indicator for the format
               or the file.
            </value>
        </member>
        <member name="M:TagLib.Image.Codec.#ctor(System.Int32,System.Int32)">
            <summary>
               Constructs a new <see cref="T:TagLib.Image.Codec" /> with the given width
               and height.
            </summary>
            <param name="width">
               The width of the photo.
            </param>
            <param name="height">
               The height of the photo.
            </param>
            <returns>
               A new <see cref="T:TagLib.Image.Codec" /> instance.
            </returns>
        </member>
        <member name="M:TagLib.Image.Codec.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
               Constructs a new <see cref="T:TagLib.Image.Codec" /> with the given width
               and height.
            </summary>
            <param name="width">
               The width of the photo.
            </param>
            <param name="height">
               The height of the photo.
            </param>
            <param name="quality">
               The quality indicator for the photo, if the format supports it.
            </param>
            <returns>
               A new <see cref="T:TagLib.Image.Codec" /> instance.
            </returns>
        </member>
        <member name="T:TagLib.Image.CombinedImageTag">
            <summary>
               Combines some <see cref="T:TagLib.Image.ImageTag"/> instance to behave as one.
            </summary>
        </member>
        <member name="P:TagLib.Image.CombinedImageTag.Exif">
            <summary>
               Direct access to the Exif (IFD) tag (if any)
            </summary>
        </member>
        <member name="P:TagLib.Image.CombinedImageTag.Xmp">
            <summary>
               Direct access to the Xmp tag (if any)
            </summary>
        </member>
        <member name="P:TagLib.Image.CombinedImageTag.OtherTags">
            <summary>
               Other image tags available in this tag.
            </summary>
        </member>
        <member name="P:TagLib.Image.CombinedImageTag.AllowedTypes">
            <summary>
               Stores the types of the tags, which are allowed for
               the current instance.
            </summary>
        </member>
        <member name="P:TagLib.Image.CombinedImageTag.AllTags">
            <summary>
               Returns all image tags in this tag, with XMP
               and Exif first.
            </summary>
        </member>
        <member name="M:TagLib.Image.CombinedImageTag.#ctor(TagLib.TagTypes)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Image.CombinedImageTag" /> with a restriction on the
               allowed tag types contained in this combined tag.
            </summary>
            <param name="allowedTypes">
               A <see cref="P:TagLib.Image.CombinedImageTag.TagTypes" /> value, which restricts the
               types of metadata that can be contained in this
               combined tag.
            </param>
        </member>
        <member name="P:TagLib.Image.CombinedImageTag.TagTypes">
            <summary>
               Gets the tag types contained in the current instance.
            </summary>
            <value>
               A bitwise combined <see cref="T:TagLib.TagTypes" />
               containing the tag types contained in the current
               instance.
            </value>
        </member>
        <member name="M:TagLib.Image.CombinedImageTag.Clear">
            <summary>
               Clears all of the child tags.
            </summary>
        </member>
        <member name="P:TagLib.Image.CombinedImageTag.Keywords">
            <summary>
               Gets or sets the keywords for the image described
               by the current instance.
            </summary>
            <value>
               A <see cref="T:string[]" /> containing the keywords of the
               current instace.
            </value>
        </member>
        <member name="P:TagLib.Image.CombinedImageTag.Rating">
            <summary>
               Gets or sets the rating for the image described
               by the current instance.
            </summary>
            <value>
               A <see cref="T:System.Nullable"/> containing the rating of the
               current instace.
            </value>
        </member>
        <member name="P:TagLib.Image.CombinedImageTag.DateTime">
            <summary>
               Gets or sets the time when the image, the current instance
               belongs to, was taken.
            </summary>
            <value>
               A <see cref="T:System.Nullable"/> with the time the image was taken.
            </value>
        </member>
        <member name="P:TagLib.Image.CombinedImageTag.Orientation">
            <summary>
               Gets or sets the orientation of the image described
               by the current instance.
            </summary>
            <value>
               A <see cref="T:TagLib.Image.ImageOrientation" /> containing the orienatation of the
               image
            </value>
        </member>
        <member name="P:TagLib.Image.CombinedImageTag.Software">
            <summary>
               Gets or sets the software the image, the current instance
               belongs to, was created with.
            </summary>
            <value>
               A <see cref="T:System.String" /> containing the name of the
               software the current instace was created with.
            </value>
        </member>
        <member name="P:TagLib.Image.CombinedImageTag.Latitude">
            <summary>
               Gets or sets the latitude of the GPS coordinate the current
               image was taken.
            </summary>
            <value>
               A <see cref="T:System.Nullable"/> with the latitude ranging from -90.0
               to +90.0 degrees.
            </value>
        </member>
        <member name="P:TagLib.Image.CombinedImageTag.Longitude">
            <summary>
               Gets or sets the longitude of the GPS coordinate the current
               image was taken.
            </summary>
            <value>
               A <see cref="T:System.Nullable"/> with the longitude ranging from -180.0
               to +180.0 degrees.
            </value>
        </member>
        <member name="P:TagLib.Image.CombinedImageTag.Altitude">
            <summary>
               Gets or sets the altitude of the GPS coordinate the current
               image was taken. The unit is meter.
            </summary>
            <value>
               A <see cref="T:System.Nullable"/> with the altitude. A positive value
               is above sea level, a negative one below sea level. The unit is meter.
            </value>
        </member>
        <member name="P:TagLib.Image.CombinedImageTag.ExposureTime">
            <summary>
               Gets the exposure time the image, the current instance belongs
               to, was taken with.
            </summary>
            <value>
               A <see cref="T:System.Nullable"/> with the exposure time in seconds.
            </value>
        </member>
        <member name="P:TagLib.Image.CombinedImageTag.FNumber">
            <summary>
               Gets the FNumber the image, the current instance belongs
               to, was taken with.
            </summary>
            <value>
               A <see cref="T:System.Nullable"/> with the FNumber.
            </value>
        </member>
        <member name="P:TagLib.Image.CombinedImageTag.ISOSpeedRatings">
            <summary>
               Gets the ISO speed the image, the current instance belongs
               to, was taken with.
            </summary>
            <value>
               A <see cref="T:System.Nullable"/> with the ISO speed as defined in ISO 12232.
            </value>
        </member>
        <member name="P:TagLib.Image.CombinedImageTag.FocalLength">
            <summary>
               Gets the focal length the image, the current instance belongs
               to, was taken with.
            </summary>
            <value>
               A <see cref="T:System.Nullable"/> with the focal length in millimeters.
            </value>
        </member>
        <member name="P:TagLib.Image.CombinedImageTag.FocalLengthIn35mmFilm">
            <summary>
               Gets the focal length the image, the current instance belongs
               to, was taken with, assuming a 35mm film camera.
            </summary>
            <value>
               A <see cref="T:System.Nullable"/> with the focal length in 35mm equivalent in millimeters.
            </value>
        </member>
        <member name="P:TagLib.Image.CombinedImageTag.Make">
            <summary>
               Gets the manufacture of the recording equipment the image, the
               current instance belongs to, was taken with.
            </summary>
            <value>
               A <see cref="T:System.String" /> with the manufacture name.
            </value>
        </member>
        <member name="P:TagLib.Image.CombinedImageTag.Model">
            <summary>
               Gets the model name of the recording equipment the image, the
               current instance belongs to, was taken with.
            </summary>
            <value>
               A <see cref="T:System.String" /> with the model name.
            </value>
        </member>
        <member name="P:TagLib.Image.CombinedImageTag.Creator">
            <summary>
               Gets or sets the creator of the image.
            </summary>
            <value>
               A <see cref="T:System.String" /> with the name of the creator.
            </value>
        </member>
        <member name="P:TagLib.Image.CombinedImageTag.Title">
            <summary>
               Gets and sets the title for the media described by the
               current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> object containing the title for
               the media described by the current instance or <see
               langword="null" /> if no value is present.
            </value>
        </member>
        <member name="P:TagLib.Image.CombinedImageTag.Comment">
            <summary>
               Gets and sets a user comment on the media represented by
               the current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> object containing user comments
               on the media represented by the current instance or <see
               langword="null" /> if no value is present.
            </value>
        </member>
        <member name="P:TagLib.Image.CombinedImageTag.Copyright">
            <summary>
               Gets and sets the copyright information for the media
               represented by the current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> object containing the copyright
               information for the media represented by the current
               instance or <see langword="null" /> if no value present.
            </value>
        </member>
        <member name="T:TagLib.Image.File">
            <summary>
               This class extends <see cref="T:TagLib.File" /> to provide basic
               functionality common to all image types.
            </summary>
        </member>
        <member name="M:TagLib.Image.File.#ctor(System.String)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Image.File" /> for a specified path in the local file
               system.
            </summary>
            <param name="path">
               A <see cref="T:System.String" /> object containing the path of the
               file to use in the new instance.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="path" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:TagLib.Image.File.#ctor(TagLib.File.IFileAbstraction)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Image.File" /> for a specified file abstraction.
            </summary>
            <param name="abstraction">
               A <see cref="T:TagLib.File.IFileAbstraction" /> object to use when
               reading from and writing to the file.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="abstraction" /> is <see langword="null"
               />.
            </exception>
        </member>
        <member name="P:TagLib.Image.File.Tag">
            <summary>
               Gets a abstract representation of all tags stored in the
               current instance.
            </summary>
            <value>
               A <see cref="T:TagLib.Tag" /> object representing all tags
               stored in the current instance.
            </value>
        </member>
        <member name="P:TagLib.Image.File.ImageTag">
            <summary>
               Gets a abstract representation of all tags stored in the
               current instance.
            </summary>
            <value>
               A <see cref="T:TagLib.Image.CombinedImageTag" /> object
               representing all image tags stored in the current instance.
            </value>
        </member>
        <member name="M:TagLib.Image.File.EnsureAvailableTags">
            <summary>
               The method creates all tags which are allowed for the current
               instance of the image file. This method can be used to ensure,
               that all tags are in place and properties can be safely used
               to set values.
            </summary>
        </member>
        <member name="M:TagLib.Image.File.RemoveTags(TagLib.TagTypes)">
            <summary>
               Removes a set of tag types from the current instance.
            </summary>
            <param name="types">
               A bitwise combined <see cref="T:TagLib.TagTypes" /> value
               containing tag types to be removed from the file.
            </param>
            <remarks>
               In order to remove all tags from a file, pass <see
               cref="F:TagLib.TagTypes.AllTags" /> as <paramref name="types" />.
            </remarks>
        </member>
        <member name="M:TagLib.Image.File.GetTag(TagLib.TagTypes,System.Boolean)">
            <summary>
               Gets a tag of a specified type from the current instance,
               optionally creating a new tag if possible.
            </summary>
            <param name="type">
               A <see cref="T:TagLib.TagTypes" /> value indicating the
               type of tag to read.
            </param>
            <param name="create">
               A <see cref="T:System.Boolean" /> value specifying whether or not to
               try and create the tag if one is not found.
            </param>
            <returns>
               A <see cref="P:TagLib.Image.File.Tag" /> object containing the tag that was
               found in or added to the current instance. If no
               matching tag was found and none was created, <see
               langword="null" /> is returned.
            </returns>
        </member>
        <member name="M:TagLib.Image.File.CopyFrom(TagLib.Image.File)">
            <summary>
            	Copies metadata from the given file..
            </summary>
            <param name='file'>
            	File to copy metadata from.
            </param>
        </member>
        <member name="T:TagLib.Image.ImageBlockFile">
            <summary>
               Some image file formats are organized as a sequence of mostly
               independent data blocks whose order can be changed. Metadata is
               stored in some of those blocks and when metadata is saved, often the
               same task remains: Delete some blocks which contain metadata and
               overwrite some blocks with other metadata.
               This class extends <see cref="T:TagLib.Image.File" /> to provide this
               functionality. Blocks can be marked as metadata and when metadata is
               saved their space is used or they are deleted.
            </summary>
        </member>
        <member name="T:TagLib.Image.ImageBlockFile.MetadataBlock">
            <summary>
               This class represents a metadata block to overwrite.
            </summary>
        </member>
        <member name="P:TagLib.Image.ImageBlockFile.MetadataBlock.Start">
            <summary>
               The start index
            </summary>
        </member>
        <member name="P:TagLib.Image.ImageBlockFile.MetadataBlock.Length">
            <summary>
               The length of the block
            </summary>
        </member>
        <member name="M:TagLib.Image.ImageBlockFile.MetadataBlock.#ctor(System.Int64,System.Int64)">
            <summary>
               Constructor
            </summary>
            <param name="start">
               A <see cref="T:System.Int64"/> with the start of the block
            </param>
            <param name="length">
               A <see cref="T:System.Int64"/> with the length of the block
            </param>
        </member>
        <member name="M:TagLib.Image.ImageBlockFile.MetadataBlock.#ctor">
            <summary>
               Constructor. Creates a new instance with an empty block
            </summary>
        </member>
        <member name="M:TagLib.Image.ImageBlockFile.MetadataBlock.OverlapsWith(TagLib.Image.ImageBlockFile.MetadataBlock)">
            <summary>
               Checks if the given block overlaps with this instance.
            </summary>
            <param name="block">
               A <see cref="T:TagLib.Image.ImageBlockFile.MetadataBlock"/> with the block to check
               overlapping.
            </param>
            <returns>
               A <see cref="T:System.Boolean"/> which is true, if the given
               block overlapps with the current instance.
            </returns>
            <remarks>
               Overlapping means here also that blocks directly follow.
            </remarks>
        </member>
        <member name="M:TagLib.Image.ImageBlockFile.MetadataBlock.Add(TagLib.Image.ImageBlockFile.MetadataBlock)">
            <summary>
               Adds the given block to the current instance, if this is possible.
            </summary>
            <param name="block">
               A <see cref="T:TagLib.Image.ImageBlockFile.MetadataBlock"/> with the block to add.
            </param>
        </member>
        <member name="M:TagLib.Image.ImageBlockFile.MetadataBlock.Before(TagLib.Image.ImageBlockFile.MetadataBlock)">
            <summary>
               Checks, if the one block is before the other. That means,
               if the current instance ends before the given block starts.
            </summary>
            <param name="block">
               A <see cref="T:TagLib.Image.ImageBlockFile.MetadataBlock"/> to compare with.
            </param>
            <returns>
               A <see cref="T:System.Boolean"/> which is true if the current
               instance is before the given block.
            </returns>
        </member>
        <member name="M:TagLib.Image.ImageBlockFile.MetadataBlock.ToString">
            <summary>
               Provides a readable <see cref="T:System.String"/> for
               the current instance.
            </summary>
            <returns>
               A <see cref="T:System.String"/> representing the current
               instance.
            </returns>
        </member>
        <member name="F:TagLib.Image.ImageBlockFile.metadata_blocks">
            <summary>
               An odered list of the metadata blocks. The blocks do not overlap.
            </summary>
        </member>
        <member name="M:TagLib.Image.ImageBlockFile.AddMetadataBlock(System.Int64,System.Int64)">
            <summary>
               Adds a range to be treated as metadata.
            </summary>
            <param name="start">
               A <see cref="T:System.Int64"/> with the start index of the metadata block
            </param>
            <param name="length">
               A <see cref="T:System.Int64"/> with the length of the metadata block
            </param>
        </member>
        <member name="M:TagLib.Image.ImageBlockFile.SaveMetadata(TagLib.ByteVector,System.Int64)">
            <summary>
               Saves the given data at the given position. All metadata blocks are
               either deleted or overwritten.
            </summary>
            <param name="data">
               A <see cref="T:TagLib.ByteVector"/> with the metadata to write.
            </param>
            <param name="start">
               A <see cref="T:System.Int64"/> with the index to save the metadata at.
            </param>
        </member>
        <member name="M:TagLib.Image.ImageBlockFile.#ctor(System.String)">
            <summary>
               Constructs and initializes a new instance for a specified
               path in the local file system.
            </summary>
            <param name="path">
               A <see cref="T:System.String" /> object containing the path of the
               file to use in the new instance.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="path" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:TagLib.Image.ImageBlockFile.#ctor(TagLib.File.IFileAbstraction)">
            <summary>
               Constructs and initializes a new instance for a specified
               file abstraction.
            </summary>
            <param name="abstraction">
               A <see cref="T:TagLib.File.IFileAbstraction" /> object to use when
               reading from and writing to the file.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="abstraction" /> is <see langword="null"
               />.
            </exception>
        </member>
        <member name="T:TagLib.Image.ImageOrientation">
            
            	  1        2       3      4         5            6           7          8
            
            	888888  888888      88  88      8888888888  88                  88  8888888888
            	88          88      88  88      88  88      88  88          88  88      88  88
            	8888      8888    8888  8888    88          8888888888  8888888888          88
            	88          88      88  88
            	88          88  888888  888888
            
            	t-l     t-r     b-r     b-l     l-t         r-t         r-b             l-b
            
            	*
            <summary>
            Describes the orientation of an image.
            Values are viewed in terms of rows and columns.
            </summary>
        </member>
        <member name="F:TagLib.Image.ImageOrientation.None">
            <summary>
            No value is known.
            </summary>
        </member>
        <member name="F:TagLib.Image.ImageOrientation.TopLeft">
            <summary>
            No need to do any transformations.
            </summary>
        </member>
        <member name="F:TagLib.Image.ImageOrientation.TopRight">
            <summary>
            Mirror image vertically.
            </summary>
        </member>
        <member name="F:TagLib.Image.ImageOrientation.BottomRight">
            <summary>
            Rotate image 180 degrees.
            </summary>
        </member>
        <member name="F:TagLib.Image.ImageOrientation.BottomLeft">
            <summary>
            Mirror image horizontally
            </summary>
        </member>
        <member name="F:TagLib.Image.ImageOrientation.LeftTop">
            <summary>
            Mirror image horizontally and rotate 90 degrees clockwise.
            </summary>
        </member>
        <member name="F:TagLib.Image.ImageOrientation.RightTop">
            <summary>
            Rotate image 90 degrees clockwise.
            </summary>
        </member>
        <member name="F:TagLib.Image.ImageOrientation.RightBottom">
            <summary>
            Mirror image vertically and rotate 90 degrees clockwise.
            </summary>
        </member>
        <member name="F:TagLib.Image.ImageOrientation.LeftBottom">
            <summary>
            Rotate image 270 degrees clockwise.
            </summary>
        </member>
        <member name="T:TagLib.Image.ImageTag">
            <summary>
               A class to abstract the image tags. It extends the <see cref="T:TagLib.Tag"/>
               class and adds some image specific propties.
            </summary>
        </member>
        <member name="P:TagLib.Image.ImageTag.Keywords">
            <summary>
               Gets or sets the keywords for the image described
               by the current instance.
            </summary>
            <value>
               A <see cref="T:string[]" /> containing the keywords of the
               current instace.
            </value>
        </member>
        <member name="P:TagLib.Image.ImageTag.Rating">
            <summary>
               Gets or sets the rating for the image described
               by the current instance.
            </summary>
            <value>
               A <see cref="T:System.Nullable"/> containing the rating of the
               current instace.
            </value>
        </member>
        <member name="P:TagLib.Image.ImageTag.DateTime">
            <summary>
               Gets or sets the time when the image, the current instance
               belongs to, was taken.
            </summary>
            <value>
               A <see cref="T:System.Nullable"/> with the time the image was taken.
            </value>
        </member>
        <member name="P:TagLib.Image.ImageTag.Orientation">
            <summary>
               Gets or sets the orientation of the image described
               by the current instance.
            </summary>
            <value>
               A <see cref="T:TagLib.Image.ImageOrientation" /> containing the orientation of the
               image
            </value>
        </member>
        <member name="P:TagLib.Image.ImageTag.Software">
            <summary>
               Gets or sets the software the image, the current instance
               belongs to, was created with.
            </summary>
            <value>
               A <see cref="T:System.String" /> containing the name of the
               software the current instace was created with.
            </value>
        </member>
        <member name="P:TagLib.Image.ImageTag.Latitude">
            <summary>
               Gets or sets the latitude of the GPS coordinate the current
               image was taken.
            </summary>
            <value>
               A <see cref="T:System.Nullable"/> with the latitude ranging from -90.0
               to +90.0 degrees.
            </value>
        </member>
        <member name="P:TagLib.Image.ImageTag.Longitude">
            <summary>
               Gets or sets the longitude of the GPS coordinate the current
               image was taken.
            </summary>
            <value>
               A <see cref="T:System.Nullable"/> with the longitude ranging from -180.0
               to +180.0 degrees.
            </value>
        </member>
        <member name="P:TagLib.Image.ImageTag.Altitude">
            <summary>
               Gets or sets the altitude of the GPS coordinate the current
               image was taken. The unit is meter.
            </summary>
            <value>
               A <see cref="T:System.Nullable"/> with the altitude. A positive value
               is above sea level, a negative one below sea level. The unit is meter.
            </value>
        </member>
        <member name="P:TagLib.Image.ImageTag.ExposureTime">
            <summary>
               Gets the exposure time the image, the current instance belongs
               to, was taken with.
            </summary>
            <value>
               A <see cref="T:System.Nullable"/> with the exposure time in seconds.
            </value>
        </member>
        <member name="P:TagLib.Image.ImageTag.FNumber">
            <summary>
               Gets the FNumber the image, the current instance belongs
               to, was taken with.
            </summary>
            <value>
               A <see cref="T:System.Nullable"/> with the FNumber.
            </value>
        </member>
        <member name="P:TagLib.Image.ImageTag.ISOSpeedRatings">
            <summary>
               Gets the ISO speed the image, the current instance belongs
               to, was taken with.
            </summary>
            <value>
               A <see cref="T:System.Nullable"/> with the ISO speed as defined in ISO 12232.
            </value>
        </member>
        <member name="P:TagLib.Image.ImageTag.FocalLength">
            <summary>
               Gets the focal length the image, the current instance belongs
               to, was taken with.
            </summary>
            <value>
               A <see cref="T:System.Nullable"/> with the focal length in millimeters.
            </value>
        </member>
        <member name="P:TagLib.Image.ImageTag.FocalLengthIn35mmFilm">
            <summary>
               Gets the focal length the image, the current instance belongs
               to, was taken with, assuming a 35mm film camera.
            </summary>
            <value>
               A <see cref="T:System.Nullable"/> with the focal length in 35mm equivalent in millimeters.
            </value>
        </member>
        <member name="P:TagLib.Image.ImageTag.Make">
            <summary>
               Gets the manufacture of the recording equipment the image, the
               current instance belongs to, was taken with.
            </summary>
            <value>
               A <see cref="T:System.String" /> with the manufacture name.
            </value>
        </member>
        <member name="P:TagLib.Image.ImageTag.Model">
            <summary>
               Gets the model name of the recording equipment the image, the
               current instance belongs to, was taken with.
            </summary>
            <value>
               A <see cref="T:System.String" /> with the model name.
            </value>
        </member>
        <member name="P:TagLib.Image.ImageTag.Creator">
            <summary>
               Gets or sets the creator of the image.
            </summary>
            <value>
               A <see cref="T:System.String" /> with the name of the creator.
            </value>
        </member>
        <member name="T:TagLib.Image.NoMetadata.File">
            <summary>
               This class extends <see cref="T:TagLib.Image.File" /> to provide tagging
               some sort of support for files that don't support metadata. You
               obviously can't write to them, but you can populate an XMP tag, for
               sidecar purposes.
            </summary>
        </member>
        <member name="P:TagLib.Image.NoMetadata.File.Properties">
            <summary>
               Gets the media properties of the file represented by the
               current instance.
            </summary>
            <value>
               A <see cref="T:TagLib.Properties" /> object containing the
               media properties of the file represented by the current
               instance.
            </value>
        </member>
        <member name="P:TagLib.Image.NoMetadata.File.Writeable">
            <summary>
               Indicates if tags can be written back to the current file or not
            </summary>
            <value>
               A <see cref="T:System.Boolean" /> which is true if tags can be written to the
               current file, otherwise false.
            </value>
        </member>
        <member name="M:TagLib.Image.NoMetadata.File.#ctor(System.String,TagLib.ReadStyle)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Image.NoMetadata.File" /> for a specified path in the local file
               system and specified read style.
            </summary>
            <param name="path">
               A <see cref="T:System.String" /> object containing the path of the
               file to use in the new instance.
            </param>
            <param name="propertiesStyle">
               A <see cref="T:TagLib.ReadStyle" /> value specifying at what level
               of accuracy to read the media properties, or <see
               cref="F:TagLib.ReadStyle.None" /> to ignore the properties.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="path" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:TagLib.Image.NoMetadata.File.#ctor(System.String)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Image.NoMetadata.File" /> for a specified path in the local file
               system.
            </summary>
            <param name="path">
               A <see cref="T:System.String" /> object containing the path of the
               file to use in the new instance.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="path" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:TagLib.Image.NoMetadata.File.#ctor(TagLib.File.IFileAbstraction,TagLib.ReadStyle)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Image.NoMetadata.File" /> for a specified file abstraction and
               specified read style.
            </summary>
            <param name="abstraction">
               A <see cref="T:TagLib.File.IFileAbstraction" /> object to use when
               reading from and writing to the file.
            </param>
            <param name="propertiesStyle">
               A <see cref="T:TagLib.ReadStyle" /> value specifying at what level
               of accuracy to read the media properties, or <see
               cref="F:TagLib.ReadStyle.None" /> to ignore the properties.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="abstraction" /> is <see langword="null"
               />.
            </exception>
        </member>
        <member name="M:TagLib.Image.NoMetadata.File.#ctor(TagLib.File.IFileAbstraction)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Image.NoMetadata.File" /> for a specified file abstraction.
            </summary>
            <param name="abstraction">
               A <see cref="T:TagLib.File.IFileAbstraction" /> object to use when
               reading from and writing to the file.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="abstraction" /> is <see langword="null"
               />.
            </exception>
        </member>
        <member name="M:TagLib.Image.NoMetadata.File.Save">
            <summary>
               Saves the changes made in the current instance to the
               file it represents.
            </summary>
        </member>
        <member name="T:TagLib.Jpeg.Codec">
            <summary>
               A Jpeg photo codec. Contains basic photo details.
            </summary>
        </member>
        <member name="P:TagLib.Jpeg.Codec.Description">
            <summary>
               Gets a text description of the media represented by the
               current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> object containing a description
               of the media represented by the current instance.
            </value>
        </member>
        <member name="M:TagLib.Jpeg.Codec.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
               Constructs a new <see cref="T:TagLib.Jpeg.Codec" /> with the given width
               and height.
            </summary>
            <param name="width">
               The width of the photo.
            </param>
            <param name="height">
               The height of the photo.
            </param>
            <param name="quality">
               The quality of the photo.
            </param>
            <returns>
               A new <see cref="T:TagLib.Jpeg.Codec" /> instance.
            </returns>
        </member>
        <member name="T:TagLib.Jpeg.File">
            <summary>
               This class extends <see cref="T:TagLib.Image.ImageBlockFile" /> to provide tagging
               and properties support for Jpeg files.
            </summary>
        </member>
        <member name="F:TagLib.Jpeg.File.EXIF_IDENTIFIER">
            <summary>
               The magic bits used to recognize an Exif segment
            </summary>
        </member>
        <member name="F:TagLib.Jpeg.File.IPTC_IIM_IDENTIFIER">
            <summary>
            The magic strings used to identifiy an IPTC-IIM section
            </summary>
        </member>
        <member name="F:TagLib.Jpeg.File.BASIC_JFIF_HEADER">
            <summary>
               Standard (empty) JFIF header to add, if no one is contained
            </summary>
        </member>
        <member name="F:TagLib.Jpeg.File.properties">
            <summary>
               Contains the media properties.
            </summary>
        </member>
        <member name="F:TagLib.Jpeg.File.jfif_header">
            <summary>
               For now, we do not allow to change the jfif header. As long as this is
               the case, the header is kept as it is.
            </summary>
        </member>
        <member name="F:TagLib.Jpeg.File.width">
            <summary>
               The image width, as parsed from the Frame
            </summary>
        </member>
        <member name="F:TagLib.Jpeg.File.height">
            <summary>
               The image height, as parsed from the Frame
            </summary>
        </member>
        <member name="F:TagLib.Jpeg.File.quality">
            <summary>
               Quality of the image, stored as we parse the file
            </summary>
        </member>
        <member name="M:TagLib.Jpeg.File.#ctor(System.String,TagLib.ReadStyle)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Jpeg.File" /> for a specified path in the local file
               system and specified read style.
            </summary>
            <param name="path">
               A <see cref="T:System.String" /> object containing the path of the
               file to use in the new instance.
            </param>
            <param name="propertiesStyle">
               A <see cref="T:TagLib.ReadStyle" /> value specifying at what level
               of accuracy to read the media properties, or <see
               cref="F:TagLib.ReadStyle.None" /> to ignore the properties.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="path" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:TagLib.Jpeg.File.#ctor(System.String)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Jpeg.File" /> for a specified path in the local file
               system.
            </summary>
            <param name="path">
               A <see cref="T:System.String" /> object containing the path of the
               file to use in the new instance.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="path" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:TagLib.Jpeg.File.#ctor(TagLib.File.IFileAbstraction,TagLib.ReadStyle)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Jpeg.File" /> for a specified file abstraction and
               specified read style.
            </summary>
            <param name="abstraction">
               A <see cref="T:TagLib.File.IFileAbstraction" /> object to use when
               reading from and writing to the file.
            </param>
            <param name="propertiesStyle">
               A <see cref="T:TagLib.ReadStyle" /> value specifying at what level
               of accuracy to read the media properties, or <see
               cref="F:TagLib.ReadStyle.None" /> to ignore the properties.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="abstraction" /> is <see langword="null"
               />.
            </exception>
        </member>
        <member name="M:TagLib.Jpeg.File.#ctor(TagLib.File.IFileAbstraction)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Jpeg.File" /> for a specified file abstraction.
            </summary>
            <param name="abstraction">
               A <see cref="T:TagLib.File.IFileAbstraction" /> object to use when
               reading from and writing to the file.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="abstraction" /> is <see langword="null"
               />.
            </exception>
        </member>
        <member name="P:TagLib.Jpeg.File.Properties">
            <summary>
               Gets the media properties of the file represented by the
               current instance.
            </summary>
            <value>
               A <see cref="T:TagLib.Properties" /> object containing the
               media properties of the file represented by the current
               instance.
            </value>
        </member>
        <member name="M:TagLib.Jpeg.File.GetTag(TagLib.TagTypes,System.Boolean)">
            <summary>
             Gets a tag of a specified type from the current instance, optionally creating a
            new tag if possible.
            </summary>
        </member>
        <member name="M:TagLib.Jpeg.File.Save">
            <summary>
               Saves the changes made in the current instance to the
               file it represents.
            </summary>
        </member>
        <member name="M:TagLib.Jpeg.File.Read(TagLib.ReadStyle)">
            <summary>
               Reads the information from file with a specified read style.
            </summary>
            <param name="propertiesStyle">
               A <see cref="T:TagLib.ReadStyle" /> value specifying at what level
               of accuracy to read the media properties, or <see
               cref="F:TagLib.ReadStyle.None" /> to ignore the properties.
            </param>
        </member>
        <member name="M:TagLib.Jpeg.File.ExtractProperties">
            <summary>
               Attempts to extract the media properties of the main
               photo.
            </summary>
            <returns>
               A <see cref="P:TagLib.Jpeg.File.Properties" /> object with a best effort guess
               at the right values. When no guess at all can be made,
               <see langword="null" /> is returned.
            </returns>
        </member>
        <member name="M:TagLib.Jpeg.File.ValidateHeader">
            <summary>
               Validates if the opened file is actually a JPEG.
            </summary>
        </member>
        <member name="M:TagLib.Jpeg.File.ReadSegmentMarker">
            <summary>
               Reads a segment marker for a segment starting at current position.
               The second byte of the marker is returned, since the first is equal
               to 0xFF in every case.
            </summary>
            <returns>
               A <see cref="T:TagLib.Jpeg.Marker"/> with the second byte of the segment marker.
            </returns>
        </member>
        <member name="M:TagLib.Jpeg.File.ReadSegmentSize">
            <summary>
               Reads the size of a segment at the current position.
            </summary>
            <returns>
               A <see cref="T:System.UInt16"/> with the size of the current segment.
            </returns>
        </member>
        <member name="M:TagLib.Jpeg.File.ReadMetadata">
            <summary>
               Extracts the metadata from the current file by reading every segment in file.
               Method should be called with read position at first segment marker.
            </summary>
        </member>
        <member name="M:TagLib.Jpeg.File.ReadJFIFHeader(System.UInt16)">
            <summary>
               Reads a JFIF header at current position
            </summary>
        </member>
        <member name="M:TagLib.Jpeg.File.ReadAPP1Segment(System.UInt16)">
            <summary>
               Reads an APP1 segment to find EXIF or XMP metadata.
            </summary>
            <param name="length">
               The length of the segment that will be read.
            </param>
        </member>
        <member name="M:TagLib.Jpeg.File.ReadAPP13Segment(System.UInt16)">
            <summary>
               Reads an APP13 segment to find IPTC-IIM metadata.
            </summary>
            <param name="length">
               The length of the segment that will be read.
            </param>
            <remarks>More info and specs for IPTC-IIM:
            - Guidelines for Handling Image Metadata (http://www.metadataworkinggroup.org/specs/)
            - IPTC Standard Photo Metadata (July 2010) (http://www.iptc.org/std/photometadata/specification/IPTC-PhotoMetadata-201007_1.pdf)
            - Extracting IPTC header information from JPEG images (http://www.codeproject.com/KB/graphics/iptc.aspx?fid=2301&amp;df=90&amp;mpp=25&amp;noise=3&amp;prof=False&amp;sort=Position&amp;view=Quick&amp;fr=51#xx0xx)
            - Reading IPTC APP14 Segment Header Information from JPEG Images (http://www.codeproject.com/KB/graphics/ReadingIPTCAPP14.aspx?q=iptc)
            </remarks>
        </member>
        <member name="M:TagLib.Jpeg.File.WriteMetadata">
            <summary>
               Writes the metadata back to file. All metadata is stored in the first segments
               of the file.
            </summary>
        </member>
        <member name="M:TagLib.Jpeg.File.RenderExifSegment">
            <summary>
               Creates a <see cref="T:TagLib.ByteVector"/> for the Exif segment of this file
            </summary>
            <returns>
               A <see cref="T:TagLib.ByteVector"/> with the whole Exif segment, if exif tags
               exists, otherwise null.
            </returns>
        </member>
        <member name="M:TagLib.Jpeg.File.RenderXMPSegment">
            <summary>
               Creates a <see cref="T:TagLib.ByteVector"/> for the Xmp segment of this file
            </summary>
            <returns>
               A <see cref="T:TagLib.ByteVector"/> with the whole Xmp segment, if xmp tags
               exists, otherwise null.
            </returns>
        </member>
        <member name="M:TagLib.Jpeg.File.ReadCOMSegment(System.Int32)">
            <summary>
               Reads a COM segment to find the JPEG comment.
            </summary>
            <param name="length">
               The length of the segment that will be read.
            </param>
        </member>
        <member name="M:TagLib.Jpeg.File.RenderCOMSegment">
            <summary>
               Creates a <see cref="T:TagLib.ByteVector"/> for the comment segment of this file
            </summary>
            <returns>
               A <see cref="T:TagLib.ByteVector"/> with the whole comment segment, if a comment tag
               exists, otherwise null.
            </returns>
        </member>
        <member name="M:TagLib.Jpeg.File.ReadSOFSegment(System.Int32,TagLib.Jpeg.Marker)">
            <summary>
               Reads and parse a SOF segment
            </summary>
            <param name="length">
               The length of the segment that will be read.
            </param>
            <param name="marker">
               The SOFx marker.
            </param>
        </member>
        <member name="M:TagLib.Jpeg.File.ReadDQTSegment(System.Int32)">
            <summary>
               Reads the DQT Segment, and Guesstimate the image quality from it
            </summary>
            <param name="length">
               The length of the segment that will be read
            </param>
        </member>
        <member name="T:TagLib.Jpeg.JpegCommentTag">
            <summary>
               Contains the JPEG comment.
            </summary>
        </member>
        <member name="M:TagLib.Jpeg.JpegCommentTag.#ctor(System.String)">
            <summary>
               Constructor.
            </summary>
            <param name="value">
               The value of the comment.
            </param>
        </member>
        <member name="M:TagLib.Jpeg.JpegCommentTag.#ctor">
            <summary>
               Constructor. Creates a new empty comment.
            </summary>
        </member>
        <member name="P:TagLib.Jpeg.JpegCommentTag.Value">
            <summary>
               The value of the comment represented by the current instance.
            </summary>
        </member>
        <member name="P:TagLib.Jpeg.JpegCommentTag.Comment">
            <summary>
               Gets or sets the comment for the image described
               by the current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> containing the comment of the
               current instace.
            </value>
        </member>
        <member name="P:TagLib.Jpeg.JpegCommentTag.TagTypes">
            <summary>
               Gets the tag types contained in the current instance.
            </summary>
            <value>
               Always <see cref="F:TagLib.TagTypes.JpegComment" />.
            </value>
        </member>
        <member name="M:TagLib.Jpeg.JpegCommentTag.Clear">
            <summary>
               Clears the values stored in the current instance.
            </summary>
        </member>
        <member name="T:TagLib.Jpeg.Marker">
             <summary>
                This enum defines the different markers used in JPEG segments.
            
                See CCITT Rec. T.81 (1992 E), Table B.1 (p.32)
             </summary>
        </member>
        <member name="F:TagLib.Jpeg.Marker.SOF0">
            <summary>
               Start Of Frame marker, non-differential, Huffman coding, Baseline DCT
            </summary>
        </member>
        <member name="F:TagLib.Jpeg.Marker.SOF1">
            <summary>
               Start Of Frame marker, non-differential, Huffman coding, Extended Sequential DCT
            </summary>
        </member>
        <member name="F:TagLib.Jpeg.Marker.SOF2">
            <summary>
               Start Of Frame marker, non-differential, Huffman coding, Progressive DCT
            </summary>
        </member>
        <member name="F:TagLib.Jpeg.Marker.SOF3">
            <summary>
               Start Of Frame marker, non-differential, Huffman coding, Lossless (sequential)
            </summary>
        </member>
        <member name="F:TagLib.Jpeg.Marker.SOF5">
            <summary>
               Start Of Frame marker, differential, Huffman coding, Differential Sequential DCT
            </summary>
        </member>
        <member name="F:TagLib.Jpeg.Marker.SOF6">
            <summary>
               Start Of Frame marker, differential, Huffman coding, Differential Progressive DCT
            </summary>
        </member>
        <member name="F:TagLib.Jpeg.Marker.SOF7">
            <summary>
               Start Of Frame marker, differential, Huffman coding, Differential Lossless (sequential)
            </summary>
        </member>
        <member name="F:TagLib.Jpeg.Marker.JPG">
            <summary>
               Reserved for JPG extensions
            </summary>
        </member>
        <member name="F:TagLib.Jpeg.Marker.SOF9">
            <summary>
               Start Of Frame marker, non-differential, arithmetic coding, Extended Sequential DCT
            </summary>
        </member>
        <member name="F:TagLib.Jpeg.Marker.SOF10">
            <summary>
               Start Of Frame marker, non-differential, arithmetic coding, Progressive DCT
            </summary>
        </member>
        <member name="F:TagLib.Jpeg.Marker.SOF11">
            <summary>
               Start Of Frame marker, non-differential, arithmetic coding, Lossless (sequential)
            </summary>
        </member>
        <member name="F:TagLib.Jpeg.Marker.SOF13">
            <summary>
               Start Of Frame marker, differential, arithmetic coding, Differential Sequential DCT
            </summary>
        </member>
        <member name="F:TagLib.Jpeg.Marker.SOF14">
            <summary>
               Start Of Frame marker, differential, arithmetic coding, Differential Progressive DCT
            </summary>
        </member>
        <member name="F:TagLib.Jpeg.Marker.SOF15">
            <summary>
               Start Of Frame marker, differential, arithmetic coding, Differential Lossless (sequential)
            </summary>
        </member>
        <member name="F:TagLib.Jpeg.Marker.DHT">
            <summary>
               Define Huffman table(s)
            </summary>
        </member>
        <member name="F:TagLib.Jpeg.Marker.DAC">
            <summary>
               Define arithmetic coding conditioning(s)
            </summary>
        </member>
        <member name="F:TagLib.Jpeg.Marker.RST0">
            <summary>
               Restart
            </summary>
        </member>
        <member name="F:TagLib.Jpeg.Marker.RST1">
            <summary>
               Restart
            </summary>
        </member>
        <member name="F:TagLib.Jpeg.Marker.RST2">
            <summary>
               Restart
            </summary>
        </member>
        <member name="F:TagLib.Jpeg.Marker.RST3">
            <summary>
               Restart
            </summary>
        </member>
        <member name="F:TagLib.Jpeg.Marker.RST4">
            <summary>
               Restart
            </summary>
        </member>
        <member name="F:TagLib.Jpeg.Marker.RST5">
            <summary>
               Restart
            </summary>
        </member>
        <member name="F:TagLib.Jpeg.Marker.RST6">
            <summary>
               Restart
            </summary>
        </member>
        <member name="F:TagLib.Jpeg.Marker.RST7">
            <summary>
               Restart
            </summary>
        </member>
        <member name="F:TagLib.Jpeg.Marker.SOI">
            <summary>
               Start of Image
            </summary>
        </member>
        <member name="F:TagLib.Jpeg.Marker.EOI">
            <summary>
               End of Image
            </summary>
        </member>
        <member name="F:TagLib.Jpeg.Marker.SOS">
            <summary>
               Start of scan
            </summary>
        </member>
        <member name="F:TagLib.Jpeg.Marker.DQT">
            <summary>
               Define quantization table (s)
            </summary>
        </member>
        <member name="F:TagLib.Jpeg.Marker.DNL">
            <summary>
               Define number of lines
            </summary>
        </member>
        <member name="F:TagLib.Jpeg.Marker.DRI">
            <summary>
               Define restart interval
            </summary>
        </member>
        <member name="F:TagLib.Jpeg.Marker.DHP">
            <summary>
               Define hierarchical progression
            </summary>
        </member>
        <member name="F:TagLib.Jpeg.Marker.EXP">
            <summary>
               Define reference component
            </summary>
        </member>
        <member name="F:TagLib.Jpeg.Marker.APP0">
            <summary>
               Reserved for application segment
            </summary>
        </member>
        <member name="F:TagLib.Jpeg.Marker.APP1">
            <summary>
               Reserved for application segment
            </summary>
        </member>
        <member name="F:TagLib.Jpeg.Marker.APP2">
            <summary>
               Reserved for application segment
            </summary>
        </member>
        <member name="F:TagLib.Jpeg.Marker.APP3">
            <summary>
               Reserved for application segment
            </summary>
        </member>
        <member name="F:TagLib.Jpeg.Marker.APP4">
            <summary>
               Reserved for application segment
            </summary>
        </member>
        <member name="F:TagLib.Jpeg.Marker.APP5">
            <summary>
               Reserved for application segment
            </summary>
        </member>
        <member name="F:TagLib.Jpeg.Marker.APP6">
            <summary>
               Reserved for application segment
            </summary>
        </member>
        <member name="F:TagLib.Jpeg.Marker.APP7">
            <summary>
               Reserved for application segment
            </summary>
        </member>
        <member name="F:TagLib.Jpeg.Marker.APP8">
            <summary>
               Reserved for application segment
            </summary>
        </member>
        <member name="F:TagLib.Jpeg.Marker.APP9">
            <summary>
               Reserved for application segment
            </summary>
        </member>
        <member name="F:TagLib.Jpeg.Marker.APP10">
            <summary>
               Reserved for application segment
            </summary>
        </member>
        <member name="F:TagLib.Jpeg.Marker.APP11">
            <summary>
               Reserved for application segment
            </summary>
        </member>
        <member name="F:TagLib.Jpeg.Marker.APP12">
            <summary>
               Reserved for application segment
            </summary>
        </member>
        <member name="F:TagLib.Jpeg.Marker.APP13">
            <summary>
               Reserved for application segment
            </summary>
        </member>
        <member name="F:TagLib.Jpeg.Marker.APP14">
            <summary>
               Reserved for application segment
            </summary>
        </member>
        <member name="F:TagLib.Jpeg.Marker.APP15">
            <summary>
               Reserved for application segment
            </summary>
        </member>
        <member name="F:TagLib.Jpeg.Marker.JPG0">
            <summary>
               Reserved for JPEG extension
            </summary>
        </member>
        <member name="F:TagLib.Jpeg.Marker.JPG1">
            <summary>
               Reserved for JPEG extension
            </summary>
        </member>
        <member name="F:TagLib.Jpeg.Marker.JPG2">
            <summary>
               Reserved for JPEG extension
            </summary>
        </member>
        <member name="F:TagLib.Jpeg.Marker.JPG3">
            <summary>
               Reserved for JPEG extension
            </summary>
        </member>
        <member name="F:TagLib.Jpeg.Marker.JPG4">
            <summary>
               Reserved for JPEG extension
            </summary>
        </member>
        <member name="F:TagLib.Jpeg.Marker.JPG5">
            <summary>
               Reserved for JPEG extension
            </summary>
        </member>
        <member name="F:TagLib.Jpeg.Marker.JPG6">
            <summary>
               Reserved for JPEG extension
            </summary>
        </member>
        <member name="F:TagLib.Jpeg.Marker.JPG7">
            <summary>
               Reserved for JPEG extension
            </summary>
        </member>
        <member name="F:TagLib.Jpeg.Marker.JPG8">
            <summary>
               Reserved for JPEG extension
            </summary>
        </member>
        <member name="F:TagLib.Jpeg.Marker.JPG9">
            <summary>
               Reserved for JPEG extension
            </summary>
        </member>
        <member name="F:TagLib.Jpeg.Marker.JPG10">
            <summary>
               Reserved for JPEG extension
            </summary>
        </member>
        <member name="F:TagLib.Jpeg.Marker.JPG11">
            <summary>
               Reserved for JPEG extension
            </summary>
        </member>
        <member name="F:TagLib.Jpeg.Marker.JPG12">
            <summary>
               Reserved for JPEG extension
            </summary>
        </member>
        <member name="F:TagLib.Jpeg.Marker.JPG13">
            <summary>
               Reserved for JPEG extension
            </summary>
        </member>
        <member name="F:TagLib.Jpeg.Marker.COM">
            <summary>
              Comment
            </summary>
        </member>
        <member name="T:TagLib.Jpeg.Table">
            <summary>
               Contains static predefined tables and helpers
            </summary>
        </member>
        <member name="F:TagLib.Jpeg.Table.StandardLuminanceQuantization">
             <summary>
                Standard Luminance Quantization table
            
                See CCIT Rec. T.81 (1992 E), K.1 (p143)
             </summary>
        </member>
        <member name="F:TagLib.Jpeg.Table.StandardChrominanceQuantization">
             <summary>
                Standard Chrominance Quantization table
            
                See CCIT Rec. T.81 (1992 E), K.1 (p143)
             </summary>
        </member>
        <member name="T:TagLib.ListBase`1">
            <summary>
               This class implements <see cref="T:System.Collections.Generic`1"/>
               for objects that implement <see cref="T:System.IComparable`1"/>,
               providing extra features used in lists in TagLib#.
            </summary>
        </member>
        <member name="F:TagLib.ListBase`1.data">
            <summary>
               Contains the internal list.
            </summary>
        </member>
        <member name="M:TagLib.ListBase`1.#ctor">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.ListBase`1" /> with no contents.
            </summary>
        </member>
        <member name="M:TagLib.ListBase`1.#ctor(TagLib.ListBase{`0})">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.ListBase`1" /> with specified contents.
            </summary>
            <param name="list">
              A <see cref="T:System.Collections.Generic.IEnumerable`1"
              /> containing objects to add to the current instance.
            </param>
        </member>
        <member name="M:TagLib.ListBase`1.#ctor(`0[])">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.ListBase`1" /> with specified contents.
            </summary>
            <param name="list">
              A <see cref="T:System.Array" /> containing objects to add to
              the current instance.
            </param>
        </member>
        <member name="P:TagLib.ListBase`1.IsEmpty">
            <summary>
               Gets whether or not the current instance is empty.
            </summary>
            <value>
               <see langword="true" /> if the current instance is empty;
               otherwise <see langword="false" />.
            </value>
        </member>
        <member name="M:TagLib.ListBase`1.Add(TagLib.ListBase{`0})">
            <summary>
               Adds a collection of elements to the current instance.
            </summary>
            <param name="list">
               A <see cref="T:TagLib.ListBase`1"/> object containing
               elements to add to the current instance.
            </param>
        </member>
        <member name="M:TagLib.ListBase`1.Add(System.Collections.Generic.IEnumerable{`0})">
            <summary>
               Adds a collection of elements to the current instance.
            </summary>
            <param name="list">
               A <see cref="T:System.Collections.Generic.IEnumerable`1"/> object containing
               elements to add to the current instance.
            </param>
        </member>
        <member name="M:TagLib.ListBase`1.Add(`0[])">
            <summary>
               Adds a collection of elements to the current instance.
            </summary>
            <param name="list">
               An array containing elements to add to the current
               instance.
            </param>
        </member>
        <member name="M:TagLib.ListBase`1.SortedInsert(`0,System.Boolean)">
            <summary>
               Performs a sorted insert of an object into the current
               instance, optionally only adding if the item is unique.
            </summary>
            <param name="item">
               An object to add to the current instance.
            </param>
            <param name="unique">
               If <see langword="true" />, the object will only be added
               if an identical value is not already contained in the
               current instance.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="item" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:TagLib.ListBase`1.SortedInsert(`0)">
            <summary>
               Performs a sorted insert of an object into the current
               instance.
            </summary>
            <param name="item">
               An object to add to the current instance.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="item" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:TagLib.ListBase`1.ToArray">
            <summary>
               Converts the current instance to an array.
            </summary>
            <returns>
               A <see cref="T:System.Array" /> containing the contents of
               the current instance.
            </returns>
        </member>
        <member name="P:TagLib.ListBase`1.IsReadOnly">
            <summary>
               Gets whether or not the current instance is read-only.
            </summary>
            <value>
               Always <see langword="false" />.
            </value>
        </member>
        <member name="P:TagLib.ListBase`1.IsFixedSize">
            <summary>
               Gets whether or not the current instance has a fixed
               size.
            </summary>
            <value>
               Always <see langword="false" />.
            </value>
        </member>
        <member name="P:TagLib.ListBase`1.Item(System.Int32)">
            <summary>
               Gets and sets the value as a specified index.
            </summary>
        </member>
        <member name="M:TagLib.ListBase`1.Add(`0)">
            <summary>
               Adds a single item to end of the current instance.
            </summary>
            <param name="item">
               An object to add to the end of the current instance.
            </param>
        </member>
        <member name="M:TagLib.ListBase`1.Clear">
            <summary>
               Clears the contents of the current instance.
            </summary>
        </member>
        <member name="M:TagLib.ListBase`1.Contains(`0)">
            <summary>
               Gets whether or not the current instance contains a
               specified object.
            </summary>
            <param name="item">
               An object to look for in the current instance.
            </param>
            <returns>
               <see langword="true" /> if the item could be found;
               otherwise <see langword="false" />.
            </returns>
        </member>
        <member name="M:TagLib.ListBase`1.IndexOf(`0)">
            <summary>
               Gets the index of the first occurance of a value.
            </summary>
            <param name="item">
               A object to find in the current instance.
            </param>
            <returns>
               A <see cref="T:System.Int32" /> value containing the first index
               at which the value was found, or -1 if it was not found.
            </returns>
        </member>
        <member name="M:TagLib.ListBase`1.Insert(System.Int32,`0)">
            <summary>
               Inserts a single value into the current instance at a
               specified index.
            </summary>
            <param name="index">
               A <see cref="T:System.Int32" /> value specifying the position at
               which to insert the value.
            </param>
            <param name="item">
               An object to insert into the current instance.
            </param>
        </member>
        <member name="M:TagLib.ListBase`1.Remove(`0)">
            <summary>
               Removes the first occurance of an object from the current
               instance.
            </summary>
            <param name="item">
               An object to remove from the current instance.
            </param>
            <returns>
               <see langword="true" /> if the value was removed;
               otherwise the value did not appear in the current
               instance and <see langword="false" /> is returned.
            </returns>
        </member>
        <member name="M:TagLib.ListBase`1.RemoveAt(System.Int32)">
            <summary>
               Removes the item at the specified index.
            </summary>
            <param name="index">
               A <see cref="T:System.Int32" /> value specifying the position at
               which to remove an item.
            </param>
        </member>
        <member name="M:TagLib.ListBase`1.ToString(System.String)">
            <summary>
               Gets a string representation of the contents of the
               current instance, joined by a separator.
            </summary>
            <param name="separator">
               A <see cref="T:System.String" /> object to separate the items
               with.
            </param>
            <returns>
               A <see cref="T:System.String" /> object containing the contents
               of the current instance.
            </returns>
        </member>
        <member name="M:TagLib.ListBase`1.ToString">
            <summary>
               Gets a string representation of the contents of the
               current instance, joined by commas.
            </summary>
            <returns>
               A <see cref="T:System.String" /> object containing the contents
               of the current instance.
            </returns>
        </member>
        <member name="P:TagLib.ListBase`1.Count">
            <summary>
               Gets the number of elements in the current instance.
            </summary>
            <value>
               A <see cref="T:System.Int32" /> value containing the number of
               elements in the current instance.
            </value>
        </member>
        <member name="P:TagLib.ListBase`1.IsSynchronized">
            <summary>
               Gets whether or not the current instance is synchronized.
            </summary>
            <value>
               Always <see langword="false" />.
            </value>
        </member>
        <member name="P:TagLib.ListBase`1.SyncRoot">
            <summary>
               Gets the object that can be used to synchronize the
               current instance.
            </summary>
            <value>
               A <see cref="T:System.Object" /> that can be used to synchronize
               the current instance.
            </value>
        </member>
        <member name="M:TagLib.ListBase`1.CopyTo(`0[],System.Int32)">
            <summary>
               Copies the current instance to an array, starting at a
               specified index.
            </summary>
            <param name="array">
               An array to copy to.
            </param>
            <param name="arrayIndex">
               A <see cref="T:System.Int32" /> value indicating the index in
               <paramref name="array" /> at which to start copying.
            </param>
        </member>
        <member name="M:TagLib.ListBase`1.GetEnumerator">
            <summary>
               Gets an enumerator for enumerating through the elements
               in the current instance.
            </summary>
            <returns>
               A <see cref="T:System.Collections.IEnumerator`1" /> for
               enumerating through the tag's data boxes.
            </returns>
        </member>
        <member name="T:TagLib.Matroska.Attachment">
            <summary>
            Describes a Matroska Attachment. 
            Attachments may be pictures, but also any other content type.
            </summary>
        </member>
        <member name="M:TagLib.Matroska.Attachment.#ctor">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Matroska.Attachment" /> with no data or values.
            </summary>
        </member>
        <member name="M:TagLib.Matroska.Attachment.#ctor(System.String)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Matroska.Attachment" /> by reading in the contents of a
               specified file.
            </summary>
            <param name="path">
               A <see cref="T:System.String"/> object containing the path of the
               file to read.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="path" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:TagLib.Matroska.Attachment.#ctor(TagLib.File.IFileAbstraction,System.Int64,System.Int64)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Matroska.Attachment" /> by reading in the contents of a
               specified file abstraction.
            </summary>
            <param name="abstraction">
               A <see cref="T:TagLib.File.IFileAbstraction"/> object containing
               abstraction of the file to read.
            </param>
            <param name="offset">
               The position in bytes where the picture is located in the
               <see cref="T:File.IFileAbstraction"/>.
            </param>
            <param name="size">
               The size in bytes of the picture in the
               <see cref="T:File.IFileAbstraction"/> (default: read all).
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="abstraction" /> is <see langword="null"
               />.
            </exception>
        </member>
        <member name="M:TagLib.Matroska.Attachment.#ctor(TagLib.ByteVector)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Matroska.Attachment" /> by using the contents of a <see
               cref="T:TagLib.ByteVector" /> object.
            </summary>
            <param name="data">
               A <see cref="T:TagLib.ByteVector"/> object containing picture data
               to use.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="data" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:TagLib.Matroska.Attachment.#ctor(TagLib.IPicture)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Matroska.Attachment" /> by doing a shallow copy of <see 
               cref="T:TagLib.IPicture" />.
            </summary>
            <param name="picture">
               A <see cref="T:TagLib.IPicture"/> object containing picture data
               to convert to an Attachment.
            </param>
        </member>
        <member name="M:TagLib.Matroska.Attachment.SetTypeFromFilename">
            <summary>
            Derive the Picture-type from the the file-name. 
            It change the <see cref="P:Type"/> from the <see cref="P:Filename"/>.
            </summary>
        </member>
        <member name="M:TagLib.Matroska.Attachment.SetFilenameFromType">
            <summary>
            Derive thefile-name from the the Piture type. 
            It change the <see cref="P:Filename"/> from the <see cref="P:Type"/> if required, 
            but not if the filename already matches the type.
            </summary>
            <returns>true if <see cref="P:Filename"/> changed</returns>
        </member>
        <member name="P:TagLib.Matroska.Attachment.UID">
            <summary>
            Unique ID representing the element, as random as possible (setting zero will generate automatically a new one).
            </summary>
        </member>
        <member name="P:TagLib.Matroska.Attachment.UIDType">
            <summary>
            Get the Tag type the UID should be represented by, or 0 if undefined
            </summary>
        </member>
        <member name="T:TagLib.Matroska.AudioTrack">
            <summary>
            Describes a Matroska Audio track.
            </summary>
        </member>
        <member name="M:TagLib.Matroska.AudioTrack.#ctor(TagLib.Matroska.File,TagLib.Matroska.EBMLreader)">
            <summary>
             Construct a <see cref="T:TagLib.Matroska.AudioTrack" /> reading information from 
             provided file data.
            Parsing will be done reading from _file at position references by 
            parent element's data section.
            </summary>
            <param name="_file"><see cref="T:TagLib.Matroska.File" /> instance to read from.</param>
            <param name="element">Parent <see cref="T:TagLib.Matroska.EBMLreader" />.</param>
        </member>
        <member name="P:TagLib.Matroska.AudioTrack.UnknownElements">
            <summary>
            List of unknown elements encountered while parsing.
            </summary>
        </member>
        <member name="P:TagLib.Matroska.AudioTrack.MediaTypes">
            <summary>
            This type of track only has audio media type.
            </summary>
        </member>
        <member name="P:TagLib.Matroska.AudioTrack.AudioBitrate">
            <summary>
            Audio track bitrate.
            </summary>
        </member>
        <member name="P:TagLib.Matroska.AudioTrack.AudioSampleRate">
            <summary>
            Audio track sampling rate.
            </summary>
        </member>
        <member name="P:TagLib.Matroska.AudioTrack.AudioChannels">
            <summary>
            Number of audio channels in this track.
            </summary>
        </member>
        <member name="T:TagLib.Matroska.EBMLelement">
            <summary>
            Represent a generic EBML Element and its content.
            </summary>
        </member>
        <member name="M:TagLib.Matroska.EBMLelement.#ctor">
            <summary>
            Constructs an empty <see cref="T:TagLib.Matroska.EBMLelement" />.
            </summary>
        </member>
        <member name="M:TagLib.Matroska.EBMLelement.#ctor(TagLib.Matroska.MatroskaID)">
            <summary>
            Construct a <see cref="T:TagLib.Matroska.EBMLelement" /> to contain children elements.
            </summary>
            <param name="ebmlid">EBML ID of the element to be created.</param>
        </member>
        <member name="M:TagLib.Matroska.EBMLelement.#ctor(TagLib.Matroska.MatroskaID,TagLib.ByteVector)">
            <summary>
            Construct a <see cref="T:TagLib.Matroska.EBMLelement" /> to contain data.
            </summary>
            <param name="ebmlid">EBML ID of the element to be created.</param>
            <param name="data">EBML data of the element to be created.</param>
        </member>
        <member name="M:TagLib.Matroska.EBMLelement.#ctor(TagLib.Matroska.MatroskaID,System.UInt64)">
            <summary>
            Construct <see cref="T:TagLib.Matroska.EBMLelement" /> to contain data.
            </summary>
            <param name="ebmlid">EBML ID of the element to be created.</param>
            <param name="value">EBML data as an <see cref="T:System.UInt64"/> value.</param>
        </member>
        <member name="F:TagLib.Matroska.EBMLelement.ID">
            <summary>
            EBML Element Identifier.
            </summary>
        </member>
        <member name="F:TagLib.Matroska.EBMLelement.Data">
            <summary>
            Get or set the data represented by the EBML
            </summary>
        </member>
        <member name="F:TagLib.Matroska.EBMLelement.Children">
            <summary>
            Get or set the element embedded in the EBML
            </summary>
        </member>
        <member name="F:TagLib.Matroska.EBMLelement.IncSize">
            <summary>
            Get or set whether the EBML should have a size of one byte more 
            than the optimal size.
            </summary>
        </member>
        <member name="P:TagLib.Matroska.EBMLelement.Size">
            <summary>
            EBML Element size in bytes.
            </summary>
        </member>
        <member name="P:TagLib.Matroska.EBMLelement.IDSize">
            <summary>
            Get the size of the EBML ID, in bytes
            </summary>
        </member>
        <member name="P:TagLib.Matroska.EBMLelement.DataSizeSize">
            <summary>
            Get the size of the EBML data-size, in bytes
            </summary>
        </member>
        <member name="P:TagLib.Matroska.EBMLelement.DataSize">
            <summary>
            EBML Element data/content size in bytes.
            </summary>
        </member>
        <member name="M:TagLib.Matroska.EBMLelement.IncrementSize">
            <summary>
            Try to increase the size of the EBML by 1 byte.
            </summary>
            <returns>True if successfully increased size, false if failed.</returns>
        </member>
        <member name="P:TagLib.Matroska.EBMLelement.Header">
            <summary>
            Get the EBML ID and data-size as a vector of bytes.
            </summary>
        </member>
        <member name="M:TagLib.Matroska.EBMLelement.EBMLByteSize(System.UInt64)">
            <summary>
            Get the byte-size required to encode an EBML value with the leading 1. 
            </summary>
            <param name="value">Encoded value</param>
            <returns>size in bytes</returns>
        </member>
        <member name="M:TagLib.Matroska.EBMLelement.GetString">
            <summary>
            Get a string from EBML Element's data section (UTF-8).
            Handle null-termination.
            </summary>
            <returns>a string object containing the parsed value.</returns>
        </member>
        <member name="M:TagLib.Matroska.EBMLelement.GetBool">
            <summary>
            Get a boolean from EBML Element's data section.
            </summary>
            <returns>a bool containing the parsed value.</returns>
        </member>
        <member name="M:TagLib.Matroska.EBMLelement.GetDouble">
            <summary>
            Get a double from EBML Element's data section.
            </summary>
            <returns>a double containing the parsed value.</returns>
        </member>
        <member name="M:TagLib.Matroska.EBMLelement.GetULong">
            <summary>
            Get an unsigned integer (any size from 1 to 8 bytes) from EBML Element's data section.
            </summary>
            <returns>a ulong containing the parsed value.</returns>
        </member>
        <member name="M:TagLib.Matroska.EBMLelement.GetBytes">
            <summary>
            Get a bytes vector from EBML Element's data section.
            </summary>
            <returns>a <see cref="T:TagLib.ByteVector" /> containing the parsed value.</returns>
        </member>
        <member name="M:TagLib.Matroska.EBMLelement.SetData(System.String)">
            <summary>
            Set data content as <see cref="T:System.String"/> to the EBML file
            </summary>
            <param name="data">data as <see cref="T:System.String"/></param>
        </member>
        <member name="M:TagLib.Matroska.EBMLelement.SetData(System.UInt64)">
            <summary>
             Set data content as <see cref="T:System.UInt64"/> to the EBML file
            </summary>
            <param name="data">unsigned long number to write</param>
        </member>
        <member name="M:TagLib.Matroska.EBMLelement.Write(TagLib.Matroska.File,System.Int64,System.Int64)">
            <summary>
            Write the EMBL (and all its data/content) to a file.
            </summary>
            <param name="file">A <see cref="T:TagLib.Matroska.File"/> representing the file to write to.</param>
            <param name="position">The byte-position in the file to write the EBML to.</param>
            <param name="reserved">The reserved size in bytes that the EBML may overwrite from the given position. (Default: 0, insert)</param>
        </member>
        <member name="T:TagLib.Matroska.EBMLID">
            <summary>
            Public enumeration listing the possible EBML element identifiers.
            </summary>
        </member>
        <member name="F:TagLib.Matroska.EBMLID.EBMLHeader">
            <summary>
            Indicates an EBML Header element.
            </summary>
        </member>
        <member name="F:TagLib.Matroska.EBMLID.EBMLVersion">
            <summary>
            Indicates an EBML Version element.
            </summary>
        </member>
        <member name="F:TagLib.Matroska.EBMLID.EBMLReadVersion">
            <summary>
            Indicates an EBML Read Version element.
            </summary>
        </member>
        <member name="F:TagLib.Matroska.EBMLID.EBMLMaxIDLength">
            <summary>
            Indicates an EBML Max ID Length element.
            </summary>
        </member>
        <member name="F:TagLib.Matroska.EBMLID.EBMLMaxSizeLength">
            <summary>
            Indicates an EBML Max Size Length element.
            </summary>
        </member>
        <member name="F:TagLib.Matroska.EBMLID.EBMLDocType">
            <summary>
            Indicates an EBML Doc Type element.
            </summary>
        </member>
        <member name="F:TagLib.Matroska.EBMLID.EBMLDocTypeVersion">
            <summary>
            Indicates an EBML Doc Type Version element.
            </summary>
        </member>
        <member name="F:TagLib.Matroska.EBMLID.EBMLDocTypeReadVersion">
            <summary>
            Indicates an EBML Doc Type Read Version element.
            </summary>
        </member>
        <member name="F:TagLib.Matroska.EBMLID.EBMLVoid">
            <summary>
            Indicates an EBML Void element.
            </summary>
        </member>
        <member name="T:TagLib.Matroska.EBMLreader">
            <summary>
            Read a Matroska EBML element from a file, but also provides basic modifications to an 
            EBML element directly on the file (write). This can also represent an abstract EBML 
            on the file (placeholder).
            </summary>
            <remarks>
             This was intitialy called <see cref="T:TagLib.Matroska.EBMLelement"/>, but this was in fact a file-reader.
             The name <see cref="T:TagLib.Matroska.EBMLelement"/> correspond more to the class which has been created to
             represent an EBML structure (regardless of file-issues) to support the EBML writing to file.
            </remarks>
        </member>
        <member name="M:TagLib.Matroska.EBMLreader.#ctor(TagLib.Matroska.File,System.UInt64)">
            <summary>
            Constructs a root <see cref="T:TagLib.Matroska.EBMLreader" /> instance, by reading from
            the provided file position.
            </summary>
            <param name="_file"><see cref="T:TagLib.Matroska.File" /> File instance to read from.</param>
            <param name="position">Position in the file to start reading from.</param>
        </member>
        <member name="M:TagLib.Matroska.EBMLreader.#ctor(TagLib.Matroska.EBMLreader,System.UInt64)">
            <summary>
            Constructs a child <see cref="T:TagLib.Matroska.EBMLreader" /> reading the data from the
            EBML parent at the provided file position.
            </summary>
            <param name="parent">The <see cref="T:TagLib.Matroska.EBMLreader" /> that contains the instance to be created.</param>
            <param name="position">Position in the file to start reading from.</param>
        </member>
        <member name="M:TagLib.Matroska.EBMLreader.#ctor(TagLib.Matroska.EBMLreader,System.UInt64,TagLib.Matroska.MatroskaID,System.UInt64)">
            <summary>
            Create a new abstract <see cref="T:TagLib.Matroska.EBMLreader" /> with arbitrary attributes, 
            without reading its information on the file.
            </summary>
            <param name="parent">The <see cref="T:TagLib.Matroska.EBMLreader" /> that contains the instance to be described.</param>
            <param name="position">Position in the file.</param>
            <param name="ebmlid">EBML ID of the element</param>
            <param name="size">Total size of the EBML, in bytes</param>
        </member>
        <member name="P:TagLib.Matroska.EBMLreader.ID">
            <summary>
            EBML Element Identifier.
            </summary>
        </member>
        <member name="P:TagLib.Matroska.EBMLreader.Parent">
            <summary>
            EBML Parent instance.
            </summary>
        </member>
        <member name="P:TagLib.Matroska.EBMLreader.Size">
            <summary>
            EBML Element size in bytes.
            </summary>
        </member>
        <member name="P:TagLib.Matroska.EBMLreader.DataSize">
            <summary>
            EBML Element data size in bytes.
            </summary>
        </member>
        <member name="P:TagLib.Matroska.EBMLreader.DataOffset">
            <summary>
            EBML Element data offset position in file in bytes.
            </summary>
        </member>
        <member name="P:TagLib.Matroska.EBMLreader.Offset">
            <summary>
            EBML Element offset position in file in bytes.
            </summary>
        </member>
        <member name="P:TagLib.Matroska.EBMLreader.Abstract">
            <summary>
            Defines that the EBML element is not read-out from file,
            but is an abstract representation of an element on the disk.
            </summary>
        </member>
        <member name="M:TagLib.Matroska.EBMLreader.Read(System.Boolean)">
            <summary>
            Read EBML header and data-size if it is an abstract one. 
            It then becomes a non abstract EBML.
            </summary>
            <param name="throwException">Throw exception on invalid EBML read if true (Default: false).</param>
            <returns>True if successful.</returns>
        </member>
        <member name="M:TagLib.Matroska.EBMLreader.ReadBytes">
            <summary>
            Reads a vector of bytes (raw data) from EBML Element's data section.
            </summary>
            <returns>a <see cref="T:TagLib.ByteVector" /> containing the parsed value.</returns>
        </member>
        <member name="M:TagLib.Matroska.EBMLreader.ReadString">
            <summary>
            Reads a string from EBML Element's data section (UTF-8).
            </summary>
            <returns>a string object containing the parsed value.</returns>
        </member>
        <member name="M:TagLib.Matroska.EBMLreader.ReadBool">
            <summary>
            Reads a boolean from EBML Element's data section.
            </summary>
            <returns>a bool containing the parsed value.</returns>
        </member>
        <member name="M:TagLib.Matroska.EBMLreader.ReadDouble">
            <summary>
            Reads a double from EBML Element's data section.
            </summary>
            <returns>a double containing the parsed value.</returns>
        </member>
        <member name="M:TagLib.Matroska.EBMLreader.ReadULong">
            <summary>
            Reads an unsigned integer (any size from 1 to 8 bytes) from EBML Element's data section.
            </summary>
            <returns>a ulong containing the parsed value.</returns>
        </member>
        <member name="M:TagLib.Matroska.EBMLreader.WriteDataSize">
            <summary>
            Write the <see cref="P:TagLib.Matroska.EBMLreader.DataSize"/> to the EBML file.
            Resize the data-size length to 8 bytes.
            This will *not* insert extra bytes, but overwrite next contiguous bytes.
            It will claim the size added on the value of the data-size.
            </summary>
            <returns>Offset created in Writing the new data-size</returns>
        </member>
        <member name="M:TagLib.Matroska.EBMLreader.SetVoid">
            <summary>
            Change an EBML element to a Abstract Void element, but do not write to the file.
            </summary>
            <remarks>
            To do a real conversion to Void EBML element on the file, use <see cref="M:TagLib.Matroska.EBMLreader.WriteVoid"/>.
            </remarks>
        </member>
        <member name="M:TagLib.Matroska.EBMLreader.WriteVoid">
            <summary>
            Change an EBML element to a Void element directly on the file.
            </summary>
        </member>
        <member name="M:TagLib.Matroska.EBMLreader.Remove">
            <summary>
            Remove the EBML element from the file
            </summary>
            <returns>Size difference compare to previous EBML size</returns>
        </member>
        <member name="T:TagLib.Matroska.TrackType">
            <summary>
            Enumeration listing supported Matroska track types.
            </summary>
        </member>
        <member name="F:TagLib.Matroska.TrackType.Video">
            <summary>
            Video track type.
            </summary>
        </member>
        <member name="F:TagLib.Matroska.TrackType.Audio">
            <summary>
            Audio track type.
            </summary>
        </member>
        <member name="F:TagLib.Matroska.TrackType.Complex">
            <summary>
            Complex track type.
            </summary>
        </member>
        <member name="F:TagLib.Matroska.TrackType.Logo">
            <summary>
            Logo track type.
            </summary>
        </member>
        <member name="F:TagLib.Matroska.TrackType.Subtitle">
            <summary>
            Subtitle track type.
            </summary>
        </member>
        <member name="F:TagLib.Matroska.TrackType.Buttons">
            <summary>
            Buttons track type.
            </summary>
        </member>
        <member name="F:TagLib.Matroska.TrackType.Control">
            <summary>
            Control track type.
            </summary>
        </member>
        <member name="T:TagLib.Matroska.File">
            <summary>
               This class extends <see cref="T:TagLib.File" /> to provide tagging
               and properties support for Matroska files.
            </summary>
        </member>
        <member name="F:TagLib.Matroska.File.tags">
            <summary>
              Contains the tags for the file.
            </summary>
        </member>
        <member name="F:TagLib.Matroska.File.properties">
            <summary>
               Contains the media properties.
            </summary>
        </member>
        <member name="M:TagLib.Matroska.File.#ctor(System.String,TagLib.ReadStyle)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Matroska.File" /> for a specified path in the local file
               system and specified read style.
            </summary>
            <param name="path">
               A <see cref="T:System.String" /> object containing the path of the
               file to use in the new instance.
            </param>
            <param name="propertiesStyle">
               A <see cref="T:TagLib.ReadStyle" /> value specifying at what level
               of accuracy to read the media properties, or <see
               cref="F:TagLib.ReadStyle.None" /> to ignore the properties.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="path" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:TagLib.Matroska.File.#ctor(System.String)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Matroska.File" /> for a specified path in the local file
               system with an average read style.
            </summary>
            <param name="path">
               A <see cref="T:System.String" /> object containing the path of the
               file to use in the new instance.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="path" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:TagLib.Matroska.File.#ctor(TagLib.File.IFileAbstraction,TagLib.ReadStyle)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Matroska.File" /> for a specified file abstraction and
               specified read style.
            </summary>
            <param name="abstraction">
               A <see cref="T:TagLib.File.IFileAbstraction" /> object to use when
               reading from and writing to the file.
            </param>
            <param name="propertiesStyle">
               A <see cref="T:TagLib.ReadStyle" /> value specifying at what level
               of accuracy to read the media properties, or <see
               cref="F:TagLib.ReadStyle.None" /> to ignore the properties.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="abstraction" /> is <see langword="null"
               />.
            </exception>
        </member>
        <member name="M:TagLib.Matroska.File.#ctor(TagLib.File.IFileAbstraction)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Matroska.File" /> for a specified file abstraction with an
               average read style.
            </summary>
            <param name="abstraction">
               A <see cref="T:TagLib.File.IFileAbstraction" /> object to use when
               reading from and writing to the file.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="abstraction" /> is <see langword="null"
               />.
            </exception>
        </member>
        <member name="M:TagLib.Matroska.File.Save">
            <summary>
               Saves the changes made in the current instance to the
               file it represents.
            </summary>
        </member>
        <member name="M:TagLib.Matroska.File.RemoveTags(TagLib.TagTypes)">
            <summary>
               Removes a set of tag types from the current instance.
            </summary>
            <param name="types">
               A bitwise combined <see cref="T:TagLib.TagTypes" /> value
               containing tag types to be removed from the file.
            </param>
            <remarks>
               In order to remove all tags from a file, pass <see
               cref="F:TagLib.TagTypes.AllTags" /> as <paramref name="types" />.
            </remarks>
        </member>
        <member name="M:TagLib.Matroska.File.GetTag(TagLib.TagTypes,System.Boolean)">
            <summary>
               Gets a tag of a specified type from the current instance,
               optionally creating a new tag if possible.
            </summary>
            <param name="type">
               A <see cref="T:TagLib.TagTypes" /> value indicating the
               type of tag to read.
            </param>
            <param name="create">
               A <see cref="T:System.Boolean" /> value specifying whether or not to
               try and create the tag if one is not found.
            </param>
            <returns>
               A <see cref="P:TagLib.Matroska.File.Tag" /> object containing the tag that was
               found in or added to the current instance. If no
               matching tag was found and none was created, <see
               langword="null" /> is returned.
            </returns>
        </member>
        <member name="P:TagLib.Matroska.File.Tag">
            <summary>
               Gets a abstract representation of all tags stored in the
               current instance.
            </summary>
            <value>
               A <see cref="T:TagLib.Tag" /> object representing all tags
               stored in the current instance.
            </value>
        </member>
        <member name="P:TagLib.Matroska.File.Properties">
            <summary>
               Gets the media properties of the file represented by the
               current instance.
            </summary>
            <value>
               A <see cref="T:TagLib.Properties" /> object containing the
               media properties of the file represented by the current
               instance.
            </value>
        </member>
        <member name="M:TagLib.Matroska.File.ReadWrite(TagLib.ReadStyle)">
            <summary>
               Reads (and Write, if file Mode is Write) the file with a specified read style.
            </summary>
            <param name="propertiesStyle">
               A <see cref="T:TagLib.ReadStyle" /> value specifying at what level
               of accuracy to read the media properties, or <see
               cref="F:TagLib.ReadStyle.None" /> to ignore the properties.
            </param>
        </member>
        <member name="M:TagLib.Matroska.File.WriteSegment(TagLib.Matroska.EBMLreader,TagLib.Matroska.EBMLelement,System.Collections.Generic.List{TagLib.Matroska.EBMLreader})">
            <summary>
            Central point for the Writing, after the master elements of the EBML Segment have been referenced.
            </summary>
            <param name="ebml_segm">EBML Segment containing the EBML to be written</param>
            <param name="ebml_sinfo">EBML SegmentInfo</param>
            <param name="segm_list">description of the mapping of EBML level 1 in the EBML Segment, ordered</param>
        </member>
        <member name="M:TagLib.Matroska.File.WriteReservedEBML(TagLib.Matroska.EBMLreader,System.Collections.Generic.List{TagLib.Matroska.EBMLreader},System.Int64)">
            <summary>
            Make sure there is a Void at the begining of a Segment EBML, big enough to contain the reserved (leading) space.
            This is the longest part of the Write if space must be reserved.
            </summary>
            <param name="ebml_segm">EBML Segment containing the EBML to be written</param>
            <param name="segm_list">description of the mapping of EBML level 1 in the EBML Segment, ordered</param>
            <param name="minSize">Size to be reserved. A Margin will be added to it.</param>
            <returns></returns>
        </member>
        <member name="M:TagLib.Matroska.File.WriteEBML(TagLib.Matroska.EBMLelement,TagLib.Matroska.EBMLreader,System.Collections.Generic.List{TagLib.Matroska.EBMLreader},System.Int64)">
            <summary>
            Write an EMBL in an existing Void or at the end of the
            </summary>
            <param name="element">EBML to write</param>
            <param name="ebml_segm">EBML Segment containing the EBML to be written</param>
            <param name="segm_list">description of the mapping of EBML level 1 in the EBML Segment, ordered</param>
            <param name="reserved">Reserved space at the Segment, do not write there</param>
        </member>
        <member name="M:TagLib.Matroska.File.UpdateSegmentsMergeVoids(TagLib.Matroska.EBMLreader,System.Collections.Generic.List{TagLib.Matroska.EBMLreader})">
            <summary>
            This tries to create a sensible map of the Voids between the other master element of the Segment.
            It will try to identify Voids hidden after a meaningful EBML. It will merge contiguous Voids as one.
            </summary>
            <param name="ebml_segm">EBML Segment containing the EBML to be written</param>
            <param name="segm_list">description of the mapping of EBML level 1 in the EBML Segment, ordered</param>
        </member>
        <member name="T:TagLib.Matroska.IUIDElement">
            <summary>
            Represent a Matroska element that has an Unique Identifier, and can be tagged.
            </summary>
        </member>
        <member name="P:TagLib.Matroska.IUIDElement.UID">
            <summary>
            Unique ID representing the file, as random as possible (setting zero will generate automatically a new one).
            </summary>
        </member>
        <member name="P:TagLib.Matroska.IUIDElement.UIDType">
            <summary>
            Get the Tag type the UID should be represented by, or 0 if undefined
            </summary>
        </member>
        <member name="T:TagLib.Matroska.UIDElement">
            <summary>
            Represent a basic Matroska UID element
            </summary>
        </member>
        <member name="M:TagLib.Matroska.UIDElement.#ctor(TagLib.Matroska.MatroskaID,System.UInt64)">
            <summary>
            Create a UIDElement Stub
            </summary>
            <param name="type">Tag-type the UID represents</param>
            <param name="uid">UID of the element</param>
        </member>
        <member name="M:TagLib.Matroska.UIDElement.GenUID(System.UInt64)">
            <summary>
            Generate a new random UID
            </summary>
            <param name="ret">Value of the UID to be generated. A zero value will randomize it.</param>
            <returns>Generated UID.</returns>
        </member>
        <member name="P:TagLib.Matroska.UIDElement.UID">
            <summary>
            Unique ID representing the element, as random as possible (setting zero will generate automatically a new one).
            </summary>
        </member>
        <member name="P:TagLib.Matroska.UIDElement.UIDType">
            <summary>
            Get the Tag type the UID should be represented by, or 0 if undefined
            </summary>
        </member>
        <member name="T:TagLib.Matroska.MatroskaID">
            <summary>
            Public enumeration listing Matroska specific EBML Identifiers.
            </summary>
        </member>
        <member name="F:TagLib.Matroska.MatroskaID.Segment">
            <summary>
            Indicates a Matroska Segment EBML element.
            </summary>
        </member>
        <member name="F:TagLib.Matroska.MatroskaID.SegmentInfo">
            <summary>
            Indicates a Matroska Segment Info EBML element.
            </summary>
        </member>
        <member name="F:TagLib.Matroska.MatroskaID.Tracks">
            <summary>
            Indicates a Matroska Tracks EBML Element.
            </summary>
        </member>
        <member name="F:TagLib.Matroska.MatroskaID.Cues">
            <summary>
            Indicates a Matroska Cues EBML element.
            </summary>
        </member>
        <member name="F:TagLib.Matroska.MatroskaID.Tags">
            <summary>
            Indicates a Matroska Tags EBML element.
            </summary>
        </member>
        <member name="F:TagLib.Matroska.MatroskaID.SeekHead">
            <summary>
            Indicates a Matroska Seek Head EBML element.
            </summary>
        </member>
        <member name="F:TagLib.Matroska.MatroskaID.Cluster">
            <summary>
            Indicates a Matroska Cluster EBML element.
            </summary>
        </member>
        <member name="F:TagLib.Matroska.MatroskaID.Attachments">
            <summary>
            Indicates a Matroska Attachments EBML element.
            </summary>
        </member>
        <member name="F:TagLib.Matroska.MatroskaID.Chapters">
            <summary>
            Indicates a Matroska Chapters EBML element.
            </summary>
        </member>
        <member name="F:TagLib.Matroska.MatroskaID.TimeCodeScale">
            <summary>
            Indicate a Matroska Code Scale EBML element.
            </summary>
        </member>
        <member name="F:TagLib.Matroska.MatroskaID.Duration">
            <summary>
            Indicates a Matroska Duration EBML element.
            </summary>
        </member>
        <member name="F:TagLib.Matroska.MatroskaID.WrittingApp">
            <summary>
            Indicates a Matroska Writing App EBML element.
            </summary>
        </member>
        <member name="F:TagLib.Matroska.MatroskaID.MuxingApp">
            <summary>
            Indicates a Matroska Muxing App EBML element.
            </summary>
        </member>
        <member name="F:TagLib.Matroska.MatroskaID.DateUTC">
            <summary>
            Indicate a Matroska Date UTC EBML element.
            </summary>
        </member>
        <member name="F:TagLib.Matroska.MatroskaID.SegmentUID">
            <summary>
            Indicate a Matroska Segment UID EBML element.
            </summary>
        </member>
        <member name="F:TagLib.Matroska.MatroskaID.SegmentFileName">
            <summary>
            Indicate a Matroska Segment File Name EBML element.
            </summary>
        </member>
        <member name="F:TagLib.Matroska.MatroskaID.PrevUID">
            <summary>
            Indicate a Matroska Prev UID EBML element.
            </summary>
        </member>
        <member name="F:TagLib.Matroska.MatroskaID.PrevFileName">
            <summary>
            Indicate a Matroska Prev File Name EBML element.
            </summary>
        </member>
        <member name="F:TagLib.Matroska.MatroskaID.NexUID">
            <summary>
            Indicate a Matroska Nex UID EBML element.
            </summary>
        </member>
        <member name="F:TagLib.Matroska.MatroskaID.NexFileName">
            <summary>
            Indicate a Matroska Nex File Name EBML element.
            </summary>
        </member>
        <member name="F:TagLib.Matroska.MatroskaID.Title">
            <summary>
            Indicate a Matroska Title EBML element.
            </summary>
        </member>
        <member name="F:TagLib.Matroska.MatroskaID.SegmentFamily">
            <summary>
            Indicate a Matroska Segment Family EBML element.
            </summary>
        </member>
        <member name="F:TagLib.Matroska.MatroskaID.ChapterTranslate">
            <summary>
            Indicate a Matroska Chapter Translate EBML element.
            </summary>
        </member>
        <member name="F:TagLib.Matroska.MatroskaID.TrackEntry">
            <summary>
            Indicate a Matroska Track Entry EBML element.
            </summary>
        </member>
        <member name="F:TagLib.Matroska.MatroskaID.TrackNumber">
            <summary>
            Indicate a Matroska Track Number EBML element.
            </summary>
        </member>
        <member name="F:TagLib.Matroska.MatroskaID.TrackUID">
            <summary>
            Indicate a Matroska Track UID EBML element.
            </summary>
        </member>
        <member name="F:TagLib.Matroska.MatroskaID.TrackType">
            <summary>
            Indicate a Matroska Track Type EBML element.
            </summary>
        </member>
        <member name="F:TagLib.Matroska.MatroskaID.TrackAudio">
            <summary>
            Indicate a Matroska Track Audio EBML element.
            </summary>
        </member>
        <member name="F:TagLib.Matroska.MatroskaID.TrackVideo">
            <summary>
            Indicate a Matroska Track Video EBML element.
            </summary>
        </member>
        <member name="F:TagLib.Matroska.MatroskaID.Void">
            <summary>
            Indicate a Matroska Void EBML element.
            </summary>
        </member>
        <member name="F:TagLib.Matroska.MatroskaID.CRC32">
            <summary>
            Indicate a Matroska CRC-32 EBML element.
            </summary>
            <remarks>
            The CRC is computed on all the data of the Master-element it's in. 
            The CRC Element should be the first in it's parent master for easier reading. 
            All level 1 Elements should include a CRC-32. The CRC in use is the IEEE CRC32 Little Endian.
            </remarks>
        </member>
        <member name="F:TagLib.Matroska.MatroskaID.ContentEncodings">
            <summary>
            Indicate a Matroska Track Encoding EBML element.
            </summary>
        </member>
        <member name="F:TagLib.Matroska.MatroskaID.CodecID">
            <summary>
            Indicate a Matroska Codec ID EBML element.
            </summary>
        </member>
        <member name="F:TagLib.Matroska.MatroskaID.CodecPrivate">
            <summary>
            Indicate a Matroska Codec Private EBML element.
            </summary>
        </member>
        <member name="F:TagLib.Matroska.MatroskaID.CodecName">
            <summary>
            Indicate a Matroska Codec Name EBML element.
            </summary>
        </member>
        <member name="F:TagLib.Matroska.MatroskaID.TrackName">
            <summary>
            Indicate a Matroska Track Name EBML element.
            </summary>
        </member>
        <member name="F:TagLib.Matroska.MatroskaID.TrackLanguage">
            <summary>
            Indicate a Matroska Track Language EBML element.
            </summary>
        </member>
        <member name="F:TagLib.Matroska.MatroskaID.TrackFlagEnabled">
            <summary>
            Indicate a Matroska Track Enabled EBML element.
            </summary>
        </member>
        <member name="F:TagLib.Matroska.MatroskaID.TrackFlagDefault">
            <summary>
            Indicate a Matroska Track Flag Default EBML element.
            </summary>
        </member>
        <member name="F:TagLib.Matroska.MatroskaID.TrackFlagForced">
            <summary>
            Indicate a Matroska Track Flag Forced EBML element.
            </summary>
        </member>
        <member name="F:TagLib.Matroska.MatroskaID.TrackFlagLacing">
            <summary>
            Indicate a Matroska Track Flag Lacing EBML element.
            </summary>
        </member>
        <member name="F:TagLib.Matroska.MatroskaID.TrackMinCache">
            <summary>
            Indicate a Matroska Track Min Cache EBML element.
            </summary>
        </member>
        <member name="F:TagLib.Matroska.MatroskaID.TrackMaxCache">
            <summary>
            Indicate a Matroska Track Max Cache EBML element.
            </summary>
        </member>
        <member name="F:TagLib.Matroska.MatroskaID.TrackDefaultDuration">
            <summary>
            Indicate a Matroska Track Default Duration EBML element.
            </summary>
        </member>
        <member name="F:TagLib.Matroska.MatroskaID.TrackTimeCodeScale">
            <summary>
            Indicate a Matroska Track Time Code Scale EBML element.
            </summary>
        </member>
        <member name="F:TagLib.Matroska.MatroskaID.MaxBlockAdditionID">
            <summary>
            Indicate a Matroska Track Max Block Addition EBML element.
            </summary>
        </member>
        <member name="F:TagLib.Matroska.MatroskaID.TrackAttachmentLink">
            <summary>
            Indicate a Matroska Track Attachment Link EBML element.
            </summary>
        </member>
        <member name="F:TagLib.Matroska.MatroskaID.TrackOverlay">
            <summary>
            Indicate a Matroska Track Overlay EBML element.
            </summary>
        </member>
        <member name="F:TagLib.Matroska.MatroskaID.TrackTranslate">
            <summary>
            Indicate a Matroska Track Translate EBML element.
            </summary>
        </member>
        <member name="F:TagLib.Matroska.MatroskaID.TrackOffset">
            <summary>
            Indicate a Matroska Track Offset element.
            </summary>
        </member>
        <member name="F:TagLib.Matroska.MatroskaID.CodecSettings">
            <summary>
            Indicate a Matroska Codec Settings EBML element.
            </summary>
        </member>
        <member name="F:TagLib.Matroska.MatroskaID.CodecInfoUrl">
            <summary>
            Indicate a Matroska Codec Info URL EBML element.
            </summary>
        </member>
        <member name="F:TagLib.Matroska.MatroskaID.CodecDownloadUrl">
            <summary>
            Indicate a Matroska Codec Download URL EBML element.
            </summary>
        </member>
        <member name="F:TagLib.Matroska.MatroskaID.CodecDecodeAll">
            <summary>
            Indicate a Matroska Codec Decode All EBML element.
            </summary>
        </member>
        <member name="F:TagLib.Matroska.MatroskaID.VideoFrameRate">
            <summary>
            Indicate a Matroska Video Frame Rate EBML element.
            </summary>
        </member>
        <member name="F:TagLib.Matroska.MatroskaID.VideoDisplayWidth">
            <summary>
            Indicate a Matroska Video Display Width EBML element.
            </summary>
        </member>
        <member name="F:TagLib.Matroska.MatroskaID.VideoDisplayHeight">
            <summary>
            Indicate a Matroska Video Display Height EBML element.
            </summary>
        </member>
        <member name="F:TagLib.Matroska.MatroskaID.VideoDisplayUnit">
            <summary>
            Indicate a Matroska Video Display Unit EBML element.
            </summary>
        </member>
        <member name="F:TagLib.Matroska.MatroskaID.VideoPixelWidth">
            <summary>
            Indicate a Matroska Video Pixel Width EBML element.
            </summary>
        </member>
        <member name="F:TagLib.Matroska.MatroskaID.VideoPixelHeight">
            <summary>
            Indicate a Matroska Video Pixel Height EBML element.
            </summary>
        </member>
        <member name="F:TagLib.Matroska.MatroskaID.VideoPixelCropBottom">
            <summary>
            Indicate a Matroska Video Pixel Crop Bottom EBML element.
            </summary>
        </member>
        <member name="F:TagLib.Matroska.MatroskaID.VideoPixelCropTop">
            <summary>
            Indicate a Matroska Video Pixel Crop Top EBML element.
            </summary>
        </member>
        <member name="F:TagLib.Matroska.MatroskaID.VideoPixelCropLeft">
            <summary>
            Indicate a Matroska Video Pixel Crop Left EBML element.
            </summary>
        </member>
        <member name="F:TagLib.Matroska.MatroskaID.VideoPixelCropRight">
            <summary>
            Indicate a Matroska Video Pixel Crop Right EBML element.
            </summary>
        </member>
        <member name="F:TagLib.Matroska.MatroskaID.VideoFlagInterlaced">
            <summary>
            Indicate a Matroska Video Flag Interlaced EBML element.
            </summary>
        </member>
        <member name="F:TagLib.Matroska.MatroskaID.VideoStereoMode">
            <summary>
            Indicate a Matroska Video Stereo Mode EBML element.
            </summary>
        </member>
        <member name="F:TagLib.Matroska.MatroskaID.VideoAspectRatioType">
            <summary>
            Indicate a Matroska Video Aspect Ratio Type EBML element.
            </summary>
        </member>
        <member name="F:TagLib.Matroska.MatroskaID.VideoColourSpace">
            <summary>
            Indicate a Matroska Video Colour Space EBML element.
            </summary>
        </member>
        <member name="F:TagLib.Matroska.MatroskaID.VideoGammaValue">
            <summary>
            Indicate a Matroska Video Gamma Value EBML element.
            </summary>
        </member>
        <member name="F:TagLib.Matroska.MatroskaID.Seek">
            <summary>
            Indicate a Matroska Seek Entry (Master).
            </summary>
        </member>
        <member name="F:TagLib.Matroska.MatroskaID.SeekID">
            <summary>
            Indicate a Matroska Seek ID (Binary).
            </summary>
        </member>
        <member name="F:TagLib.Matroska.MatroskaID.SeekPosition">
            <summary>
            Indicate a Matroska Seek Position (uint).
            </summary>
        </member>
        <member name="F:TagLib.Matroska.MatroskaID.AudioSamplingFreq">
            <summary>
            Indicate a Matroska Audio Sampling Freq EBML element.
            </summary>
        </member>
        <member name="F:TagLib.Matroska.MatroskaID.AudioBitDepth">
            <summary>
            Indicate a Matroska Audio Bit Depth EBML element.
            </summary>
        </member>
        <member name="F:TagLib.Matroska.MatroskaID.AudioChannels">
            <summary>
            Indicate a Matroska Audio Channels EBML element.
            </summary>
        </member>
        <member name="F:TagLib.Matroska.MatroskaID.AudioChannelsPositions">
            <summary>
            Indicate a Matroska Audio Channels Position EBML element.
            </summary>
        </member>
        <member name="F:TagLib.Matroska.MatroskaID.AudioOutputSamplingFreq">
            <summary>
            Indicate a Matroska Audio Output Sampling Freq EBML element.
            </summary>
        </member>
        <member name="F:TagLib.Matroska.MatroskaID.Tag">
            <summary>
            Indicate a Matroska Tag EBML element.
            </summary>
        </member>
        <member name="F:TagLib.Matroska.MatroskaID.SimpleTag">
            <summary>
            Indicate a Matroska Simple Tag EBML element.
            </summary>
        </member>
        <member name="F:TagLib.Matroska.MatroskaID.Targets">
            <summary>
            Indicate a Matroska Targets EBML element.
            </summary>
        </member>
        <member name="F:TagLib.Matroska.MatroskaID.TagName">
            <summary>
            Indicate a Matroska Tag Name EBML element.
            </summary>
        </member>
        <member name="F:TagLib.Matroska.MatroskaID.TagString">
            <summary>
            Indicate a Matroska Tag String EBML element.
            </summary>
        </member>
        <member name="F:TagLib.Matroska.MatroskaID.TagLanguage">
            <summary>
            Indicate a Matroska Tag Language EBML element.
            </summary>
        </member>
        <member name="F:TagLib.Matroska.MatroskaID.TagDefault">
            <summary>
            Indicate a Matroska Tag Default EBML element.
            </summary>
        </member>
        <member name="F:TagLib.Matroska.MatroskaID.TagBinary">
            <summary>
            Indicate a Matroska Tag Binary EBML element.
            </summary>
        </member>
        <member name="F:TagLib.Matroska.MatroskaID.TargetTypeValue">
            <summary>
            Indicate a Matroska Target Type Value  EBML element (UINT).
            </summary>
        </member>
        <member name="F:TagLib.Matroska.MatroskaID.TargetType">
            <summary>
            Indicate a Matroska Target Type EBML element (string).
            </summary>
        </member>
        <member name="F:TagLib.Matroska.MatroskaID.TagTrackUID">
            <summary>
            Indicate a Matroska Target Tag Track UID EBML element (UINT).
            </summary>
        </member>
        <member name="F:TagLib.Matroska.MatroskaID.TagEditionUID">
            <summary>
            Indicate a Matroska Target Tag Edition UID EBML element (UINT).
            </summary>
        </member>
        <member name="F:TagLib.Matroska.MatroskaID.TagChapterUID">
            <summary>
            Indicate a Matroska Target Tag Chapter UID EBML element (UINT).
            </summary>
        </member>
        <member name="F:TagLib.Matroska.MatroskaID.TagAttachmentUID">
            <summary>
            Indicate a Matroska Target Tag Attachment UID EBML element (UINT).
            </summary>
        </member>
        <member name="F:TagLib.Matroska.MatroskaID.AttachedFile">
            <summary>
            Indicate a Matroska attached file.
            </summary>
        </member>
        <member name="F:TagLib.Matroska.MatroskaID.FileDescription">
            <summary>
            Indicate a Matroska human-friendly name for the attached file.
            </summary>
        </member>
        <member name="F:TagLib.Matroska.MatroskaID.FileName">
            <summary>
            Indicate a Matroska Filename of the attached file.
            </summary>
        </member>
        <member name="F:TagLib.Matroska.MatroskaID.FileMimeType">
            <summary>
            Indicate a Matroska MIME type of the file. 
            </summary>
        </member>
        <member name="F:TagLib.Matroska.MatroskaID.FileData">
            <summary>
            Indicate a Matroska data of the file. 
            </summary>
        </member>
        <member name="F:TagLib.Matroska.MatroskaID.FileUID">
            <summary>
            Indicate a Matroska Unique ID representing the file, as random as possible.
            </summary>
        </member>
        <member name="T:TagLib.Matroska.SimpleTag">
            <summary>
            Describes a SimpleTag content. The TagName property is not part of the SimpleTag. 
            A <see cref="T:TagLib.Matroska.Tag"/> object may contain several <see cref="T:TagLib.Matroska.SimpleTag"/>.
            A <see cref="T:TagLib.Matroska.SimpleTag"/> object may contains several <see cref="T:TagLib.Matroska.SimpleTag"/>.
            </summary>
        </member>
        <member name="M:TagLib.Matroska.SimpleTag.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:TagLib.Matroska.SimpleTag.#ctor(TagLib.ByteVector)">
            <summary>
            Construct from value
            </summary>
        </member>
        <member name="F:TagLib.Matroska.SimpleTag.TagBinary">
            <summary>
            Indicate if the content of the SimpleTag is in binary (true) or as a string (false).
            </summary>
        </member>
        <member name="F:TagLib.Matroska.SimpleTag.TagDefault">
            <summary>
            Indication to know if this is the default/original language to use for the given tag.
            </summary>
        </member>
        <member name="P:TagLib.Matroska.SimpleTag.TagLanguage">
            <summary>
            Specifies the language of the tag, as a string.
            </summary>
        </member>
        <member name="F:TagLib.Matroska.SimpleTag.Language">
            <summary>
            Specifies the language of the tag.
            </summary>
        </member>
        <member name="P:TagLib.Matroska.SimpleTag.Value">
            <summary>
            Get/Set the data contained in the SimpleTag
            </summary>
        </member>
        <member name="F:TagLib.Matroska.SimpleTag.SimpleTags">
            <summary>
            Children SimpleTag nested inside this SimpleTag
            </summary>
        </member>
        <member name="M:TagLib.Matroska.SimpleTag.op_Implicit(TagLib.Matroska.SimpleTag)~System.String">
            <summary>
            Convert a SimpleTag to a String in the Default encoding
            </summary>
            <param name="v"></param>
        </member>
        <member name="T:TagLib.Matroska.SubtitleTrack">
            <summary>
            Describes a Matroska Subtitle Track.
            </summary>
        </member>
        <member name="M:TagLib.Matroska.SubtitleTrack.#ctor(TagLib.Matroska.File,TagLib.Matroska.EBMLreader)">
            <summary>
            Constructs a <see cref="T:TagLib.Matroska.SubtitleTrack" /> parsing from provided
            file data.
            Parsing will be done reading from _file at position references by 
            parent element's data section.
            </summary>
            <param name="_file"><see cref="T:TagLib.Matroska.File" /> instance to read from.</param>
            <param name="element">Parent <see cref="T:TagLib.Matroska.EBMLreader" />.</param>
        </member>
        <member name="P:TagLib.Matroska.SubtitleTrack.UnknownElements">
            <summary>
            List of unknown elements encountered while parsing.
            </summary>
        </member>
        <member name="P:TagLib.Matroska.SubtitleTrack.MediaTypes">
            <summary>
            This type of track only has text media type.
            </summary>
        </member>
        <member name="T:TagLib.Matroska.Tag">
            <summary>
            Describes a Matroska Tag.
            A <see cref="T:TagLib.Matroska.Tag"/> object may contain several <see cref="T:TagLib.Matroska.SimpleTag"/>.
            </summary>
        </member>
        <member name="P:TagLib.Matroska.Tag.IsVideo">
            <summary>
            Define if this represent a video content (true), or an audio content (false)
            </summary>
        </member>
        <member name="M:TagLib.Matroska.Tag.#ctor(TagLib.Matroska.Tags,TagLib.Matroska.TargetType,TagLib.Matroska.IUIDElement)">
            <summary>
            Constructor
            </summary>
            <param name="tags">The Tags object this Tag should be added to.</param>
            <param name="targetTypeValue">the Target Type ValueTags this Tag represents.</param>
            <param name="element">The UID element that should be represented by this tag.</param>
        </member>
        <member name="M:TagLib.Matroska.Tag.MakeTargetType(System.UInt16)">
            <summary>
            Create a TargetType from a given TargetTypeValue, depending on the media-type
            </summary>
            <param name="targetTypeValue">TargetTypeValue to be converted to TargetType (text)</param>
            <returns>Representation of the TargetTypeValue</returns>
        </member>
        <member name="M:TagLib.Matroska.Tag.TagsGet(System.Boolean,TagLib.Matroska.TargetType)">
            <summary>
            Return a Tag of a certain Target type.  
            </summary>
            <param name="create">Create one if it doesn't exist yet.</param>
            <param name="targetType">Target Type Value.</param>
            <returns>the Tag representing the collection</returns>
        </member>
        <member name="M:TagLib.Matroska.Tag.TagsAlbum(System.Boolean)">
            <summary>
            Return the Tag representing the Album the medium belongs to.  
            </summary>
            <param name="create">Create one if it doesn't exist yet.</param>
            <returns>the Tag representing the collection</returns>
        </member>
        <member name="M:TagLib.Matroska.Tag.Remove(System.String,System.String)">
            <summary>
            Remove a Tag
            </summary>
            <param name="key">Tag Name</param>
            <param name="subkey">Nested SimpleTag to find (if non null) Tag name</param>
        </member>
        <member name="M:TagLib.Matroska.Tag.Set(System.String,System.String,System.String)">
            <summary>
            Set a Tag value. A null value removes the Tag.
            </summary>
            <param name="key">Tag Name</param>
            <param name="subkey">Nested SimpleTag to find (if non null) Tag name</param>
            <param name="value">value to be set. A list can be passed for a subtag by separating the values by ';'</param>
        </member>
        <member name="M:TagLib.Matroska.Tag.Set(System.String,System.String,System.UInt32,System.String)">
            <summary>
            Set a Tag value as unsigned integer. Please note that a value zero removes the Tag.
            </summary>
            <param name="key">Tag Name</param>
            <param name="subkey">Nested SimpleTag to find (if non null) Tag name</param>
            <param name="value">unsigned integer value to be set</param>
            <param name="format">Format for string convertion to be used (default: null)</param>
        </member>
        <member name="M:TagLib.Matroska.Tag.Set(System.String,System.String,System.String[])">
            <summary>
            Create or overwrite the actual tags of a given name/sub-name by new values. 
            </summary>
            <param name="key">Tag Name</param>
            <param name="subkey">Nested SimpleTag to find (if non null) Tag name</param>
            <param name="values">Array of values. for each subtag value, a list can be passed by separating the values by ';'</param>
        </member>
        <member name="M:TagLib.Matroska.Tag.Get(System.String,System.String,System.Boolean)">
            <summary>
            Retrieve a Tag list. If there are multiple tag inside a SimpleTag (when
            accessing a sub-key), these sub-list are represented as semicolon-separated
            values.
            </summary>
            <param name="key">Tag name</param>
            <param name="subkey">Nested SimpleTag to find (if non null) Tag name</param>
            <param name="recu">Also search in parent Tag if true (default: true)</param>
            <returns>Array of values. Nested sub-list are represented by a semicolon-
            separated string 
            </returns>
        </member>
        <member name="M:TagLib.Matroska.Tag.GetString(System.String,System.String,System.Boolean)">
            <summary>
            Retrieve a Tag value as string
            </summary>
            <param name="key">Tag name</param>
            <param name="subkey">Nested SimpleTag to find (if non null) Tag name</param>
            <param name="recu">Also search in parent Tag if true (default: true)</param>
            <returns>Tag value</returns>
        </member>
        <member name="M:TagLib.Matroska.Tag.GetUint(System.String,System.String,System.Boolean)">
            <summary>
            Retrieve a Tag value as unsigned integer
            </summary>
            <param name="key">Tag name</param>
            <param name="subkey">Nested SimpleTag to find (if non null) Tag name</param>
            <param name="recu">Also search in parent Tag if true (default: false)</param>
            <returns>Tag value as unsigned integer</returns>
        </member>
        <member name="P:TagLib.Matroska.Tag.Tags">
            <summary>
            Retrieve a list of Matroska Tags 
            </summary>
        </member>
        <member name="P:TagLib.Matroska.Tag.Parent">
            <summary>
            Retrieve the parent Tag, of higher TargetTypeValue (if any, null if none).
            This will only match the tag applying to the  same target as the current tag, or to more elements.
            </summary>
        </member>
        <member name="P:TagLib.Matroska.Tag.TargetTypeValue">
            <summary>
               Gets the Matroska Target Type Value of this Tag.
               This value can be change with the <see cref="P:TagLib.Matroska.Tag.TargetType"/> property. 
            </summary>
        </member>
        <member name="P:TagLib.Matroska.Tag.TargetType">
            <summary>
            Get or set the Matroska Target Type of this Tag.
            </summary>
        </member>
        <member name="F:TagLib.Matroska.Tag.Elements">
            <summary>
            Array of UID elements the tag applies to. If null, the tag apply to all elements.
            </summary>
        </member>
        <member name="F:TagLib.Matroska.Tag.SimpleTags">
            <summary>
            List SimpleTag contained in the current Tag (must never be null)
            </summary>
        </member>
        <member name="P:TagLib.Matroska.Tag.TagTypes">
            <summary>
               Gets the tag types contained in the current instance.
            </summary>
            <value>
               Always <see cref="F:TagLib.TagTypes.Matroska" />.
            </value>
        </member>
        <member name="P:TagLib.Matroska.Tag.Title">
            <summary>
               Gets and sets the title for the media described by the
               current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> object containing the title for
               the media described by the current instance or <see
               langword="null" /> if no value is present.
            </value>
            <remarks>
               This property is implemented using the TITLE tag and the Segment Title.
            </remarks>
        </member>
        <member name="P:TagLib.Matroska.Tag.TitleSort">
            <summary>
               Gets and sets the sort names for the Track Title of
               the media described by the current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> containing the sort name of 
               the Track Title of the media described by the current
               instance or null if no value is present.
            </value>
            <remarks>
               This property is implemented using the nested Matroska 
               SimpleTag "SORT_WITH" inside the "TITLE" SimpleTag.
            </remarks>
        </member>
        <member name="P:TagLib.Matroska.Tag.Subtitle">
            <summary>
               Gets and sets a short description, one-liner. 
               It represents the tagline of the Video/music.
            </summary>
            <value>
               A <see cref="T:System.String" /> containing the subtitle
               the media represented by the current instance 
               or an empty array if no value is present.
            </value>
            <remarks>
               This property is implemented using the Matroska 
               SimpleTag "SUBTITLE".
            </remarks>
        </member>
        <member name="P:TagLib.Matroska.Tag.Description">
            <summary>
               Gets and sets a short description of the media.
               For a music, this could be the comment that the artist
               made of its artwork. For a video, this should be a 
               short summary of the story/plot, but a spoiler. This
               should give the impression of what to expect in the
               media.
            </summary>
            <value>
               A <see cref="T:System.String" /> containing the subtitle
               the media represented by the current instance 
               or an empty array if no value is present.
            </value>
            <remarks>
               This property is implemented using the Matroska 
               SimpleTag "SUMMARY" (note that this is not the
               "DESCRIPTION" tag).
            </remarks>
        </member>
        <member name="P:TagLib.Matroska.Tag.Performers">
            <summary>
               Gets and sets the performers or artists who performed in
               the media described by the current instance.
            </summary>
            <value>
               A <see cref="T:string[]" /> containing the performers or
               artists who performed in the media described by the
               current instance or an empty array if no value is
               present.
            </value>
            <remarks>
               This property is implemented using the ACTOR/PERFORMER stored in
               the MKV Tag element.
            </remarks>
        </member>
        <member name="P:TagLib.Matroska.Tag.PerformersSort">
            <summary>
               Gets and sets the sort names of the performers or artists
               who performed in the media described by the current instance.
            </summary>
            <value>
               A <see cref="T:string[]" /> containing the sort names for
               the performers or artists who performed in the media
               described by the current instance, or an empty array if
               no value is present. 
            </value>
            <remarks>
               This property is implemented using the nested Matroska 
               SimpleTag "SORT_WITH" inside the "ACTOR" or "PERFORMER" SimpleTag.
            </remarks>
        </member>
        <member name="P:TagLib.Matroska.Tag.PerformersRole">
            <summary>
               Gets and sets the role of the performers or artists
               who performed in the media described by the current instance.
               For an movie, this represents a character of an actor.
               For a music, this may represent the instrument of the artist.
            </summary>
            <value>
               A <see cref="T:string[]" /> containing the roles for
               the performers or artists who performed in the media
               described by the current instance, or an empty array if
               no value is present. 
            </value>
            <remarks>
               This property is implemented using the nested Matroska 
               SimpleTag "CHARACTER" or "INSTRUMENTS" inside the 
               "ACTOR" or "PERFORMER" SimpleTag.
            </remarks>
        </member>
        <member name="P:TagLib.Matroska.Tag.AlbumArtists">
            <summary>
               Gets and sets the band or artist who is credited in the
               creation of the entire album or collection containing the
               media described by the current instance.
            </summary>
            <value>
               A <see cref="T:string[]" /> containing the band or artist
               who is credited in the creation of the entire album or
               collection containing the media described by the current
               instance or an empty array if no value is present.
            </value>
            <remarks>
               This property is implemented using the "ARTIST" Tag.
            </remarks>
        </member>
        <member name="P:TagLib.Matroska.Tag.AlbumArtistsSort">
            <summary>
               Gets and sets the sort names for the band or artist who
               is credited in the creation of the entire album or
               collection containing the media described by the
               current instance.
            </summary>
            <value>
               A <see cref="T:string[]" /> containing the sort names
               for the band or artist who is credited in the creation
               of the entire album or collection containing the media
               described by the current instance or an empty array if
               no value is present.
            </value>
            <remarks>
               This property is implemented using the nested Matroska 
               SimpleTag "SORT_WITH" inside the "ARTIST" SimpleTag.
            </remarks>
        </member>
        <member name="P:TagLib.Matroska.Tag.Composers">
            <summary>
               Gets and sets the composers of the media represented by
               the current instance.
            </summary>
            <value>
               A <see cref="T:string[]" /> containing the composers of the
               media represented by the current instance or an empty
               array if no value is present.
            </value>
            <remarks>
               This property is implemented using the "COMPOSER" Tag.
            </remarks>
        </member>
        <member name="P:TagLib.Matroska.Tag.ComposersSort">
            <summary>
               Gets and sets the sort names for the composers of the 
               media represented by the current instance.
            </summary>
            <value>
               A <see cref="T:string[]" /> containing the sort names
               for the composers of the media represented by the 
               current instance or an empty array if no value is present.
            </value>
            <remarks>
               <para>This field is typically optional but aids in the
               sorting of compilations or albums with multiple Composers.
               </para>
               <para>As this value is to be used as a sorting key, it
               should be used with less variation than <see
               cref="P:TagLib.Matroska.Tag.Composers" />. Where performers can be broken into
               muliple artist it is best to stick with a single composer.
               For example, "McCartney, Paul".</para>
            </remarks>
            <remarks>
               This property is implemented using the nested Matroska 
               SimpleTag "SORT_WITH" inside the "COMPOSER" SimpleTag.
            </remarks>
        </member>
        <member name="P:TagLib.Matroska.Tag.Album">
            <summary>
               Gets and sets the album of the media represented by the
               current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> object containing the album of
               the media represented by the current instance or <see
               langword="null" /> if no value is present.
            </value>
            <remarks>
               This property is implemented using the "TITLE" Tag in the Collection Tags.
            </remarks>
        </member>
        <member name="P:TagLib.Matroska.Tag.AlbumSort">
            <summary>
               Gets and sets the sort names for the Album Title of
               the media described by the current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> containing the sort name of 
               the Album Title of the media described by the current
               instance or null if no value is present.
            </value>
            <remarks>
               This property is implemented using the nested Matroska 
               SimpleTag "SORT_WITH" inside the "TITLE" SimpleTag.
            </remarks>
        </member>
        <member name="P:TagLib.Matroska.Tag.Comment">
            <summary>
               Gets and sets a user comment on the media represented by
               the current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> object containing user comments
               on the media represented by the current instance or <see
               langword="null" /> if no value is present.
            </value>
            <remarks>
               This property is implemented using the "COMMENT" Tag.
            </remarks>
        </member>
        <member name="P:TagLib.Matroska.Tag.Genres">
            <summary>
               Gets and sets the genres of the media represented by the
               current instance.
            </summary>
            <value>
               A <see cref="T:string[]" /> containing the genres of the
               media represented by the current instance or an empty
               array if no value is present.
            </value>
            <remarks>
               This property is implemented using the "GENRE" Tag.
            </remarks>
        </member>
        <member name="P:TagLib.Matroska.Tag.Year">
            <summary>
               Gets and sets the year that the media represented by the
               current instance was recorded.
            </summary>
            <value>
               A <see cref="T:System.UInt32" /> containing the year that the media
               represented by the current instance was created or zero
               if no value is present.
            </value>
        </member>
        <member name="P:TagLib.Matroska.Tag.Track">
            <summary>
               Gets and sets the position of the media represented by
               the current instance in its containing item (album, disc, episode, collection...).
            </summary>
            <value>
               A <see cref="T:System.UInt32" /> containing the position of the
               media represented by the current instance in its
               containing album or zero if not specified.
            </value>
            <remarks>
               This property is implemented using the "PART_NUMBER" Tag.
            </remarks>
        </member>
        <member name="P:TagLib.Matroska.Tag.TrackCount">
            <summary>
               Gets and sets the number of items contained in the parent Tag (album, disc, episode, collection...)
               the media represented by the current instance belongs to.
            </summary>
            <value>
               A <see cref="T:System.UInt32" /> containing the number of tracks in
               the album containing the media represented by the current
               instance or zero if not specified.
            </value>
            <remarks>
               This property is implemented using the "TOTAL_PARTS" Tag
               in the parent tag (one level up).
            </remarks>
        </member>
        <member name="P:TagLib.Matroska.Tag.Disc">
            <summary>
               Gets and sets the number of the disc containing the media
               represented by the current instance in the boxed set.
            </summary>
            <value>
               A <see cref="T:System.UInt32" /> containing the number of the disc
               containing the media represented by the current instance
               in the boxed set.
            </value>
            <remarks>
               This property is implemented using the "PART_NUMBER" Tag in
               a parent tag (VOLUME for video, PART for audio).
            </remarks>
        </member>
        <member name="P:TagLib.Matroska.Tag.DiscCount">
            <summary>
               Gets and sets the number of discs in the boxed set
               containing the media represented by the current instance.
            </summary>
            <value>
               A <see cref="T:System.UInt32" /> containing the number of discs in
               the boxed set containing the media represented by the
               current instance or zero if not specified.
            </value>
            <remarks>
               This property is implemented using the "TOTAL_PARTS" Tag in
               a parent tag (COLLECTION for video, ALBUM for audio).
            </remarks>
        </member>
        <member name="P:TagLib.Matroska.Tag.Lyrics">
            <summary>
               Gets and sets the lyrics or script of the media
               represented by the current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> object containing the lyrics or
               script of the media represented by the current instance
               or <see langword="null" /> if no value is present.
            </value>
        </member>
        <member name="P:TagLib.Matroska.Tag.Grouping">
            <summary>
               Gets and sets the grouping on the album which the media
               in the current instance belongs to.
            </summary>
            <value>
               A <see cref="T:System.String" /> object containing the grouping on
               the album which the media in the current instance belongs
               to or <see langword="null" /> if no value is present.
            </value>
        </member>
        <member name="P:TagLib.Matroska.Tag.BeatsPerMinute">
            <summary>
               Gets and sets the number of beats per minute in the audio
               of the media represented by the current instance.
            </summary>
            <value>
               A <see cref="T:System.UInt32" /> containing the number of beats per
               minute in the audio of the media represented by the
               current instance, or zero if not specified.
            </value>
        </member>
        <member name="P:TagLib.Matroska.Tag.Conductor">
            <summary>
               Gets and sets the conductor or director of the media
               represented by the current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> object containing the conductor
               or director of the media represented by the current
               instance or <see langword="null" /> if no value present.
            </value>
        </member>
        <member name="P:TagLib.Matroska.Tag.Copyright">
            <summary>
               Gets and sets the copyright information for the media
               represented by the current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> object containing the copyright
               information for the media represented by the current
               instance or <see langword="null" /> if no value present.
            </value>
            <remarks>
               This property is implemented using the "COPYRIGHT" Tag.
            </remarks>
        </member>
        <member name="P:TagLib.Matroska.Tag.DateTagged">
            <summary>
               Gets and sets the date at which the tag has been written.
            </summary>
            <value>
               A nullable <see cref="T:System.DateTime" /> object containing the 
               date at which the tag has been written, or <see 
               langword="null" /> if no value present.
            </value>
            <remarks>
               This property is implemented using the "DATE_TAGGED" Tag.
            </remarks>
        </member>
        <member name="P:TagLib.Matroska.Tag.MusicBrainzArtistId">
            <summary>
               Gets and sets the MusicBrainz Artist ID of
               the media described by the current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> containing the MusicBrainz 
               ArtistID for the media described by the current
               instance or null if no value is present.
            </value>
        </member>
        <member name="P:TagLib.Matroska.Tag.MusicBrainzReleaseGroupId">
            <summary>
               Gets and sets the MusicBrainz Release Group ID of
               the media described by the current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> containing the MusicBrainz 
               ReleaseGroupID for the media described by the current
               instance or null if no value is present.
            </value>
        </member>
        <member name="P:TagLib.Matroska.Tag.MusicBrainzReleaseId">
            <summary>
               Gets and sets the MusicBrainz Release ID of
               the media described by the current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> containing the MusicBrainz 
               ReleaseID for the media described by the current
               instance or null if no value is present.
            </value>
        </member>
        <member name="P:TagLib.Matroska.Tag.MusicBrainzReleaseArtistId">
            <summary>
               Gets and sets the MusicBrainz Release Artist ID of
               the media described by the current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> containing the MusicBrainz 
               ReleaseArtistID for the media described by the current
               instance or null if no value is present.
            </value>
        </member>
        <member name="P:TagLib.Matroska.Tag.MusicBrainzTrackId">
            <summary>
               Gets and sets the MusicBrainz Track ID of
               the media described by the current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> containing the MusicBrainz 
               TrackID for the media described by the current
               instance or null if no value is present.
            </value>
        </member>
        <member name="P:TagLib.Matroska.Tag.MusicBrainzDiscId">
            <summary>
               Gets and sets the MusicBrainz Disc ID of
               the media described by the current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> containing the MusicBrainz 
               DiscID for the media described by the current
               instance or null if no value is present.
            </value>
        </member>
        <member name="P:TagLib.Matroska.Tag.MusicIpId">
            <summary>
               Gets and sets the MusicIP PUID of
               the media described by the current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> containing the MusicIPPUID 
               for the media described by the current instance or
               null if no value is present.
            </value>
        </member>
        <member name="P:TagLib.Matroska.Tag.MusicBrainzReleaseStatus">
            <summary>
               Gets and sets the MusicBrainz Release Status of
               the media described by the current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> containing the MusicBrainz 
               ReleaseStatus for the media described by the current
               instance or null if no value is present.
            </value>
        </member>
        <member name="P:TagLib.Matroska.Tag.MusicBrainzReleaseType">
            <summary>
               Gets and sets the MusicBrainz Release Type of
               the media described by the current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> containing the MusicBrainz 
               ReleaseType for the media described by the current
               instance or null if no value is present.
            </value>
        </member>
        <member name="P:TagLib.Matroska.Tag.MusicBrainzReleaseCountry">
            <summary>
               Gets and sets the MusicBrainz Release Country of
               the media described by the current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> containing the MusicBrainz 
               ReleaseCountry for the media described by the current
               instance or null if no value is present.
            </value>
        </member>
        <member name="P:TagLib.Matroska.Tag.Pictures">
            <summary>
               Gets and sets a collection of pictures associated with
               the media represented by the current instance.
            </summary>
            <value>
               A <see cref="T:IPicture[]" /> containing a collection of
               pictures associated with the media represented by the
               current instance or an empty array if none are present.
            </value>
        </member>
        <member name="P:TagLib.Matroska.Tag.IsEmpty">
            <summary>
               Gets whether or not the current instance is empty.
            </summary>
            <value>
               <see langword="true" /> if the current instance does not
               any values. Otherwise <see langword="false" />.
            </value>
        </member>
        <member name="M:TagLib.Matroska.Tag.Clear">
            <summary>
               Clears the values stored in the current instance.
            </summary>
        </member>
        <member name="T:TagLib.Matroska.Tags">
            <summary>
            Describes all the Matroska Tags in a file as a list, ordered from higher TargetTypeValue to lower. 
            A <see cref="T:TagLib.Matroska.Tags"/> object contains several <see cref="T:TagLib.Matroska.Tag"/>
            </summary>
        </member>
        <member name="M:TagLib.Matroska.Tags.#ctor(System.Collections.Generic.List{TagLib.Matroska.Track})">
            <summary>
            Constructor
            </summary>
            <param name="tracks">List of Matroska tracks</param>
        </member>
        <member name="M:TagLib.Matroska.Tags.InsertItem(System.Int32,TagLib.Matroska.Tag)">
            <summary>
            Try to Insert an element to the Tag list at a given index, but can insert it at another index if the 
            index doesn't keep this list sorted by descending TargetTypeValue
            </summary>
            <param name="index">index at which the Tag element should be preferably inserted</param>
            <param name="tag">Tag element to be inserted in the Tag list</param>
        </member>
        <member name="M:TagLib.Matroska.Tags.SetItem(System.Int32,TagLib.Matroska.Tag)">
            <summary>
            Replace a tag in the list.
            </summary>
            <param name="index">Index of the lement to be replaced</param>
            <param name="tag">tag to replace the older one</param>
        </member>
        <member name="M:TagLib.Matroska.Tags.ClearItems">
            <summary>
            Clears the values stored in the current Tags and Children.
            </summary>
        </member>
        <member name="M:TagLib.Matroska.Tags.Get(TagLib.Matroska.TargetType,System.Nullable{System.Boolean})">
            <summary>
            Find the first Tag of a given TargetTypeValue
            </summary>
            <param name="targetType">TargetTypeValue to find</param>
            <param name="medium">null: any kind, true: represent the current medium, false: represent a sub-element</param>
            <returns>the Tag if match found, null otherwise</returns>
        </member>
        <member name="M:TagLib.Matroska.Tags.Get(TagLib.Matroska.IUIDElement,System.UInt16)">
            <summary>
             Find the first Tag applying to an object (Matroska UID), matching a TargetTypeValue
            </summary>
            <param name="UIDelement">Matroska Track, Edition, Chapter or Attachment (element having an UID)</param>
            <param name="targetTypeValue">TargetTypeValue to match (default: match any)</param>
            <returns>the first matching Tag representing the UID, or null if not found.</returns>
        </member>
        <member name="F:TagLib.Matroska.Tags.IsVideo">
            <summary>
            Define if this represent a video content (true), or an audio content (false)
            </summary>
        </member>
        <member name="P:TagLib.Matroska.Tags.Title">
            <summary>
            Title of the medium, from the Segment
            </summary>
        </member>
        <member name="P:TagLib.Matroska.Tags.Medium">
            <summary>
            Get/set the Tag that represents the current medium (file)
            </summary>
        </member>
        <member name="P:TagLib.Matroska.Tags.Album">
            <summary>
            Get/set the Tag that represents the Collection the current medium (file) belongs to.
            For Audio, this should be an Album, type 50 (itself if the mka file represents an album).
            For Video, this should be a Collection, type 70.
            </summary>
        </member>
        <member name="P:TagLib.Matroska.Tags.Attachments">
            <summary>
               Gets and sets a collection of Attachments associated with
               the media represented by the current instance.
            </summary>
            <value>
               A <see cref="T:Attachment[]" /> containing a collection of
               attachments associated with the media represented by the
               current instance or an empty array if none are present.
            </value>
        </member>
        <member name="P:TagLib.Matroska.Tags.Tracks">
            <summary>
            Get direct access to the Matroska Tracks. 
            </summary>
        </member>
        <member name="T:TagLib.Matroska.TargetType">
            <summary>
            Represents a Matroska TargetType.
            The TargetType element allows tagging of different parts that are inside or outside a given file. 
            For example in an audio file with one song you could have information about the album it comes 
            from and even the CD set even if it's not found in the file.
            </summary>
        </member>
        <member name="F:TagLib.Matroska.TargetType.COLLECTION">
            <summary>
            Audio/Video: The high hierarchy consisting of many different lower items
            </summary>
        </member>
        <member name="F:TagLib.Matroska.TargetType.VOLUME">
            <summary>
            Audio/Video: a list of lower levels grouped together
            </summary>
        </member>
        <member name="F:TagLib.Matroska.TargetType.EDITION">
            <summary>
            Audio: a list of lower levels grouped together
            </summary>
            
        </member>
        <member name="F:TagLib.Matroska.TargetType.ISSUE">
            <summary>
            Audio: a list of lower levels grouped together
            </summary>
        </member>
        <member name="F:TagLib.Matroska.TargetType.OPUS">
            <summary>
            Audio: a list of lower levels grouped together
            </summary>
        </member>
        <member name="F:TagLib.Matroska.TargetType.SEASON">
            <summary>
            Video: a list of lower levels grouped together
            </summary>
        </member>
        <member name="F:TagLib.Matroska.TargetType.SEQUEL">
            <summary>
            Video: a list of lower levels grouped together
            </summary>
        </member>
        <member name="F:TagLib.Matroska.TargetType.ALBUM">
            <summary>
            Audio: the most common grouping level of music and video (equals to an episode for TV series)
            </summary>
        </member>
        <member name="F:TagLib.Matroska.TargetType.OPERA">
            <summary>
            Audio: the most common grouping level of music and video (equals to an episode for TV series)
            </summary>
        </member>
        <member name="F:TagLib.Matroska.TargetType.CONCERT">
            <summary>
            Audio/Video: the most common grouping level of music and video (equals to an episode for TV series)
            </summary>
        </member>
        <member name="F:TagLib.Matroska.TargetType.MOVIE">
            <summary>
            Video: the most common grouping level of music and video (equals to an episode for TV series)
            </summary>    
        </member>
        <member name="F:TagLib.Matroska.TargetType.EPISODE">
            <summary>
            Video: the most common grouping level of music and video (equals to an episode for TV series)
            </summary>
        </member>
        <member name="F:TagLib.Matroska.TargetType.DEFAULT">
            <summary>
            Represent the default TargetType (an empty Targets), i.e. targets everything in the segment.
            </summary>
        </member>
        <member name="F:TagLib.Matroska.TargetType.PART">
            <summary>
            Audio/Video: when an album or episode has different logical parts
            </summary>
        </member>
        <member name="F:TagLib.Matroska.TargetType.SESSION">
            <summary>
            Audio/Video: when an album or episode has different logical parts
            </summary>
        </member>
        <member name="F:TagLib.Matroska.TargetType.TRACK">
            <summary>
            Audio: the common parts of an album or a movie 
            </summary>
        </member>
        <member name="F:TagLib.Matroska.TargetType.SONG">
            <summary>
            Audio: the common parts of an album or a movie 
            </summary>
        </member>
        <member name="F:TagLib.Matroska.TargetType.CHAPTER">
            <summary>
            Video: the common parts of an album or a movie 
            </summary>
        </member>
        <member name="F:TagLib.Matroska.TargetType.SUBTRACK">
            <summary>
            Audio: corresponds to parts of a track for audio (like a movement)
            </summary>
        </member>
        <member name="F:TagLib.Matroska.TargetType.MOVEMENT">
            <summary>
            Audio: corresponds to parts of a track for audio (like a movement)
            </summary>
        </member>
        <member name="F:TagLib.Matroska.TargetType.SCENE">
            <summary>
            Video: corresponds to parts of a track for audio (like a movement)
            </summary>
        </member>
        <member name="F:TagLib.Matroska.TargetType.SHOT">
            <summary>
            Video: the lowest hierarchy found in music or movies
            </summary>
        </member>
        <member name="T:TagLib.Matroska.Track">
            <summary>
            Describes a Matroska Track.
            </summary>
        </member>
        <member name="M:TagLib.Matroska.Track.#ctor(TagLib.Matroska.File,TagLib.Matroska.EBMLreader)">
            <summary>
            Constructs a <see cref="T:TagLib.Matroska.Track" /> parsing from provided 
            file data.
            Parsing will be done reading from _file at position references by 
            parent element's data section.
            </summary>
            <param name="_file"><see cref="T:TagLib.Matroska.File" /> instance to read from.</param>
            <param name="element">Parent <see cref="T:TagLib.Matroska.EBMLreader" />.</param>
        </member>
        <member name="P:TagLib.Matroska.Track.UnknownElements">
            <summary>
            List of unknown elements encountered while parsing.
            </summary>
        </member>
        <member name="P:TagLib.Matroska.Track.Duration">
            <summary>
            Describes track duration.
            </summary>
        </member>
        <member name="P:TagLib.Matroska.Track.MediaTypes">
            <summary>
            Describes track media types.
            </summary>
        </member>
        <member name="P:TagLib.Matroska.Track.Description">
            <summary>
            Track description.
            </summary>
        </member>
        <member name="P:TagLib.Matroska.Track.UID">
            <summary>
            Unique ID representing the element, as random as possible (setting zero will generate automatically a new one).
            </summary>
        </member>
        <member name="P:TagLib.Matroska.Track.UIDType">
            <summary>
            Get the Tag type the UID should be represented by, or 0 if undefined
            </summary>
        </member>
        <member name="T:TagLib.Matroska.VideoAspectRatioType">
            <summary>
            Enumeration describing supported Video Aspect Ratio types.
            </summary>
        </member>
        <member name="F:TagLib.Matroska.VideoAspectRatioType.AspectRatioModeFree">
            <summary>
            Free Aspect Ratio.
            </summary>
        </member>
        <member name="F:TagLib.Matroska.VideoAspectRatioType.AspectRatioModeKeep">
            <summary>
            Keep Aspect Ratio.
            </summary>
        </member>
        <member name="F:TagLib.Matroska.VideoAspectRatioType.AspectRatioModeFixed">
            <summary>
            Fixed Aspect Ratio.
            </summary>
        </member>
        <member name="T:TagLib.Matroska.VideoTrack">
            <summary>
            Describes a Matroska Video Track.
            </summary>
        </member>
        <member name="M:TagLib.Matroska.VideoTrack.#ctor(TagLib.Matroska.File,TagLib.Matroska.EBMLreader)">
            <summary>
            Constructs a <see cref="T:TagLib.Matroska.VideoTrack" /> parsing from provided
            file data.
            Parsing will be done reading from _file at position references by 
            parent element's data section.
            </summary>
            <param name="_file"><see cref="T:TagLib.Matroska.File" /> instance to read from.</param>
            <param name="element">Parent <see cref="T:TagLib.Matroska.EBMLreader" />.</param>
        </member>
        <member name="P:TagLib.Matroska.VideoTrack.UnknownElements">
            <summary>
            List of unknown elements encountered while parsing.
            </summary>
        </member>
        <member name="P:TagLib.Matroska.VideoTrack.MediaTypes">
            <summary>
            This type of track only has video media type.
            </summary>
        </member>
        <member name="P:TagLib.Matroska.VideoTrack.VideoWidth">
            <summary>
            Describes video track width in pixels.
            </summary>
        </member>
        <member name="P:TagLib.Matroska.VideoTrack.VideoHeight">
            <summary>
            Describes video track height in pixels.
            </summary>
        </member>
        <member name="T:TagLib.MusePack.File">
            <summary>
               This class extends <see cref="T:TagLib.NonContainer.File" /> to
               provide tagging and properties support for MusePack files.
            </summary>
            <remarks>
               A <see cref="T:TagLib.Ape.Tag" /> will be added automatically to
               any file that doesn't contain one. This change does not effect
               the file and can be reversed using the following method:
               <code>file.RemoveTags (file.TagTypes &amp; ~file.TagTypesOnDisk);</code>
            </remarks>
        </member>
        <member name="M:TagLib.MusePack.File.#ctor(System.String,TagLib.ReadStyle)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.MusePack.File" /> for a specified path in the local file
               system and specified read style.
            </summary>
            <param name="path">
               A <see cref="T:System.String" /> object containing the path of the
               file to use in the new instance.
            </param>
            <param name="propertiesStyle">
               A <see cref="T:TagLib.ReadStyle" /> value specifying at what level
               of accuracy to read the media properties, or <see
               cref="F:TagLib.ReadStyle.None" /> to ignore the properties.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="path" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:TagLib.MusePack.File.#ctor(System.String)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.MusePack.File" /> for a specified path in the local file
               system with an average read style.
            </summary>
            <param name="path">
               A <see cref="T:System.String" /> object containing the path of the
               file to use in the new instance.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="path" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:TagLib.MusePack.File.#ctor(TagLib.File.IFileAbstraction,TagLib.ReadStyle)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.MusePack.File" /> for a specified file abstraction and
               specified read style.
            </summary>
            <param name="abstraction">
               A <see cref="T:TagLib.File.IFileAbstraction" /> object to use when
               reading from and writing to the file.
            </param>
            <param name="propertiesStyle">
               A <see cref="T:TagLib.ReadStyle" /> value specifying at what level
               of accuracy to read the media properties, or <see
               cref="F:TagLib.ReadStyle.None" /> to ignore the properties.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="abstraction" /> is <see langword="null"
               />.
            </exception>
        </member>
        <member name="M:TagLib.MusePack.File.#ctor(TagLib.File.IFileAbstraction)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.MusePack.File" /> for a specified file abstraction with an
               average read style.
            </summary>
            <param name="abstraction">
               A <see cref="T:TagLib.File.IFileAbstraction" /> object to use when
               reading from and writing to the file.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="abstraction" /> is <see langword="null"
               />.
            </exception>
        </member>
        <member name="M:TagLib.MusePack.File.GetTag(TagLib.TagTypes,System.Boolean)">
            <summary>
               Gets a tag of a specified type from the current instance,
               optionally creating a new tag if possible.
            </summary>
            <param name="type">
               A <see cref="T:TagLib.TagTypes" /> value indicating the
               type of tag to read.
            </param>
            <param name="create">
               A <see cref="T:System.Boolean" /> value specifying whether or not to
               try and create the tag if one is not found.
            </param>
            <returns>
               A <see cref="T:TagLib.Tag" /> object containing the tag that was
               found in or added to the current instance. If no
               matching tag was found and none was created, <see
               langword="null" /> is returned.
            </returns>
            <remarks>
               If a <see cref="T:TagLib.Id3v2.Tag" /> is added to the
               current instance, it will be placed at the start of the
               file. On the other hand, <see cref="T:TagLib.Id3v1.Tag" />
               <see cref="T:TagLib.Ape.Tag" /> will be added to the end of
               the file. All other tag types will be ignored.
            </remarks>
        </member>
        <member name="M:TagLib.MusePack.File.ReadEnd(System.Int64,TagLib.ReadStyle)">
            <summary>
               Reads format specific information at the end of the
               file.
            </summary>
            <param name="end">
               A <see cref="T:System.Int64" /> value containing the seek position
               at which the media data ends and the tags begin.
            </param>
            <param name="propertiesStyle">
               A <see cref="T:TagLib.ReadStyle" /> value specifying at what level
               of accuracy to read the media properties, or <see
               cref="F:TagLib.ReadStyle.None" /> to ignore the properties.
            </param>
        </member>
        <member name="M:TagLib.MusePack.File.ReadProperties(System.Int64,System.Int64,TagLib.ReadStyle)">
            <summary>
               Reads the audio properties from the file represented by
               the current instance.
            </summary>
            <param name="start">
               A <see cref="T:System.Int64" /> value containing the seek position
               at which the tags end and the media data begins.
            </param>
            <param name="end">
               A <see cref="T:System.Int64" /> value containing the seek position
               at which the media data ends and the tags begin.
            </param>
            <param name="propertiesStyle">
               A <see cref="T:TagLib.ReadStyle" /> value specifying at what level
               of accuracy to read the media properties, or <see
               cref="F:TagLib.ReadStyle.None" /> to ignore the properties.
            </param>
            <returns>
               A <see cref="T:TagLib.Properties" /> object describing the
               media properties of the file represented by the current
               instance.
            </returns>
        </member>
        <member name="T:TagLib.MusePack.StreamHeader">
            <summary>
               This struct implements <see cref="T:TagLib.IAudioCodec" /> to provide
               support for reading MusePack audio properties.
            </summary>
        </member>
        <member name="F:TagLib.MusePack.StreamHeader.stream_length">
            <summary>
               Contains the number of bytes in the stream.
            </summary>
        </member>
        <member name="F:TagLib.MusePack.StreamHeader.version">
            <summary>
               Contains the MusePack version.
            </summary>
        </member>
        <member name="F:TagLib.MusePack.StreamHeader.header_data">
            <summary>
               Contains additional header information.
            </summary>
        </member>
        <member name="F:TagLib.MusePack.StreamHeader.sample_rate">
            <summary>
               Contains the sample rate of the stream.
            </summary>
        </member>
        <member name="F:TagLib.MusePack.StreamHeader.frames">
            <summary>
               Contains the number of frames in the stream.
            </summary>
        </member>
        <member name="F:TagLib.MusePack.StreamHeader.channels">
            <summary>
               Contains the number of channels in the stream.
            </summary>
        </member>
        <member name="F:TagLib.MusePack.StreamHeader.framecount">
            <summary>
               Contains the count of frames in the stream. 
            </summary>
        </member>
        <member name="F:TagLib.MusePack.StreamHeader.SizeSV7">
            <summary>
               The size of a MusePack SV7 header.
            </summary>
        </member>
        <member name="F:TagLib.MusePack.StreamHeader.FileIdentifierSv7">
            <summary>
               The identifier used to recognize a Musepack SV7 file.
            </summary>
            <value>
               "MP+"
            </value>
        </member>
        <member name="F:TagLib.MusePack.StreamHeader.FileIdentifierSv8">
            <summary>
               The identifier used to recognize a Musepack SV8 file.
            </summary>
            <value>
               "MPCK"
            </value>
        </member>
        <member name="M:TagLib.MusePack.StreamHeader.#ctor(TagLib.MusePack.File,System.Int64)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.MusePack.StreamHeader" /> for a specified header block and
               stream length.
            </summary>
            <param name="file">
               A <see cref="T:TagLib.MusePack.File" /> object containing the stream
               header data.
            </param>
            <param name="streamLength">
               A <see cref="T:System.Int64" /> value containing the length of the
               MusePAck stream in bytes.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="file" /> is <see langword="null" />.
            </exception>
            <exception cref="T:TagLib.CorruptFileException">
               <paramref name="file" /> does not begin with <see
               cref="F:TagLib.MusePack.StreamHeader.FileIdentifierSv7" />  or with <see 
               cref="F:TagLib.MusePack.StreamHeader.FileIdentifierSv8" /> or is less than 
               <see cref="P:File.Size" /> bytes long.
            </exception>
        </member>
        <member name="P:TagLib.MusePack.StreamHeader.Duration">
            <summary>
               Gets the duration of the media represented by the current
               instance.
            </summary>
            <value>
               A <see cref="T:System.TimeSpan" /> containing the duration of the
               media represented by the current instance.
            </value>
        </member>
        <member name="P:TagLib.MusePack.StreamHeader.MediaTypes">
            <summary>
               Gets the types of media represented by the current
               instance.
            </summary>
            <value>
               Always <see cref="F:TagLib.MediaTypes.Audio" />.
            </value>
        </member>
        <member name="P:TagLib.MusePack.StreamHeader.Description">
            <summary>
               Gets a text description of the media represented by the
               current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> object containing a description
               of the media represented by the current instance.
            </value>
        </member>
        <member name="P:TagLib.MusePack.StreamHeader.AudioBitrate">
            <summary>
               Gets the bitrate of the audio represented by the current
               instance.
            </summary>
            <value>
               A <see cref="T:System.Int32" /> value containing a bitrate of the
               audio represented by the current instance.
            </value>
        </member>
        <member name="P:TagLib.MusePack.StreamHeader.AudioSampleRate">
            <summary>
               Gets the sample rate of the audio represented by the
               current instance.
            </summary>
            <value>
               A <see cref="T:System.Int32" /> value containing the sample rate of
               the audio represented by the current instance.
            </value>
        </member>
        <member name="P:TagLib.MusePack.StreamHeader.AudioChannels">
            <summary>
               Gets the number of channels in the audio represented by
               the current instance.
            </summary>
            <value>
               A <see cref="T:System.Int32" /> value containing the number of
               channels in the audio represented by the current
               instance.
            </value>
        </member>
        <member name="P:TagLib.MusePack.StreamHeader.Version">
            <summary>
               Gets the WavPack version of the audio represented by the
               current instance.
            </summary>
            <value>
               A <see cref="T:System.Int32" /> value containing the WavPack version
               of the audio represented by the current instance.
            </value>
        </member>
        <member name="M:TagLib.MusePack.StreamHeader.GetHashCode">
            <summary>
               Generates a hash code for the current instance.
            </summary>
            <returns>
               A <see cref="T:System.Int32" /> value containing the hash code for
               the current instance.
            </returns>
        </member>
        <member name="M:TagLib.MusePack.StreamHeader.Equals(System.Object)">
            <summary>
               Checks whether or not the current instance is equal to
               another object.
            </summary>
            <param name="other">
               A <see cref="T:System.Object" /> to compare to the current
               instance.
            </param>
            <returns>
               A <see cref="T:System.Boolean" /> value indicating whether or not the
               current instance is equal to <paramref name="other" />.
            </returns>
            <seealso cref="M:System.IEquatable`1.Equals" />
        </member>
        <member name="M:TagLib.MusePack.StreamHeader.Equals(TagLib.MusePack.StreamHeader)">
            <summary>
               Checks whether or not the current instance is equal to
               another instance of <see cref="T:TagLib.MusePack.StreamHeader" />.
            </summary>
            <param name="other">
               A <see cref="T:TagLib.MusePack.StreamHeader" /> object to compare to the
               current instance.
            </param>
            <returns>
               A <see cref="T:System.Boolean" /> value indicating whether or not the
               current instance is equal to <paramref name="other" />.
            </returns>
            <seealso cref="M:System.IEquatable`1.Equals" />
        </member>
        <member name="M:TagLib.MusePack.StreamHeader.op_Equality(TagLib.MusePack.StreamHeader,TagLib.MusePack.StreamHeader)">
            <summary>
               Gets whether or not two instances of <see
               cref="T:TagLib.MusePack.StreamHeader" /> are equal to eachother.
            </summary>
            <param name="first">
               A <see cref="T:TagLib.MusePack.StreamHeader" /> object to compare.
            </param>
            <param name="second">
               A <see cref="T:TagLib.MusePack.StreamHeader" /> object to compare.
            </param>
            <returns>
               <see langword="true" /> if <paramref name="first" /> is
               equal to <paramref name="second" />. Otherwise, <see
               langword="false" />.
            </returns>
        </member>
        <member name="M:TagLib.MusePack.StreamHeader.op_Inequality(TagLib.MusePack.StreamHeader,TagLib.MusePack.StreamHeader)">
            <summary>
               Gets whether or not two instances of <see
               cref="T:TagLib.MusePack.StreamHeader" /> differ.
            </summary>
            <param name="first">
               A <see cref="T:TagLib.MusePack.StreamHeader" /> object to compare.
            </param>
            <param name="second">
               A <see cref="T:TagLib.MusePack.StreamHeader" /> object to compare.
            </param>
            <returns>
               <see langword="true" /> if <paramref name="first" /> is
               unequal to <paramref name="second" />. Otherwise, <see
               langword="false" />.
            </returns>
        </member>
        <member name="T:TagLib.Mpeg4.AppleTag">
            <summary>
               This class extends <see cref="T:TagLib.Tag" /> to provide support
               for processing Apple "ilst" tags.
            </summary>
        </member>
        <member name="F:TagLib.Mpeg4.AppleTag.meta_box">
            <summary>
               Contains the ISO meta box in which that tag will be
               stored.
            </summary>
        </member>
        <member name="F:TagLib.Mpeg4.AppleTag.ilst_box">
            <summary>
               Contains the ILST box which holds all the values.
            </summary>
        </member>
        <member name="M:TagLib.Mpeg4.AppleTag.#ctor(TagLib.Mpeg4.IsoUserDataBox)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Mpeg4.AppleTag" /> for a specified ISO user data box.
            </summary>
            <param name="box">
               A <see cref="T:TagLib.Mpeg4.IsoUserDataBox" /> from which the tag is to
               be read.
            </param>
        </member>
        <member name="P:TagLib.Mpeg4.AppleTag.IsCompilation">
            <summary>
               Gets and sets whether or not the album described by the
               current instance is a compilation.
            </summary>
            <value>
               A <see cref="T:System.Boolean" /> value indicating whether or not the
               album described by the current instance is a compilation.
            </value>
            <remarks>
               This property is implemented using the "cpil" data box.
            </remarks>
        </member>
        <member name="M:TagLib.Mpeg4.AppleTag.DataBoxes(System.Collections.Generic.IEnumerable{TagLib.ByteVector})">
            <summary>
               Gets all data boxes that match any of the provided types.
            </summary>
            <param name="types">
               A <see cref="T:System.Collections.Generic.IEnumerable`1" /> object enumerating a list
               of box types to match.
            </param>
            <returns>
               A <see cref="T:System.Collections.Generic.IEnumerable`1" /> object enumerating the
               matching boxes.
            </returns>
        </member>
        <member name="M:TagLib.Mpeg4.AppleTag.DataBoxes(TagLib.ByteVector[])">
            <summary>
               Gets all data boxes that match any of the provided types.
            </summary>
            <param name="types">
               A <see cref="T:ByteVector[]" /> containing list of box
               types to match.
            </param>
            <returns>
               A <see cref="T:System.Collections.Generic.IEnumerable`1" /> object enumerating the
               matching boxes.
            </returns>
        </member>
        <member name="M:TagLib.Mpeg4.AppleTag.DataBoxes(System.String,System.String)">
            <summary>
               Gets all custom data boxes that match the specified mean
               and name pair.
            </summary>
            <param name="mean">
               A <see cref="T:System.String" /> object containing the "mean" to
               match.
            </param>
            <param name="name">
               A <see cref="T:System.String" /> object containing the name to
               match.
            </param>
            <returns>
               A <see cref="T:System.Collections.Generic.IEnumerable`1" /> object enumerating the
               matching boxes.
            </returns>
        </member>
        <member name="M:TagLib.Mpeg4.AppleTag.GetText(TagLib.ByteVector)">
            <summary>
               Gets all text values contained in a specified box type.
            </summary>
            <param name="type">
               A <see cref="T:TagLib.ByteVector" /> object containing the box
               type to match.
            </param>
            <returns>
               A <see cref="T:string[]" /> containing text from all
               matching boxes.
            </returns>
        </member>
        <member name="M:TagLib.Mpeg4.AppleTag.SetData(TagLib.ByteVector,TagLib.Mpeg4.AppleDataBox[])">
            <summary>
               Sets the data for a specified box type to a collection of
               boxes.
            </summary>
            <param name="type">
               A <see cref="T:TagLib.ByteVector" /> object containing the type to
               add to the new instance.
            </param>
            <param name="boxes">
               A <see cref="T:AppleDataBox[]" /> containing boxes to add
               for the specified type.
            </param>
        </member>
        <member name="M:TagLib.Mpeg4.AppleTag.SetData(TagLib.ByteVector,TagLib.ByteVectorCollection,System.UInt32)">
            <summary>
               Sets the data for a specified box type using values from
               a <see cref="T:TagLib.ByteVectorCollection" /> object.
            </summary>
            <param name="type">
               A <see cref="T:TagLib.ByteVector" /> object containing the type to
               add to the new instance.
            </param>
            <param name="data">
               A <see cref="T:TagLib.ByteVectorCollection" /> object containing
               data to add for the specified type.
            </param>
            <param name="flags">
               A <see cref="T:System.UInt32" /> value containing flags to use for
               the added boxes.
            </param>
        </member>
        <member name="M:TagLib.Mpeg4.AppleTag.SetData(TagLib.ByteVector,TagLib.ByteVector,System.UInt32)">
            <summary>
               Sets the data for a specified box type using a single
               <see cref="T:TagLib.ByteVector" /> object.
            </summary>
            <param name="type">
               A <see cref="T:TagLib.ByteVector" /> object containing the type to
               add to the new instance.
            </param>
            <param name="data">
               A <see cref="T:TagLib.ByteVector" /> object containing data to add
               for the specified type.
            </param>
            <param name="flags">
               A <see cref="T:System.UInt32" /> value containing flags to use for
               the added box.
            </param>
        </member>
        <member name="M:TagLib.Mpeg4.AppleTag.SetText(TagLib.ByteVector,System.String[])">
            <summary>
               Sets the text for a specified box type.
            </summary>
            <param name="type">
               A <see cref="T:TagLib.ByteVector" /> object containing the type to
               add to the new instance.
            </param>
            <param name="text">
               A <see cref="T:string[]" /> containing text to store.
            </param>
        </member>
        <member name="M:TagLib.Mpeg4.AppleTag.SetText(TagLib.ByteVector,System.String)">
            <summary>
               Sets the text for a specified box type.
            </summary>
            <param name="type">
               A <see cref="T:TagLib.ByteVector" /> object containing the type to
               add to the new instance.
            </param>
            <param name="text">
               A <see cref="T:System.String" /> object containing text to store.
            </param>
        </member>
        <member name="M:TagLib.Mpeg4.AppleTag.ClearData(TagLib.ByteVector)">
            <summary>
               Clears all data for a specified box type.
            </summary>
            <param name="type">
               A <see cref="T:TagLib.ByteVector" /> object containing the type of
               box to remove from the current instance.
            </param>
        </member>
        <member name="M:TagLib.Mpeg4.AppleTag.DetachIlst">
            <summary>
               Detaches the internal "ilst" box from its parent element.
            </summary>
        </member>
        <member name="M:TagLib.Mpeg4.AppleTag.GetDashBox(System.String,System.String)">
            <summary>
            Gets the text string from a specific data box in a Dash (----) atom
            </summary>
            <param name="meanstring">String specifying text from mean box</param>
            <param name="namestring">String specifying text from name box</param>
            <returns>Text string from data box</returns>
        </member>
        <member name="M:TagLib.Mpeg4.AppleTag.GetDashBoxes(System.String,System.String)">
            <summary>
            Gets the text strings from a specific data boxes in Dash (----) atoms
            </summary>
            <param name="meanstring">String specifying text from mean box</param>
            <param name="namestring">String specifying text from name box</param>
            <returns>Text string from data box</returns>
        </member>
        <member name="M:TagLib.Mpeg4.AppleTag.SetDashBox(System.String,System.String,System.String)">
            <summary>
            Sets a specific strings in Dash (----) atom.  This method updates
            and existing atom, or creates a new one.  If an empty datastring is
            specified, the Dash box and its children are removed.
            </summary>
            <param name="meanstring">String specifying text for mean box</param>
            <param name="namestring">String specifying text for name box</param>
            <param name="datastring">String specifying text for data box</param>
        </member>
        <member name="M:TagLib.Mpeg4.AppleTag.SetDashBoxes(System.String,System.String,System.String[])">
            <summary>
            Sets specific strings in Dash (----) atom.  This method updates
            existing atoms, or creates new one.  If an empty datastring is
            specified, the Dash boxes and its children are removed.
            </summary>
            <param name="meanstring">String specifying text for mean box</param>
            <param name="namestring">String specifying text for name box</param>
            <param name="datastring">String values specifying text for data boxes</param>
        </member>
        <member name="M:TagLib.Mpeg4.AppleTag.GetDashAtom(System.String,System.String)">
            <summary>
            Gets the AppleDataBox that corresponds to the specified mean and name values.
            </summary>
            <param name="meanstring">String specifying text for mean box</param>
            <param name="namestring">String specifying text for name box</param>
            <returns>Existing AppleDataBox or null if one does not exist</returns>
        </member>
        <member name="M:TagLib.Mpeg4.AppleTag.GetDashAtoms(System.String,System.String)">
            <summary>
            Gets the AppleDataBox that corresponds to the specified mean and name values.
            </summary>
            <param name="meanstring">String specifying text for mean box</param>
            <param name="namestring">String specifying text for name box</param>
            <returns>Existing AppleDataBox or null if one does not exist</returns>
        </member>
        <member name="M:TagLib.Mpeg4.AppleTag.GetParentDashBox(System.String,System.String)">
            <summary>
            Returns the Parent Dash box object for a given mean/name combination
            </summary>
            <param name="meanstring">String specifying text for mean box</param>
            <param name="namestring">String specifying text for name box</param>
            <returns>AppleAnnotationBox object that is the parent for the mean/name combination</returns>
        </member>
        <member name="M:TagLib.Mpeg4.AppleTag.FixId(TagLib.ByteVector)">
            <summary>
               Converts the provided ID into a readonly ID and fixes a
               3 byte ID.
            </summary>
            <param name="id">
               A <see cref="T:TagLib.ByteVector" /> object containing an ID to
               fix.
            </param>
            <returns>
               A fixed <see cref="T:TagLib.ReadOnlyByteVector" /> or <see
               langword="null" /> if the ID could not be fixed.
            </returns>
        </member>
        <member name="M:TagLib.Mpeg4.AppleTag.GetEnumerator">
            <summary>
               Gets an enumerator for enumerating through the tag's data
               boxes.
            </summary>
            <returns>
               A <see cref="T:System.Collections.IEnumerator`1" /> for
               enumerating through the tag's data boxes.
            </returns>
        </member>
        <member name="P:TagLib.Mpeg4.AppleTag.TagTypes">
            <summary>
               Gets the tag types contained in the current instance.
            </summary>
            <value>
               Always <see cref="F:TagLib.TagTypes.Apple" />.
            </value>
        </member>
        <member name="P:TagLib.Mpeg4.AppleTag.Title">
            <summary>
               Gets and sets the title for the media described by the
               current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> object containing the title for
               the media described by the current instance or <see
               langword="null" /> if no value is present.
            </value>
            <remarks>
               This property is implemented using the "@nam" data box.
            </remarks>
        </member>
        <member name="P:TagLib.Mpeg4.AppleTag.Subtitle">
            <summary>
               Gets and sets a short description, one-liner. 
               It represents the tagline of the Video/music.
            </summary>
            <value>
               A <see cref="T:System.String" /> containing the subtitle
               the media represented by the current instance 
               or an empty array if no value is present.
            </value>
            <remarks>
               This property is implemented using the "Subt" data box.
               Should be: ----:com.apple.iTunes:SUBTITLE
            </remarks>
        </member>
        <member name="P:TagLib.Mpeg4.AppleTag.Description">
            <summary>
               Gets and sets a short description of the media.
               For a music, this could be the comment that the artist
               made of its artwork. For a video, this should be a 
               short summary of the story/plot, but a spoiler. This
               should give the impression of what to expect in the
               media.
            </summary>
            <value>
               A <see cref="T:System.String" /> containing the subtitle
               the media represented by the current instance 
               or an empty array if no value is present.
            </value>
            <remarks>
               This property is implemented using the "Desc" data box.
            </remarks>
        </member>
        <member name="P:TagLib.Mpeg4.AppleTag.Performers">
            <summary>
               Gets and sets the performers or artists who performed in
               the media described by the current instance.
            </summary>
            <value>
               A <see cref="T:string[]" /> containing the performers or
               artists who performed in the media described by the
               current instance or an empty array if no value is
               present.
            </value>
            <remarks>
               This property is implemented using the "@ART" data box.
            </remarks>
        </member>
        <member name="P:TagLib.Mpeg4.AppleTag.PerformersRole">
            <summary>
               Gets and sets the Charaters for a video media, or
               instruments played for music media. 
               This should match the <see cref="P:TagLib.Mpeg4.AppleTag.Performers"/> array (for
               each person correspond one/more role). Several roles for
               the same artist/actor can be made up with semicolons. 
               For example, "Marty McFly; Marty McFly Jr.; Marlene McFly".
            </summary>
            <remarks>
               This property is implemented using the "role" data box.
            </remarks>
        </member>
        <member name="P:TagLib.Mpeg4.AppleTag.AlbumArtists">
            <summary>
               Gets and sets the band or artist who is credited in the
               creation of the entire album or collection containing the
               media described by the current instance.
            </summary>
            <value>
               A <see cref="T:string[]" /> containing the band or artist
               who is credited in the creation of the entire album or
               collection containing the media described by the current
               instance or an empty array if no value is present.
            </value>
            <remarks>
               This property is implemented using the "aART" data box.
            </remarks>
        </member>
        <member name="P:TagLib.Mpeg4.AppleTag.Composers">
            <summary>
               Gets and sets the composers of the media represented by
               the current instance.
            </summary>
            <value>
               A <see cref="T:string[]" /> containing the composers of the
               media represented by the current instance or an empty
               array if no value is present.
            </value>
            <remarks>
               This property is implemented using the "@wrt" data box.
            </remarks>
        </member>
        <member name="P:TagLib.Mpeg4.AppleTag.Album">
            <summary>
               Gets and sets the album of the media represented by the
               current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> object containing the album of
               the media represented by the current instance or <see
               langword="null" /> if no value is present.
            </value>
            <remarks>
               This property is implemented using the "@alb" data box.
            </remarks>
        </member>
        <member name="P:TagLib.Mpeg4.AppleTag.Comment">
            <summary>
               Gets and sets a user comment on the media represented by
               the current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> object containing user comments
               on the media represented by the current instance or <see
               langword="null" /> if no value is present.
            </value>
            <remarks>
               This property is implemented using the "@cmt" data box.
            </remarks>
        </member>
        <member name="P:TagLib.Mpeg4.AppleTag.Genres">
            <summary>
               Gets and sets the genres of the media represented by the
               current instance.
            </summary>
            <value>
               A <see cref="T:string[]" /> containing the genres of the
               media represented by the current instance or an empty
               array if no value is present.
            </value>
            <remarks>
               This property is implemented using the "@gen" and "gnre"
               data boxes.
            </remarks>
        </member>
        <member name="P:TagLib.Mpeg4.AppleTag.Year">
            <summary>
               Gets and sets the year that the media represented by the
               current instance was recorded.
            </summary>
            <value>
               A <see cref="T:System.UInt32" /> containing the year that the media
               represented by the current instance was created or zero
               if no value is present.
            </value>
            <remarks>
               This property is implemented using the "@day" data box.
            </remarks>
        </member>
        <member name="P:TagLib.Mpeg4.AppleTag.Track">
            <summary>
               Gets and sets the position of the media represented by
               the current instance in its containing album.
            </summary>
            <value>
               A <see cref="T:System.UInt32" /> containing the position of the
               media represented by the current instance in its
               containing album or zero if not specified.
            </value>
            <remarks>
               This property is implemented using the "trkn" data box.
            </remarks>
        </member>
        <member name="P:TagLib.Mpeg4.AppleTag.TrackCount">
            <summary>
               Gets and sets the number of tracks in the album
               containing the media represented by the current instance.
            </summary>
            <value>
               A <see cref="T:System.UInt32" /> containing the number of tracks in
               the album containing the media represented by the current
               instance or zero if not specified.
            </value>
            <remarks>
               This property is implemented using the "trkn" data box.
            </remarks>
        </member>
        <member name="P:TagLib.Mpeg4.AppleTag.Disc">
            <summary>
               Gets and sets the number of the disc containing the media
               represented by the current instance in the boxed set.
            </summary>
            <value>
               A <see cref="T:System.UInt32" /> containing the number of the disc
               containing the media represented by the current instance
               in the boxed set.
            </value>
            <remarks>
               This property is implemented using the "disk" data box.
            </remarks>
        </member>
        <member name="P:TagLib.Mpeg4.AppleTag.DiscCount">
            <summary>
               Gets and sets the number of discs in the boxed set
               containing the media represented by the current instance.
            </summary>
            <value>
               A <see cref="T:System.UInt32" /> containing the number of discs in
               the boxed set containing the media represented by the
               current instance or zero if not specified.
            </value>
            <remarks>
               This property is implemented using the "disk" data box.
            </remarks>
        </member>
        <member name="P:TagLib.Mpeg4.AppleTag.Lyrics">
            <summary>
               Gets and sets the lyrics or script of the media
               represented by the current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> object containing the lyrics or
               script of the media represented by the current instance
               or <see langword="null" /> if no value is present.
            </value>
            <remarks>
               This property is implemented using the "@lyr" data box.
            </remarks>
        </member>
        <member name="P:TagLib.Mpeg4.AppleTag.Grouping">
            <summary>
               Gets and sets the grouping on the album which the media
               in the current instance belongs to.
            </summary>
            <value>
               A <see cref="T:System.String" /> object containing the grouping on
               the album which the media in the current instance belongs
               to or <see langword="null" /> if no value is present.
            </value>
            <remarks>
               This property is implemented using the "@grp" data box.
            </remarks>
        </member>
        <member name="P:TagLib.Mpeg4.AppleTag.BeatsPerMinute">
            <summary>
               Gets and sets the number of beats per minute in the audio
               of the media represented by the current instance.
            </summary>
            <value>
               A <see cref="T:System.UInt32" /> containing the number of beats per
               minute in the audio of the media represented by the
               current instance, or zero if not specified.
            </value>
            <remarks>
               This property is implemented using the "tmpo" data box.
            </remarks>
        </member>
        <member name="P:TagLib.Mpeg4.AppleTag.Conductor">
            <summary>
               Gets and sets the conductor or director of the media
               represented by the current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> object containing the conductor
               or director of the media represented by the current
               instance or <see langword="null" /> if no value present.
            </value>
            <remarks>
               This property is implemented using the "cond" data box.
            </remarks>
        </member>
        <member name="P:TagLib.Mpeg4.AppleTag.Copyright">
            <summary>
               Gets and sets the copyright information for the media
               represented by the current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> object containing the copyright
               information for the media represented by the current
               instance or <see langword="null" /> if no value present.
            </value>
            <remarks>
               This property is implemented using the "cprt" data box.
            </remarks>
        </member>
        <member name="P:TagLib.Mpeg4.AppleTag.DateTagged">
            <summary>
               Gets and sets the date at which the tag has been written.
            </summary>
            <value>
               A nullable <see cref="T:System.DateTime" /> object containing the 
               date at which the tag has been written, or <see 
               langword="null" /> if no value present.
            </value>
            <remarks>
               This property is implemented using the "dtag" data box.
            </remarks>
        </member>
        <member name="P:TagLib.Mpeg4.AppleTag.AlbumArtistsSort">
            <summary>
               Gets and sets the sort names for the band or artist who
               is credited in the creation of the entire album or
               collection containing the media described by the
               current instance.
            </summary>
            <value>
               A <see cref="T:string[]" /> containing the sort names
               for the band or artist who is credited in the creation
               of the entire album or collection containing the media
               described by the current instance or an empty array if
               no value is present.
            </value>
            <remarks>
               This property is implemented using the "soaa"
               Box type.
               http://musicbrainz.org/doc/PicardTagMapping
               http://code.google.com/p/mp4v2/wiki/iTunesMetadata
            </remarks>
        </member>
        <member name="P:TagLib.Mpeg4.AppleTag.PerformersSort">
            <summary>
               Gets and sets the sort names of the performers or artists
               who performed in the media described by the current instance.
            </summary>
            <value>
               A <see cref="T:string[]" /> containing the sort names for
               the performers or artists who performed in the media
               described by the current instance, or an empty array if
               no value is present. 
            </value>
            <remarks>
               This property is implemented using the "soar" box type.
               http://musicbrainz.org/doc/PicardTagMapping
               http://code.google.com/p/mp4v2/wiki/iTunesMetadata
            </remarks>
        </member>
        <member name="P:TagLib.Mpeg4.AppleTag.ComposersSort">
            <summary>
               Gets and sets the sort names of the Composer credited
               in the media described by the current instance.
            </summary>
            <value>
               A <see cref="T:string[]" /> containing the sort names for
               the Composers in the media described by the current instance,
               or an empty array if no value is present. 
            </value>
            <remarks>
               This property is implemented using the "soar" box type.
               http://musicbrainz.org/doc/PicardTagMapping
               http://code.google.com/p/mp4v2/wiki/iTunesMetadata
            </remarks>
        </member>
        <member name="P:TagLib.Mpeg4.AppleTag.AlbumSort">
            <summary>
               Gets and sets the sort names of the Album Title of
               the media described by the current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> containing the sort names for
               the Album Title in the media described by the current
               instance, or null if no value is present. 
            </value>
            <remarks>
               This property is implemented using the "soal" box type.
               http://musicbrainz.org/doc/PicardTagMapping
               http://code.google.com/p/mp4v2/wiki/iTunesMetadata
            </remarks>
        </member>
        <member name="P:TagLib.Mpeg4.AppleTag.TitleSort">
            <summary>
               Gets and sets the sort names of the Track Title in the
               media described by the current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> containing the sort names for
               the Track Title in the media described by the current 
               instance, or null if no value is present. 
            </value>
            <remarks>
               This property is implemented using the "sonm" box type.
               http://musicbrainz.org/doc/PicardTagMapping
               http://code.google.com/p/mp4v2/wiki/iTunesMetadata
            </remarks>
        </member>
        <member name="P:TagLib.Mpeg4.AppleTag.MusicBrainzArtistId">
            <summary>
               Gets and sets the MusicBrainz ArtistID
            </summary>
            <value>
               A <see cref="T:System.String" /> containing the MusicBrainz
               ArtistID for the media described by the current 
               instance, or null if no value is present. 
            </value>
            <remarks>
               This property is implemented using the "dash"/"----" box type.
               http://musicbrainz.org/doc/PicardTagMapping
            </remarks>
        </member>
        <member name="P:TagLib.Mpeg4.AppleTag.MusicBrainzReleaseGroupId">
            <summary>
               Gets and sets the MusicBrainz ReleaseGroupID
            </summary>
            <value>
               A <see cref="T:System.String" /> containing the MusicBrainz
               ReleaseGroupID for the media described by the current 
               instance, or null if no value is present. 
            </value>
            <remarks>
               This property is implemented using the "dash"/"----" box type.
               http://musicbrainz.org/doc/PicardTagMapping
            </remarks>
        </member>
        <member name="P:TagLib.Mpeg4.AppleTag.MusicBrainzReleaseId">
            <summary>
               Gets and sets the MusicBrainz ReleaseID
            </summary>
            <value>
               A <see cref="T:System.String" /> containing the MusicBrainz
               ReleaseID for the media described by the current 
               instance, or null if no value is present. 
            </value>
            <remarks>
               This property is implemented using the "dash"/"----" box type.
               http://musicbrainz.org/doc/PicardTagMapping
            </remarks>
        </member>
        <member name="P:TagLib.Mpeg4.AppleTag.MusicBrainzReleaseArtistId">
            <summary>
               Gets and sets the MusicBrainz ReleaseArtistID
            </summary>
            <value>
               A <see cref="T:System.String" /> containing the MusicBrainz
               ReleaseArtistID for the media described by the current 
               instance, or null if no value is present. 
            </value>
            <remarks>
               This property is implemented using the "dash"/"----" box type.
               http://musicbrainz.org/doc/PicardTagMapping
            </remarks>
        </member>
        <member name="P:TagLib.Mpeg4.AppleTag.MusicBrainzTrackId">
            <summary>
               Gets and sets the MusicBrainz TrackID
            </summary>
            <value>
               A <see cref="T:System.String" /> containing the MusicBrainz
               TrackID for the media described by the current 
               instance, or null if no value is present. 
            </value>
            <remarks>
               This property is implemented using the "dash"/"----" box type.
               http://musicbrainz.org/doc/PicardTagMapping
            </remarks>
        </member>
        <member name="P:TagLib.Mpeg4.AppleTag.MusicBrainzDiscId">
            <summary>
               Gets and sets the MusicBrainz DiscID
            </summary>
            <value>
               A <see cref="T:System.String" /> containing the MusicBrainz
               DiscID for the media described by the current 
               instance, or null if no value is present. 
            </value>
            <remarks>
               This property is implemented using the "dash"/"----" box type.
               http://musicbrainz.org/doc/PicardTagMapping
            </remarks>
        </member>
        <member name="P:TagLib.Mpeg4.AppleTag.MusicIpId">
            <summary>
               Gets and sets the MusicIP PUID
            </summary>
            <value>
               A <see cref="T:System.String" /> containing the MusicIP Puid
               for the media described by the current 
               instance, or null if no value is present. 
            </value>
            <remarks>
               This property is implemented using the "dash"/"----" box type.
               http://musicbrainz.org/doc/PicardTagMapping
            </remarks>
        </member>
        <member name="P:TagLib.Mpeg4.AppleTag.AmazonId">
            <summary>
               Gets and sets the AmazonID
            </summary>
            <value>
               A <see cref="T:System.String" /> containing the AmazonID
               for the media described by the current 
               instance, or null if no value is present. 
            </value>
            <remarks>
               This property is implemented using the "dash"/"----" box type.
               http://musicbrainz.org/doc/PicardTagMapping
            </remarks>
        </member>
        <member name="P:TagLib.Mpeg4.AppleTag.MusicBrainzReleaseStatus">
            <summary>
               Gets and sets the MusicBrainz ReleaseStatus
            </summary>
            <value>
               A <see cref="T:System.String" /> containing the MusicBrainz
               ReleaseStatus for the media described by the current 
               instance, or null if no value is present. 
            </value>
            <remarks>
               This property is implemented using the "dash"/"----" box type.
               http://musicbrainz.org/doc/PicardTagMapping
            </remarks>
        </member>
        <member name="P:TagLib.Mpeg4.AppleTag.MusicBrainzReleaseType">
            <summary>
               Gets and sets the MusicBrainz ReleaseType
            </summary>
            <value>
               A <see cref="T:System.String" /> containing the MusicBrainz
               ReleaseType for the media described by the current 
               instance, or null if no value is present. 
            </value>
            <remarks>
               This property is implemented using the "dash"/"----" box type.
               http://musicbrainz.org/doc/PicardTagMapping
            </remarks>
        </member>
        <member name="P:TagLib.Mpeg4.AppleTag.MusicBrainzReleaseCountry">
            <summary>
               Gets and sets the MusicBrainz Release Country
            </summary>
            <value>
               A <see cref="T:System.String" /> containing the MusicBrainz
               ReleaseCountry for the media described by the current 
               instance, or null if no value is present. 
            </value>
            <remarks>
               This property is implemented using the "dash"/"----" box type.
               http://musicbrainz.org/doc/PicardTagMapping
            </remarks>
        </member>
        <member name="P:TagLib.Mpeg4.AppleTag.ReplayGainTrackGain">
            <summary>
               Gets and sets the ReplayGain Track Value of the media represented by
               the current instance.
            </summary>
            <value>
               A <see cref="T:System.Double" /> containing the ReplayGain Track Value of the
               media represented by the current instance or an empty
               array if no value is present.
            </value>
            <remarks>
               This property is implemented using the "dash"/"----" box type.
            </remarks>
        </member>
        <member name="P:TagLib.Mpeg4.AppleTag.ReplayGainTrackPeak">
            <summary>
               Gets and sets the ReplayGain Peak Value of the media represented by
               the current instance.
            </summary>
            <value>
               A <see cref="T:System.Double" /> containing the ReplayGain Peak Value of the
               media represented by the current instance or an empty
               array if no value is present.
            </value>
            <remarks>
               This property is implemented using the "dash"/"----" box type.
            </remarks>
        </member>
        <member name="P:TagLib.Mpeg4.AppleTag.ReplayGainAlbumGain">
            <summary>
               Gets and sets the ReplayGain Album Value of the media represented by
               the current instance.
            </summary>
            <value>
               A <see cref="T:System.Double" /> containing the ReplayGain Album Value of the
               media represented by the current instance or an empty
               array if no value is present.
            </value>
            <remarks>
               This property is implemented using the "dash"/"----" box type.
            </remarks>
        </member>
        <member name="P:TagLib.Mpeg4.AppleTag.ReplayGainAlbumPeak">
            <summary>
               Gets and sets the ReplayGain Album Peak Value of the media represented by
               the current instance.
            </summary>
            <value>
               A <see cref="T:System.Double" /> containing the ReplayGain Album Peak Value of the
               media represented by the current instance or an empty
               array if no value is present.
            </value>
            <remarks>
               This property is implemented using the "dash"/"----" box type.
            </remarks>
        </member>
        <member name="P:TagLib.Mpeg4.AppleTag.InitialKey">
            <summary>
               Gets and sets the InitialKey
            </summary>
            <value>
               A <see cref="T:System.String" /> containing the InitialKey
               for the media described by the current  instance, 
               or null if no value is present. 
            </value>
            <remarks>
               This property is implemented using the "dash"/"----" box type.
            </remarks>
        </member>
        <member name="P:TagLib.Mpeg4.AppleTag.ISRC">
            <summary>
               Gets and sets the ISRC
            </summary>
            <value>
               A <see cref="T:System.String" /> containing the ISRC
               for the media described by the current  instance, 
               or null if no value is present. 
            </value>
            <remarks>
               This property is implemented using the "dash"/"----" box type.
            </remarks>
        </member>
        <member name="P:TagLib.Mpeg4.AppleTag.Publisher">
            <summary>
               Gets and sets the Publisher
            </summary>
            <value>
               A <see cref="T:System.String" /> containing the Publisher
               for the media described by the current  instance, 
               or null if no value is present. 
            </value>
            <remarks>
               This property is implemented using the "dash"/"----" box type.
            </remarks>
        </member>
        <member name="P:TagLib.Mpeg4.AppleTag.RemixedBy">
            <summary>
               Gets and sets the Remixer
            </summary>
            <value>
               A <see cref="T:System.String" /> containing the Remixer
               for the media described by the current  instance, 
               or null if no value is present. 
            </value>
            <remarks>
               This property is implemented using the "dash"/"----" box type.
            </remarks>
        </member>
        <member name="P:TagLib.Mpeg4.AppleTag.Pictures">
            <summary>
               Gets and sets a collection of pictures associated with
               the media represented by the current instance.
            </summary>
            <value>
               A <see cref="T:IPicture[]" /> containing a collection of
               pictures associated with the media represented by the
               current instance or an empty array if none are present.
            </value>
            <remarks>
               This property is implemented using the "covr" data box.
            </remarks>
        </member>
        <member name="P:TagLib.Mpeg4.AppleTag.IsEmpty">
            <summary>
               Gets whether or not the current instance is empty.
            </summary>
            <value>
               <see langword="true" /> if the current instance does not
               any values. Otherwise <see langword="false" />.
            </value>
        </member>
        <member name="M:TagLib.Mpeg4.AppleTag.Clear">
            <summary>
               Clears the values stored in the current instance.
            </summary>
        </member>
        <member name="T:TagLib.Mpeg4.Box">
            <summary>
               This abstract class provides a generic implementation of a
               ISO/IEC 14496-12 box.
            </summary>
        </member>
        <member name="F:TagLib.Mpeg4.Box.header">
            <summary>
               Contains the box header.
            </summary>
        </member>
        <member name="F:TagLib.Mpeg4.Box.data_position">
            <summary>
               Contains the position of the box data.
            </summary>
        </member>
        <member name="M:TagLib.Mpeg4.Box.#ctor(TagLib.Mpeg4.BoxHeader,TagLib.Mpeg4.IsoHandlerBox)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Mpeg4.Box" /> with a specified header and handler.
            </summary>
            <param name="header">
               A <see cref="T:TagLib.Mpeg4.BoxHeader" /> object describing the new
               instance.
            </param>
            <param name="handler">
               A <see cref="T:TagLib.Mpeg4.IsoHandlerBox" /> object containing the
               handler that applies to the new instance, or <see
               langword="null" /> if no handler applies.
            </param>
        </member>
        <member name="M:TagLib.Mpeg4.Box.#ctor(TagLib.Mpeg4.BoxHeader)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Mpeg4.Box" /> with a specified header.
            </summary>
            <param name="header">
               A <see cref="T:TagLib.Mpeg4.BoxHeader" /> object describing the new
               instance.
            </param>
        </member>
        <member name="M:TagLib.Mpeg4.Box.#ctor(TagLib.ByteVector)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Mpeg4.Box" /> with a specified box type.
            </summary>
            <param name="type">
               A <see cref="T:TagLib.ByteVector" /> object containing the box
               type to use for the new instance.
            </param>
        </member>
        <member name="P:TagLib.Mpeg4.Box.BoxType">
            <summary>
               Gets the MPEG-4 box type of the current instance.
            </summary>
            <value>
               A <see cref="T:TagLib.ByteVector" /> object containing the four
               byte box type of the current instance.
            </value>
        </member>
        <member name="P:TagLib.Mpeg4.Box.Size">
            <summary>
               Gets the total size of the current instance as it last
               appeared on disk.
            </summary>
            <value>
               A <see cref="T:System.Int32" /> value containing the total size of
               the current instance as it last appeared on disk.
            </value>
        </member>
        <member name="P:TagLib.Mpeg4.Box.Data">
            <summary>
               Gets and sets the data contained in the current instance.
            </summary>
            <value>
               A <see cref="T:TagLib.ByteVector" /> object containing the data
               contained in the current instance.
            </value>
        </member>
        <member name="P:TagLib.Mpeg4.Box.Children">
            <summary>
               Gets the children of the current instance.
            </summary>
            <value>
               A <see cref="T:System.Collections.Generic.IEnumerable`1" /> object enumerating the
               children of the current instance.
            </value>
        </member>
        <member name="P:TagLib.Mpeg4.Box.Handler">
            <summary>
               Gets the handler box that applies to the current
               instance.
            </summary>
            <value>
               A <see cref="T:TagLib.Mpeg4.IsoHandlerBox" /> object containing the
               handler that applies to the current instance, or <see
               langword="null" /> if no handler applies.
            </value>
        </member>
        <member name="M:TagLib.Mpeg4.Box.Render">
            <summary>
               Renders the current instance, including its children, to
               a new <see cref="T:TagLib.ByteVector" /> object.
            </summary>
            <returns>
               A <see cref="T:TagLib.ByteVector" /> object containing the
               rendered version of the current instance.
            </returns>
        </member>
        <member name="M:TagLib.Mpeg4.Box.GetChild(TagLib.ByteVector)">
            <summary>
               Gets a child box from the current instance by finding
               a matching box type.
            </summary>
            <param name="type">
               A <see cref="T:TagLib.ByteVector" /> object containing the box
               type to match.
            </param>
            <returns>
               A <see cref="T:TagLib.Mpeg4.Box" /> object containing the matched box,
               or <see langword="null" /> if no matching box was found.
            </returns>
        </member>
        <member name="M:TagLib.Mpeg4.Box.GetChildren(TagLib.ByteVector)">
            <summary>
               Gets all child boxes from the current instance by finding
               a matching box type.
            </summary>
            <param name="type">
               A <see cref="T:TagLib.ByteVector" /> object containing the box
               type to match.
            </param>
            <returns>
               A List of <see cref="T:TagLib.Mpeg4.Box" /> objects containing the matched box,
               or <see langword="null" /> if no matching boxes was found.
            </returns>
        </member>
        <member name="M:TagLib.Mpeg4.Box.GetChildRecursively(TagLib.ByteVector)">
            <summary>
               Gets a child box from the current instance by finding
               a matching box type, searching recursively.
            </summary>
            <param name="type">
               A <see cref="T:TagLib.ByteVector" /> object containing the box
               type to match.
            </param>
            <returns>
               A <see cref="T:TagLib.Mpeg4.Box" /> object containing the matched box,
               or <see langword="null" /> if no matching box was found.
            </returns>
        </member>
        <member name="M:TagLib.Mpeg4.Box.RemoveChild(TagLib.ByteVector)">
            <summary>
               Removes all children with a specified box type from the
               current instance.
            </summary>
            <param name="type">
               A <see cref="T:TagLib.ByteVector" /> object containing the box
               type to remove.
            </param>
        </member>
        <member name="M:TagLib.Mpeg4.Box.RemoveChild(TagLib.Mpeg4.Box)">
            <summary>
               Removes a specified box from the current instance.
            </summary>
            <param name="box">
               A <see cref="T:TagLib.Mpeg4.Box" /> object to remove from the current
               instance.
            </param>
        </member>
        <member name="M:TagLib.Mpeg4.Box.AddChild(TagLib.Mpeg4.Box)">
            <summary>
               Adds a specified box to the current instance.
            </summary>
            <param name="box">
               A <see cref="T:TagLib.Mpeg4.Box" /> object to add to the current
               instance.
            </param>
        </member>
        <member name="M:TagLib.Mpeg4.Box.ClearChildren">
            <summary>
               Removes all children from the current instance.
            </summary>
        </member>
        <member name="P:TagLib.Mpeg4.Box.HasChildren">
            <summary>
               Gets whether or not the current instance has children.
            </summary>
            <value>
               A <see cref="T:System.Boolean" /> value indicating whether or not the
               current instance has any children.
            </value>
        </member>
        <member name="P:TagLib.Mpeg4.Box.DataSize">
            <summary>
               Gets the size of the data contained in the current
               instance, minux the size of any box specific headers.
            </summary>
            <value>
               A <see cref="T:System.Int64" /> value containing the size of
               the data contained in the current instance.
            </value>
        </member>
        <member name="P:TagLib.Mpeg4.Box.DataPosition">
            <summary>
               Gets the position of the data contained in the current
               instance, after any box specific headers.
            </summary>
            <value>
               A <see cref="T:System.Int64" /> value containing the position of
               the data contained in the current instance.
            </value>
        </member>
        <member name="P:TagLib.Mpeg4.Box.Header">
            <summary>
               Gets the header of the current instance.
            </summary>
            <value>
               A <see cref="T:TagLib.Mpeg4.BoxHeader" /> object containing the header
               of the current instance.
            </value>
        </member>
        <member name="M:TagLib.Mpeg4.Box.LoadChildren(TagLib.File)">
            <summary>
               Loads the children of the current instance from a
               specified file using the internal data position and size.
            </summary>
            <param name="file">
               The <see cref="T:TagLib.File" /> from which the current
               instance was read and from which to read the children.
            </param>
            <returns>
               A <see cref="T:System.Collections.Generic.IEnumerable`1" /> object enumerating the
               boxes read from the file.
            </returns>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="file" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:TagLib.Mpeg4.Box.LoadData(TagLib.File)">
            <summary>
               Loads the data of the current instance from a specified
               file using the internal data position and size.
            </summary>
            <param name="file">
               The <see cref="T:TagLib.File" /> from which the current
               instance was read and from which to read the data.
            </param>
            <returns>
               A <see cref="T:TagLib.ByteVector" /> object containing the data
               read from the file.
            </returns>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="file" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:TagLib.Mpeg4.Box.Render(TagLib.ByteVector)">
            <summary>
               Renders the current instance, including its children, to
               a new <see cref="T:TagLib.ByteVector" /> object, preceeding the
               contents with a specified block of data.
            </summary>
            <param name="topData">
               A <see cref="T:TagLib.ByteVector" /> object containing box
               specific header data to preceed the content.
            </param>
            <returns>
               A <see cref="T:TagLib.ByteVector" /> object containing the
               rendered version of the current instance.
            </returns>
        </member>
        <member name="T:TagLib.Mpeg4.AppleAdditionalInfoBox">
            <summary>
               This class extends <see cref="T:TagLib.Mpeg4.FullBox" /> to provide an
               implementation of an Apple AdditionalInfoBox.
            </summary>
        </member>
        <member name="F:TagLib.Mpeg4.AppleAdditionalInfoBox.data">
            <summary>
               Contains the box data.
            </summary>
        </member>
        <member name="M:TagLib.Mpeg4.AppleAdditionalInfoBox.#ctor(TagLib.Mpeg4.BoxHeader,TagLib.File,TagLib.Mpeg4.IsoHandlerBox)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Mpeg4.AppleAdditionalInfoBox" /> with a provided header
               and handler by reading the contents from a specified
               file.
            </summary>
            <param name="header">
               A <see cref="T:TagLib.Mpeg4.BoxHeader" /> object containing the header
               to use for the new instance.
            </param>
            <param name="file">
               A <see cref="T:TagLib.File" /> object to read the contents
               of the box from.
            </param>
            <param name="handler">
               A <see cref="T:TagLib.Mpeg4.IsoHandlerBox" /> object containing the
               handler that applies to the new instance.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="file" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:TagLib.Mpeg4.AppleAdditionalInfoBox.#ctor(TagLib.ByteVector,System.Byte,System.UInt32)">
            <summary>
            Constructs and initializes a new instance of <see
               cref="T:TagLib.Mpeg4.AppleAdditionalInfoBox" /> using specified header, version and flags
            </summary>
            <param name="header">defines the header data</param>
            <param name="version"></param>
            <param name="flags"></param>
        </member>
        <member name="P:TagLib.Mpeg4.AppleAdditionalInfoBox.Data">
            <summary>
               Gets and sets the data contained in the current instance.
            </summary>
            <value>
               A <see cref="T:TagLib.ByteVector" /> object containing the data
               contained in the current instance.
            </value>
        </member>
        <member name="P:TagLib.Mpeg4.AppleAdditionalInfoBox.Text">
            <summary>
               Gets and sets the text contained in the current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> object containing the text
               contained in the current instance.
            </value>
        </member>
        <member name="T:TagLib.Mpeg4.AppleAnnotationBox">
            <summary>
               This class extends <see cref="T:TagLib.Mpeg4.Box" /> to provide an
               implementation of an Apple AnnotationBox.
            </summary>
        </member>
        <member name="M:TagLib.Mpeg4.AppleAnnotationBox.#ctor(TagLib.Mpeg4.BoxHeader,TagLib.File,TagLib.Mpeg4.IsoHandlerBox)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Mpeg4.AppleAnnotationBox" /> with a provided header and
               handler by reading the contents from a specified file.
            </summary>
            <param name="header">
               A <see cref="T:TagLib.Mpeg4.BoxHeader" /> object containing the header
               to use for the new instance.
            </param>
            <param name="file">
               A <see cref="T:TagLib.File" /> object to read the contents
               of the box from.
            </param>
            <param name="handler">
               A <see cref="T:TagLib.Mpeg4.IsoHandlerBox" /> object containing the
               handler that applies to the new instance.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="file" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:TagLib.Mpeg4.AppleAnnotationBox.#ctor(TagLib.ByteVector)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Mpeg4.AppleAnnotationBox" /> of specified type with no
               children.
            </summary>
            <param name="type">
               A <see cref="T:TagLib.ByteVector" /> object containing a 4-byte
               box type.
            </param>
        </member>
        <member name="P:TagLib.Mpeg4.AppleAnnotationBox.Children">
            <summary>
               Gets the children of the current instance.
            </summary>
            <value>
               A <see cref="T:System.Collections.Generic.IEnumerable`1" /> object enumerating the
               children of the current instance.
            </value>
        </member>
        <member name="T:TagLib.Mpeg4.AppleDataBox">
            <summary>
               This class extends <see cref="T:TagLib.Mpeg4.FullBox" /> to provide an
               implementation of an Apple DataBox.
            </summary>
        </member>
        <member name="T:TagLib.Mpeg4.AppleDataBox.FlagType">
            <summary>
               Specifies the type of data contained in a box.
            </summary>
        </member>
        <member name="F:TagLib.Mpeg4.AppleDataBox.FlagType.ContainsText">
            <summary>
               The box contains UTF-8 text.
            </summary>
        </member>
        <member name="F:TagLib.Mpeg4.AppleDataBox.FlagType.ContainsData">
            <summary>
               The box contains binary data.
            </summary>
        </member>
        <member name="F:TagLib.Mpeg4.AppleDataBox.FlagType.ForTempo">
            <summary>
               The box contains data for a tempo box.
            </summary>
        </member>
        <member name="F:TagLib.Mpeg4.AppleDataBox.FlagType.ContainsJpegData">
            <summary>
               The box contains a raw JPEG image.
            </summary>
        </member>
        <member name="F:TagLib.Mpeg4.AppleDataBox.FlagType.ContainsPngData">
            <summary>
               The box contains a raw PNG image.
            </summary>
        </member>
        <member name="F:TagLib.Mpeg4.AppleDataBox.FlagType.ContainsBmpData">
            <summary>
               The box contains a raw BMP image.
            </summary>
        </member>
        <member name="F:TagLib.Mpeg4.AppleDataBox.data">
            <summary>
               Contains the box data.
            </summary>
        </member>
        <member name="M:TagLib.Mpeg4.AppleDataBox.#ctor(TagLib.Mpeg4.BoxHeader,TagLib.File,TagLib.Mpeg4.IsoHandlerBox)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Mpeg4.AppleDataBox" /> with a provided header and handler
               by reading the contents from a specified file.
            </summary>
            <param name="header">
               A <see cref="T:TagLib.Mpeg4.BoxHeader" /> object containing the header
               to use for the new instance.
            </param>
            <param name="file">
               A <see cref="T:TagLib.File" /> object to read the contents
               of the box from.
            </param>
            <param name="handler">
               A <see cref="T:TagLib.Mpeg4.IsoHandlerBox" /> object containing the
               handler that applies to the new instance.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="file" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:TagLib.Mpeg4.AppleDataBox.#ctor(TagLib.ByteVector,System.UInt32)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Mpeg4.AppleDataBox" /> with specified data and flags.
            </summary>
            <param name="data">
               A <see cref="T:TagLib.ByteVector" /> object containing the data to
               store in the new instance.
            </param>
            <param name="flags">
               A <see cref="T:System.UInt32" /> value containing flags to use for
               the new instance.
            </param>
        </member>
        <member name="P:TagLib.Mpeg4.AppleDataBox.DataPosition">
            <summary>
               Gets the position of the data contained in the current
               instance, after any box specific headers.
            </summary>
            <value>
               A <see cref="T:System.Int64" /> value containing the position of
               the data contained in the current instance.
            </value>
        </member>
        <member name="P:TagLib.Mpeg4.AppleDataBox.Data">
            <summary>
               Gets and sets the data contained in the current instance.
            </summary>
            <value>
               A <see cref="T:TagLib.ByteVector" /> object containing the data
               contained in the current instance.
            </value>
        </member>
        <member name="P:TagLib.Mpeg4.AppleDataBox.Text">
            <summary>
               Gets and sets the text contained in the current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> object containing the text
               contained in the current instance, or <see
               langword="null" /> if the box is not flagged as
               containing text.
            </value>
        </member>
        <member name="M:TagLib.Mpeg4.AppleDataBox.Render(TagLib.ByteVector)">
            <summary>
               Renders the current instance, including its children, to
               a new <see cref="T:TagLib.ByteVector" /> object, preceeding the
               contents with a specified block of data.
            </summary>
            <param name="topData">
               A <see cref="T:TagLib.ByteVector" /> object containing box
               specific header data to preceed the content.
            </param>
            <returns>
               A <see cref="T:TagLib.ByteVector" /> object containing the
               rendered version of the current instance.
            </returns>
        </member>
        <member name="T:TagLib.Mpeg4.AppleElementaryStreamDescriptor">
            <summary>
               This class extends <see cref="T:TagLib.Mpeg4.FullBox" /> to provide an
               implementation of an Apple ElementaryStreamDescriptor.
            </summary>
            <remarks>
               This box may appear as a child of a <see
               cref="T:TagLib.Mpeg4.IsoAudioSampleEntry" /> and provided further information
               about an audio stream.
            </remarks>
        </member>
        <member name="T:TagLib.Mpeg4.AppleElementaryStreamDescriptor.DescriptorTag">
            <summary>
            Descriptor Tags
            </summary>
        </member>
        <member name="F:TagLib.Mpeg4.AppleElementaryStreamDescriptor.dependsOn_ES_ID">
            <summary>
            the ES_ID of another elementary stream on which this elementary stream depends
            </summary>
        </member>
        <member name="F:TagLib.Mpeg4.AppleElementaryStreamDescriptor.stream_dependence_flag">
            <summary>
            Indicates that a dependsOn_ES_ID will follow
            </summary>
        </member>
        <member name="F:TagLib.Mpeg4.AppleElementaryStreamDescriptor.ocr_stream_flag">
            <summary>
            OCR Stream Flag
            </summary>
        </member>
        <member name="F:TagLib.Mpeg4.AppleElementaryStreamDescriptor.OCR_ES_Id">
            <summary>
            OCR ES_ID
            </summary>
        </member>
        <member name="F:TagLib.Mpeg4.AppleElementaryStreamDescriptor.URL_flag">
            <summary>
            Indicates that a URLstring will follow
            </summary>
        </member>
        <member name="F:TagLib.Mpeg4.AppleElementaryStreamDescriptor.URLlength">
            <summary>
            Length of URL String
            </summary>
        </member>
        <member name="F:TagLib.Mpeg4.AppleElementaryStreamDescriptor.URLstring">
            <summary>
            URL String of URLlength, contains a URL that shall point to the location of an SL-packetized stream by name
            </summary>
        </member>
        <member name="F:TagLib.Mpeg4.AppleElementaryStreamDescriptor.upStream">
            <summary>
            Indicates that this stream is used for upstream information
            </summary>
        </member>
        <member name="F:TagLib.Mpeg4.AppleElementaryStreamDescriptor.max_bitrate">
            <summary>
               Contains the maximum bitrate.
            </summary>
        </member>
        <member name="F:TagLib.Mpeg4.AppleElementaryStreamDescriptor.average_bitrate">
            <summary>
               Contains the average bitrate.
            </summary>
        </member>
        <member name="M:TagLib.Mpeg4.AppleElementaryStreamDescriptor.#ctor(TagLib.Mpeg4.BoxHeader,TagLib.File,TagLib.Mpeg4.IsoHandlerBox)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Mpeg4.AppleElementaryStreamDescriptor" /> with a provided
               header and handler by reading the contents from a
               specified file.
            </summary>
            <param name="header">
               A <see cref="T:TagLib.Mpeg4.BoxHeader" /> object containing the header
               to use for the new instance.
            </param>
            <param name="file">
               A <see cref="T:TagLib.File" /> object to read the contents
               of the box from.
            </param>
            <param name="handler">
               A <see cref="T:TagLib.Mpeg4.IsoHandlerBox" /> object containing the
               handler that applies to the new instance.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="file" /> is <see langword="null" />.
            </exception>
            <exception cref="T:TagLib.CorruptFileException">
               Valid data could not be read.
            </exception>
        </member>
        <member name="P:TagLib.Mpeg4.AppleElementaryStreamDescriptor.StreamId">
            <summary>
               Gets the ID of the stream described by the current
               instance.
            </summary>
            <value>
               A <see cref="T:System.UInt16" /> value containing the ID of the
               stream described by the current instance.
            </value>
        </member>
        <member name="P:TagLib.Mpeg4.AppleElementaryStreamDescriptor.StreamPriority">
            <summary>
               Gets the priority of the stream described by the current
               instance.
            </summary>
            <value>
               A <see cref="T:System.Byte" /> value containing the priority of
               the stream described by the current instance.
            </value>
        </member>
        <member name="P:TagLib.Mpeg4.AppleElementaryStreamDescriptor.ObjectTypeId">
            <summary>
               Gets the object type ID of the stream described by the
               current instance.
            </summary>
            <value>
               A <see cref="T:System.Byte" /> value containing the object type ID
               of the stream described by the current instance.
            </value>
        </member>
        <member name="P:TagLib.Mpeg4.AppleElementaryStreamDescriptor.StreamType">
            <summary>
               Gets the type the stream described by the current
               instance.
            </summary>
            <value>
               A <see cref="T:System.Byte" /> value containing the type the
               stream described by the current instance.
            </value>
        </member>
        <member name="P:TagLib.Mpeg4.AppleElementaryStreamDescriptor.BufferSizeDB">
            <summary>
               Gets the buffer size DB value the stream described by the
               current instance.
            </summary>
            <value>
               A <see cref="T:System.UInt32" /> value containing the buffer size DB
               value the stream described by the current instance.
            </value>
        </member>
        <member name="P:TagLib.Mpeg4.AppleElementaryStreamDescriptor.MaximumBitrate">
            <summary>
               Gets the maximum bitrate the stream described by the
               current instance.
            </summary>
            <value>
               A <see cref="T:System.UInt32" /> value containing the maximum
               bitrate the stream described by the current instance.
            </value>
        </member>
        <member name="P:TagLib.Mpeg4.AppleElementaryStreamDescriptor.AverageBitrate">
            <summary>
               Gets the maximum average the stream described by the
               current instance.
            </summary>
            <value>
               A <see cref="T:System.UInt32" /> value containing the average
               bitrate the stream described by the current instance.
            </value>
        </member>
        <member name="P:TagLib.Mpeg4.AppleElementaryStreamDescriptor.DecoderConfig">
            <summary>
               Gets the decoder config data of stream described by the
               current instance.
            </summary>
            <value>
               A <see cref="T:TagLib.ByteVector" /> object containing the decoder
               config data of the stream described by the current
               instance.
            </value>
        </member>
        <member name="M:TagLib.Mpeg4.AppleElementaryStreamDescriptor.ReadLength(TagLib.ByteVector,System.Int32@)">
            <summary>
               Reads a section length and updates the offset to the end
               of of the length block.
            </summary>
            <param name="data">
               A <see cref="T:TagLib.ByteVector" /> object to read from.
            </param>
            <param name="offset">
               A <see cref="T:System.Int32" /> value reference specifying the
               offset at which to read. This value gets updated to the
               position following the size data.
            </param>
            <returns>
               A <see cref="T:System.UInt32" /> value containing the length that
               was read.
            </returns>
        </member>
        <member name="T:TagLib.Mpeg4.AppleItemListBox">
            <summary>
               This class extends <see cref="T:TagLib.Mpeg4.Box" /> to provide an
               implementation of an Apple ItemListBox.
            </summary>
        </member>
        <member name="M:TagLib.Mpeg4.AppleItemListBox.#ctor(TagLib.Mpeg4.BoxHeader,TagLib.File,TagLib.Mpeg4.IsoHandlerBox)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Mpeg4.AppleItemListBox" /> with a provided header and
               handler by reading the contents from a specified file.
            </summary>
            <param name="header">
               A <see cref="T:TagLib.Mpeg4.BoxHeader" /> object containing the header
               to use for the new instance.
            </param>
            <param name="file">
               A <see cref="T:TagLib.File" /> object to read the contents
               of the box from.
            </param>
            <param name="handler">
               A <see cref="T:TagLib.Mpeg4.IsoHandlerBox" /> object containing the
               handler that applies to the new instance.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="file" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:TagLib.Mpeg4.AppleItemListBox.#ctor">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Mpeg4.AppleItemListBox" /> with no children.
            </summary>
        </member>
        <member name="P:TagLib.Mpeg4.AppleItemListBox.Children">
            <summary>
               Gets the children of the current instance.
            </summary>
            <value>
               A <see cref="T:System.Collections.Generic.IEnumerable`1" /> object enumerating the
               children of the current instance.
            </value>
        </member>
        <member name="T:TagLib.Mpeg4.FullBox">
            <summary>
               This class extends <see cref="T:TagLib.Mpeg4.Box" /> to provide an
               implementation of a ISO/IEC 14496-12 FullBox.
            </summary>
        </member>
        <member name="F:TagLib.Mpeg4.FullBox.version">
            <summary>
               Contains the box version.
            </summary>
        </member>
        <member name="M:TagLib.Mpeg4.FullBox.#ctor(TagLib.Mpeg4.BoxHeader,TagLib.File,TagLib.Mpeg4.IsoHandlerBox)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Mpeg4.FullBox" /> with a provided header and handler by
               reading the contents from a specified file.
            </summary>
            <param name="header">
               A <see cref="T:TagLib.Mpeg4.BoxHeader" /> object containing the header
               to use for the new instance.
            </param>
            <param name="file">
               A <see cref="T:TagLib.File" /> object to read the contents
               of the box from.
            </param>
            <param name="handler">
               A <see cref="T:TagLib.Mpeg4.IsoHandlerBox" /> object containing the
               handler that applies to the new instance.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="file" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:TagLib.Mpeg4.FullBox.#ctor(TagLib.Mpeg4.BoxHeader,System.Byte,System.UInt32)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Mpeg4.FullBox" /> with a provided header, version, and
               flags.
            </summary>
            <param name="header">
               A <see cref="T:TagLib.Mpeg4.BoxHeader" /> object containing the header
               to use for the new instance.
            </param>
            <param name="version">
               A <see cref="T:System.Byte" /> value containing the version of the
               new instance.
            </param>
            <param name="flags">
               A <see cref="T:System.Byte" /> value containing the flags for the
               new instance.
            </param>
        </member>
        <member name="M:TagLib.Mpeg4.FullBox.#ctor(TagLib.ByteVector,System.Byte,System.UInt32)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Mpeg4.FullBox" /> with a provided header, version, and
               flags.
            </summary>
            <param name="type">
               A <see cref="T:TagLib.ByteVector" /> object containing the four
               byte box type.
            </param>
            <param name="version">
               A <see cref="T:System.Byte" /> value containing the version of the
               new instance.
            </param>
            <param name="flags">
               A <see cref="T:System.Byte" /> value containing the flags for the
               new instance.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="type" /> is <see langword="null" /> of
               equal to "<c>uuid</c>".
            </exception>
            <exception cref="T:System.ArgumentException">
               <paramref name="type" /> isn't exactly 4 bytes long.
            </exception>
        </member>
        <member name="P:TagLib.Mpeg4.FullBox.DataPosition">
            <summary>
               Gets the position of the data contained in the current
               instance, after any box specific headers.
            </summary>
            <value>
               A <see cref="T:System.Int64" /> value containing the position of
               the data contained in the current instance.
            </value>
        </member>
        <member name="P:TagLib.Mpeg4.FullBox.Version">
            <summary>
               Gets and sets the version number of the current instance.
            </summary>
            <value>
               A <see cref="T:System.Byte" /> value containing the version
               number of the current instance.
            </value>
        </member>
        <member name="P:TagLib.Mpeg4.FullBox.Flags">
            <summary>
               Gets and sets the flags that apply to the current
               instance.
            </summary>
            <value>
               A <see cref="T:System.UInt32" /> value containing the flags that
               apply to the current instance.
            </value>
        </member>
        <member name="M:TagLib.Mpeg4.FullBox.Render(TagLib.ByteVector)">
            <summary>
               Renders the current instance, including its children, to
               a new <see cref="T:TagLib.ByteVector" /> object, preceeding the
               contents with a specified block of data.
            </summary>
            <param name="topData">
               A <see cref="T:TagLib.ByteVector" /> object containing box
               specific header data to preceed the content.
            </param>
            <returns>
               A <see cref="T:TagLib.ByteVector" /> object containing the
               rendered version of the current instance.
            </returns>
        </member>
        <member name="T:TagLib.Mpeg4.IsoAudioSampleEntry">
            <summary>
               This class extends <see cref="T:TagLib.Mpeg4.IsoSampleEntry" /> and implements
               <see cref="T:TagLib.IAudioCodec" /> to provide an implementation of a
               ISO/IEC 14496-12 AudioSampleEntry and support for reading MPEG-4
               video properties.
            </summary>
        </member>
        <member name="F:TagLib.Mpeg4.IsoAudioSampleEntry.channel_count">
            <summary>
               Contains the channel count.
            </summary>
        </member>
        <member name="F:TagLib.Mpeg4.IsoAudioSampleEntry.sample_size">
            <summary>
               Contains the sample size.
            </summary>
        </member>
        <member name="F:TagLib.Mpeg4.IsoAudioSampleEntry.sample_rate">
            <summary>
               Contains the sample rate.
            </summary>
        </member>
        <member name="F:TagLib.Mpeg4.IsoAudioSampleEntry.children">
            <summary>
               Contains the children of the box.
            </summary>
        </member>
        <member name="M:TagLib.Mpeg4.IsoAudioSampleEntry.#ctor(TagLib.Mpeg4.BoxHeader,TagLib.File,TagLib.Mpeg4.IsoHandlerBox)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Mpeg4.IsoVisualSampleEntry" /> with a provided header and
               handler by reading the contents from a specified file.
            </summary>
            <param name="header">
               A <see cref="T:TagLib.Mpeg4.BoxHeader" /> object containing the header
               to use for the new instance.
            </param>
            <param name="file">
               A <see cref="T:TagLib.File" /> object to read the contents
               of the box from.
            </param>
            <param name="handler">
               A <see cref="T:TagLib.Mpeg4.IsoHandlerBox" /> object containing the
               handler that applies to the new instance.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="file" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="P:TagLib.Mpeg4.IsoAudioSampleEntry.DataPosition">
            <summary>
               Gets the position of the data contained in the current
               instance, after any box specific headers.
            </summary>
            <value>
               A <see cref="T:System.Int64" /> value containing the position of
               the data contained in the current instance.
            </value>
        </member>
        <member name="P:TagLib.Mpeg4.IsoAudioSampleEntry.Children">
            <summary>
               Gets the children of the current instance.
            </summary>
            <value>
               A <see cref="T:System.Collections.Generic.IEnumerable`1" /> object enumerating the
               children of the current instance.
            </value>
        </member>
        <member name="P:TagLib.Mpeg4.IsoAudioSampleEntry.Duration">
            <summary>
               Gets the duration of the media represented by the current
               instance.
            </summary>
            <value>
               Always <see cref="F:System.TimeSpan.Zero" />.
            </value>
        </member>
        <member name="P:TagLib.Mpeg4.IsoAudioSampleEntry.MediaTypes">
            <summary>
               Gets the types of media represented by the current
               instance.
            </summary>
            <value>
               Always <see cref="F:TagLib.MediaTypes.Video" />.
            </value>
        </member>
        <member name="P:TagLib.Mpeg4.IsoAudioSampleEntry.Description">
            <summary>
               Gets a text description of the media represented by the
               current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> object containing a description
               of the media represented by the current instance.
            </value>
        </member>
        <member name="P:TagLib.Mpeg4.IsoAudioSampleEntry.AudioBitrate">
            <summary>
               Gets the bitrate of the audio represented by the current
               instance.
            </summary>
            <value>
               A <see cref="T:System.Int32" /> value containing a bitrate of the
               audio represented by the current instance.
            </value>
        </member>
        <member name="P:TagLib.Mpeg4.IsoAudioSampleEntry.AudioSampleRate">
            <summary>
               Gets the sample rate of the audio represented by the
               current instance.
            </summary>
            <value>
               A <see cref="T:System.Int32" /> value containing the sample rate of
               the audio represented by the current instance.
            </value>
        </member>
        <member name="P:TagLib.Mpeg4.IsoAudioSampleEntry.AudioChannels">
            <summary>
               Gets the number of channels in the audio represented by
               the current instance.
            </summary>
            <value>
               A <see cref="T:System.Int32" /> value containing the number of
               channels in the audio represented by the current
               instance.
            </value>
        </member>
        <member name="P:TagLib.Mpeg4.IsoAudioSampleEntry.AudioSampleSize">
            <summary>
               Gets the sample size of the audio represented by the
               current instance.
            </summary>
            <value>
               A <see cref="T:System.Int32" /> value containing the sample size of
               the audio represented by the current instance.
            </value>
        </member>
        <member name="T:TagLib.Mpeg4.IsoChunkLargeOffsetBox">
            <summary>
               This class extends <see cref="T:TagLib.Mpeg4.FullBox" /> to provide an
               implementation of a ISO/IEC 14496-12 ChunkLargeOffsetBox.
            </summary>
            <remarks>
               <see cref="T:TagLib.Mpeg4.IsoChunkOffsetBox" /> and <see
               cref="T:TagLib.Mpeg4.IsoChunkLargeOffsetBox" /> contain offsets of media data
               within the file. As such, if the file changes by even one byte,
               these values are devalidatated and the box will have to be
               overwritten to maintain playability.
            </remarks>
        </member>
        <member name="M:TagLib.Mpeg4.IsoChunkLargeOffsetBox.#ctor(TagLib.Mpeg4.BoxHeader,TagLib.File,TagLib.Mpeg4.IsoHandlerBox)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Mpeg4.IsoChunkLargeOffsetBox" /> with a provided header
               and handler by reading the contents from a specified
               file.
            </summary>
            <param name="header">
               A <see cref="T:TagLib.Mpeg4.BoxHeader" /> object containing the header
               to use for the new instance.
            </param>
            <param name="file">
               A <see cref="T:TagLib.File" /> object to read the contents
               of the box from.
            </param>
            <param name="handler">
               A <see cref="T:TagLib.Mpeg4.IsoHandlerBox" /> object containing the
               handler that applies to the new instance.
            </param>
        </member>
        <member name="P:TagLib.Mpeg4.IsoChunkLargeOffsetBox.Data">
            <summary>
               Gets and sets the data contained in the current instance.
            </summary>
            <value>
               A <see cref="T:TagLib.ByteVector" /> object containing the data
               contained in the current instance.
            </value>
        </member>
        <member name="P:TagLib.Mpeg4.IsoChunkLargeOffsetBox.Offsets">
            <summary>
               Gets the offset table contained in the current instance.
            </summary>
            <value>
               A <see cref="T:ulong[]" /> containing the offset table
               contained in the current instance.
            </value>
        </member>
        <member name="M:TagLib.Mpeg4.IsoChunkLargeOffsetBox.Overwrite(TagLib.Mpeg4.File,System.Int64,System.Int64)">
            <summary>
               Overwrites the existing box in the file after updating
               the table for a size change.
            </summary>
            <param name="file">
               A <see cref="T:TagLib.Mpeg4.File" /> object containing the file to which
               the current instance belongs and wo which modifications
               must be applied.
            </param>
            <param name="sizeDifference">
               A <see cref="T:System.Int64" /> value containing the size
               change that occurred in the file.
            </param>
            <param name="after">
               A <see cref="T:System.Int64" /> value containing the position in
               the file after which offsets will be invalidated. If an
               offset is before this point, it won't be updated.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <see param="file" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:TagLib.Mpeg4.IsoChunkLargeOffsetBox.Render(System.Int64,System.Int64)">
            <summary>
               Renders the current instance after updating the table for
               a size change.
            </summary>
            <param name="sizeDifference">
               A <see cref="T:System.Int64" /> value containing the size
               change that occurred in the file.
            </param>
            <param name="after">
               A <see cref="T:System.Int64" /> value containing the position in
               the file after which offsets will be invalidated. If an
               offset is before this point, it won't be updated.
            </param>
            <returns>
               A <see cref="T:TagLib.ByteVector" /> object containing the
               rendered version of the file.
            </returns>
        </member>
        <member name="T:TagLib.Mpeg4.IsoChunkOffsetBox">
            <summary>
               This class extends <see cref="T:TagLib.Mpeg4.FullBox" /> to provide an
               implementation of a ISO/IEC 14496-12 ChunkOffsetBox.
            </summary>
            <remarks>
               <see cref="T:TagLib.Mpeg4.IsoChunkOffsetBox" /> and <see
               cref="T:TagLib.Mpeg4.IsoChunkLargeOffsetBox" /> contain offsets of media data
               within the file. As such, if the file changes by even one byte,
               these values are devalidatated and the box will have to be
               overwritten to maintain playability.
            </remarks>
        </member>
        <member name="M:TagLib.Mpeg4.IsoChunkOffsetBox.#ctor(TagLib.Mpeg4.BoxHeader,TagLib.File,TagLib.Mpeg4.IsoHandlerBox)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Mpeg4.IsoChunkOffsetBox" /> with a provided header and
               handler by reading the contents from a specified file.
            </summary>
            <param name="header">
               A <see cref="T:TagLib.Mpeg4.BoxHeader" /> object containing the header
               to use for the new instance.
            </param>
            <param name="file">
               A <see cref="T:TagLib.File" /> object to read the contents
               of the box from.
            </param>
            <param name="handler">
               A <see cref="T:TagLib.Mpeg4.IsoHandlerBox" /> object containing the
               handler that applies to the new instance.
            </param>
        </member>
        <member name="P:TagLib.Mpeg4.IsoChunkOffsetBox.Data">
            <summary>
               Gets and sets the data contained in the current instance.
            </summary>
            <value>
               A <see cref="T:TagLib.ByteVector" /> object containing the data
               contained in the current instance.
            </value>
        </member>
        <member name="P:TagLib.Mpeg4.IsoChunkOffsetBox.Offsets">
            <summary>
               Gets the offset table contained in the current instance.
            </summary>
            <value>
               A <see cref="T:uint[]" /> containing the offset table
               contained in the current instance.
            </value>
        </member>
        <member name="M:TagLib.Mpeg4.IsoChunkOffsetBox.Overwrite(TagLib.Mpeg4.File,System.Int64,System.Int64)">
            <summary>
               Overwrites the existing box in the file after updating
               the table for a size change.
            </summary>
            <param name="file">
               A <see cref="T:TagLib.Mpeg4.File" /> object containing the file to which
               the current instance belongs and wo which modifications
               must be applied.
            </param>
            <param name="sizeDifference">
               A <see cref="T:System.Int64" /> value containing the size
               change that occurred in the file.
            </param>
            <param name="after">
               A <see cref="T:System.Int64" /> value containing the position in
               the file after which offsets will be invalidated. If an
               offset is before this point, it won't be updated.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <see param="file" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:TagLib.Mpeg4.IsoChunkOffsetBox.Render(System.Int64,System.Int64)">
            <summary>
               Renders the current instance after updating the table for
               a size change.
            </summary>
            <param name="sizeDifference">
               A <see cref="T:System.Int64" /> value containing the size
               change that occurred in the file.
            </param>
            <param name="after">
               A <see cref="T:System.Int64" /> value containing the position in
               the file after which offsets will be invalidated. If an
               offset is before this point, it won't be updated.
            </param>
            <returns>
               A <see cref="T:TagLib.ByteVector" /> object containing the
               rendered version of the file.
            </returns>
        </member>
        <member name="T:TagLib.Mpeg4.IsoFreeSpaceBox">
            <summary>
               This class extends <see cref="T:TagLib.Mpeg4.Box" /> to provide an
               implementation of a ISO/IEC 14496-12 FreeSpaceBox.
            </summary>
        </member>
        <member name="F:TagLib.Mpeg4.IsoFreeSpaceBox.padding">
            <summary>
               Contains the size of the padding.
            </summary>
        </member>
        <member name="M:TagLib.Mpeg4.IsoFreeSpaceBox.#ctor(TagLib.Mpeg4.BoxHeader,TagLib.File,TagLib.Mpeg4.IsoHandlerBox)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Mpeg4.IsoMetaBox" /> with a provided header and
               handler by reading the contents from a specified file.
            </summary>
            <param name="header">
               A <see cref="T:TagLib.Mpeg4.BoxHeader" /> object containing the header
               to use for the new instance.
            </param>
            <param name="file">
               A <see cref="T:TagLib.File" /> object to read the contents
               of the box from.
            </param>
            <param name="handler">
               A <see cref="T:TagLib.Mpeg4.IsoHandlerBox" /> object containing the
               handler that applies to the new instance.
            </param>
        </member>
        <member name="M:TagLib.Mpeg4.IsoFreeSpaceBox.#ctor(System.Int64)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Mpeg4.IsoFreeSpaceBox" /> to occupy a specified number of
               bytes.
            </summary>
            <param name="padding">
               A <see cref="T:System.Int64" /> value specifying the number of
               bytes the new instance should occupy when rendered.
            </param>
        </member>
        <member name="P:TagLib.Mpeg4.IsoFreeSpaceBox.Data">
            <summary>
               Gets and sets the data contained in the current instance.
            </summary>
            <value>
               A <see cref="T:TagLib.ByteVector" /> object containing the data
               contained in the current instance.
            </value>
        </member>
        <member name="P:TagLib.Mpeg4.IsoFreeSpaceBox.PaddingSize">
            <summary>
               Gets and sets the size the current instance will occupy
               when rendered.
            </summary>
            <value>
               A <see cref="T:System.Int64" /> value containing the size the
               current instance will occupy when rendered.
            </value>
        </member>
        <member name="T:TagLib.Mpeg4.IsoHandlerBox">
            <summary>
               This class extends <see cref="T:TagLib.Mpeg4.FullBox" /> to provide an
               implementation of a ISO/IEC 14496-12 FullBox.
            </summary>
        </member>
        <member name="M:TagLib.Mpeg4.IsoHandlerBox.#ctor(TagLib.Mpeg4.BoxHeader,TagLib.File,TagLib.Mpeg4.IsoHandlerBox)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Mpeg4.IsoHandlerBox" /> with a provided header and
               handler by reading the contents from a specified file.
            </summary>
            <param name="header">
               A <see cref="T:TagLib.Mpeg4.BoxHeader" /> object containing the header
               to use for the new instance.
            </param>
            <param name="file">
               A <see cref="T:TagLib.File" /> object to read the contents
               of the box from.
            </param>
            <param name="handler">
               A <see cref="T:TagLib.Mpeg4.IsoHandlerBox" /> object containing the
               handler that applies to the new instance.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="file" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:TagLib.Mpeg4.IsoHandlerBox.#ctor(TagLib.ByteVector,System.String)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Mpeg4.IsoHandlerBox" /> with a specified type and name.
            </summary>
            <param name="handlerType">
               A <see cref="T:TagLib.ByteVector" /> object specifying a 4 byte
               handler type.
            </param>
            <param name="name">
               A <see cref="T:System.String" /> object specifying the handler
               name.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="handlerType" /> is <see langword="null"
               />.
            </exception>
            <exception cref="T:System.ArgumentException">
               <paramref name="handlerType" /> is less than 4 bytes
               long.
            </exception>
        </member>
        <member name="P:TagLib.Mpeg4.IsoHandlerBox.Data">
            <summary>
               Gets the data contained in the current instance.
            </summary>
            <value>
               A <see cref="T:TagLib.ByteVector" /> object containing the
               rendered version of the data contained in the current
               instance.
            </value>
        </member>
        <member name="P:TagLib.Mpeg4.IsoHandlerBox.HandlerType">
            <summary>
               Gets the handler type of the current instance.
            </summary>
            <value>
               A <see cref="T:TagLib.ByteVector" /> object containing the
               handler type of the current instance.
            </value>
        </member>
        <member name="P:TagLib.Mpeg4.IsoHandlerBox.Name">
            <summary>
               Gets the name of the current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> object containing the name of the
               current instance.
            </value>
        </member>
        <member name="T:TagLib.Mpeg4.IsoMetaBox">
            <summary>
               This class extends <see cref="T:TagLib.Mpeg4.FullBox" /> to provide an
               implementation of a ISO/IEC 14496-12 MetaBox.
            </summary>
        </member>
        <member name="M:TagLib.Mpeg4.IsoMetaBox.#ctor(TagLib.Mpeg4.BoxHeader,TagLib.File,TagLib.Mpeg4.IsoHandlerBox)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Mpeg4.IsoMetaBox" /> with a provided header and
               handler by reading the contents from a specified file.
            </summary>
            <param name="header">
               A <see cref="T:TagLib.Mpeg4.BoxHeader" /> object containing the header
               to use for the new instance.
            </param>
            <param name="file">
               A <see cref="T:TagLib.File" /> object to read the contents
               of the box from.
            </param>
            <param name="handler">
               A <see cref="T:TagLib.Mpeg4.IsoHandlerBox" /> object containing the
               handler that applies to the new instance.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="file" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:TagLib.Mpeg4.IsoMetaBox.#ctor(TagLib.ByteVector,System.String)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Mpeg4.IsoMetaBox" /> with a specified handler.
            </summary>
            <param name="handlerType">
               A <see cref="T:TagLib.ByteVector" /> object specifying a 4 byte
               handler type.
            </param>
            <param name="handlerName">
               A <see cref="T:System.String" /> object specifying the handler
               name.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="handlerType" /> is <see langword="null"
               />.
            </exception>
            <exception cref="T:System.ArgumentException">
               <paramref name="handlerType" /> is less than 4 bytes
               long.
            </exception>
        </member>
        <member name="P:TagLib.Mpeg4.IsoMetaBox.Children">
            <summary>
               Gets the children of the current instance.
            </summary>
            <value>
               A <see cref="T:System.Collections.Generic.IEnumerable`1" /> object enumerating the
               children of the current instance.
            </value>
        </member>
        <member name="T:TagLib.Mpeg4.IsoMovieHeaderBox">
            <summary>
               This class extends <see cref="T:TagLib.Mpeg4.FullBox" /> to provide an
               implementation of a ISO/IEC 14496-12 MovieHeaderBox.
            </summary>
        </member>
        <member name="F:TagLib.Mpeg4.IsoMovieHeaderBox.creation_time">
            <summary>
               Contains the creation time of the movie.
            </summary>
        </member>
        <member name="F:TagLib.Mpeg4.IsoMovieHeaderBox.modification_time">
            <summary>
               Contains the modification time of the movie.
            </summary>
        </member>
        <member name="F:TagLib.Mpeg4.IsoMovieHeaderBox.timescale">
            <summary>
               Contains the timescale.
            </summary>
        </member>
        <member name="F:TagLib.Mpeg4.IsoMovieHeaderBox.duration">
            <summary>
               Contains the duration.
            </summary>
        </member>
        <member name="F:TagLib.Mpeg4.IsoMovieHeaderBox.rate">
            <summary>
               Contains the rate.
            </summary>
        </member>
        <member name="F:TagLib.Mpeg4.IsoMovieHeaderBox.volume">
            <summary>
               Contains the volume.
            </summary>
        </member>
        <member name="M:TagLib.Mpeg4.IsoMovieHeaderBox.#ctor(TagLib.Mpeg4.BoxHeader,TagLib.File,TagLib.Mpeg4.IsoHandlerBox)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Mpeg4.IsoMovieHeaderBox" /> with a provided header and
               handler by reading the contents from a specified file.
            </summary>
            <param name="header">
               A <see cref="T:TagLib.Mpeg4.BoxHeader" /> object containing the header
               to use for the new instance.
            </param>
            <param name="file">
               A <see cref="T:TagLib.File" /> object to read the contents
               of the box from.
            </param>
            <param name="handler">
               A <see cref="T:TagLib.Mpeg4.IsoHandlerBox" /> object containing the
               handler that applies to the new instance.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="file" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="P:TagLib.Mpeg4.IsoMovieHeaderBox.CreationTime">
            <summary>
               Gets the creation time of movie represented by the
               current instance.
            </summary>
            <value>
               A <see cref="T:System.DateTime" /> value containing the creation
               time of the movie represented by the current instance.
            </value>
        </member>
        <member name="P:TagLib.Mpeg4.IsoMovieHeaderBox.ModificationTime">
            <summary>
               Gets the modification time of movie represented by the
               current instance.
            </summary>
            <value>
               A <see cref="T:System.DateTime" /> value containing the
               modification time of the movie represented by the current
               instance.
            </value>
        </member>
        <member name="P:TagLib.Mpeg4.IsoMovieHeaderBox.Duration">
            <summary>
               Gets the duration of the movie represented by the current
               instance.
            </summary>
            <value>
               A <see cref="T:System.TimeSpan" /> value containing the duration
               of the movie represented by the current instance.
            </value>
        </member>
        <member name="P:TagLib.Mpeg4.IsoMovieHeaderBox.Rate">
            <summary>
               Gets the playback rate of the movie represented by the
               current instance.
            </summary>
            <value>
               A <see cref="T:System.Double" /> value containing the playback
               rate of the movie represented by the current instance.
            </value>
        </member>
        <member name="P:TagLib.Mpeg4.IsoMovieHeaderBox.Volume">
            <summary>
               Gets the playback volume of the movie represented by the
               current instance.
            </summary>
            <value>
               A <see cref="T:System.Double" /> value containing the playback
               volume of the movie represented by the current instance.
            </value>
        </member>
        <member name="P:TagLib.Mpeg4.IsoMovieHeaderBox.NextTrackId">
            <summary>
               Gets the ID of the next track in the movie represented by
               the current instance.
            </summary>
            <value>
              A <see cref="T:System.UInt32" /> value containing the ID of the next
              track in the movie represented by the current instance.
            </value>
        </member>
        <member name="T:TagLib.Mpeg4.IsoSampleDescriptionBox">
            <summary>
               This class extends <see cref="T:TagLib.Mpeg4.FullBox" /> to provide an
               implementation of a ISO/IEC 14496-12 SampleDescriptionBox.
            </summary>
        </member>
        <member name="M:TagLib.Mpeg4.IsoSampleDescriptionBox.#ctor(TagLib.Mpeg4.BoxHeader,TagLib.File,TagLib.Mpeg4.IsoHandlerBox)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Mpeg4.IsoSampleDescriptionBox" /> with a provided header
               and handler by reading the contents from a specified
               file.
            </summary>
            <param name="header">
               A <see cref="T:TagLib.Mpeg4.BoxHeader" /> object containing the header
               to use for the new instance.
            </param>
            <param name="file">
               A <see cref="T:TagLib.File" /> object to read the contents
               of the box from.
            </param>
            <param name="handler">
               A <see cref="T:TagLib.Mpeg4.IsoHandlerBox" /> object containing the
               handler that applies to the new instance.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="file" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="P:TagLib.Mpeg4.IsoSampleDescriptionBox.DataPosition">
            <summary>
               Gets the position of the data contained in the current
               instance, after any box specific headers.
            </summary>
            <value>
               A <see cref="T:System.Int64" /> value containing the position of
               the data contained in the current instance.
            </value>
        </member>
        <member name="P:TagLib.Mpeg4.IsoSampleDescriptionBox.EntryCount">
            <summary>
               Gets the number of boxes at the begining of the children
               that will be stored as <see cref="T:TagLib.Mpeg4.IsoAudioSampleEntry" />
               of <see cref="T:TagLib.Mpeg4.IsoVisualSampleEntry" /> objects, depending
               on the handler.
            </summary>
            <value>
               A <see cref="T:System.UInt32" /> value containing the number of
               children that will appear as sample entries.
            </value>
        </member>
        <member name="P:TagLib.Mpeg4.IsoSampleDescriptionBox.Children">
            <summary>
               Gets the children of the current instance.
            </summary>
            <value>
               A <see cref="T:System.Collections.Generic.IEnumerable`1" /> object enumerating the
               children of the current instance.
            </value>
        </member>
        <member name="T:TagLib.Mpeg4.IsoSampleEntry">
            <summary>
               This class extends <see cref="T:TagLib.Mpeg4.Box" /> to provide an
               implementation of a ISO/IEC 14496-12 SampleEntry.
            </summary>
        </member>
        <member name="M:TagLib.Mpeg4.IsoSampleEntry.#ctor(TagLib.Mpeg4.BoxHeader,TagLib.File,TagLib.Mpeg4.IsoHandlerBox)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Mpeg4.IsoSampleEntry" /> with a provided header and
               handler by reading the contents from a specified file.
            </summary>
            <param name="header">
               A <see cref="T:TagLib.Mpeg4.BoxHeader" /> object containing the header
               to use for the new instance.
            </param>
            <param name="file">
               A <see cref="T:TagLib.File" /> object to read the contents
               of the box from.
            </param>
            <param name="handler">
               A <see cref="T:TagLib.Mpeg4.IsoHandlerBox" /> object containing the
               handler that applies to the new instance.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="file" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="P:TagLib.Mpeg4.IsoSampleEntry.DataPosition">
            <summary>
               Gets the position of the data contained in the current
               instance, after any box specific headers.
            </summary>
            <value>
               A <see cref="T:System.Int64" /> value containing the position of
               the data contained in the current instance.
            </value>
        </member>
        <member name="P:TagLib.Mpeg4.IsoSampleEntry.DataReferenceIndex">
            <summary>
               Gets the data reference index of the current instance.
            </summary>
            <value>
               A <see cref="T:System.UInt16" /> value containing the data
               reference index of the current instance.
            </value>
        </member>
        <member name="T:TagLib.Mpeg4.IsoSampleTableBox">
            <summary>
               This class extends <see cref="T:TagLib.Mpeg4.Box" /> to provide an
               implementation of a ISO/IEC 14496-12 SampleTableBox.
            </summary>
        </member>
        <member name="M:TagLib.Mpeg4.IsoSampleTableBox.#ctor(TagLib.Mpeg4.BoxHeader,TagLib.File,TagLib.Mpeg4.IsoHandlerBox)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Mpeg4.IsoSampleTableBox" /> with a provided header and
               handler by reading the contents from a specified file.
            </summary>
            <param name="header">
               A <see cref="T:TagLib.Mpeg4.BoxHeader" /> object containing the header
               to use for the new instance.
            </param>
            <param name="file">
               A <see cref="T:TagLib.File" /> object to read the contents
               of the box from.
            </param>
            <param name="handler">
               A <see cref="T:TagLib.Mpeg4.IsoHandlerBox" /> object containing the
               handler that applies to the new instance.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="file" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="P:TagLib.Mpeg4.IsoSampleTableBox.Children">
            <summary>
               Gets the children of the current instance.
            </summary>
            <value>
               A <see cref="T:System.Collections.Generic.IEnumerable`1" /> object enumerating the
               children of the current instance.
            </value>
        </member>
        <member name="T:TagLib.Mpeg4.IsoUserDataBox">
            <summary>
               This class extends <see cref="T:TagLib.Mpeg4.Box" /> to provide an
               implementation of a ISO/IEC 14496-12 UserDataBox.
            </summary>
        </member>
        <member name="M:TagLib.Mpeg4.IsoUserDataBox.#ctor(TagLib.Mpeg4.BoxHeader,TagLib.File,TagLib.Mpeg4.IsoHandlerBox)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Mpeg4.IsoUserDataBox" /> with a provided header and
               handler by reading the contents from a specified file.
            </summary>
            <param name="header">
               A <see cref="T:TagLib.Mpeg4.BoxHeader" /> object containing the header
               to use for the new instance.
            </param>
            <param name="file">
               A <see cref="T:TagLib.File" /> object to read the contents
               of the box from.
            </param>
            <param name="handler">
               A <see cref="T:TagLib.Mpeg4.IsoHandlerBox" /> object containing the
               handler that applies to the new instance.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="file" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:TagLib.Mpeg4.IsoUserDataBox.#ctor">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Mpeg4.IsoUserDataBox" /> with no children.
            </summary>
        </member>
        <member name="P:TagLib.Mpeg4.IsoUserDataBox.Children">
            <summary>
               Gets the children of the current instance.
            </summary>
            <value>
               A <see cref="T:System.Collections.Generic.IEnumerable`1" /> object enumerating the
               children of the current instance.
            </value>
        </member>
        <member name="P:TagLib.Mpeg4.IsoUserDataBox.ParentTree">
            <summary>
               Gets the box headers for the current "<c>udta</c>" box and
               all parent boxes up to the top of the file.
            </summary>
            <value>
               A <see cref="T:BoxHeader[]" /> containing the headers for
               the current "<c>udta</c>" box and its parent boxes up to
               the top of the file, in the order they appear, or <see
               langword="null" /> if none is present.
            </value>
        </member>
        <member name="T:TagLib.Mpeg4.IsoVisualSampleEntry">
            <summary>
               This class extends <see cref="T:TagLib.Mpeg4.IsoSampleEntry" /> and implements
               <see cref="T:TagLib.IVideoCodec" /> to provide an implementation of a
               ISO/IEC 14496-12 VisualSampleEntry and support for reading MPEG-4
               video properties.
            </summary>
        </member>
        <member name="F:TagLib.Mpeg4.IsoVisualSampleEntry.width">
            <summary>
               Contains the width of the visual.
            </summary>
        </member>
        <member name="F:TagLib.Mpeg4.IsoVisualSampleEntry.height">
            <summary>
               Contains the height of the visual.
            </summary>
        </member>
        <member name="M:TagLib.Mpeg4.IsoVisualSampleEntry.#ctor(TagLib.Mpeg4.BoxHeader,TagLib.File,TagLib.Mpeg4.IsoHandlerBox)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Mpeg4.IsoVisualSampleEntry" /> with a provided header and
               handler by reading the contents from a specified file.
            </summary>
            <param name="header">
               A <see cref="T:TagLib.Mpeg4.BoxHeader" /> object containing the header
               to use for the new instance.
            </param>
            <param name="file">
               A <see cref="T:TagLib.File" /> object to read the contents
               of the box from.
            </param>
            <param name="handler">
               A <see cref="T:TagLib.Mpeg4.IsoHandlerBox" /> object containing the
               handler that applies to the new instance.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="file" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="P:TagLib.Mpeg4.IsoVisualSampleEntry.DataPosition">
            <summary>
               Gets the position of the data contained in the current
               instance, after any box specific headers.
            </summary>
            <value>
               A <see cref="T:System.Int64" /> value containing the position of
               the data contained in the current instance.
            </value>
        </member>
        <member name="P:TagLib.Mpeg4.IsoVisualSampleEntry.Duration">
            <summary>
               Gets the duration of the media represented by the current
               instance.
            </summary>
            <value>
               Always <see cref="F:System.TimeSpan.Zero" />.
            </value>
        </member>
        <member name="P:TagLib.Mpeg4.IsoVisualSampleEntry.MediaTypes">
            <summary>
               Gets the types of media represented by the current
               instance.
            </summary>
            <value>
               Always <see cref="F:TagLib.MediaTypes.Video" />.
            </value>
        </member>
        <member name="P:TagLib.Mpeg4.IsoVisualSampleEntry.Description">
            <summary>
               Gets a text description of the media represented by the
               current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> object containing a description
               of the media represented by the current instance.
            </value>
        </member>
        <member name="P:TagLib.Mpeg4.IsoVisualSampleEntry.VideoWidth">
            <summary>
               Gets the width of the video represented by the current
               instance.
            </summary>
            <value>
               A <see cref="T:System.Int32" /> containing the width of the video
               represented by the current instance.
            </value>
        </member>
        <member name="P:TagLib.Mpeg4.IsoVisualSampleEntry.VideoHeight">
            <summary>
               Gets the height of the video represented by the current
               instance.
            </summary>
            <value>
               A <see cref="T:System.Int32" /> containing the height of the video
               represented by the current instance.
            </value>
        </member>
        <member name="T:TagLib.Mpeg4.UnknownBox">
            <summary>
               This class extends <see cref="T:TagLib.Mpeg4.Box" /> to provide a simple
               implementation of a box of unknown type.
            </summary>
        </member>
        <member name="F:TagLib.Mpeg4.UnknownBox.data">
            <summary>
               Contains the box's data.
            </summary>
        </member>
        <member name="M:TagLib.Mpeg4.UnknownBox.#ctor(TagLib.Mpeg4.BoxHeader,TagLib.File,TagLib.Mpeg4.IsoHandlerBox)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Mpeg4.UnknownBox" /> with a provided header and handler
               by reading the contents from a specified file.
            </summary>
            <param name="header">
               A <see cref="T:TagLib.Mpeg4.BoxHeader" /> object containing the header
               to use for the new instance.
            </param>
            <param name="file">
               A <see cref="T:TagLib.File" /> object to read the contents
               of the box from.
            </param>
            <param name="handler">
               A <see cref="T:TagLib.Mpeg4.IsoHandlerBox" /> object containing the
               handler that applies to the new instance.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="file" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="P:TagLib.Mpeg4.UnknownBox.Data">
            <summary>
               Gets and sets the box data contained in the current
               instance.
            </summary>
            <value>
               A <see cref="T:TagLib.ByteVector" /> object containing the box
               data contained in the current instance.
            </value>
        </member>
        <member name="T:TagLib.Mpeg4.BoxFactory">
            <summary>
               This static class provides support for reading boxes from a file.
            </summary>
        </member>
        <member name="M:TagLib.Mpeg4.BoxFactory.CreateBox(TagLib.File,TagLib.Mpeg4.BoxHeader,TagLib.Mpeg4.BoxHeader,TagLib.Mpeg4.IsoHandlerBox,System.Int32)">
            <summary>
               Creates a box by reading it from a file given its header,
               parent header, handler, and index in its parent.
            </summary>
            <param name="file">
               A <see cref="T:TagLib.File" /> object containing the file
               to read from.
            </param>
            <param name="header">
               A <see cref="T:TagLib.Mpeg4.BoxHeader" /> object containing the header
               of the box to create.
            </param>
            <param name="parent">
               A <see cref="T:TagLib.Mpeg4.BoxHeader" /> object containing the header
               of the parent box.
            </param>
            <param name="handler">
               A <see cref="T:TagLib.Mpeg4.IsoHandlerBox" /> object containing the
               handler that applies to the new box.
            </param>
            <param name="index">
               A <see cref="T:System.Int32" /> value containing the index of the
               new box in its parent.
            </param>
            <returns>
               A newly created <see cref="T:TagLib.Mpeg4.Box" /> object.
            </returns>
        </member>
        <member name="M:TagLib.Mpeg4.BoxFactory.CreateBox(TagLib.File,System.Int64,TagLib.Mpeg4.BoxHeader,TagLib.Mpeg4.IsoHandlerBox,System.Int32)">
            <summary>
               Creates a box by reading it from a file given its
               position in the file, parent header, handler, and index
               in its parent.
            </summary>
            <param name="file">
               A <see cref="T:TagLib.File" /> object containing the file
               to read from.
            </param>
            <param name="position">
               A <see cref="T:System.Int64" /> value specifying at what seek
               position in <paramref name="file" /> to start reading.
            </param>
            <param name="parent">
               A <see cref="T:TagLib.Mpeg4.BoxHeader" /> object containing the header
               of the parent box.
            </param>
            <param name="handler">
               A <see cref="T:TagLib.Mpeg4.IsoHandlerBox" /> object containing the
               handler that applies to the new box.
            </param>
            <param name="index">
               A <see cref="T:System.Int32" /> value containing the index of the
               new box in its parent.
            </param>
            <returns>
               A newly created <see cref="T:TagLib.Mpeg4.Box" /> object.
            </returns>
        </member>
        <member name="M:TagLib.Mpeg4.BoxFactory.CreateBox(TagLib.File,System.Int64,TagLib.Mpeg4.IsoHandlerBox)">
            <summary>
               Creates a box by reading it from a file given its
               position in the file and handler.
            </summary>
            <param name="file">
               A <see cref="T:TagLib.File" /> object containing the file
               to read from.
            </param>
            <param name="position">
               A <see cref="T:System.Int64" /> value specifying at what seek
               position in <paramref name="file" /> to start reading.
            </param>
            <param name="handler">
               A <see cref="T:TagLib.Mpeg4.IsoHandlerBox" /> object containing the
               handler that applies to the new box.
            </param>
            <returns>
               A newly created <see cref="T:TagLib.Mpeg4.Box" /> object.
            </returns>
        </member>
        <member name="M:TagLib.Mpeg4.BoxFactory.CreateBox(TagLib.File,System.Int64)">
            <summary>
               Creates a box by reading it from a file given its
               position in the file.
            </summary>
            <param name="file">
               A <see cref="T:TagLib.File" /> object containing the file
               to read from.
            </param>
            <param name="position">
               A <see cref="T:System.Int64" /> value specifying at what seek
               position in <paramref name="file" /> to start reading.
            </param>
            <returns>
               A newly created <see cref="T:TagLib.Mpeg4.Box" /> object.
            </returns>
        </member>
        <member name="M:TagLib.Mpeg4.BoxFactory.CreateBox(TagLib.File,TagLib.Mpeg4.BoxHeader,TagLib.Mpeg4.IsoHandlerBox)">
            <summary>
               Creates a box by reading it from a file given its header
               and handler.
            </summary>
            <param name="file">
               A <see cref="T:TagLib.File" /> object containing the file
               to read from.
            </param>
            <param name="header">
               A <see cref="T:TagLib.Mpeg4.BoxHeader" /> object containing the header
               of the box to create.
            </param>
            <param name="handler">
               A <see cref="T:TagLib.Mpeg4.IsoHandlerBox" /> object containing the
               handler that applies to the new box.
            </param>
            <returns>
               A newly created <see cref="T:TagLib.Mpeg4.Box" /> object.
            </returns>
        </member>
        <member name="M:TagLib.Mpeg4.BoxFactory.CreateBox(TagLib.File,TagLib.Mpeg4.BoxHeader)">
            <summary>
               Creates a box by reading it from a file given its header
               and handler.
            </summary>
            <param name="file">
               A <see cref="T:TagLib.File" /> object containing the file
               to read from.
            </param>
            <param name="header">
               A <see cref="T:TagLib.Mpeg4.BoxHeader" /> object containing the header
               of the box to create.
            </param>
            <returns>
               A newly created <see cref="T:TagLib.Mpeg4.Box" /> object.
            </returns>
        </member>
        <member name="T:TagLib.Mpeg4.BoxHeader">
            <summary>
               This structure provides support for reading and writing headers
               for ISO/IEC 14496-12 boxes.
            </summary>
        </member>
        <member name="F:TagLib.Mpeg4.BoxHeader.box_size">
            <summary>
               Contains the box size.
            </summary>
        </member>
        <member name="F:TagLib.Mpeg4.BoxHeader.header_size">
            <summary>
               Contains the header size.
            </summary>
        </member>
        <member name="F:TagLib.Mpeg4.BoxHeader.position">
            <summary>
               Contains the position of the header.
            </summary>
        </member>
        <member name="F:TagLib.Mpeg4.BoxHeader.from_disk">
            <summary>
               Indicated that the header was read from a file.
            </summary>
        </member>
        <member name="F:TagLib.Mpeg4.BoxHeader.Empty">
            <summary>
               An empty box header.
            </summary>
        </member>
        <member name="M:TagLib.Mpeg4.BoxHeader.#ctor(TagLib.File,System.Int64)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Mpeg4.BoxHeader" /> by reading it from a specified seek
               position in a specified file.
            </summary>
            <param name="file">
               A <see cref="T:TagLib.File" /> object to read the new
               instance from.
            </param>
            <param name="position">
               A <see cref="T:System.Int64" /> value specifiying the seek position
               in <paramref name="file" /> at which to start reading.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="file" /> is <see langword="null" />.
            </exception>
            <exception cref="T:TagLib.CorruptFileException">
               There isn't enough data in the file to read the complete
               header.
            </exception>
        </member>
        <member name="M:TagLib.Mpeg4.BoxHeader.#ctor(TagLib.ByteVector)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Mpeg4.BoxHeader" /> with a specified box type.
            </summary>
            <param name="type">
               A <see cref="T:TagLib.ByteVector" /> object containing the four
               byte box type.
            </param>
            <remarks>
               <see cref="M:TagLib.Mpeg4.BoxHeader.#ctor(TagLib.ByteVector,TagLib.ByteVector)" /> must be
               used to create a header of type "<c>uuid</c>".
            </remarks>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="type" /> is <see langword="null" /> or is
               equal to "<c>uuid</c>".
            </exception>
            <exception cref="T:System.ArgumentException">
               <paramref name="type" /> isn't exactly 4 bytes long.
            </exception>
        </member>
        <member name="M:TagLib.Mpeg4.BoxHeader.#ctor(TagLib.ByteVector,TagLib.ByteVector)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Mpeg4.BoxHeader" /> with a specified box type and
               optionally extended type.
            </summary>
            <param name="type">
               A <see cref="T:TagLib.ByteVector" /> object containing the four
               byte box type.
            </param>
            <param name="extendedType">
               A <see cref="T:TagLib.ByteVector" /> object containing the four
               byte box type.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="type" /> is <see langword="null" /> - or -
               <paramref name="type" /> is equal to "<c>uuid</c>" and
               <paramref name="extendedType" /> is <see langword="null"
               />.
            </exception>
            <exception cref="T:System.ArgumentException">
               <paramref name="type" /> isn't exactly 4 bytes long - or
               - <paramref name="type" /> isn't "<c>uuid</c>" but
               <paramref name="extendedType" /> isn't <see
               langword="null" /> - or - paramref name="type" /> is
               "<c>uuid</c>" but <paramref name="extendedType" /> isn't
               exactly 16 bytes long.
            </exception>
        </member>
        <member name="P:TagLib.Mpeg4.BoxHeader.BoxType">
            <summary>
               Gets the type of box represented by the current instance.
            </summary>
            <value>
               A <see cref="T:TagLib.ByteVector" /> object containing the 4 byte
               box type.
            </value>
        </member>
        <member name="P:TagLib.Mpeg4.BoxHeader.ExtendedType">
            <summary>
               Gets the extended type of the box represented by the
               current instance.
            </summary>
            <value>
               A <see cref="T:TagLib.ByteVector" /> object containing the 16 byte
               extended type, or <see langword="null" /> if <see
               cref="P:TagLib.Mpeg4.BoxHeader.BoxType" /> is not "<c>uuid</c>".
            </value>
        </member>
        <member name="P:TagLib.Mpeg4.BoxHeader.HeaderSize">
            <summary>
               Gets the size of the header represented by the current
               instance.
            </summary>
            <value>
               A <see cref="T:System.Int64" /> value containing the size of the
               header represented by the current instance.
            </value>
        </member>
        <member name="P:TagLib.Mpeg4.BoxHeader.DataSize">
            <summary>
               Gets and sets the size of the data in the box described
               by the current instance.
            </summary>
            <value>
               A <see cref="T:System.Int64" /> value containing the size of the
               data in the box described by the current instance.
            </value>
        </member>
        <member name="P:TagLib.Mpeg4.BoxHeader.DataOffset">
            <summary>
               Gets the offset of the box data from the position of the
               header.
            </summary>
            <value>
               A <see cref="T:System.Int64" /> value containing the offset of the
               box data from the position of the header.
            </value>
        </member>
        <member name="P:TagLib.Mpeg4.BoxHeader.TotalBoxSize">
            <summary>
               Gets the total size of the box described by the current
               instance.
            </summary>
            <value>
               A <see cref="T:System.Int64" /> value containing the total size of
               the box described by the current instance.
            </value>
        </member>
        <member name="P:TagLib.Mpeg4.BoxHeader.Position">
            <summary>
               Gets the position box represented by the current instance
               in the file it comes from.
            </summary>
            <value>
               A <see cref="T:System.Int64" /> value containing the position box
               represented by the current instance in the file it comes
               from.
            </value>
        </member>
        <member name="M:TagLib.Mpeg4.BoxHeader.Overwrite(TagLib.File,System.Int64)">
            <summary>
               Overwrites the header on disk, updating it to include a
               change in the size of the box.
            </summary>
            <param name="file">
               A <see cref="T:TagLib.File" /> object containing the file
               from which the box originates.
            </param>
            <param name="sizeChange">
               A <see cref="T:System.Int64" /> value indicating the change in the
               size of the box described by the current instance.
            </param>
            <returns>
               The size change encountered by the box that parents the
               box described the the current instance, equal to the
               size change of the box plus any size change that should
               happen in the header.
            </returns>
        </member>
        <member name="M:TagLib.Mpeg4.BoxHeader.Render">
            <summary>
               Renders the header represented by the current instance.
            </summary>
            <returns>
               A <see cref="T:TagLib.ByteVector" /> object containing the
               rendered version of the current instance.
            </returns>
        </member>
        <member name="P:TagLib.Mpeg4.BoxHeader.Box">
            <summary>
               Gets and sets the box represented by the current instance
               as a means of temporary storage for internal uses.
            </summary>
        </member>
        <member name="T:TagLib.Mpeg4.BoxType">
            <summary>
               <see cref="T:TagLib.Mpeg4.BoxType" /> provides references to different box types
               used by the library.
            </summary>
            <remarks>
               <para>This class is used to severely reduce the number of times
               these types are created in <see cref="T:TagLib.Mpeg4.AppleTag" />, greatly
               improving the speed at which warm files are read.</para>
               <para>The reason it is marked as internal is because I'm not sure
               I like the way the fields are named, and it is really
               unneccessary for external uses. While the library may use
               <c>DataBoxes (BoxType.Gen, BoxType.Gnre);</c>, an external user
               could use <c>tag.DataBoxes ("gen", "gnre");</c> with the same
               result.</para>
               <see url="https://picard.musicbrainz.org/docs/mappings/"/> 
            </remarks>
        </member>
        <member name="T:TagLib.Mpeg4.File">
            <summary>
               This class extends <see cref="T:TagLib.File" /> to provide tagging
               and properties support for MPEG-4 files.
            </summary>
        </member>
        <member name="F:TagLib.Mpeg4.File.apple_tag">
            <summary>
               Contains the Apple tag.
            </summary>
        </member>
        <member name="F:TagLib.Mpeg4.File.tag">
            <summary>
               Contains the combined tag.
            </summary>
            <remarks>
               TODO: Add support for ID3v2 tags.
            </remarks>
        </member>
        <member name="F:TagLib.Mpeg4.File.properties">
            <summary>
               Contains the media properties.
            </summary>
        </member>
        <member name="M:TagLib.Mpeg4.File.#ctor(System.String,TagLib.ReadStyle)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Mpeg4.File" /> for a specified path in the local file
               system and specified read style.
            </summary>
            <param name="path">
               A <see cref="T:System.String" /> object containing the path of the
               file to use in the new instance.
            </param>
            <param name="propertiesStyle">
               A <see cref="T:TagLib.ReadStyle" /> value specifying at what level
               of accuracy to read the media properties, or <see
               cref="F:TagLib.ReadStyle.None" /> to ignore the properties.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="path" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:TagLib.Mpeg4.File.#ctor(System.String)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Mpeg4.File" /> for a specified path in the local file
               system with an average read style.
            </summary>
            <param name="path">
               A <see cref="T:System.String" /> object containing the path of the
               file to use in the new instance.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="path" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:TagLib.Mpeg4.File.#ctor(TagLib.File.IFileAbstraction,TagLib.ReadStyle)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Mpeg4.File" /> for a specified file abstraction and
               specified read style.
            </summary>
            <param name="abstraction">
               A <see cref="T:TagLib.File.IFileAbstraction" /> object to use when
               reading from and writing to the file.
            </param>
            <param name="propertiesStyle">
               A <see cref="T:TagLib.ReadStyle" /> value specifying at what level
               of accuracy to read the media properties, or <see
               cref="F:TagLib.ReadStyle.None" /> to ignore the properties.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="abstraction" /> is <see langword="null"
               />.
            </exception>
        </member>
        <member name="M:TagLib.Mpeg4.File.#ctor(TagLib.File.IFileAbstraction)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Mpeg4.File" /> for a specified file abstraction with an
               average read style.
            </summary>
            <param name="abstraction">
               A <see cref="T:TagLib.File.IFileAbstraction" /> object to use when
               reading from and writing to the file.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="abstraction" /> is <see langword="null"
               />.
            </exception>
        </member>
        <member name="P:TagLib.Mpeg4.File.Tag">
            <summary>
               Gets a abstract representation of all tags stored in the
               current instance.
            </summary>
            <value>
               A <see cref="T:TagLib.Tag" /> object representing all tags
               stored in the current instance.
            </value>
        </member>
        <member name="P:TagLib.Mpeg4.File.Properties">
            <summary>
               Gets the media properties of the file represented by the
               current instance.
            </summary>
            <value>
               A <see cref="T:TagLib.Properties" /> object containing the
               media properties of the file represented by the current
               instance.
            </value>
        </member>
        <member name="P:TagLib.Mpeg4.File.UdtaBoxes">
            <summary>
            Get the UDTA Boxes
            </summary>
        </member>
        <member name="M:TagLib.Mpeg4.File.Save">
            <summary>
               Saves the changes made in the current instance to the
               file it represents.
            </summary>
        </member>
        <member name="M:TagLib.Mpeg4.File.GetTag(TagLib.TagTypes,System.Boolean)">
            <summary>
               Gets a tag of a specified type from the current instance,
               optionally creating a new tag if possible.
            </summary>
            <param name="type">
               A <see cref="T:TagLib.TagTypes" /> value indicating the
               type of tag to read.
            </param>
            <param name="create">
               A <see cref="T:System.Boolean" /> value specifying whether or not to
               try and create the tag if one is not found.
            </param>
            <returns>
               A <see cref="P:TagLib.Mpeg4.File.Tag" /> object containing the tag that was
               found in or added to the current instance. If no
               matching tag was found and none was created, <see
               langword="null" /> is returned.
            </returns>
            <remarks>
               At the time of this writing, only <see cref="T:TagLib.Mpeg4.AppleTag" />
               is supported. All other tag types will be ignored.
            </remarks>
        </member>
        <member name="M:TagLib.Mpeg4.File.RemoveTags(TagLib.TagTypes)">
            <summary>
               Removes a set of tag types from the current instance.
            </summary>
            <param name="types">
               A bitwise combined <see cref="T:TagLib.TagTypes" /> value
               containing tag types to be removed from the file.
            </param>
            <remarks>
               In order to remove all tags from a file, pass <see
               cref="F:TagLib.TagTypes.AllTags" /> as <paramref name="types" />.
            </remarks>
        </member>
        <member name="M:TagLib.Mpeg4.File.Read(TagLib.ReadStyle)">
            <summary>
               Reads the file with a specified read style.
            </summary>
            <param name="propertiesStyle">
               A <see cref="T:TagLib.ReadStyle" /> value specifying at what level
               of accuracy to read the media properties, or <see
               cref="F:TagLib.ReadStyle.None" /> to ignore the properties.
            </param>
        </member>
        <member name="M:TagLib.Mpeg4.File.FindAppleTagUdta">
            <summary>
               Find the udta box within our collection that contains the Apple ILST data.
            </summary>
            <remarks>
            	If there is a single udta in a file, we return that.
            	If there are multiple udtas, we search for the one that contains the ILST box.
            </remarks>
        </member>
        <member name="M:TagLib.Mpeg4.File.IsAppleTagUdtaPresent">
            <summary>
               Returns true if there is a udta with ILST present in our collection
            </summary>
        </member>
        <member name="T:TagLib.Mpeg4.FileParser">
            <summary>
               This class provides methods for reading important information
               from an MPEG-4 file.
            </summary>
        </member>
        <member name="F:TagLib.Mpeg4.FileParser.file">
            <summary>
               Contains the file to read from.
            </summary>
        </member>
        <member name="F:TagLib.Mpeg4.FileParser.first_header">
            <summary>
               Contains the first header found in the file.
            </summary>
        </member>
        <member name="F:TagLib.Mpeg4.FileParser.mvhd_box">
            <summary>
               Contains the ISO movie header box.
            </summary>
        </member>
        <member name="F:TagLib.Mpeg4.FileParser.udta_boxes">
            <summary>
               Contains the ISO user data boxes.
            </summary>
        </member>
        <member name="F:TagLib.Mpeg4.FileParser.moov_tree">
            <summary>
               Contains the box headers from the top of the file to the
               "moov" box.
            </summary>
        </member>
        <member name="F:TagLib.Mpeg4.FileParser.udta_tree">
            <summary>
               Contains the box headers from the top of the file to the
               "udta" box.
            </summary>
        </member>
        <member name="F:TagLib.Mpeg4.FileParser.stco_boxes">
            <summary>
               Contains the "stco" boxes found in the file.
            </summary>
        </member>
        <member name="F:TagLib.Mpeg4.FileParser.stsd_boxes">
            <summary>
               Contains the "stsd" boxes found in the file.
            </summary>
        </member>
        <member name="F:TagLib.Mpeg4.FileParser.mdat_start">
            <summary>
               Contains the position at which the "mdat" box starts.
            </summary>
        </member>
        <member name="F:TagLib.Mpeg4.FileParser.mdat_end">
            <summary>
               Contains the position at which the "mdat" box ends.
            </summary>
        </member>
        <member name="M:TagLib.Mpeg4.FileParser.#ctor(TagLib.File)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Mpeg4.FileParser" /> for a specified file.
            </summary>
            <param name="file">
               A <see cref="T:TagLib.File" /> object to perform operations
               on.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="file" /> is <see langword="null" />.
            </exception>
            <exception cref="T:TagLib.CorruptFileException">
               <paramref name="file" /> does not start with a
               "<c>ftyp</c>" box.
            </exception>
        </member>
        <member name="P:TagLib.Mpeg4.FileParser.MovieHeaderBox">
            <summary>
               Gets the movie header box read by the current instance.
            </summary>
            <value>
               A <see cref="T:TagLib.Mpeg4.IsoMovieHeaderBox" /> object read by the
               current instance, or <see langword="null" /> if not found.
            </value>
            <remarks>
               This value will only be set by calling <see
               cref="M:TagLib.Mpeg4.FileParser.ParseTagAndProperties" />.
            </remarks>
        </member>
        <member name="P:TagLib.Mpeg4.FileParser.UserDataBoxes">
            <summary>
               Gets all user data boxes read by the current instance.
            </summary>
            <value>
               A <see cref="T:TagLib.Mpeg4.IsoUserDataBox" /> array read by the
               current instance.
            </value>
            <remarks>
               This value will only be set by calling <see
               cref="M:TagLib.Mpeg4.FileParser.ParseTag" /> and <see
               cref="M:TagLib.Mpeg4.FileParser.ParseTagAndProperties" />.
            </remarks>
        </member>
        <member name="P:TagLib.Mpeg4.FileParser.UserDataBox">
            <summary>
            Get the User Data Box
            </summary>
        </member>
        <member name="P:TagLib.Mpeg4.FileParser.AudioSampleEntry">
            <summary>
               Gets the audio sample entry read by the current instance.
            </summary>
            <value>
               A <see cref="T:TagLib.Mpeg4.IsoAudioSampleEntry" /> object read by the
               current instance, or <see langword="null" /> if not found.
            </value>
            <remarks>
               This value will only be set by calling <see
               cref="M:TagLib.Mpeg4.FileParser.ParseTagAndProperties" />.
            </remarks>
        </member>
        <member name="P:TagLib.Mpeg4.FileParser.VisualSampleEntry">
            <summary>
               Gets the visual sample entry read by the current
               instance.
            </summary>
            <value>
               A <see cref="T:TagLib.Mpeg4.IsoVisualSampleEntry" /> object read by the
               current instance, or <see langword="null" /> if not found.
            </value>
            <remarks>
               This value will only be set by calling <see
               cref="M:TagLib.Mpeg4.FileParser.ParseTagAndProperties" />.
            </remarks>
        </member>
        <member name="P:TagLib.Mpeg4.FileParser.MoovTree">
            <summary>
               Gets the box headers for the first "<c>moov</c>" box and
               all parent boxes up to the top of the file as read by the
               current instance.
            </summary>
            <value>
               A <see cref="T:BoxHeader[]" /> containing the headers for
               the first "<c>moov</c>" box and its parent boxes up to
               the top of the file, in the order they appear, or <see
               langword="null" /> if none is present.
            </value>
            <remarks>
               This value is useful for overwriting box headers, and is
               only be set by calling <see cref="M:TagLib.Mpeg4.FileParser.ParseBoxHeaders" />.
            </remarks>
        </member>
        <member name="P:TagLib.Mpeg4.FileParser.UdtaTree">
            <summary>
               Gets the box headers for the first "<c>udta</c>" box and
               all parent boxes up to the top of the file as read by the
               current instance.
            </summary>
            <value>
               A <see cref="T:BoxHeader[]" /> containing the headers for
               the first "<c>udta</c>" box and its parent boxes up to
               the top of the file, in the order they appear, or <see
               langword="null" /> if none is present.
            </value>
            <remarks>
               This value is useful for overwriting box headers, and is
               only be set by calling <see cref="M:TagLib.Mpeg4.FileParser.ParseBoxHeaders" />.
            </remarks>
        </member>
        <member name="P:TagLib.Mpeg4.FileParser.ChunkOffsetBoxes">
            <summary>
               Gets all chunk offset boxes read by the current instance.
            </summary>
            <value>
               A <see cref="T:Box[]" /> containing all chunk offset boxes
               read by the current instance.
            </value>
            <remarks>
               These boxes contain offset information for media data in
               the current instance and can be devalidated by size
               change operations, in which case they need to be
               corrected. This value will only be set by calling <see
               cref="M:TagLib.Mpeg4.FileParser.ParseChunkOffsets" />.
            </remarks>
        </member>
        <member name="P:TagLib.Mpeg4.FileParser.MdatStartPosition">
            <summary>
               Gets the position at which the "<c>mdat</c>" box starts.
            </summary>
            <value>
               A <see cref="T:System.Int64" /> value containing the seek position
               at which the "<c>mdat</c>" box starts.
            </value>
            <remarks>
               The "<c>mdat</c>" box contains the media data for the
               file and is used for estimating the invariant data
               portion of the file.
            </remarks>
        </member>
        <member name="P:TagLib.Mpeg4.FileParser.MdatEndPosition">
            <summary>
               Gets the position at which the "<c>mdat</c>" box ends.
            </summary>
            <value>
               A <see cref="T:System.Int64" /> value containing the seek position
               at which the "<c>mdat</c>" box ends.
            </value>
            <remarks>
               The "<c>mdat</c>" box contains the media data for the
               file and is used for estimating the invariant data
               portion of the file.
            </remarks>
        </member>
        <member name="M:TagLib.Mpeg4.FileParser.ParseBoxHeaders">
            <summary>
               Parses the file referenced by the current instance,
               searching for box headers that will be useful in saving
               the file.
            </summary>
        </member>
        <member name="M:TagLib.Mpeg4.FileParser.ParseTag">
            <summary>
               Parses the file referenced by the current instance,
               searching for tags.
            </summary>
        </member>
        <member name="M:TagLib.Mpeg4.FileParser.ParseTagAndProperties">
            <summary>
               Parses the file referenced by the current instance,
               searching for tags and properties.
            </summary>
        </member>
        <member name="M:TagLib.Mpeg4.FileParser.ParseChunkOffsets">
            <summary>
               Parses the file referenced by the current instance,
               searching for chunk offset boxes.
            </summary>
        </member>
        <member name="M:TagLib.Mpeg4.FileParser.ParseBoxHeaders(System.Int64,System.Int64,System.Collections.Generic.List{TagLib.Mpeg4.BoxHeader})">
            <summary>
               Parses boxes for a specified range, looking for headers.
            </summary>
            <param name="start">
               A <see cref="T:System.Int64" /> value specifying the seek position
               at which to start reading.
            </param>
            <param name="end">
               A <see cref="T:System.Int64" /> value specifying the seek position
               at which to stop reading.
            </param>
            <param name="parents">
               A <see cref="T:System.Collections.Generic.List`1" /> object containing all the parent
               handlers that apply to the range.
            </param>
        </member>
        <member name="M:TagLib.Mpeg4.FileParser.ParseTag(System.Int64,System.Int64,System.Collections.Generic.List{TagLib.Mpeg4.BoxHeader})">
            <summary>
               Parses boxes for a specified range, looking for tags.
            </summary>
            <param name="start">
               A <see cref="T:System.Int64" /> value specifying the seek position
               at which to start reading.
            </param>
            <param name="end">
               A <see cref="T:System.Int64" /> value specifying the seek position
               at which to stop reading.
            </param>
            <param name="parents">
               A <see cref="T:List" /> of <see cref="T:TagLib.Mpeg4.BoxHeader" /> parents.
            </param>
        </member>
        <member name="M:TagLib.Mpeg4.FileParser.ParseTagAndProperties(System.Int64,System.Int64,TagLib.Mpeg4.IsoHandlerBox,System.Collections.Generic.List{TagLib.Mpeg4.BoxHeader})">
            <summary>
               Parses boxes for a specified range, looking for tags and
               properties.
            </summary>
            <param name="start">
               A <see cref="T:System.Int64" /> value specifying the seek position
               at which to start reading.
            </param>
            <param name="end">
               A <see cref="T:System.Int64" /> value specifying the seek position
               at which to stop reading.
            </param>
            <param name="handler">
               A <see cref="T:TagLib.Mpeg4.IsoHandlerBox" /> object that applied to the
               range being searched.
            </param>
            <param name="parents">
               A <see cref="T:List" /> of <see cref="T:TagLib.Mpeg4.BoxHeader" /> parents.
            </param>
        </member>
        <member name="M:TagLib.Mpeg4.FileParser.ParseChunkOffsets(System.Int64,System.Int64)">
            <summary>
               Parses boxes for a specified range, looking for chunk
               offset boxes.
            </summary>
            <param name="start">
               A <see cref="T:System.Int64" /> value specifying the seek position
               at which to start reading.
            </param>
            <param name="end">
               A <see cref="T:System.Int64" /> value specifying the seek position
               at which to stop reading.
            </param>
        </member>
        <member name="M:TagLib.Mpeg4.FileParser.ResetFields">
            <summary>
               Resets all internal fields.
            </summary>
        </member>
        <member name="M:TagLib.Mpeg4.FileParser.AddParent(System.Collections.Generic.List{TagLib.Mpeg4.BoxHeader},TagLib.Mpeg4.BoxHeader)">
            <summary>
               Adds a parent to the end of an existing list of parents.
            </summary>
            <param name="parents">
               A <see cref="T:System.Collections.Generic.List`1" /> object containing an existing
               list of parents.
            </param>
            <param name="current">
               A <see cref="T:TagLib.Mpeg4.BoxHeader" /> object to add to the list.
            </param>
            <returns>
               A new <see cref="T:System.Collections.Generic.List`1" /> object containing the list
               of parents, including the added header.
            </returns>
        </member>
        <member name="T:TagLib.TextBox">
            <summary>
            Represent an MP4 text box
            </summary>
        </member>
        <member name="F:TagLib.TextBox.data">
            <summary>
               Contains the box's data.
            </summary>
        </member>
        <member name="M:TagLib.TextBox.#ctor(TagLib.Mpeg4.BoxHeader,TagLib.File,TagLib.Mpeg4.IsoHandlerBox)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Mpeg4.UnknownBox" /> with a provided header and handler
               by reading the contents from a specified file.
            </summary>
            <param name="header">
               A <see cref="T:TagLib.Mpeg4.BoxHeader" /> object containing the header
               to use for the new instance.
            </param>
            <param name="file">
               A <see cref="T:TagLib.File" /> object to read the contents
               of the box from.
            </param>
            <param name="handler">
               A <see cref="T:TagLib.Mpeg4.IsoHandlerBox" /> object containing the
               handler that applies to the new instance.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="file" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="P:TagLib.TextBox.Data">
            <summary>
               Gets and sets the box data contained in the current
               instance.
            </summary>
            <value>
               A <see cref="T:TagLib.ByteVector" /> object containing the box
               data contained in the current instance.
            </value>
        </member>
        <member name="T:TagLib.UrlBox">
            <summary>
            Represent a MP4 URL box
            </summary>
        </member>
        <member name="F:TagLib.UrlBox.data">
            <summary>
               Contains the box's data.
            </summary>
        </member>
        <member name="M:TagLib.UrlBox.#ctor(TagLib.Mpeg4.BoxHeader,TagLib.File,TagLib.Mpeg4.IsoHandlerBox)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Mpeg4.UnknownBox" /> with a provided header and handler
               by reading the contents from a specified file.
            </summary>
            <param name="header">
               A <see cref="T:TagLib.Mpeg4.BoxHeader" /> object containing the header
               to use for the new instance.
            </param>
            <param name="file">
               A <see cref="T:TagLib.File" /> object to read the contents
               of the box from.
            </param>
            <param name="handler">
               A <see cref="T:TagLib.Mpeg4.IsoHandlerBox" /> object containing the
               handler that applies to the new instance.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="file" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="P:TagLib.UrlBox.Data">
            <summary>
               Gets and sets the box data contained in the current
               instance.
            </summary>
            <value>
               A <see cref="T:TagLib.ByteVector" /> object containing the box
               data contained in the current instance.
            </value>
        </member>
        <member name="T:TagLib.Mpeg.AudioFile">
            <summary>
               This class extends <see cref="T:TagLib.NonContainer.File" /> to
               provide tagging and properties support for MPEG-1, MPEG-2, and
               MPEG-2.5 audio files.
            </summary>
            <remarks>
               A <see cref="T:TagLib.Id3v1.Tag" /> and <see
               cref="T:TagLib.Id3v2.Tag" /> will be added automatically to any
               file that doesn't contain one. This change does not effect the
               file until it is saved and can be reversed using the following
               method:
               <code>file.RemoveTags (file.TagTypes &amp; ~file.TagTypesOnDisk);</code>
            </remarks>
        </member>
        <member name="F:TagLib.Mpeg.AudioFile.first_header">
            <summary>
               Contains the first audio header.
            </summary>
        </member>
        <member name="F:TagLib.Mpeg.AudioFile.create_id3_tags">
            <summary>
               Specifies whether or not to create ID3v1 and
               ID3v2 tags when they don't exist..
            </summary>
        </member>
        <member name="M:TagLib.Mpeg.AudioFile.#ctor(System.String,TagLib.ReadStyle)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Mpeg.AudioFile" /> for a specified path in the local
               file system and specified read style.
            </summary>
            <param name="path">
               A <see cref="T:System.String" /> object containing the path of the
               file to use in the new instance.
            </param>
            <param name="propertiesStyle">
               A <see cref="T:TagLib.ReadStyle" /> value specifying at what level
               of accuracy to read the media properties, or <see
               cref="F:TagLib.ReadStyle.None" /> to ignore the properties.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="path" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:TagLib.Mpeg.AudioFile.#ctor(System.String)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Mpeg.AudioFile" /> for a specified path in the local
               file system with an average read style.
            </summary>
            <param name="path">
               A <see cref="T:System.String" /> object containing the path of the
               file to use in the new instance.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="path" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:TagLib.Mpeg.AudioFile.#ctor(TagLib.File.IFileAbstraction,TagLib.ReadStyle)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Mpeg.AudioFile" /> for a specified file abstraction and
               specified read style.
            </summary>
            <param name="abstraction">
               A <see cref="T:TagLib.File.IFileAbstraction" /> object to use when
               reading from and writing to the file.
            </param>
            <param name="propertiesStyle">
               A <see cref="T:TagLib.ReadStyle" /> value specifying at what level
               of accuracy to read the media properties, or <see
               cref="F:TagLib.ReadStyle.None" /> to ignore the properties.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="abstraction" /> is <see langword="null"
               />.
            </exception>
        </member>
        <member name="M:TagLib.Mpeg.AudioFile.#ctor(TagLib.File.IFileAbstraction)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Mpeg.AudioFile" /> for a specified file abstraction with
               an average read style.
            </summary>
            <param name="abstraction">
               A <see cref="T:TagLib.File.IFileAbstraction" /> object to use when
               reading from and writing to the file.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="abstraction" /> is <see langword="null"
               />.
            </exception>
        </member>
        <member name="P:TagLib.Mpeg.AudioFile.CreateID3Tags">
            <summary>
               Gets and sets whether or not to create ID3v1 and
               ID3v2 tags automatically when they are not existing.
            </summary>
            <value>
               <see langword="true" /> if tags to be created automatically.
               Otherwise, <see langword="false" />.
            </value>
            <remarks>
               <para>Sometimes a MP3 file should only contain ID3v1 and no
               ID3v2 Tags. Or instead of ID3v2 Tags APE Tags should be used.
               By setting this property to <see langword="false" />,
               no ID3v1 and Id3v2 Tags will be created when creating the file,
               if they don't exist.
               They need to be created explicitly if needed.</para>
               <para>The default is <see langword="true" /> which means that
               ID3v1 and Id3v2 tags are created when they don't exist.</para>
            </remarks>
        </member>
        <member name="M:TagLib.Mpeg.AudioFile.GetTag(TagLib.TagTypes,System.Boolean)">
            <summary>
               Gets a tag of a specified type from the current instance,
               optionally creating a new tag if possible.
            </summary>
            <param name="type">
               A <see cref="T:TagLib.TagTypes" /> value indicating the
               type of tag to read.
            </param>
            <param name="create">
               A <see cref="T:System.Boolean" /> value specifying whether or not to
               try and create the tag if one is not found.
            </param>
            <returns>
               A <see cref="T:TagLib.Tag" /> object containing the tag that was
               found in or added to the current instance. If no
               matching tag was found and none was created, <see
               langword="null" /> is returned.
            </returns>
            <remarks>
               If a <see cref="T:TagLib.Id3v2.Tag" /> is added to the
               current instance, it will be placed at the start of the
               file. On the other hand, <see cref="T:TagLib.Id3v1.Tag" />
               <see cref="T:TagLib.Ape.Tag" /> will be added to the end of
               the file. All other tag types will be ignored.
            </remarks>
        </member>
        <member name="M:TagLib.Mpeg.AudioFile.ReadStart(System.Int64,TagLib.ReadStyle)">
            <summary>
               Reads format specific information at the start of the
               file.
            </summary>
            <param name="start">
               A <see cref="T:System.Int64" /> value containing the seek position
               at which the tags end and the media data begins.
            </param>
            <param name="propertiesStyle">
               A <see cref="T:TagLib.ReadStyle" /> value specifying at what level
               of accuracy to read the media properties, or <see
               cref="F:TagLib.ReadStyle.None" /> to ignore the properties.
            </param>
            <remarks>
               This method only searches for an audio header in the
               first 16384 bytes of code to avoid searching forever in
               corrupt files.
            </remarks>
        </member>
        <member name="M:TagLib.Mpeg.AudioFile.ReadEnd(System.Int64,TagLib.ReadStyle)">
            <summary>
               Reads format specific information at the end of the
               file.
            </summary>
            <param name="end">
               A <see cref="T:System.Int64" /> value containing the seek position
               at which the media data ends and the tags begin.
            </param>
            <param name="propertiesStyle">
               A <see cref="T:TagLib.ReadStyle" /> value specifying at what level
               of accuracy to read the media properties, or <see
               cref="F:TagLib.ReadStyle.None" /> to ignore the properties.
            </param>
        </member>
        <member name="M:TagLib.Mpeg.AudioFile.ReadProperties(System.Int64,System.Int64,TagLib.ReadStyle)">
            <summary>
               Reads the audio properties from the file represented by
               the current instance.
            </summary>
            <param name="start">
               A <see cref="T:System.Int64" /> value containing the seek position
               at which the tags end and the media data begins.
            </param>
            <param name="end">
               A <see cref="T:System.Int64" /> value containing the seek position
               at which the media data ends and the tags begin.
            </param>
            <param name="propertiesStyle">
               A <see cref="T:TagLib.ReadStyle" /> value specifying at what level
               of accuracy to read the media properties, or <see
               cref="F:TagLib.ReadStyle.None" /> to ignore the properties.
            </param>
            <returns>
               A <see cref="T:TagLib.Properties" /> object describing the
               media properties of the file represented by the current
               instance.
            </returns>
        </member>
        <member name="T:TagLib.Mpeg.Version">
            <summary>
               Indicates the MPEG version of a file or stream.
            </summary>
        </member>
        <member name="F:TagLib.Mpeg.Version.Unknown">
            <summary>
               Unknown version.
            </summary>
        </member>
        <member name="F:TagLib.Mpeg.Version.Version1">
            <summary>
               MPEG-1
            </summary>
        </member>
        <member name="F:TagLib.Mpeg.Version.Version2">
            <summary>
               MPEG-2
            </summary>
        </member>
        <member name="F:TagLib.Mpeg.Version.Version25">
            <summary>
               MPEG-2.5
            </summary>
        </member>
        <member name="T:TagLib.Mpeg.ChannelMode">
            <summary>
               Indicates the MPEG audio channel mode of a file or stream.
            </summary>
        </member>
        <member name="F:TagLib.Mpeg.ChannelMode.Stereo">
            <summary>
               Stereo
            </summary>
        </member>
        <member name="F:TagLib.Mpeg.ChannelMode.JointStereo">
            <summary>
               Joint Stereo
            </summary>
        </member>
        <member name="F:TagLib.Mpeg.ChannelMode.DualChannel">
            <summary>
               Dual Channel Mono
            </summary>
        </member>
        <member name="F:TagLib.Mpeg.ChannelMode.SingleChannel">
            <summary>
               Single Channel Mono
            </summary>
        </member>
        <member name="T:TagLib.Mpeg.AudioHeader">
            <summary>
               This structure implements <see cref="T:TagLib.IAudioCodec" /> and provides
               information about an MPEG audio stream.
            </summary>
        </member>
        <member name="F:TagLib.Mpeg.AudioHeader.sample_rates">
            <summary>
               Contains a sample rate table for MPEG audio.
            </summary>
        </member>
        <member name="F:TagLib.Mpeg.AudioHeader.block_size">
            <summary>
               Contains a block size table for MPEG audio.
            </summary>
        </member>
        <member name="F:TagLib.Mpeg.AudioHeader.bitrates">
            <summary>
               Contains a bitrate table for MPEG audio.
            </summary>
        </member>
        <member name="F:TagLib.Mpeg.AudioHeader.flags">
            <summary>
               Contains the header flags.
            </summary>
        </member>
        <member name="F:TagLib.Mpeg.AudioHeader.stream_length">
            <summary>
               Contains the audio stream length.
            </summary>
        </member>
        <member name="F:TagLib.Mpeg.AudioHeader.xing_header">
            <summary>
               Contains the associated Xing header.
            </summary>
        </member>
        <member name="F:TagLib.Mpeg.AudioHeader.vbri_header">
            <summary>
               Contains the associated VBRI header.
            </summary>
        </member>
        <member name="F:TagLib.Mpeg.AudioHeader.duration">
            <summary>
               Contains the audio stream duration.
            </summary>
        </member>
        <member name="F:TagLib.Mpeg.AudioHeader.Unknown">
            <summary>
               An empty and unset header.
            </summary>
        </member>
        <member name="M:TagLib.Mpeg.AudioHeader.#ctor(System.UInt32,System.Int64,TagLib.Mpeg.XingHeader,TagLib.Mpeg.VBRIHeader)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Mpeg.AudioHeader" /> by populating it with specified
               values.
            </summary>
            <param name="flags">
               A <see cref="T:System.UInt32" /> value specifying flags for the new
               instance.
            </param>
            <param name="streamLength">
               A <see cref="T:System.Int64" /> value specifying the stream length
               of the new instance.
            </param>
            <param name="xingHeader">
               A <see cref="P:TagLib.Mpeg.AudioHeader.XingHeader" /> object representing the Xing
               header associated with the new instance.
            </param>
            <param name="vbriHeader">
               A <see cref="P:TagLib.Mpeg.AudioHeader.VBRIHeader" /> object representing the VBRI
               header associated with the new instance.
            </param>
        </member>
        <member name="M:TagLib.Mpeg.AudioHeader.#ctor(TagLib.ByteVector,TagLib.File,System.Int64)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Mpeg.AudioHeader" /> by reading its contents from a
               <see cref="T:TagLib.ByteVector" /> object and its Xing Header from
               the appropriate location in the specified file.
            </summary>
            <param name="data">
               A <see cref="T:TagLib.ByteVector" /> object containing the header
               to read.
            </param>
            <param name="file">
               A <see cref="T:TagLib.File" /> object to read the Xing
               header from.
            </param>
            <param name="position">
               A <see cref="T:System.Int64" /> value indicating the position in
               <paramref name="file" /> at which the header begins.
            </param>
            <exception cref="T:TagLib.CorruptFileException">
               <paramref name="data" /> is less than 4 bytes long,
               does not begin with a MPEG audio synch, has a negative
               bitrate, or has a sample rate of zero.
            </exception>
        </member>
        <member name="P:TagLib.Mpeg.AudioHeader.Version">
            <summary>
               Gets the MPEG version used to encode the audio
               represented by the current instance.
            </summary>
            <value>
               A <see cref="P:TagLib.Mpeg.AudioHeader.Version" /> value indicating the MPEG
               version used to encode the audio represented by the
               current instance.
            </value>
        </member>
        <member name="P:TagLib.Mpeg.AudioHeader.AudioLayer">
            <summary>
               Gets the MPEG audio layer used to encode the audio
               represented by the current instance.
            </summary>
            <value>
               A <see cref="T:System.Int32" /> value indicating the MPEG audio
               layer used to encode the audio represented by the current
               instance.
            </value>
        </member>
        <member name="P:TagLib.Mpeg.AudioHeader.AudioBitrate">
            <summary>
               Gets the bitrate of the audio represented by the current
               instance.
            </summary>
            <value>
               A <see cref="T:System.Int32" /> value containing a bitrate of the
               audio represented by the current instance.
            </value>
        </member>
        <member name="P:TagLib.Mpeg.AudioHeader.AudioSampleRate">
            <summary>
               Gets the sample rate of the audio represented by the
               current instance.
            </summary>
            <value>
               A <see cref="T:System.Int32" /> value containing the sample rate of
               the audio represented by the current instance.
            </value>
        </member>
        <member name="P:TagLib.Mpeg.AudioHeader.AudioChannels">
            <summary>
               Gets the number of channels in the audio represented by
               the current instance.
            </summary>
            <value>
               A <see cref="T:System.Int32" /> value containing the number of
               channels in the audio represented by the current
               instance.
            </value>
        </member>
        <member name="P:TagLib.Mpeg.AudioHeader.AudioFrameLength">
            <summary>
               Gets the length of the frames in the audio represented by
               the current instance.
            </summary>
            <value>
               A <see cref="T:System.Int32" /> value containing the length of the
               frames in the audio represented by the current instance.
            </value>
        </member>
        <member name="P:TagLib.Mpeg.AudioHeader.Duration">
            <summary>
               Gets the duration of the media represented by the current
               instance.
            </summary>
            <value>
               A <see cref="T:System.TimeSpan" /> containing the duration of the
               media represented by the current instance.
            </value>
            <remarks>
               If <see cref="P:TagLib.Mpeg.AudioHeader.XingHeader" /> is equal to <see
               cref="F:TagLib.Mpeg.XingHeader.Unknown" /> and <see
               cref="M:TagLib.Mpeg.AudioHeader.SetStreamLength(System.Int64)" /> has not been called, this value
               will not be correct.
               If <see cref="P:TagLib.Mpeg.AudioHeader.VBRIHeader" /> is equal to <see
               cref="F:TagLib.Mpeg.VBRIHeader.Unknown" /> and <see
               cref="M:TagLib.Mpeg.AudioHeader.SetStreamLength(System.Int64)" /> has not been called, this value
               will not be correct.
            </remarks>
        </member>
        <member name="P:TagLib.Mpeg.AudioHeader.Description">
            <summary>
               Gets a text description of the media represented by the
               current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> object containing a description
               of the media represented by the current instance.
            </value>
        </member>
        <member name="P:TagLib.Mpeg.AudioHeader.MediaTypes">
            <summary>
               Gets the types of media represented by the current
               instance.
            </summary>
            <value>
               Always <see cref="F:TagLib.MediaTypes.Audio" />.
            </value>
        </member>
        <member name="P:TagLib.Mpeg.AudioHeader.IsProtected">
            <summary>
               Gets whether or not the audio represented by the current
               instance is protected.
            </summary>
            <value>
               A <see cref="T:System.Boolean" /> value indicating whether or not the
               audio represented by the current instance is protected.
            </value>
        </member>
        <member name="P:TagLib.Mpeg.AudioHeader.IsPadded">
            <summary>
               Gets whether or not the audio represented by the current
               instance is padded.
            </summary>
            <value>
               A <see cref="T:System.Boolean" /> value indicating whether or not the
               audio represented by the current instance is padded.
            </value>
        </member>
        <member name="P:TagLib.Mpeg.AudioHeader.IsCopyrighted">
            <summary>
               Gets whether or not the audio represented by the current
               instance is copyrighted.
            </summary>
            <value>
               A <see cref="T:System.Boolean" /> value indicating whether or not the
               audio represented by the current instance is copyrighted.
            </value>
        </member>
        <member name="P:TagLib.Mpeg.AudioHeader.IsOriginal">
            <summary>
               Gets whether or not the audio represented by the current
               instance is original.
            </summary>
            <value>
               A <see cref="T:System.Boolean" /> value indicating whether or not the
               audio represented by the current instance is original.
            </value>
        </member>
        <member name="P:TagLib.Mpeg.AudioHeader.ChannelMode">
            <summary>
               Gets the MPEG audio channel mode of the audio represented
               by the current instance.
            </summary>
            <value>
               A <see cref="P:TagLib.Mpeg.AudioHeader.ChannelMode" /> value indicating the MPEG
               audio channel mode of the audio represented by the
               current instance.
            </value>
        </member>
        <member name="P:TagLib.Mpeg.AudioHeader.XingHeader">
            <summary>
               Gets the Xing header found in the audio represented by
               the current instance.
            </summary>
            <value>
               A <see cref="P:TagLib.Mpeg.AudioHeader.XingHeader" /> object containing the Xing
               header found in the audio represented by the current
               instance, or <see cref="F:TagLib.Mpeg.XingHeader.Unknown" /> if no
               header was found.
            </value>
        </member>
        <member name="P:TagLib.Mpeg.AudioHeader.VBRIHeader">
            <summary>
               Gets the VBRI header found in the audio represented by
               the current instance.
            </summary>
            <value>
               A <see cref="P:TagLib.Mpeg.AudioHeader.VBRIHeader" /> object containing the VBRI
               header found in the audio represented by the current
               instance, or <see cref="F:TagLib.Mpeg.VBRIHeader.Unknown" /> if no
               header was found.
            </value>
        </member>
        <member name="M:TagLib.Mpeg.AudioHeader.SetStreamLength(System.Int64)">
            <summary>
               Sets the length of the audio stream represented by the
               current instance.
            </summary>
            <param name="streamLength">
               A <see cref="T:System.Int64" /> value specifying the length in
               bytes of the audio stream represented by the current
               instance.
            </param>
            <remarks>
               The this value has been set, <see cref="P:TagLib.Mpeg.AudioHeader.Duration" /> will
               return an incorrect value.
            </remarks>
        </member>
        <member name="M:TagLib.Mpeg.AudioHeader.Find(TagLib.Mpeg.AudioHeader@,TagLib.File,System.Int64,System.Int32)">
            <summary>
               Searches for an audio header in a <see cref="T:TagLib.File"
               /> starting at a specified position and searching through
               a specified number of bytes.
            </summary>
            <param name="header">
               A <see cref="T:TagLib.Mpeg.AudioHeader" /> object in which the found
               header will be stored.
            </param>
            <param name="file">
               A <see cref="T:TagLib.File" /> object to search.
            </param>
            <param name="position">
               A <see cref="T:System.Int64" /> value specifying the seek position
               in <paramref name="file" /> at which to start searching.
            </param>
            <param name="length">
               A <see cref="T:System.Int32" /> value specifying the maximum number
               of bytes to search before aborting.
            </param>
            <returns>
               A <see cref="T:System.Boolean" /> value indicating whether or not a
               header was found.
            </returns>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="file" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:TagLib.Mpeg.AudioHeader.Find(TagLib.Mpeg.AudioHeader@,TagLib.File,System.Int64)">
            <summary>
               Searches for an audio header in a <see cref="T:TagLib.File"
               /> starting at a specified position and searching to the
               end of the file.
            </summary>
            <param name="header">
               A <see cref="T:TagLib.Mpeg.AudioHeader" /> object in which the found
               header will be stored.
            </param>
            <param name="file">
               A <see cref="T:TagLib.File" /> object to search.
            </param>
            <param name="position">
               A <see cref="T:System.Int64" /> value specifying the seek position
               in <paramref name="file" /> at which to start searching.
            </param>
            <returns>
               A <see cref="T:System.Boolean" /> value indicating whether or not a
               header was found.
            </returns>
            <remarks>
               Searching to the end of the file can be very, very slow
               especially for corrupt or non-MPEG files. It is
               recommended to use <see
               cref="M:AudioHeader.Find(AudioHeader,TagLib.File,long,int)" />
               instead.
            </remarks>
        </member>
        <member name="T:TagLib.Mpeg.Marker">
            <summary>
               Indicates the type of marker found in a MPEG file.
            </summary>
        </member>
        <member name="F:TagLib.Mpeg.Marker.Corrupt">
            <summary>
               An invalid marker.
            </summary>
        </member>
        <member name="F:TagLib.Mpeg.Marker.Zero">
            <summary>
               A zero value marker.
            </summary>
        </member>
        <member name="F:TagLib.Mpeg.Marker.SystemSyncPacket">
            <summary>
              A marker indicating a system sync packet.
            </summary>
        </member>
        <member name="F:TagLib.Mpeg.Marker.VideoSyncPacket">
            <summary>
              A marker indicating a video sync packet.
            </summary>
        </member>
        <member name="F:TagLib.Mpeg.Marker.SystemPacket">
            <summary>
              A marker indicating a system packet.
            </summary>
        </member>
        <member name="F:TagLib.Mpeg.Marker.PaddingPacket">
            <summary>
              A marker indicating a padding packet.
            </summary>
        </member>
        <member name="F:TagLib.Mpeg.Marker.AudioPacket">
            <summary>
              A marker indicating a audio packet.
            </summary>
        </member>
        <member name="F:TagLib.Mpeg.Marker.VideoPacket">
            <summary>
              A marker indicating a video packet.
            </summary>
        </member>
        <member name="F:TagLib.Mpeg.Marker.EndOfStream">
            <summary>
              A marker indicating the end of a stream.
            </summary>
        </member>
        <member name="T:TagLib.Mpeg.File">
            <summary>
               This class extends <see cref="T:TagLib.NonContainer.File" /> to
               provide tagging and properties support for MPEG-1, MPEG-2, and
               MPEG-2.5 video files.
            </summary>
            <remarks>
               A <see cref="T:TagLib.Id3v1.Tag" /> and <see
               cref="T:TagLib.Id3v2.Tag" /> will be added automatically to any
               file that doesn't contain one. This change does not effect the
               file until it is saved and can be reversed using the following
               method:
               <code>file.RemoveTags (file.TagTypes &amp; ~file.TagTypesOnDisk);</code>
            </remarks>
        </member>
        <member name="F:TagLib.Mpeg.File.version">
            <summary>
               Contains the MPEG version.
            </summary>
        </member>
        <member name="F:TagLib.Mpeg.File.audio_header">
            <summary>
               Contains the first audio header.
            </summary>
        </member>
        <member name="F:TagLib.Mpeg.File.video_header">
            <summary>
               Contains the first video header.
            </summary>
        </member>
        <member name="F:TagLib.Mpeg.File.video_found">
            <summary>
               Indicates whether or not audio was found.
            </summary>
        </member>
        <member name="F:TagLib.Mpeg.File.audio_found">
            <summary>
               Indicates whether or not video was found.
            </summary>
        </member>
        <member name="F:TagLib.Mpeg.File.start_time">
            <summary>
               Contains the start time of the file.
            </summary>
        </member>
        <member name="F:TagLib.Mpeg.File.end_time">
            <summary>
               Contains the end time of the file.
            </summary>
        </member>
        <member name="M:TagLib.Mpeg.File.#ctor(System.String,TagLib.ReadStyle)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Mpeg.File" /> for a specified path in the local file
               system and specified read style.
            </summary>
            <param name="path">
               A <see cref="T:System.String" /> object containing the path of the
               file to use in the new instance.
            </param>
            <param name="propertiesStyle">
               A <see cref="T:TagLib.ReadStyle" /> value specifying at what level
               of accuracy to read the media properties, or <see
               cref="F:TagLib.ReadStyle.None" /> to ignore the properties.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="path" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:TagLib.Mpeg.File.#ctor(System.String)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Mpeg.File" /> for a specified path in the local file
               system with an average read style.
            </summary>
            <param name="path">
               A <see cref="T:System.String" /> object containing the path of the
               file to use in the new instance.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="path" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:TagLib.Mpeg.File.#ctor(TagLib.File.IFileAbstraction,TagLib.ReadStyle)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Mpeg.File" /> for a specified file abstraction and
               specified read style.
            </summary>
            <param name="abstraction">
               A <see cref="T:TagLib.File.IFileAbstraction" /> object to use when
               reading from and writing to the file.
            </param>
            <param name="propertiesStyle">
               A <see cref="T:TagLib.ReadStyle" /> value specifying at what level
               of accuracy to read the media properties, or <see
               cref="F:TagLib.ReadStyle.None" /> to ignore the properties.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="abstraction" /> is <see langword="null"
               />.
            </exception>
        </member>
        <member name="M:TagLib.Mpeg.File.#ctor(TagLib.File.IFileAbstraction)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Mpeg.File" /> for a specified file abstraction with an
               average read style.
            </summary>
            <param name="abstraction">
               A <see cref="T:TagLib.File.IFileAbstraction" /> object to use when
               reading from and writing to the file.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="abstraction" /> is <see langword="null"
               />.
            </exception>
        </member>
        <member name="M:TagLib.Mpeg.File.GetTag(TagLib.TagTypes,System.Boolean)">
            <summary>
               Gets a tag of a specified type from the current instance,
               optionally creating a new tag if possible.
            </summary>
            <param name="type">
               A <see cref="T:TagLib.TagTypes" /> value indicating the
               type of tag to read.
            </param>
            <param name="create">
               A <see cref="T:System.Boolean" /> value specifying whether or not to
               try and create the tag if one is not found.
            </param>
            <returns>
               A <see cref="T:TagLib.Tag" /> object containing the tag that was
               found in or added to the current instance. If no
               matching tag was found and none was created, <see
               langword="null" /> is returned.
            </returns>
            <remarks>
               If a <see cref="T:TagLib.Id3v2.Tag" /> is added to the
               current instance, it will be placed at the start of the
               file. On the other hand, <see cref="T:TagLib.Id3v1.Tag" />
               <see cref="T:TagLib.Ape.Tag" /> will be added to the end of
               the file. All other tag types will be ignored.
            </remarks>
        </member>
        <member name="M:TagLib.Mpeg.File.ReadStart(System.Int64,TagLib.ReadStyle)">
            <summary>
               Reads format specific information at the start of the
               file.
            </summary>
            <param name="start">
               A <see cref="T:System.Int64" /> value containing the seek position
               at which the tags end and the media data begins.
            </param>
            <param name="propertiesStyle">
               A <see cref="T:TagLib.ReadStyle" /> value specifying at what level
               of accuracy to read the media properties, or <see
               cref="F:TagLib.ReadStyle.None" /> to ignore the properties.
            </param>
        </member>
        <member name="M:TagLib.Mpeg.File.ReadEnd(System.Int64,TagLib.ReadStyle)">
            <summary>
               Reads format specific information at the end of the
               file.
            </summary>
            <param name="end">
               A <see cref="T:System.Int64" /> value containing the seek position
               at which the media data ends and the tags begin.
            </param>
            <param name="propertiesStyle">
               A <see cref="T:TagLib.ReadStyle" /> value specifying at what level
               of accuracy to read the media properties, or <see
               cref="F:TagLib.ReadStyle.None" /> to ignore the properties.
            </param>
        </member>
        <member name="M:TagLib.Mpeg.File.ReadProperties(System.Int64,System.Int64,TagLib.ReadStyle)">
            <summary>
               Reads the audio properties from the file represented by
               the current instance.
            </summary>
            <param name="start">
               A <see cref="T:System.Int64" /> value containing the seek position
               at which the tags end and the media data begins.
            </param>
            <param name="end">
               A <see cref="T:System.Int64" /> value containing the seek position
               at which the media data ends and the tags begin.
            </param>
            <param name="propertiesStyle">
               A <see cref="T:TagLib.ReadStyle" /> value specifying at what level
               of accuracy to read the media properties, or <see
               cref="F:TagLib.ReadStyle.None" /> to ignore the properties.
            </param>
            <returns>
               A <see cref="T:TagLib.Properties" /> object describing the
               media properties of the file represented by the current
               instance.
            </returns>
        </member>
        <member name="M:TagLib.Mpeg.File.GetMarker(System.Int64)">
            <summary>
               Gets the marker at a specified position.
            </summary>
            <param name="position">
               A <see cref="T:System.Int64" /> value specifying the postion in the
               file represented by the current instance at which to
               read.
            </param>
            <returns>
               A <see cref="T:TagLib.Mpeg.Marker" /> value containing the type of
               marker found at the specified position.
            </returns>
            <exception cref="T:TagLib.CorruptFileException">
               A valid marker does not exist at the specified position.
            </exception>
        </member>
        <member name="M:TagLib.Mpeg.File.FindMarker(System.Int64@)">
            <summary>
               Finds the next marker starting at a specified position.
            </summary>
            <param name="position">
               A <see cref="T:System.Int64" /> value reference specifying the
               position at which to start searching. This value
               is updated to the position of the found marker.
            </param>
            <returns>
               A <see cref="T:TagLib.Mpeg.Marker" /> value containing the type of
               marker found at the specified position.
            </returns>
            <exception cref="T:TagLib.CorruptFileException">
               A valid marker could not be found.
            </exception>
        </member>
        <member name="M:TagLib.Mpeg.File.FindMarker(System.Int64@,TagLib.Mpeg.Marker)">
            <summary>
               Finds the next marker of a specified type, starting at a
               specified position.
            </summary>
            <param name="position">
               A <see cref="T:System.Int64" /> value reference specifying the
               position at which to start searching. This value
               is updated to the position of the found marker.
            </param>
            <param name="marker">
               A <see cref="T:TagLib.Mpeg.Marker" /> value specifying the type of
               marker to search for.
            </param>
            <exception cref="T:TagLib.CorruptFileException">
               A valid marker could not be found.
            </exception>
        </member>
        <member name="M:TagLib.Mpeg.File.RFindMarker(System.Int64@,TagLib.Mpeg.Marker)">
            <summary>
               Finds the previous marker of a specified type, starting
               at a specified position.
            </summary>
            <param name="position">
               A <see cref="T:System.Int64" /> value reference specifying the
               position at which to start searching. This value
               is updated to the position of the found marker.
            </param>
            <param name="marker">
               A <see cref="T:TagLib.Mpeg.Marker" /> value specifying the type of
               marker to search for.
            </param>
            <exception cref="T:TagLib.CorruptFileException">
               A valid marker could not be found.
            </exception>
        </member>
        <member name="M:TagLib.Mpeg.File.ReadSystemFile(System.Int64)">
            <summary>
               Reads the contents of the file as a system file, starting
               at a specified position.
            </summary>
            <param name="position">
               A <see cref="T:System.Int64" /> value specifying the postion in the
               file represented by the current instance at which to
               start reading.
            </param>
            <remarks>
               This method will stop when it has read both an audio and
               a video header, or once it's read 100 packets. This is to
               prevent the entire file from being read if it lacks one
               type of stream.
            </remarks>
        </member>
        <member name="M:TagLib.Mpeg.File.ReadAudioPacket(System.Int64@)">
            <summary>
               Reads an audio packet, assigning the audio header and
               advancing the position to the next packet position.
            </summary>
            <param name="position">
               A <see cref="T:System.Int64" /> value reference specifying the
               position at which to start reading the packet. This value
               is updated to the position of the next packet.
            </param>
        </member>
        <member name="M:TagLib.Mpeg.File.ReadVideoPacket(System.Int64@)">
            <summary>
               Reads a video packet, assigning the video header and
               advancing the position to the next packet position.
            </summary>
            <param name="position">
               A <see cref="T:System.Int64" /> value reference specifying the
               position at which to start reading the packet. This value
               is updated to the position of the next packet.
            </param>
        </member>
        <member name="M:TagLib.Mpeg.File.ReadSystemSyncPacket(System.Int64@)">
            <summary>
               Reads a system sync packet, filling in version
               information and the first timestamp value, advancing the
               position to the next packet position.
            </summary>
            <param name="position">
               A <see cref="T:System.Int64" /> value reference specifying the
               position at which to start reading the packet. If the
               method is called without exception, this is updated to
               the position of the next packet.
            </param>
            <exception cref="T:TagLib.UnsupportedFormatException">
               The MPEG version contained in the packet is unknown.
            </exception>
        </member>
        <member name="M:TagLib.Mpeg.File.ReadTimestamp(System.Int64)">
            <summary>
               Reads an MPEG timestamp from a specified position in the
               file represented by the current instance.
            </summary>
            <param name="position">
               A <see cref="T:System.Int64" /> value containing the position in
               the file at which to read. This should be immediately
               following a system sync packet marker.
            </param>
            <returns>
               A <see cref="T:System.Double" /> value containing the read time in
               seconds.
            </returns>
        </member>
        <member name="T:TagLib.Mpeg.VBRIHeader">
            <summary>
               This structure provides information about a variable bitrate MPEG
               audio stream encoded by the Fraunhofer Encoder.
            </summary>
        </member>
        <member name="F:TagLib.Mpeg.VBRIHeader.FileIdentifier">
            <summary>
               Contains te VBRI identifier.
            </summary>
            <value>
               "VBRI"
            </value>
        </member>
        <member name="F:TagLib.Mpeg.VBRIHeader.Unknown">
            <summary>
               An empty and unset VBRI header.
            </summary>
        </member>
        <member name="M:TagLib.Mpeg.VBRIHeader.#ctor(System.UInt32,System.UInt32)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Mpeg.VBRIHeader" /> with a specified frame count and
               size.
            </summary>
            <param name="frame">
               A <see cref="T:System.UInt32" /> value specifying the frame count of
               the audio represented by the new instance.
            </param>
            <param name="size">
               A <see cref="T:System.UInt32" /> value specifying the stream size of
               the audio represented by the new instance.
            </param>
        </member>
        <member name="M:TagLib.Mpeg.VBRIHeader.#ctor(TagLib.ByteVector)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Mpeg.VBRIHeader" /> by reading its raw contents.
            </summary>
            <param name="data">
               A <see cref="T:TagLib.ByteVector" /> object containing the raw
               VBRI header.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="data" /> is <see langword="null" />.
            </exception>
            <exception cref="T:TagLib.CorruptFileException">
               <paramref name="data" /> does not start with <see
               cref="F:TagLib.Mpeg.VBRIHeader.FileIdentifier" />.
            </exception>
        </member>
        <member name="P:TagLib.Mpeg.VBRIHeader.TotalFrames">
            <summary>
               Gets the total number of frames in the file, as indicated
               by the current instance.
            </summary>
            <value>
               A <see cref="T:System.UInt32" /> value containing the number of
               frames in the file, or <c>0</c> if not specified.
            </value>
        </member>
        <member name="P:TagLib.Mpeg.VBRIHeader.TotalSize">
            <summary>
               Gets the total size of the file, as indicated by the
               current instance.
            </summary>
            <value>
               A <see cref="T:System.UInt32" /> value containing the total size of
               the file, or <c>0</c> if not specified.
            </value>
        </member>
        <member name="P:TagLib.Mpeg.VBRIHeader.Present">
            <summary>
               Gets whether or not a physical VBRI header is present in
               the file.
            </summary>
            <value>
               A <see cref="T:System.Boolean" /> value indicating whether or not the
               current instance represents a physical VBRI header.
            </value>
        </member>
        <member name="M:TagLib.Mpeg.VBRIHeader.VBRIHeaderOffset">
            <summary>
               Gets the offset at which a VBRI header would appear in an
               MPEG audio packet.
               Always 32 bytes after the end of the first MPEG Header.
            </summary>
            <returns>
               A <see cref="T:System.Int32" /> value indicating the offset in an
               MPEG audio packet at which the VBRI header would appear.
            </returns>
        </member>
        <member name="T:TagLib.Mpeg.VideoHeader">
            <summary>
               This structure implements <see cref="T:TagLib.IVideoCodec" /> and provides
               information about an MPEG video stream.
            </summary>
        </member>
        <member name="F:TagLib.Mpeg.VideoHeader.frame_rates">
            <summary>
               Contains frame rate values.
            </summary>
        </member>
        <member name="F:TagLib.Mpeg.VideoHeader.frame_rate_index">
            <summary>
               Contains the index in <see cref="F:TagLib.Mpeg.VideoHeader.frame_rates" /> of the
               video frame rate.
            </summary>
        </member>
        <member name="M:TagLib.Mpeg.VideoHeader.#ctor(TagLib.File,System.Int64)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Mpeg.VideoHeader" /> by reading it from a specified
               location in a specified file.
            </summary>
            <param name="file">
               A <see cref="T:TagLib.File" /> object to read from.
            </param>
            <param name="position">
               A <see cref="T:System.Int64" /> value indicating the position in
               <paramref name="file" /> at which the header begins.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="file" /> is <see langword="null" />.
            </exception>
            <exception cref="T:TagLib.CorruptFileException">
               Insufficient data could be read for the header.
            </exception>
        </member>
        <member name="P:TagLib.Mpeg.VideoHeader.Duration">
            <summary>
               Gets the duration of the media represented by the current
               instance.
            </summary>
            <value>
               Always <see cref="F:System.TimeSpan.Zero" />.
            </value>
        </member>
        <member name="P:TagLib.Mpeg.VideoHeader.MediaTypes">
            <summary>
               Gets the types of media represented by the current
               instance.
            </summary>
            <value>
               Always <see cref="F:TagLib.MediaTypes.Video" />.
            </value>
        </member>
        <member name="P:TagLib.Mpeg.VideoHeader.Description">
            <summary>
               Gets a text description of the media represented by the
               current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> object containing a description
               of the media represented by the current instance.
            </value>
        </member>
        <member name="P:TagLib.Mpeg.VideoHeader.VideoWidth">
            <summary>
               Gets the width of the video represented by the current
               instance.
            </summary>
            <value>
               A <see cref="T:System.Int32" /> value containing the width of the
               video represented by the current instance.
            </value>
        </member>
        <member name="P:TagLib.Mpeg.VideoHeader.VideoHeight">
            <summary>
               Gets the height of the video represented by the current
               instance.
            </summary>
            <value>
               A <see cref="T:System.Int32" /> value containing the height of the
               video represented by the current instance.
            </value>
        </member>
        <member name="P:TagLib.Mpeg.VideoHeader.VideoFrameRate">
            <summary>
               Gets the frame rate of the video represented by the
               current instance.
            </summary>
            <value>
               A <see cref="T:System.Double" /> value containing the frame rate
               of the video represented by the current instance.
            </value>
        </member>
        <member name="P:TagLib.Mpeg.VideoHeader.VideoBitrate">
            <summary>
               Gets the bitrate of the video represented by the current
               instance.
            </summary>
            <value>
               A <see cref="T:System.Int32" /> value containing a bitrate of the
               video represented by the current instance.
            </value>
        </member>
        <member name="T:TagLib.Mpeg.XingHeader">
            <summary>
               This structure provides information about a variable bitrate MPEG
               audio stream.
            </summary>
        </member>
        <member name="F:TagLib.Mpeg.XingHeader.FileIdentifier">
            <summary>
               Contains te Xing identifier.
            </summary>
            <value>
               "Xing"
            </value>
        </member>
        <member name="F:TagLib.Mpeg.XingHeader.Unknown">
            <summary>
               An empty and unset Xing header.
            </summary>
        </member>
        <member name="M:TagLib.Mpeg.XingHeader.#ctor(System.UInt32,System.UInt32)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Mpeg.XingHeader" /> with a specified frame count and
               size.
            </summary>
            <param name="frame">
               A <see cref="T:System.UInt32" /> value specifying the frame count of
               the audio represented by the new instance.
            </param>
            <param name="size">
               A <see cref="T:System.UInt32" /> value specifying the stream size of
               the audio represented by the new instance.
            </param>
        </member>
        <member name="M:TagLib.Mpeg.XingHeader.#ctor(TagLib.ByteVector)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Mpeg.XingHeader" /> by reading its raw contents.
            </summary>
            <param name="data">
               A <see cref="T:TagLib.ByteVector" /> object containing the raw
               Xing header.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="data" /> is <see langword="null" />.
            </exception>
            <exception cref="T:TagLib.CorruptFileException">
               <paramref name="data" /> does not start with <see
               cref="F:TagLib.Mpeg.XingHeader.FileIdentifier" />.
            </exception>
        </member>
        <member name="P:TagLib.Mpeg.XingHeader.TotalFrames">
            <summary>
               Gets the total number of frames in the file, as indicated
               by the current instance.
            </summary>
            <value>
               A <see cref="T:System.UInt32" /> value containing the number of
               frames in the file, or <c>0</c> if not specified.
            </value>
        </member>
        <member name="P:TagLib.Mpeg.XingHeader.TotalSize">
            <summary>
               Gets the total size of the file, as indicated by the
               current instance.
            </summary>
            <value>
               A <see cref="T:System.UInt32" /> value containing the total size of
               the file, or <c>0</c> if not specified.
            </value>
        </member>
        <member name="P:TagLib.Mpeg.XingHeader.Present">
            <summary>
               Gets whether or not a physical Xing header is present in
               the file.
            </summary>
            <value>
               A <see cref="T:System.Boolean" /> value indicating whether or not the
               current instance represents a physical Xing header.
            </value>
        </member>
        <member name="M:TagLib.Mpeg.XingHeader.XingHeaderOffset(TagLib.Mpeg.Version,TagLib.Mpeg.ChannelMode)">
            <summary>
               Gets the offset at which a Xing header would appear in an
               MPEG audio packet based on the version and channel mode.
            </summary>
            <param name="version">
               A <see cref="T:TagLib.Mpeg.Version" /> value specifying the version of
               the MPEG audio packet.
            </param>
            <param name="channelMode">
               A <see cref="T:TagLib.Mpeg.ChannelMode" /> value specifying the channel
               mode of the MPEG audio packet.
            </param>
            <returns>
               A <see cref="T:System.Int32" /> value indicating the offset in an
               MPEG audio packet at which the Xing header would appear.
            </returns>
        </member>
        <member name="T:TagLib.NonContainer.EndTag">
            <summary>
               This class extends <see cref="T:TagLib.CombinedTag" />, providing support
               for accessing and modifying a collection of tags appearing at the
               end of a file.
            </summary>
            <remarks>
               <para>This class is used by <see cref="T:TagLib.NonContainer.File"
               /> to read all the tags appearing at the end of the file but
               could be used by other classes. It currently supports ID3v1,
               ID3v2, and APE tags.</para>
            </remarks>
        </member>
        <member name="F:TagLib.NonContainer.EndTag.file">
            <summary>
               Contains the file to operate on.
            </summary>
        </member>
        <member name="F:TagLib.NonContainer.EndTag.read_size">
            <summary>
               Contains the number of bytes that must be read to
               hold all applicable indicators.
            </summary>
        </member>
        <member name="M:TagLib.NonContainer.EndTag.#ctor(TagLib.File)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.NonContainer.EndTag" /> for a specified <see cref="T:TagLib.File"
               />.
            </summary>
            <param name="file">
               A <see cref="T:TagLib.File" /> object on which the new
               instance will perform its operations.
            </param>
            <remarks>
               Constructing a new instance does not automatically read
               the contents from the disk. <see cref="M:TagLib.NonContainer.EndTag.Read(TagLib.ReadStyle)" /> must be
               called to read the tags.
            </remarks>
        </member>
        <member name="P:TagLib.NonContainer.EndTag.TotalSize">
            <summary>
               Gets the total size of the tags located at the end of the
               file by reading from the file.
            </summary>
        </member>
        <member name="M:TagLib.NonContainer.EndTag.Read(TagLib.ReadStyle)">
            <summary>
               Reads the tags stored at the end of the file into the
               current instance.
            </summary>
            <returns>
               A <see cref="T:System.Int64" /> value indicating the seek position
               in the file at which the read tags begin. This also
               marks the seek position at which the media ends.
            </returns>
        </member>
        <member name="M:TagLib.NonContainer.EndTag.Render">
            <summary>
               Renders the tags contained in the current instance.
            </summary>
            <returns>
               A <see cref="T:TagLib.ByteVector" /> object containing the
               physical representation of the tags stored in the current
               instance.
            </returns>
            <remarks>
               The tags are rendered in the order that they are stored
               in the current instance.
            </remarks>
        </member>
        <member name="M:TagLib.NonContainer.EndTag.Write">
            <summary>
               Writes the tags contained in the current instance to the
               end of the file that created it, overwriting the existing
               tags.
            </summary>
            <returns>
               A <see cref="T:System.Int64" /> value indicating the seek position
               in the file at which the written tags begin. This also
               marks the seek position at which the media ends.
            </returns>
        </member>
        <member name="M:TagLib.NonContainer.EndTag.RemoveTags(TagLib.TagTypes)">
            <summary>
               Removes a set of tag types from the current instance.
            </summary>
            <param name="types">
               A bitwise combined <see cref="T:TagLib.TagTypes" /> value
               containing tag types to be removed from the file.
            </param>
            <remarks>
               In order to remove all tags from a file, pass <see
               cref="F:TagLib.TagTypes.AllTags" /> as <paramref name="types" />.
            </remarks>
        </member>
        <member name="M:TagLib.NonContainer.EndTag.AddTag(TagLib.TagTypes,TagLib.Tag)">
            <summary>
               Adds a tag of a specified type to the current instance,
               optionally copying values from an existing type.
            </summary>
            <param name="type">
               A <see cref="T:TagLib.TagTypes" /> value specifying the type of
               tag to add to the current instance. At the time of this
               writing, this is limited to <see cref="F:TagLib.TagTypes.Ape" />,
               <see cref="F:TagLib.TagTypes.Id3v1" />, and <see
               cref="F:TagLib.TagTypes.Id3v2" />.
            </param>
            <param name="copy">
               A <see cref="T:TagLib.Tag" /> to copy values from using
               <see cref="M:TagLib.Tag.CopyTo(TagLib.Tag,System.Boolean)" />, or <see
               langword="null" /> if no tag is to be copied.
            </param>
            <returns>
               The <see cref="T:TagLib.Tag" /> object added to the current
               instance, or <see langword="null" /> if it couldn't be
               created.
            </returns>
            <remarks>
               ID3v2 tags are added at the end of the current instance,
               while other tags are added to the beginning.
            </remarks>
        </member>
        <member name="M:TagLib.NonContainer.EndTag.ReadTag(System.Int64@,TagLib.ReadStyle)">
            <summary>
               Reads a tag ending at a specified position and moves the
               cursor to its start position.
            </summary>
            <param name="end">
               A <see cref="T:System.Int64" /> value reference specifying at what
               position the potential tag ends at. If a tag is found,
               this value will be updated to the position at which the
               found tag starts.
            </param>
            <param name="style">
               A <see cref="T:TagLib.ReadStyle"/> value specifying how the media
               data is to be read into the current instance.
            </param>
            <returns>
               A <see cref="T:TagLib.Tag" /> object representing the tag
               found at the specified position, or <see langword="null"
               /> if no tag was found.
            </returns>
        </member>
        <member name="M:TagLib.NonContainer.EndTag.ReadTagInfo(System.Int64@)">
            <summary>
               Looks for a tag ending at a specified position and moves
               the cursor to its start position.
            </summary>
            <param name="position">
               A <see cref="T:System.Int64" /> value reference specifying at what
               position the potential tag ends. If a tag is found,
               this value will be updated to the position at which the
               found tag starts.
            </param>
            <returns>
               A <see cref="T:TagLib.TagTypes" /> value specifying the
               type of tag found at the specified position, or <see
               cref="F:TagLib.TagTypes.None" /> if no tag was found.
            </returns>
        </member>
        <member name="T:TagLib.NonContainer.File">
            <summary>
               This abstract class extends <see cref="T:TagLib.File" /> to provide
               tagging and properties for files that contain an indeterminite
               number of tags at their beginning or end.
            </summary>
            <remarks>
               <para>When extending this class, <see cref="M:TagLib.NonContainer.File.ReadStart(System.Int64,TagLib.ReadStyle)" />, <see
               cref="M:TagLib.NonContainer.File.ReadEnd(System.Int64,TagLib.ReadStyle)" />, and <see cref="M:TagLib.NonContainer.File.ReadProperties(System.Int64,System.Int64,TagLib.ReadStyle)" /> should be
               overrided methods that read the format specific information from
               the file.</para>
               <para>The file is read upon construction in the following
               manner:</para>
               <list type="number">
                  <item><term>The file is opened for reading.</term></item>
                  <item><term>The tags at the start of the file are
                  read.</term></item>
                  <item><term><see cref="M:TagLib.NonContainer.File.ReadStart(System.Int64,TagLib.ReadStyle)" /> is called.</term></item>
                  <item><term>The tags at the end of the file are
                  read.</term></item>
                  <item><term><see cref="M:TagLib.NonContainer.File.ReadEnd(System.Int64,TagLib.ReadStyle)" /> is called.</term></item>
                  <item><term>If reading with a style other than <see
                  cref="F:TagLib.ReadStyle.None" />, <see cref="M:TagLib.NonContainer.File.ReadProperties(System.Int64,System.Int64,TagLib.ReadStyle)" /> is
                  called.</term></item>
                  <item><term>The file is closed.</term></item>
               </list>
            </remarks>
        </member>
        <member name="F:TagLib.NonContainer.File.tag">
            <summary>
               Contains the tags.
            </summary>
        </member>
        <member name="F:TagLib.NonContainer.File.properties">
            <summary>
               Contains the media properties.
            </summary>
        </member>
        <member name="M:TagLib.NonContainer.File.#ctor(System.String,TagLib.ReadStyle)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.NonContainer.File" /> for a specified path in the local file
               system and specified read style.
            </summary>
            <param name="path">
               A <see cref="T:System.String" /> object containing the path of the
               file to use in the new instance.
            </param>
            <param name="propertiesStyle">
               A <see cref="T:TagLib.ReadStyle" /> value specifying at what level
               of accuracy to read the media properties, or <see
               cref="F:TagLib.ReadStyle.None" /> to ignore the properties.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="path" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:TagLib.NonContainer.File.#ctor(System.String)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.NonContainer.File" /> for a specified path in the local file
               system with an average read style.
            </summary>
            <param name="path">
               A <see cref="T:System.String" /> object containing the path of the
               file to use in the new instance.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="path" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:TagLib.NonContainer.File.#ctor(TagLib.File.IFileAbstraction,TagLib.ReadStyle)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.NonContainer.File" /> for a specified file abstraction and
               specified read style.
            </summary>
            <param name="abstraction">
               A <see cref="T:TagLib.File.IFileAbstraction" /> object to use when
               reading from and writing to the file.
            </param>
            <param name="propertiesStyle">
               A <see cref="T:TagLib.ReadStyle" /> value specifying at what level
               of accuracy to read the media properties, or <see
               cref="F:TagLib.ReadStyle.None" /> to ignore the properties.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="abstraction" /> is <see langword="null"
               />.
            </exception>
        </member>
        <member name="M:TagLib.NonContainer.File.#ctor(TagLib.File.IFileAbstraction)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.NonContainer.File" /> for a specified file abstraction with an
               average read style.
            </summary>
            <param name="abstraction">
               A <see cref="T:TagLib.File.IFileAbstraction" /> object to use when
               reading from and writing to the file.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="abstraction" /> is <see langword="null"
               />.
            </exception>
        </member>
        <member name="P:TagLib.NonContainer.File.Tag">
            <summary>
               Gets a abstract representation of all tags stored in the
               current instance.
            </summary>
            <value>
               A <see cref="T:TagLib.Tag" /> object representing all tags
               stored in the current instance.
            </value>
        </member>
        <member name="P:TagLib.NonContainer.File.Properties">
            <summary>
               Gets the media properties of the file represented by the
               current instance.
            </summary>
            <value>
               A <see cref="T:TagLib.Properties" /> object containing the
               media properties of the file represented by the current
               instance.
            </value>
        </member>
        <member name="M:TagLib.NonContainer.File.Save">
            <summary>
               Saves the changes made in the current instance to the
               file it represents.
            </summary>
        </member>
        <member name="M:TagLib.NonContainer.File.RemoveTags(TagLib.TagTypes)">
            <summary>
               Removes a set of tag types from the current instance.
            </summary>
            <param name="types">
               A bitwise combined <see cref="T:TagLib.TagTypes" /> value
               containing tag types to be removed from the file.
            </param>
            <remarks>
               In order to remove all tags from a file, pass <see
               cref="F:TagLib.TagTypes.AllTags" /> as <paramref name="types" />.
            </remarks>
        </member>
        <member name="P:TagLib.NonContainer.File.StartTag">
            <summary>
               Gets the collection of tags appearing at the start of the
               file.
            </summary>
            <value>
               A <see cref="T:TagLib.NonContainer.StartTag" /> storing the
               tags for the start of the file.
            </value>
        </member>
        <member name="P:TagLib.NonContainer.File.EndTag">
            <summary>
               Gets the collection of tags appearing at the end of the
               file.
            </summary>
            <value>
               A <see cref="T:TagLib.NonContainer.EndTag" /> storing the
               tags for the end of the file.
            </value>
        </member>
        <member name="M:TagLib.NonContainer.File.ReadStart(System.Int64,TagLib.ReadStyle)">
            <summary>
               Reads format specific information at the start of the
               file.
            </summary>
            <param name="start">
               A <see cref="T:System.Int64" /> value containing the seek position
               at which the tags end and the media data begins.
            </param>
            <param name="propertiesStyle">
               A <see cref="T:TagLib.ReadStyle" /> value specifying at what level
               of accuracy to read the media properties, or <see
               cref="F:TagLib.ReadStyle.None" /> to ignore the properties.
            </param>
            <remarks>
               This method is called by the constructor immediately
               after the tags at the start of the file have been read
               and as such (so the internal seek mechanism is close to
               the start). It should be used for reading any content
               specific information, such as an audio header from the
               start of the file.
            </remarks>
        </member>
        <member name="M:TagLib.NonContainer.File.ReadEnd(System.Int64,TagLib.ReadStyle)">
            <summary>
               Reads format specific information at the end of the
               file.
            </summary>
            <param name="end">
               A <see cref="T:System.Int64" /> value containing the seek position
               at which the media data ends and the tags begin.
            </param>
            <param name="propertiesStyle">
               A <see cref="T:TagLib.ReadStyle" /> value specifying at what level
               of accuracy to read the media properties, or <see
               cref="F:TagLib.ReadStyle.None" /> to ignore the properties.
            </param>
            <remarks>
               This method is called by the constructor immediately
               after the tags at the end of the file have been read
               and as such (so the internal seek mechanism is close to
               the end). It should be used for reading any content
               specific information, such as an audio header from the
               end of the file.
            </remarks>
        </member>
        <member name="M:TagLib.NonContainer.File.ReadProperties(System.Int64,System.Int64,TagLib.ReadStyle)">
            <summary>
               Reads the audio properties from the file represented by
               the current instance.
            </summary>
            <param name="start">
               A <see cref="T:System.Int64" /> value containing the seek position
               at which the tags end and the media data begins.
            </param>
            <param name="end">
               A <see cref="T:System.Int64" /> value containing the seek position
               at which the media data ends and the tags begin.
            </param>
            <param name="propertiesStyle">
               A <see cref="T:TagLib.ReadStyle" /> value specifying at what level
               of accuracy to read the media properties, or <see
               cref="F:TagLib.ReadStyle.None" /> to ignore the properties.
            </param>
            <returns>
               A <see cref="T:TagLib.Properties" /> object describing the
               media properties of the file represented by the current
               instance.
            </returns>
            <remarks>
               This method is called ONLY IF the file is constructed
               with a read style other than <see cref="F:TagLib.ReadStyle.None"
               />, and as such MUST NOT return <see langword="null" />.
               It is guaranteed that <see cref="M:TagLib.NonContainer.File.ReadStart(System.Int64,TagLib.ReadStyle)" /> and <see
               cref="M:TagLib.NonContainer.File.ReadEnd(System.Int64,TagLib.ReadStyle)" /> will have been called first and this
               method should be strictly used to perform final
               processing on already read data.
            </remarks>
        </member>
        <member name="M:TagLib.NonContainer.File.Read(TagLib.ReadStyle)">
            <summary>
               Reads the file with a specified read style.
            </summary>
            <param name="propertiesStyle">
               A <see cref="T:TagLib.ReadStyle" /> value specifying at what level
               of accuracy to read the media properties, or <see
               cref="F:TagLib.ReadStyle.None" /> to ignore the properties.
            </param>
        </member>
        <member name="T:TagLib.NonContainer.StartTag">
            <summary>
               This class extends <see cref="T:TagLib.CombinedTag" />, providing support
               for accessing and modifying a collection of tags appearing at the
               start of a file.
            </summary>
            <remarks>
               <para>This class is used by <see cref="T:TagLib.NonContainer.File"
               /> to read all the tags appearing at the start of the file but
               could be used by other classes. It currently supports ID3v2
               and APE tags.</para>
            </remarks>
        </member>
        <member name="F:TagLib.NonContainer.StartTag.file">
            <summary>
               Contains the file to operate on.
            </summary>
        </member>
        <member name="F:TagLib.NonContainer.StartTag.read_size">
            <summary>
               Contains the number of bytes that must be read to
               hold all applicable indicators.
            </summary>
        </member>
        <member name="M:TagLib.NonContainer.StartTag.#ctor(TagLib.File)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.NonContainer.StartTag" /> for a specified <see
               cref="T:TagLib.File" />.
            </summary>
            <param name="file">
               A <see cref="T:TagLib.File" /> object on which the new
               instance will perform its operations.
            </param>
            <remarks>
               Constructing a new instance does not automatically read
               the contents from the disk. <see cref="M:TagLib.NonContainer.StartTag.Read(TagLib.ReadStyle)" /> must be
               called to read the tags.
            </remarks>
        </member>
        <member name="P:TagLib.NonContainer.StartTag.TotalSize">
            <summary>
               Gets the total size of the tags located at the end of the
               file by reading from the file.
            </summary>
        </member>
        <member name="M:TagLib.NonContainer.StartTag.Read(TagLib.ReadStyle)">
            <summary>
               Reads the tags stored at the start of the file into the
               current instance.
            </summary>
            <returns>
               A <see cref="T:System.Int64" /> value indicating the seek position
               in the file at which the read tags end. This also
               marks the seek position at which the media begins.
            </returns>
        </member>
        <member name="M:TagLib.NonContainer.StartTag.Render">
            <summary>
               Renders the tags contained in the current instance.
            </summary>
            <returns>
               A <see cref="T:TagLib.ByteVector" /> object containing the
               physical representation of the tags stored in the current
               instance.
            </returns>
            <remarks>
               The tags are rendered in the order that they are stored
               in the current instance.
            </remarks>
        </member>
        <member name="M:TagLib.NonContainer.StartTag.Write">
            <summary>
               Writes the tags contained in the current instance to the
               beginning of the file that created it, overwriting the
               existing tags.
            </summary>
            <returns>
               A <see cref="T:System.Int64" /> value indicating the seek position
               in the file at which the written tags end. This also
               marks the seek position at which the media begins.
            </returns>
        </member>
        <member name="M:TagLib.NonContainer.StartTag.RemoveTags(TagLib.TagTypes)">
            <summary>
               Removes a set of tag types from the current instance.
            </summary>
            <param name="types">
               A bitwise combined <see cref="T:TagLib.TagTypes" /> value
               containing tag types to be removed from the file.
            </param>
            <remarks>
               In order to remove all tags from a file, pass <see
               cref="F:TagLib.TagTypes.AllTags" /> as <paramref name="types" />.
            </remarks>
        </member>
        <member name="M:TagLib.NonContainer.StartTag.AddTag(TagLib.TagTypes,TagLib.Tag)">
            <summary>
               Adds a tag of a specified type to the current instance,
               optionally copying values from an existing type.
            </summary>
            <param name="type">
               A <see cref="T:TagLib.TagTypes" /> value specifying the type of
               tag to add to the current instance. At the time of this
               writing, this is limited to <see cref="F:TagLib.TagTypes.Ape" />
               and <see cref="F:TagLib.TagTypes.Id3v2" />.
            </param>
            <param name="copy">
               A <see cref="T:TagLib.Tag" /> to copy values from using
               <see cref="M:TagLib.Tag.CopyTo(TagLib.Tag,System.Boolean)" />, or <see
               langword="null" /> if no tag is to be copied.
            </param>
            <returns>
               The <see cref="T:TagLib.Tag" /> object added to the current
               instance, or <see langword="null" /> if it couldn't be
               created.
            </returns>
            <remarks>
               ID3v2 tags are added at the end of the current instance,
               while other tags are added to the beginning.
            </remarks>
        </member>
        <member name="M:TagLib.NonContainer.StartTag.ReadTag(System.Int64@,TagLib.ReadStyle)">
            <summary>
               Reads a tag starting at a specified position and moves the
               cursor to its start position.
            </summary>
            <param name="start">
               A <see cref="T:System.Int64" /> value reference specifying at what
               position the potential tag starts. If a tag is found,
               this value will be updated to the position at which the
               found tag ends.
            </param>
            <param name="style">
               A <see cref="T:TagLib.ReadStyle"/> value specifying how the media
               data is to be read into the current instance.
            </param>
            <returns>
               A <see cref="T:TagLib.Tag" /> object representing the tag
               found at the specified position, or <see langword="null"
               /> if no tag was found.
            </returns>
        </member>
        <member name="M:TagLib.NonContainer.StartTag.ReadTagInfo(System.Int64@)">
            <summary>
               Looks for a tag starting at a specified position and moves
               the cursor to its start position.
            </summary>
            <param name="position">
               A <see cref="T:System.Int64" /> value reference specifying at what
               position the potential tag starts. If a tag is found,
               this value will be updated to the position at which the
               found tag ends.
            </param>
            <returns>
               A <see cref="T:TagLib.TagTypes" /> value specifying the
               type of tag found at the specified position, or <see
               cref="F:TagLib.TagTypes.None" /> if no tag was found.
            </returns>
        </member>
        <member name="T:TagLib.NonContainer.Tag">
            <summary>
               This class extends <see cref="T:TagLib.CombinedTag" />, combining <see
               cref="P:TagLib.NonContainer.Tag.StartTag" /> and <see cref="P:TagLib.NonContainer.Tag.EndTag" /> in such a way as
               their children appear as its children.
            </summary>
        </member>
        <member name="M:TagLib.NonContainer.Tag.#ctor(TagLib.NonContainer.File)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.NonContainer.Tag" /> for a specified <see cref="T:TagLib.File" />.
            </summary>
            <param name="file">
               A <see cref="T:TagLib.File" /> object on which the new
               instance will perform its operations.
            </param>
            <remarks>
               Constructing a new instance does not automatically read
               the contents from the disk. <see cref="M:TagLib.NonContainer.Tag.Read(System.Int64@,System.Int64@)" /> must be
               called to read the tags.
            </remarks>
        </member>
        <member name="P:TagLib.NonContainer.Tag.StartTag">
            <summary>
               Gets the collection of tags appearing at the start of the
               file.
            </summary>
            <value>
               A <see cref="T:TagLib.NonContainer.StartTag" /> storing the
               tags for the start of the file.
            </value>
        </member>
        <member name="P:TagLib.NonContainer.Tag.EndTag">
            <summary>
               Gets the collection of tags appearing at the end of the
               file.
            </summary>
            <value>
               A <see cref="T:TagLib.NonContainer.EndTag" /> storing the
               tags for the end of the file.
            </value>
        </member>
        <member name="P:TagLib.NonContainer.Tag.TagTypes">
            <summary>
               Gets the tag types contained in the current instance.
            </summary>
            <value>
               A bitwise combined <see cref="T:TagLib.TagTypes" />
               containing the tag types contained in the current
               instance.
            </value>
        </member>
        <member name="P:TagLib.NonContainer.Tag.Tags">
            <summary>
               Gets the tags combined in the current instance.
            </summary>
            <value>
               A <see cref="T:TagLib.Tag[]" /> containing the tags combined in
               the current instance.
            </value>
            <remarks>
               This contains the combined children of <see
               cref="P:TagLib.NonContainer.Tag.StartTag" /> and <see cref="P:TagLib.NonContainer.Tag.EndTag" />.
            </remarks>
        </member>
        <member name="M:TagLib.NonContainer.Tag.GetTag(TagLib.TagTypes)">
            <summary>
               Gets a tag of a specified type from the current instance.
            </summary>
            <param name="type">
               A <see cref="T:TagLib.TagTypes" /> value indicating the
               type of tag to read.
            </param>
            <returns>
               A <see cref="T:TagLib.NonContainer.Tag" /> object containing the tag that was
               found in the current instance. If no
               matching tag was found and none was created, <see
               langword="null" /> is returned.
            </returns>
        </member>
        <member name="M:TagLib.NonContainer.Tag.RemoveTags(TagLib.TagTypes)">
            <summary>
               Removes a set of tag types from the current instance.
            </summary>
            <param name="types">
               A bitwise combined <see cref="T:TagLib.TagTypes" /> value
               containing tag types to be removed from the file.
            </param>
            <remarks>
               In order to remove all tags from a file, pass <see
               cref="F:TagLib.TagTypes.AllTags" /> as <paramref name="types" />.
            </remarks>
        </member>
        <member name="M:TagLib.NonContainer.Tag.Read(System.Int64@,System.Int64@)">
            <summary>
               Reads the tags at the start and end of the file.
            </summary>
            <param name="start">
               A <see cref="T:System.Int64" /> value reference which will be set
               to contain the seek position in the file at which the
               tags at the start end. This also marks the seek position
               at which the media begins.
            </param>
            <param name="end">
               A <see cref="T:System.Int64" /> value reference which will be set
               to contain the seek position in the file at which the
               tags at the end begin. This also marks the seek position
               at which the media ends.
            </param>
        </member>
        <member name="M:TagLib.NonContainer.Tag.ReadStart(TagLib.ReadStyle)">
            <summary>
               Reads the tags stored at the start of the file into the
               current instance.
            </summary>
            <returns>
               A <see cref="T:System.Int64" /> value indicating the seek position
               in the file at which the read tags end. This also
               marks the seek position at which the media begins.
            </returns>
        </member>
        <member name="M:TagLib.NonContainer.Tag.ReadEnd(TagLib.ReadStyle)">
            <summary>
               Reads the tags stored at the end of the file into the
               current instance.
            </summary>
            <returns>
               A <see cref="T:System.Int64" /> value indicating the seek position
               in the file at which the read tags begin. This also
               marks the seek position at which the media ends.
            </returns>
        </member>
        <member name="M:TagLib.NonContainer.Tag.Write(System.Int64@,System.Int64@)">
            <summary>
               Writes the tags to the start and end of the file.
            </summary>
            <param name="start">
               A <see cref="T:System.Int64" /> value reference which will be set
               to contain the new seek position in the file at which the
               tags at the start end. This also marks the seek position
               at which the media begins.
            </param>
            <param name="end">
               A <see cref="T:System.Int64" /> value reference which will be set
               to contain the new seek position in the file at which the
               tags at the end begin. This also marks the seek position
               at which the media ends.
            </param>
        </member>
        <member name="T:TagLib.Ogg.Bitstream">
            <summary>
               This class accepts a sequence of pages belonging to a single
               logical bitstream, processes them, and extracts the tagging and
               media information.
            </summary>
        </member>
        <member name="F:TagLib.Ogg.Bitstream.previous_packet">
            <summary>
               Contains the last packet of the previous page in case it
               is continued in the next frame.
            </summary>
        </member>
        <member name="F:TagLib.Ogg.Bitstream.packet_index">
            <summary>
               Contains the index of the next packet to be processed.
            </summary>
        </member>
        <member name="F:TagLib.Ogg.Bitstream.first_absolute_granular_position">
            <summary>
               Contains the absolute granular position of the first
               page.
            </summary>
        </member>
        <member name="M:TagLib.Ogg.Bitstream.#ctor(TagLib.Ogg.Page)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Ogg.Bitstream" /> capable of processing a specified
               page.
            </summary>
            <param name="page">
               The first <see cref="T:TagLib.Ogg.Page" /> object of the stream to be
               processed by the new instance.
            </param>
            <remarks>
               The constructor only sets the new instance up to read the
               packet, but doesn't actually read it.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="page" /> is <see langword="null" />.
            </exception>
            <exception cref="T:TagLib.UnsupportedFormatException">
               No registered codec capable of processing <paramref
               name="page" /> could be found.
            </exception>
        </member>
        <member name="M:TagLib.Ogg.Bitstream.ReadPage(TagLib.Ogg.Page)">
            <summary>
               Reads the next logical page in the stream.
            </summary>
            <param name="page">
               The next logical <see cref="T:TagLib.Ogg.Page" /> object in the
               stream.
            </param>
            <returns>
               <see langword="true" /> if the codec has read all the
               necessary packets for the stream and does not need to be
               called again, typically once the Xiph comment has been
               found. Otherwise <see langword="false" />.
            </returns>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="page" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:TagLib.Ogg.Bitstream.GetDuration(System.Int64)">
            <summary>
               Gets the duration of the stream represented by the
               current instance.
            </summary>
            <param name="lastAbsoluteGranularPosition">
               A <see cref="T:System.Int64" /> value containing the absolute
               granular position of the last page in the bitstream.
            </param>
            <returns>
               A <see cref="T:System.TimeSpan" /> object containing the duration
               of the stream represented by the current instance.
            </returns>
        </member>
        <member name="P:TagLib.Ogg.Bitstream.Codec">
            <summary>
               Gets the codec object used to interpret the stream
               represented by the current instance.
            </summary>
            <value>
               The <see cref="P:TagLib.Ogg.Bitstream.Codec" /> object used by the current
               instance.
            </value>
        </member>
        <member name="M:TagLib.Ogg.Bitstream.ReadPacket(TagLib.ByteVector)">
            <summary>
               Sents a packet to the codec processor to read it.
            </summary>
            <param name="packet">
               A <see cref="T:TagLib.ByteVector" /> object containing the next
               packet in the stream.
            </param>
            <returns>
               <see langword="true" /> if the codec has read all the
               necessary packets for the stream and does not need to be
               called again, typically once the Xiph comment has been
               found. Otherwise <see langword="false" />.
            </returns>
        </member>
        <member name="T:TagLib.Ogg.Codec">
            <summary>
               This abstract class implements <see cref="T:TagLib.ICodec" /> to provide
               support for processing packets from an Ogg logical bitstream.
            </summary>
            <remarks>
               Unsupported Ogg codecs can be added by creating child classes and
               registering them using <see cref="M:TagLib.Ogg.Codec.AddCodecProvider(TagLib.Ogg.Codec.CodecProvider)" />.
            </remarks>
            <seealso cref="T:TagLib.Ogg.Codec.CodecProvider" />
            <seealso cref="M:TagLib.Ogg.Codec.AddCodecProvider(TagLib.Ogg.Codec.CodecProvider)" />
        </member>
        <member name="T:TagLib.Ogg.Codec.CodecProvider">
            <summary>
               Represents a method capable of checking an Ogg header
               packet to see it is matches a given codec.
            </summary>
            <param name="packet">
               A <see cref="T:TagLib.ByteVector" /> object containing an Ogg
               header packet.
            </param>
            <returns>
               A <see cref="T:TagLib.Ogg.Codec" /> object capable of processing the
               stream from which the packet was generated; otherwise
               <see langword="null" />.
            </returns>
            <remarks>
               <para>In order to add support for a new Ogg codec in
               TagLib#, a derivative class of <see cref="T:TagLib.Ogg.Codec" /> needs
               to be created. The class then needs to be added to the
               codec detection system by creating a <see
               cref="T:TagLib.Ogg.Codec.CodecProvider" /> and registering it with <see
               cref="M:TagLib.Ogg.Codec.AddCodecProvider(TagLib.Ogg.Codec.CodecProvider)"/>.</para>
               <para>A method implementing <see cref="T:TagLib.Ogg.Codec.CodecProvider" />
               should read <paramref name="packet" /> to determine if
               it's subclass can handle the data. If it can, it should
               return a new instance of that class, but in no way act
               upon the data. If the class cannot be used to read the
               packet, <see langref="null" /> indicates to the system
               that it needs to try anther codec provider.</para>
            </remarks>
            <example>
               <para>The following example would check for a Speex
               packet and return a Speex codec:</para>
               <code lang="C++">
            Codec.AddCodecProvider (delegate (ByteVector packet) {
            	return packet.StartsWith ("Speex   ") ? new MySpeexCodec () : null;
            });
               </code>
            </example>
        </member>
        <member name="F:TagLib.Ogg.Codec.providers">
            <summary>
               Contains registered codec providers.
            </summary>
        </member>
        <member name="M:TagLib.Ogg.Codec.GetCodec(TagLib.ByteVector)">
            <summary>
               Determines the correct codec to use for a stream header
               packet.
            </summary>
            <param name="packet">
               A <see cref="T:TagLib.ByteVector" /> object containing the first
               packet of an Ogg logical bitstream.
            </param>
            <returns>
               A <see cref="T:TagLib.Ogg.Codec" /> object capable of handling
               <paramref name="packet" /> and subsequent packets from
               the same stream.
            </returns>
            <exception cref="T:TagLib.UnsupportedFormatException">
               No registered codec capable of processing <paramref
               name="packet" /> could be found.
            </exception>
            <remarks>
               This method will first use <see cref="T:TagLib.Ogg.Codec.CodecProvider" />
               delegates registered with <see cref="M:TagLib.Ogg.Codec.AddCodecProvider(TagLib.Ogg.Codec.CodecProvider)" />
               and then attempt to use the built-in codecs.
            </remarks>
        </member>
        <member name="M:TagLib.Ogg.Codec.AddCodecProvider(TagLib.Ogg.Codec.CodecProvider)">
            <summary>
               Adds a codec 
            </summary>
            <param name="provider">
            A <see cref="T:TagLib.Ogg.Codec.CodecProvider"/>
            </param>
            <remarks>
               A <see cref="T:TagLib.Ogg.Codec.CodecProvider" /> delegate is used to add
               support for new <see cref="T:TagLib.Ogg.Codec" /> subclasses in <see
               cref="M:TagLib.Ogg.Codec.GetCodec(TagLib.ByteVector)" />.
            </remarks>
            <seealso cref="T:TagLib.Ogg.Codec.CodecProvider" />
        </member>
        <member name="P:TagLib.Ogg.Codec.Description">
            <summary>
               Gets a text description of the media represented by the
               current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> object containing a description
               of the media represented by the current instance.
            </value>
        </member>
        <member name="P:TagLib.Ogg.Codec.MediaTypes">
            <summary>
               Gets the types of media represented by the current
               instance.
            </summary>
            <value>
               A bitwise combined <see cref="P:TagLib.Ogg.Codec.MediaTypes" /> containing
               the types of media represented by the current instance.
            </value>
        </member>
        <member name="P:TagLib.Ogg.Codec.CommentData">
            <summary>
               Gets the raw Xiph comment data contained in the codec.
            </summary>
            <value>
               A <see cref="T:TagLib.ByteVector" /> object containing a raw Xiph
               comment or <see langword="null"/> if none was found.
            </value>
        </member>
        <member name="P:TagLib.Ogg.Codec.Duration">
            <summary>
               Gets the duration of the media represented by the current
               instance.
            </summary>
            <value>
               Always <see cref="F:System.TimeSpan.Zero" />.
            </value>
            <remarks>
               In order to determine the duration of an Ogg stream, the
               first and last granular positions will be passed to <see
               cref="M:TagLib.Ogg.Codec.GetDuration(System.Int64,System.Int64)" />.
            </remarks>
        </member>
        <member name="M:TagLib.Ogg.Codec.ReadPacket(TagLib.ByteVector,System.Int32)">
            <summary>
               Reads a Ogg packet that has been encountered in the
               stream.
            </summary>
            <param name="packet">
               A <see cref="T:TagLib.ByteVector" /> object containing a packet to
               be read by the current instance.
            </param>
            <param name="index">
               A <see cref="T:System.Int32" /> value containing the index of the
               packet in the stream.
            </param>
            <returns>
               <see langword="true" /> if the codec has read all the
               necessary packets for the stream and does not need to be
               called again, typically once the Xiph comment has been
               found. Otherwise <see langword="false" />.
            </returns>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="packet" /> is <see langword="null" />.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
               <paramref name="index" /> is less than zero.
            </exception>
            <exception cref="T:TagLib.CorruptFileException">
               The data does not conform to the specificiation for the
               codec represented by the current instance.
            </exception>
        </member>
        <member name="M:TagLib.Ogg.Codec.GetDuration(System.Int64,System.Int64)">
            <summary>
               Computes the duration of the stream using the first and
               last granular positions of the stream.
            </summary>
            <param name="firstGranularPosition">
               A <see cref="T:System.Int64" /> value containing the first granular
               position of the stream.
            </param>
            <param name="lastGranularPosition">
               A <see cref="T:System.Int64" /> value containing the last granular
               position of the stream.
            </param>
            <returns>
               A <see cref="T:System.TimeSpan" /> value containing the duration
               of the stream.
            </returns>
        </member>
        <member name="M:TagLib.Ogg.Codec.SetCommentPacket(TagLib.ByteVectorCollection,TagLib.Ogg.XiphComment)">
            <summary>
               Replaces the comment packet in a collection of packets
               with the rendered version of a Xiph comment or inserts a
               comment packet if the stream lacks one.
            </summary>
            <param name="packets">
               A <see cref="T:TagLib.ByteVectorCollection" /> object containing
               a collection of packets.
            </param>
            <param name="comment">
               A <see cref="T:TagLib.Ogg.XiphComment" /> object to store the rendered
               version of in <paramref name="packets" />.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="packets" /> or <paramref name="comment"
               /> is <see langword="null" />.
            </exception>
        </member>
        <member name="T:TagLib.Ogg.Codecs.Opus">
            <summary>
               This class extends <see cref="T:TagLib.Ogg.Codec" /> and implements <see
               cref="T:TagLib.IAudioCodec" /> to provide support for processing Ogg
               Opus bitstreams.
            </summary>
        </member>
        <member name="F:TagLib.Ogg.Codecs.Opus.magic_signature_base">
            <summary>
               Contains the file identifier.
            </summary>
        </member>
        <member name="F:TagLib.Ogg.Codecs.Opus.header">
            <summary>
               Contains the header packet.
            </summary>
        </member>
        <member name="F:TagLib.Ogg.Codecs.Opus.comment_data">
            <summary>
               Contains the comment data.
            </summary>
        </member>
        <member name="M:TagLib.Ogg.Codecs.Opus.#ctor">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Ogg.Codecs.Opus" />.
            </summary>
        </member>
        <member name="M:TagLib.Ogg.Codecs.Opus.ReadPacket(TagLib.ByteVector,System.Int32)">
            <summary>
               Reads a Ogg packet that has been encountered in the
               stream.
            </summary>
            <param name="packet">
               A <see cref="T:TagLib.ByteVector" /> object containing a packet to
               be read by the current instance.
            </param>
            <param name="index">
               A <see cref="T:System.Int32" /> value containing the index of the
               packet in the stream.
            </param>
            <returns>
               <see langword="true" /> if the codec has read all the
               necessary packets for the stream and does not need to be
               called again, typically once the Xiph comment has been
               found. Otherwise <see langword="false" />.
            </returns>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="packet" /> is <see langword="null" />.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
               <paramref name="index" /> is less than zero.
            </exception>
            <exception cref="T:TagLib.CorruptFileException">
               The data does not conform to the specificiation for the
               codec represented by the current instance.
            </exception>
        </member>
        <member name="M:TagLib.Ogg.Codecs.Opus.GetDuration(System.Int64,System.Int64)">
            <summary>
               Computes the duration of the stream using the first and
               last granular positions of the stream.
            </summary>
            <param name="firstGranularPosition">
               A <see cref="T:System.Int64" /> value containing the first granular
               position of the stream.
            </param>
            <param name="lastGranularPosition">
               A <see cref="T:System.Int64" /> value containing the last granular
               position of the stream.
            </param>
            <returns>
               A <see cref="T:System.TimeSpan" /> value containing the duration
               of the stream.
            </returns>
        </member>
        <member name="M:TagLib.Ogg.Codecs.Opus.SetCommentPacket(TagLib.ByteVectorCollection,TagLib.Ogg.XiphComment)">
            <summary>
               Replaces the comment packet in a collection of packets
               with the rendered version of a Xiph comment or inserts a
               comment packet if the stream lacks one.
            </summary>
            <param name="packets">
               A <see cref="T:TagLib.ByteVectorCollection" /> object containing
               a collection of packets.
            </param>
            <param name="comment">
               A <see cref="T:TagLib.Ogg.XiphComment" /> object to store the rendered
               version of in <paramref name="packets" />.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="packets" /> or <paramref name="comment"
               /> is <see langword="null" />.
            </exception>
        </member>
        <member name="P:TagLib.Ogg.Codecs.Opus.AudioBitrate">
            <summary>
               Gets the bitrate of the audio represented by the current
               instance.
            </summary>
            <value>
               A <see cref="T:System.Int32" /> value containing a bitrate of the
               audio represented by the current instance.
            </value>
            <remarks>
               Always returns zero, since bitrate is variable and no
               information is stored in the Ogg header (unlike e.g. Vorbis).
            </remarks>
        </member>
        <member name="P:TagLib.Ogg.Codecs.Opus.AudioSampleRate">
            <summary>
               Gets the sample rate of the audio represented by the
               current instance.
            </summary>
            <value>
               A <see cref="T:System.Int32" /> value containing the original
               sample rate of the audio represented by the current instance.
            </value>
        </member>
        <member name="P:TagLib.Ogg.Codecs.Opus.AudioChannels">
            <summary>
               Gets the number of channels in the audio represented by
               the current instance.
            </summary>
            <value>
               A <see cref="T:System.Int32" /> value containing the number of
               channels in the audio represented by the current
               instance.
            </value>
        </member>
        <member name="P:TagLib.Ogg.Codecs.Opus.MediaTypes">
            <summary>
               Gets the types of media represented by the current
               instance.
            </summary>
            <value>
               Always <see cref="F:TagLib.MediaTypes.Audio" />.
            </value>
        </member>
        <member name="P:TagLib.Ogg.Codecs.Opus.CommentData">
            <summary>
               Gets the raw Xiph comment data contained in the codec.
            </summary>
            <value>
               A <see cref="T:TagLib.ByteVector" /> object containing a raw Xiph
               comment or <see langword="null"/> if none was found.
            </value>
        </member>
        <member name="P:TagLib.Ogg.Codecs.Opus.Description">
            <summary>
               Gets a text description of the media represented by the
               current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> object containing a description
               of the media represented by the current instance.
            </value>
        </member>
        <member name="M:TagLib.Ogg.Codecs.Opus.FromPacket(TagLib.ByteVector)">
            <summary>
               Implements the <see cref="T:CodecProvider" /> delegate to
               provide support for recognizing a Opus stream from the
               header packet.
            </summary>
            <param name="packet">
               A <see cref="T:TagLib.ByteVector" /> object containing the stream
               header packet.
            </param>
            <returns>
               A <see cref="T:TagLib.Ogg.Codec"/> object containing a codec capable
               of parsing the stream of <see langref="null" /> if the
               stream is not a Opus stream.
            </returns>
        </member>
        <member name="M:TagLib.Ogg.Codecs.Opus.MagicSignature(TagLib.ByteVector)">
            <summary>
               Gets the magic signature for a specified Opus packet.
            </summary>
            <param name="packet">
               A <see cref="T:TagLib.ByteVector" /> object containing a Opus
               packet.
            </param>
            <returns>
               A <see cref="T:TagLib.ByteVector" /> value containing the magic
               signature or null if the packet is invalid.
            </returns>
        </member>
        <member name="T:TagLib.Ogg.Codecs.Opus.HeaderPacket">
            <summary>
               This structure represents a Opus header packet.
            </summary>
        </member>
        <member name="T:TagLib.Ogg.Codecs.Theora">
            <summary>
               This class extends <see cref="T:TagLib.Ogg.Codec" /> and implements <see
               cref="T:TagLib.IVideoCodec" /> to provide support for processing Ogg
               Theora bitstreams.
            </summary>
        </member>
        <member name="F:TagLib.Ogg.Codecs.Theora.id">
            <summary>
               Contains the file identifier.
            </summary>
        </member>
        <member name="F:TagLib.Ogg.Codecs.Theora.header">
            <summary>
               Contains the header packet.
            </summary>
        </member>
        <member name="F:TagLib.Ogg.Codecs.Theora.comment_data">
            <summary>
               Contains the comment data.
            </summary>
        </member>
        <member name="M:TagLib.Ogg.Codecs.Theora.#ctor">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Ogg.Codecs.Theora" />.
            </summary>
        </member>
        <member name="M:TagLib.Ogg.Codecs.Theora.ReadPacket(TagLib.ByteVector,System.Int32)">
            <summary>
               Reads a Ogg packet that has been encountered in the
               stream.
            </summary>
            <param name="packet">
               A <see cref="T:TagLib.ByteVector" /> object containing a packet to
               be read by the current instance.
            </param>
            <param name="index">
               A <see cref="T:System.Int32" /> value containing the index of the
               packet in the stream.
            </param>
            <returns>
               <see langword="true" /> if the codec has read all the
               necessary packets for the stream and does not need to be
               called again, typically once the Xiph comment has been
               found. Otherwise <see langword="false" />.
            </returns>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="packet" /> is <see langword="null" />.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
               <paramref name="index" /> is less than zero.
            </exception>
            <exception cref="T:TagLib.CorruptFileException">
               The data does not conform to the specificiation for the
               codec represented by the current instance.
            </exception>
        </member>
        <member name="M:TagLib.Ogg.Codecs.Theora.GetDuration(System.Int64,System.Int64)">
            <summary>
               Computes the duration of the stream using the first and
               last granular positions of the stream.
            </summary>
            <param name="firstGranularPosition">
               A <see cref="T:System.Int64" /> value containing the first granular
               position of the stream.
            </param>
            <param name="lastGranularPosition">
               A <see cref="T:System.Int64" /> value containing the last granular
               position of the stream.
            </param>
            <returns>
               A <see cref="T:System.TimeSpan" /> value containing the duration
               of the stream.
            </returns>
        </member>
        <member name="M:TagLib.Ogg.Codecs.Theora.SetCommentPacket(TagLib.ByteVectorCollection,TagLib.Ogg.XiphComment)">
            <summary>
               Replaces the comment packet in a collection of packets
               with the rendered version of a Xiph comment or inserts a
               comment packet if the stream lacks one.
            </summary>
            <param name="packets">
               A <see cref="T:TagLib.ByteVectorCollection" /> object containing
               a collection of packets.
            </param>
            <param name="comment">
               A <see cref="T:TagLib.Ogg.XiphComment" /> object to store the rendered
               version of in <paramref name="packets" />.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="packets" /> or <paramref name="comment"
               /> is <see langword="null" />.
            </exception>
        </member>
        <member name="P:TagLib.Ogg.Codecs.Theora.VideoWidth">
            <summary>
               Gets the width of the video represented by the current
               instance.
            </summary>
            <value>
               A <see cref="T:System.Int32" /> value containing the width of the
               video represented by the current instance.
            </value>
        </member>
        <member name="P:TagLib.Ogg.Codecs.Theora.VideoHeight">
            <summary>
               Gets the height of the video represented by the current
               instance.
            </summary>
            <value>
               A <see cref="T:System.Int32" /> value containing the height of the
               video represented by the current instance.
            </value>
        </member>
        <member name="P:TagLib.Ogg.Codecs.Theora.MediaTypes">
            <summary>
               Gets the types of media represented by the current
               instance.
            </summary>
            <value>
               Always <see cref="F:TagLib.MediaTypes.Video" />.
            </value>
        </member>
        <member name="P:TagLib.Ogg.Codecs.Theora.CommentData">
            <summary>
               Gets the raw Xiph comment data contained in the codec.
            </summary>
            <value>
               A <see cref="T:TagLib.ByteVector" /> object containing a raw Xiph
               comment or <see langword="null"/> if none was found.
            </value>
        </member>
        <member name="P:TagLib.Ogg.Codecs.Theora.Description">
            <summary>
               Gets a text description of the media represented by the
               current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> object containing a description
               of the media represented by the current instance.
            </value>
        </member>
        <member name="M:TagLib.Ogg.Codecs.Theora.FromPacket(TagLib.ByteVector)">
            <summary>
               Implements the <see cref="T:CodecProvider" /> delegate to
               provide support for recognizing a Theora stream from the
               header packet.
            </summary>
            <param name="packet">
               A <see cref="T:TagLib.ByteVector" /> object containing the stream
               header packet.
            </param>
            <returns>
               A <see cref="T:TagLib.Ogg.Codec"/> object containing a codec capable
               of parsing the stream of <see langref="null" /> if the
               stream is not a Theora stream.
            </returns>
        </member>
        <member name="M:TagLib.Ogg.Codecs.Theora.PacketType(TagLib.ByteVector)">
            <summary>
               Gets the packet type for a specified Theora packet.
            </summary>
            <param name="packet">
               A <see cref="T:TagLib.ByteVector" /> object containing a Theora
               packet.
            </param>
            <returns>
               A <see cref="T:System.Int32" /> value containing the packet type or
               -1 if the packet is invalid.
            </returns>
        </member>
        <member name="T:TagLib.Ogg.Codecs.Theora.HeaderPacket">
            <summary>
               This structure represents a Theora header packet.
            </summary>
        </member>
        <member name="M:TagLib.Ogg.Codecs.Theora.HeaderPacket.GranuleTime(System.Int64)">
            <summary>
               Converts an absolute granular position into a
               seconds.
            </summary>
            <param name="granularPosition">
               A <see cref="T:System.Int64" /> value containing the
              absolute granular position.
            </param>
            <returns>
               A <see cref="T:System.Double" /> value containing the time
               at <paramref name="granularPosition" /> in
               seconds.</returns>
            <remarks>
               Many thanks to the good people at
               irc://irc.freenode.net#theora for making this
               code a reality.
            </remarks>
        </member>
        <member name="T:TagLib.Ogg.Codecs.Vorbis">
            <summary>
               This class extends <see cref="T:TagLib.Ogg.Codec" /> and implements <see
               cref="T:TagLib.IAudioCodec" /> to provide support for processing Ogg
               Vorbis bitstreams.
            </summary>
        </member>
        <member name="F:TagLib.Ogg.Codecs.Vorbis.id">
            <summary>
               Contains the file identifier.
            </summary>
        </member>
        <member name="F:TagLib.Ogg.Codecs.Vorbis.header">
            <summary>
               Contains the header packet.
            </summary>
        </member>
        <member name="F:TagLib.Ogg.Codecs.Vorbis.comment_data">
            <summary>
               Contains the comment data.
            </summary>
        </member>
        <member name="M:TagLib.Ogg.Codecs.Vorbis.#ctor">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Ogg.Codecs.Vorbis" />.
            </summary>
        </member>
        <member name="M:TagLib.Ogg.Codecs.Vorbis.ReadPacket(TagLib.ByteVector,System.Int32)">
            <summary>
               Reads a Ogg packet that has been encountered in the
               stream.
            </summary>
            <param name="packet">
               A <see cref="T:TagLib.ByteVector" /> object containing a packet to
               be read by the current instance.
            </param>
            <param name="index">
               A <see cref="T:System.Int32" /> value containing the index of the
               packet in the stream.
            </param>
            <returns>
               <see langword="true" /> if the codec has read all the
               necessary packets for the stream and does not need to be
               called again, typically once the Xiph comment has been
               found. Otherwise <see langword="false" />.
            </returns>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="packet" /> is <see langword="null" />.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
               <paramref name="index" /> is less than zero.
            </exception>
            <exception cref="T:TagLib.CorruptFileException">
               The data does not conform to the specificiation for the
               codec represented by the current instance.
            </exception>
        </member>
        <member name="M:TagLib.Ogg.Codecs.Vorbis.GetDuration(System.Int64,System.Int64)">
            <summary>
               Computes the duration of the stream using the first and
               last granular positions of the stream.
            </summary>
            <param name="firstGranularPosition">
               A <see cref="T:System.Int64" /> value containing the first granular
               position of the stream.
            </param>
            <param name="lastGranularPosition">
               A <see cref="T:System.Int64" /> value containing the last granular
               position of the stream.
            </param>
            <returns>
               A <see cref="T:System.TimeSpan" /> value containing the duration
               of the stream.
            </returns>
        </member>
        <member name="M:TagLib.Ogg.Codecs.Vorbis.SetCommentPacket(TagLib.ByteVectorCollection,TagLib.Ogg.XiphComment)">
            <summary>
               Replaces the comment packet in a collection of packets
               with the rendered version of a Xiph comment or inserts a
               comment packet if the stream lacks one.
            </summary>
            <param name="packets">
               A <see cref="T:TagLib.ByteVectorCollection" /> object containing
               a collection of packets.
            </param>
            <param name="comment">
               A <see cref="T:TagLib.Ogg.XiphComment" /> object to store the rendered
               version of in <paramref name="packets" />.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="packets" /> or <paramref name="comment"
               /> is <see langword="null" />.
            </exception>
        </member>
        <member name="P:TagLib.Ogg.Codecs.Vorbis.AudioBitrate">
            <summary>
               Gets the bitrate of the audio represented by the current
               instance.
            </summary>
            <value>
               A <see cref="T:System.Int32" /> value containing a bitrate of the
               audio represented by the current instance.
            </value>
        </member>
        <member name="P:TagLib.Ogg.Codecs.Vorbis.AudioSampleRate">
            <summary>
               Gets the sample rate of the audio represented by the
               current instance.
            </summary>
            <value>
               A <see cref="T:System.Int32" /> value containing the sample rate of
               the audio represented by the current instance.
            </value>
        </member>
        <member name="P:TagLib.Ogg.Codecs.Vorbis.AudioChannels">
            <summary>
               Gets the number of channels in the audio represented by
               the current instance.
            </summary>
            <value>
               A <see cref="T:System.Int32" /> value containing the number of
               channels in the audio represented by the current
               instance.
            </value>
        </member>
        <member name="P:TagLib.Ogg.Codecs.Vorbis.MediaTypes">
            <summary>
               Gets the types of media represented by the current
               instance.
            </summary>
            <value>
               Always <see cref="F:TagLib.MediaTypes.Audio" />.
            </value>
        </member>
        <member name="P:TagLib.Ogg.Codecs.Vorbis.CommentData">
            <summary>
               Gets the raw Xiph comment data contained in the codec.
            </summary>
            <value>
               A <see cref="T:TagLib.ByteVector" /> object containing a raw Xiph
               comment or <see langword="null"/> if none was found.
            </value>
        </member>
        <member name="P:TagLib.Ogg.Codecs.Vorbis.Description">
            <summary>
               Gets a text description of the media represented by the
               current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> object containing a description
               of the media represented by the current instance.
            </value>
        </member>
        <member name="M:TagLib.Ogg.Codecs.Vorbis.FromPacket(TagLib.ByteVector)">
            <summary>
               Implements the <see cref="T:CodecProvider" /> delegate to
               provide support for recognizing a Vorbis stream from the
               header packet.
            </summary>
            <param name="packet">
               A <see cref="T:TagLib.ByteVector" /> object containing the stream
               header packet.
            </param>
            <returns>
               A <see cref="T:TagLib.Ogg.Codec"/> object containing a codec capable
               of parsing the stream of <see langref="null" /> if the
               stream is not a Vorbis stream.
            </returns>
        </member>
        <member name="M:TagLib.Ogg.Codecs.Vorbis.PacketType(TagLib.ByteVector)">
            <summary>
               Gets the packet type for a specified Vorbis packet.
            </summary>
            <param name="packet">
               A <see cref="T:TagLib.ByteVector" /> object containing a Vorbis
               packet.
            </param>
            <returns>
               A <see cref="T:System.Int32" /> value containing the packet type or
               -1 if the packet is invalid.
            </returns>
        </member>
        <member name="T:TagLib.Ogg.Codecs.Vorbis.HeaderPacket">
            <summary>
               This structure represents a Vorbis header packet.
            </summary>
        </member>
        <member name="T:TagLib.Ogg.File">
            <summary>
               This class extends <see cref="T:TagLib.File" /> to provide tagging
               and properties support for Ogg files.
            </summary>
        </member>
        <member name="F:TagLib.Ogg.File.tag">
            <summary>
              Contains the tags for the file.
            </summary>
        </member>
        <member name="F:TagLib.Ogg.File.properties">
            <summary>
               Contains the media properties.
            </summary>
        </member>
        <member name="M:TagLib.Ogg.File.#ctor(System.String,TagLib.ReadStyle)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Ogg.File" /> for a specified path in the local file
               system and specified read style.
            </summary>
            <param name="path">
               A <see cref="T:System.String" /> object containing the path of the
               file to use in the new instance.
            </param>
            <param name="propertiesStyle">
               A <see cref="T:TagLib.ReadStyle" /> value specifying at what level
               of accuracy to read the media properties, or <see
               cref="F:TagLib.ReadStyle.None" /> to ignore the properties.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="path" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:TagLib.Ogg.File.#ctor(System.String)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Ogg.File" /> for a specified path in the local file
               system with an average read style.
            </summary>
            <param name="path">
               A <see cref="T:System.String" /> object containing the path of the
               file to use in the new instance.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="path" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:TagLib.Ogg.File.#ctor(TagLib.File.IFileAbstraction,TagLib.ReadStyle)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Ogg.File" /> for a specified file abstraction and
               specified read style.
            </summary>
            <param name="abstraction">
               A <see cref="T:TagLib.File.IFileAbstraction" /> object to use when
               reading from and writing to the file.
            </param>
            <param name="propertiesStyle">
               A <see cref="T:TagLib.ReadStyle" /> value specifying at what level
               of accuracy to read the media properties, or <see
               cref="F:TagLib.ReadStyle.None" /> to ignore the properties.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="abstraction" /> is <see langword="null"
               />.
            </exception>
        </member>
        <member name="M:TagLib.Ogg.File.#ctor(TagLib.File.IFileAbstraction)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Ogg.File" /> for a specified file abstraction with an
               average read style.
            </summary>
            <param name="abstraction">
               A <see cref="T:TagLib.File.IFileAbstraction" /> object to use when
               reading from and writing to the file.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="abstraction" /> is <see langword="null"
               />.
            </exception>
        </member>
        <member name="M:TagLib.Ogg.File.Save">
            <summary>
               Saves the changes made in the current instance to the
               file it represents.
            </summary>
        </member>
        <member name="M:TagLib.Ogg.File.RemoveTags(TagLib.TagTypes)">
            <summary>
               Removes a set of tag types from the current instance.
            </summary>
            <param name="types">
               A bitwise combined <see cref="T:TagLib.TagTypes" /> value
               containing tag types to be removed from the file.
            </param>
            <remarks>
               In order to remove all tags from a file, pass <see
               cref="F:TagLib.TagTypes.AllTags" /> as <paramref name="types" />.
            </remarks>
        </member>
        <member name="M:TagLib.Ogg.File.GetTag(TagLib.TagTypes,System.Boolean)">
            <summary>
               Gets a tag of a specified type from the current instance,
               optionally creating a new tag if possible.
            </summary>
            <param name="type">
               A <see cref="T:TagLib.TagTypes" /> value indicating the
               type of tag to read.
            </param>
            <param name="create">
               A <see cref="T:System.Boolean" /> value specifying whether or not to
               try and create the tag if one is not found.
            </param>
            <returns>
               A <see cref="P:TagLib.Ogg.File.Tag" /> object containing the tag that was
               found in or added to the current instance. If no
               matching tag was found and none was created, <see
               langword="null" /> is returned.
            </returns>
        </member>
        <member name="P:TagLib.Ogg.File.Tag">
            <summary>
               Gets a abstract representation of all tags stored in the
               current instance.
            </summary>
            <value>
               A <see cref="T:TagLib.Tag" /> object representing all tags
               stored in the current instance.
            </value>
        </member>
        <member name="P:TagLib.Ogg.File.Properties">
            <summary>
               Gets the media properties of the file represented by the
               current instance.
            </summary>
            <value>
               A <see cref="T:TagLib.Properties" /> object containing the
               media properties of the file represented by the current
               instance.
            </value>
        </member>
        <member name="M:TagLib.Ogg.File.Read(TagLib.ReadStyle)">
            <summary>
               Reads the file with a specified read style.
            </summary>
            <param name="propertiesStyle">
               A <see cref="T:TagLib.ReadStyle" /> value specifying at what level
               of accuracy to read the media properties, or <see
               cref="F:TagLib.ReadStyle.None" /> to ignore the properties.
            </param>
        </member>
        <member name="M:TagLib.Ogg.File.ReadStreams(System.Collections.Generic.List{TagLib.Ogg.Page},System.Int64@)">
            <summary>
               Reads the file until all streams have finished their
               property and tagging data.
            </summary>
            <param name="pages">
               A <see cref="T:System.Collections.Generic.List`1"/>
               object to be filled with <see cref="T:TagLib.Ogg.Page" /> objects as
               they are read, or <see langword="null"/> if the pages
               are not to be stored.
            </param>
            <param name="end">
               A <see cref="T:System.Int64" /> value reference to be updated to
               the postion of the first page not read by the current
               instance.
            </param>
            <returns>
               A <see cref="T:System.Collections.Generic.Dictionary`2"
               /> object containing stream serial numbers as the keys
               <see cref="T:TagLib.Ogg.Bitstream" /> objects as the values.
            </returns>
        </member>
        <member name="P:TagLib.Ogg.File.LastPageHeader">
            <summary>
               Gets the last page header in the file.
            </summary>
            <value>
               A <see cref="T:TagLib.Ogg.PageHeader" /> object containing the last
               page header in the file.
            </value>
            <remarks>
               The last page header is used to determine the last
               absolute granular position of a stream so the duration
               can be calculated.
            </remarks>
        </member>
        <member name="T:TagLib.Ogg.GroupedComment">
            <summary>
               This class combines a collection of <see cref="T:TagLib.Ogg.XiphComment"/>
               objects so that properties can be read from each but are only set
               to the first comment of the file.
            </summary>
        </member>
        <member name="F:TagLib.Ogg.GroupedComment.comment_hash">
            <summary>
               Contains a mapping between stream serial numbers and
               comments.
            </summary>
        </member>
        <member name="F:TagLib.Ogg.GroupedComment.tags">
            <summary>
               Contains comments in the order they are added.
            </summary>
        </member>
        <member name="M:TagLib.Ogg.GroupedComment.#ctor">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Ogg.GroupedComment" /> with now contents.
            </summary>
        </member>
        <member name="P:TagLib.Ogg.GroupedComment.Comments">
            <summary>
               Gets an enumeration of the comments in the current
               instance, in the order they were added.
            </summary>
            <value>
               A <see cref="T:System.Collections.Generic.IEnumerable`1"
               /> object enumerating through the <see cref="T:TagLib.Ogg.XiphComment"
               /> objects contained in the current instance.
            </value>
        </member>
        <member name="M:TagLib.Ogg.GroupedComment.GetComment(System.UInt32)">
            <summary>
               Gets a comment in the current instance for a specified
               stream.
            </summary>
            <param name="streamSerialNumber">
               A <see cref="T:System.UInt32" /> value containing the serial number
               of the stream of the comment to get.
            </param>
            <returns>
               A <see cref="T:TagLib.Ogg.XiphComment"/> with the matching serial
               number.
            </returns>
        </member>
        <member name="M:TagLib.Ogg.GroupedComment.AddComment(System.UInt32,TagLib.Ogg.XiphComment)">
            <summary>
               Adds a Xiph comment to the current instance.
            </summary>
            <param name="streamSerialNumber">
               A <see cref="T:System.UInt32" /> value containing the serial number
               of the stream containing the comment.
            </param>
            <param name="comment">
               A <see cref="T:TagLib.Ogg.XiphComment" /> object to add to the current
               instance.
            </param>
        </member>
        <member name="M:TagLib.Ogg.GroupedComment.AddComment(System.UInt32,TagLib.ByteVector)">
            <summary>
               Adds a Xiph comment to the current instance.
            </summary>
            <param name="streamSerialNumber">
               A <see cref="T:System.UInt32" /> value containing the serial number
               of the stream containing the comment.
            </param>
            <param name="data">
               A <see cref="T:TagLib.ByteVector"/> object containing the raw Xiph
               comment to add to the current instance.
            </param>
        </member>
        <member name="P:TagLib.Ogg.GroupedComment.TagTypes">
            <summary>
               Gets the tag types contained in the current instance.
            </summary>
            <value>
               A bitwise combined <see cref="T:TagLib.TagTypes" />
               containing the tag types contained in the current
               instance.
            </value>
            <remarks>
               This value contains a bitwise combined value from all the
               child tags.
            </remarks>
            <seealso cref="P:TagLib.Tag.TagTypes" />
        </member>
        <member name="P:TagLib.Ogg.GroupedComment.Title">
            <summary>
               Gets and sets the title for the media described by the
               current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> object containing the title for
               the media described by the current instance or <see
               langword="null" /> if no value is present.
            </value>
            <remarks>
               <para>When getting the value, the child comments are
               looped through in order and the first non-<see
               langword="null" /> value is returned.</para>
               <para>When setting the value, it is stored in the first
               comment.</para>
            </remarks>
            <seealso cref="P:TagLib.Tag.Title" />
        </member>
        <member name="P:TagLib.Ogg.GroupedComment.TitleSort">
            <summary>
               Gets and sets the sort names for the individual track title of
               the media described by the current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> containing the sort name
               for the track title of the media described by the current 
               instance or null if no value is present.
            </value>
            <remarks>
               <para>When getting the value, the child comments are
               looped through in order and the first non-empty value is
               returned.</para>
               <para>When setting the value, it is stored in the first
               comment.</para>
            </remarks>
            <seealso cref="P:TagLib.Tag.TitleSort" />
        </member>
        <member name="P:TagLib.Ogg.GroupedComment.Subtitle">
            <summary>
               Gets and sets a short description, one-liner. 
               It represents the tagline of the Video/music.
            </summary>
            <value>
               A <see cref="T:System.String" /> containing the subtitle
               the media represented by the current instance 
               or an empty array if no value is present.
            </value>
            <remarks>
               <para>When getting the value, the child comments are
               looped through in order and the first non-empty value is
               returned.</para>
               <para>When setting the value, it is stored in the first
               comment.</para>
            </remarks>
            <seealso cref="P:TagLib.Tag.Subtitle" />
        </member>
        <member name="P:TagLib.Ogg.GroupedComment.Description">
            <summary>
               Gets and sets a short description of the media.
               For a music, this could be the comment that the artist
               made of its artwork. For a video, this should be a 
               short summary of the story/plot, but a spoiler. This
               should give the impression of what to expect in the
               media.
            </summary>
            <value>
               A <see cref="T:System.String" /> containing the subtitle
               the media represented by the current instance 
               or an empty array if no value is present.
            </value>
            <remarks>
               <para>When getting the value, the child comments are
               looped through in order and the first non-empty value is
               returned.</para>
               <para>When setting the value, it is stored in the first
               comment.</para>
            </remarks>
            <seealso cref="P:TagLib.Tag.Description" />
        </member>
        <member name="P:TagLib.Ogg.GroupedComment.Performers">
            <summary>
               Gets and sets the performers or artists who performed in
               the media described by the current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> array containing the performers or
               artists who performed in the media described by the
               current instance or an empty array if no value is
               present.
            </value>
            <remarks>
               <para>When getting the value, the child comments are
               looped through in order and the first non-empty value is
               returned.</para>
               <para>When setting the value, it is stored in the first
               comment.</para>
            </remarks>
            <seealso cref="P:TagLib.Tag.Performers" />
        </member>
        <member name="P:TagLib.Ogg.GroupedComment.PerformersSort">
            <summary>
               Gets and sets the sort names of the performers or artists
               who performed in the media described by the current instance.
            </summary>
            <value>
               A <see cref="T:string[]" /> containing the sort names for
               the performers or artists who performed in the media
               described by the current instance, or an empty array if
               no value is present. 
            </value>
            <remarks>
               <para>When getting the value, the child comments are
               looped through in order and the first non-empty value is
               returned.</para>
               <para>When setting the value, it is stored in the first
               comment.</para>
            </remarks>
            <seealso cref="P:TagLib.Tag.PerformersSort" />
        </member>
        <member name="P:TagLib.Ogg.GroupedComment.PerformersRole">
            <summary>
               Gets and sets the Charaters for a video media, or
               instruments played for music media. 
               This should match the <see cref="P:TagLib.Ogg.GroupedComment.Performers"/> array (for
               each person correspond one/more role). Several roles for
               the same artist/actor can be made up with semicolons. 
               For example, "Marty McFly; Marty McFly Jr.; Marlene McFly".
            </summary>
            <remarks>
               <para>When getting the value, the child comments are
               looped through in order and the first non-empty value is
               returned.</para>
               <para>When setting the value, it is stored in the first
               comment.</para>
            </remarks>
            <seealso cref="P:TagLib.Tag.PerformersRole" />
        </member>
        <member name="P:TagLib.Ogg.GroupedComment.AlbumArtists">
            <summary>
               Gets and sets the band or artist who is credited in the
               creation of the entire album or collection containing the
               media described by the current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> array containing the band or artist
               who is credited in the creation of the entire album or
               collection containing the media described by the current
               instance or an empty array if no value is present.
            </value>
            <remarks>
               <para>When getting the value, the child comments are
               looped through in order and the first non-empty value is
               returned.</para>
               <para>When setting the value, it is stored in the first
               comment.</para>
            </remarks>
            <seealso cref="P:TagLib.Tag.AlbumArtists" />
        </member>
        <member name="P:TagLib.Ogg.GroupedComment.AlbumArtistsSort">
            <summary>
               Gets and sets the sort names for the band or artist who
               is credited in the creation of the entire album or
               collection containing the media described by the
               current instance.
            </summary>
            <value>
               A <see cref="T:string[]" /> containing the sort names
               for the band or artist who is credited in the creation
               of the entire album or collection containing the media
               described by the current instance or an empty array if
               no value is present.
            </value>
            <remarks>
               <para>When getting the value, the child comments are
               looped through in order and the first non-empty value is
               returned.</para>
               <para>When setting the value, it is stored in the first
               comment.</para>
            </remarks>
            <seealso cref="P:TagLib.Tag.AlbumArtistsSort" />
        </member>
        <member name="P:TagLib.Ogg.GroupedComment.Composers">
            <summary>
               Gets and sets the composers of the media represented by
               the current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> array containing the composers of the
               media represented by the current instance or an empty
               array if no value is present.
            </value>
            <remarks>
               <para>When getting the value, the child comments are
               looped through in order and the first non-empty value is
               returned.</para>
               <para>When setting the value, it is stored in the first
               comment.</para>
            </remarks>
            <seealso cref="P:TagLib.Tag.Composers" />
        </member>
        <member name="P:TagLib.Ogg.GroupedComment.ComposersSort">
            <summary>
               Gets and sets the sort names for the composer of
               the media described by the current instance.
            </summary>
            <value>
               A <see cref="T:string[]" /> containing the sort names
               for the composer of the media described by the current
               instance or an empty array if no value is present.
            </value>
            <remarks>
               <para>When getting the value, the child comments are
               looped through in order and the first non-empty value is
               returned.</para>
               <para>When setting the value, it is stored in the first
               comment.</para>
            </remarks>
            <seealso cref="P:TagLib.Tag.ComposersSort" />
        </member>
        <member name="P:TagLib.Ogg.GroupedComment.Album">
            <summary>
               Gets and sets the album of the media represented by the
               current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> object containing the album of
               the media represented by the current instance or <see
               langword="null" /> if no value is present.
            </value>
            <remarks>
               <para>When getting the value, the child comments are
               looped through in order and the first non-<see
               langword="null" /> value is returned.</para>
               <para>When setting the value, it is stored in the first
               comment.</para>
            </remarks>
            <seealso cref="P:TagLib.Tag.Album" />
        </member>
        <member name="P:TagLib.Ogg.GroupedComment.AlbumSort">
            <summary>
               Gets and sets the sort names for the album title of
               the media described by the current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> containing the sort names
               for the album title of the media described by the
               current instance or null if no value is present.
            </value>
            <remarks>
               <para>When getting the value, the child comments are
               looped through in order and the first non-empty value is
               returned.</para>
               <para>When setting the value, it is stored in the first
               comment.</para>
            </remarks>
            <seealso cref="P:TagLib.Tag.AlbumSort" />
        </member>
        <member name="P:TagLib.Ogg.GroupedComment.Comment">
            <summary>
               Gets and sets a user comment on the media represented by
               the current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> object containing user comments
               on the media represented by the current instance or <see
               langword="null" /> if no value is present.
            </value>
            <remarks>
               <para>When getting the value, the child comments are
               looped through in order and the first non-<see
               langword="null" /> value is returned.</para>
               <para>When setting the value, it is stored in the first
               comment.</para>
            </remarks>
            <seealso cref="P:TagLib.Tag.Comment" />
        </member>
        <member name="P:TagLib.Ogg.GroupedComment.Genres">
            <summary>
               Gets and sets the genres of the media represented by the
               current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> array containing the genres of the
               media represented by the current instance or an empty
               array if no value is present.
            </value>
            <remarks>
               <para>When getting the value, the child comments are
               looped through in order and the first non-empty value is
               returned.</para>
               <para>When setting the value, it is stored in the first
               comment.</para>
            </remarks>
            <seealso cref="P:TagLib.Tag.Genres" />
        </member>
        <member name="P:TagLib.Ogg.GroupedComment.Year">
            <summary>
               Gets and sets the year that the media represented by the
               current instance was recorded.
            </summary>
            <value>
               A <see cref="T:System.String" /> containing the year that the media
               represented by the current instance was created or zero
               if no value is present.
            </value>
            <remarks>
               <para>When getting the value, the child comments are
               looped through in order and the first non-<see
               langword="null" /> value is returned.</para>
               <para>When setting the value, it is stored in the first
               comment.</para>
            </remarks>
            <seealso cref="P:TagLib.Tag.Year" />
        </member>
        <member name="P:TagLib.Ogg.GroupedComment.Track">
            <summary>
               Gets and sets the position of the media represented by
               the current instance in its containing album.
            </summary>
            <value>
               A <see cref="T:System.UInt32" /> containing the position of the
               media represented by the current instance in its
               containing album or zero if not specified.
            </value>
            <remarks>
               <para>When getting the value, the child comments are
               looped through in order and the first non-zero value is
               returned.</para>
               <para>When setting the value, it is stored in the first
               comment.</para>
            </remarks>
            <seealso cref="P:TagLib.Tag.Track" />
        </member>
        <member name="P:TagLib.Ogg.GroupedComment.TrackCount">
            <summary>
               Gets and sets the number of tracks in the album
               containing the media represented by the current instance.
            </summary>
            <value>
               A <see cref="T:System.UInt32" /> containing the number of tracks in
               the album containing the media represented by the current
               instance or zero if not specified.
            </value>
            <remarks>
               <para>When getting the value, the child comments are
               looped through in order and the first non-zero value is
               returned.</para>
               <para>When setting the value, it is stored in the first
               comment.</para>
            </remarks>
            <seealso cref="P:TagLib.Tag.TrackCount" />
        </member>
        <member name="P:TagLib.Ogg.GroupedComment.Disc">
            <summary>
               Gets and sets the number of the disc containing the media
               represented by the current instance in the boxed set.
            </summary>
            <value>
               A <see cref="T:System.UInt32" /> containing the number of the disc
               containing the media represented by the current instance
               in the boxed set.
            </value>
            <remarks>
               <para>When getting the value, the child comments are
               looped through in order and the first non-zero value is
               returned.</para>
               <para>When setting the value, it is stored in the first
               comment.</para>
            </remarks>
            <seealso cref="P:TagLib.Tag.Disc" />
        </member>
        <member name="P:TagLib.Ogg.GroupedComment.DiscCount">
            <summary>
               Gets and sets the number of discs in the boxed set
               containing the media represented by the current instance.
            </summary>
            <value>
               A <see cref="T:System.UInt32" /> containing the number of discs in
               the boxed set containing the media represented by the
               current instance or zero if not specified.
            </value>
            <remarks>
               <para>When getting the value, the child comments are
               looped through in order and the first non-zero value is
               returned.</para>
               <para>When setting the value, it is stored in the first
               comment.</para>
            </remarks>
            <seealso cref="P:TagLib.Tag.DiscCount" />
        </member>
        <member name="P:TagLib.Ogg.GroupedComment.Lyrics">
            <summary>
               Gets and sets the lyrics or script of the media
               represented by the current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> object containing the lyrics or
               script of the media represented by the current instance
               or <see langword="null" /> if no value is present.
            </value>
            <remarks>
               <para>When getting the value, the child comments are
               looped through in order and the first non-<see
               langword="null" /> value is returned.</para>
               <para>When setting the value, it is stored in the first
               comment.</para>
            </remarks>
            <seealso cref="P:TagLib.Tag.Lyrics" />
        </member>
        <member name="P:TagLib.Ogg.GroupedComment.Grouping">
            <summary>
               Gets and sets the grouping on the album which the media
               in the current instance belongs to.
            </summary>
            <value>
               A <see cref="T:System.String" /> object containing the grouping on
               the album which the media in the current instance belongs
               to or <see langword="null" /> if no value is present.
            </value>
            <remarks>
               <para>When getting the value, the child comments are
               looped through in order and the first non-<see
               langword="null" /> value is returned.</para>
               <para>When setting the value, it is stored in the first
               comment.</para>
            </remarks>
            <seealso cref="P:TagLib.Tag.Grouping" />
        </member>
        <member name="P:TagLib.Ogg.GroupedComment.BeatsPerMinute">
            <summary>
               Gets and sets the number of beats per minute in the audio
               of the media represented by the current instance.
            </summary>
            <value>
               A <see cref="T:System.UInt32" /> containing the number of beats per
               minute in the audio of the media represented by the
               current instance, or zero if not specified.
            </value>
            <remarks>
               <para>When getting the value, the child comments are
               looped through in order and the first non-zero value is
               returned.</para>
               <para>When setting the value, it is stored in the first
               comment.</para>
            </remarks>
            <seealso cref="P:TagLib.Tag.BeatsPerMinute" />
        </member>
        <member name="P:TagLib.Ogg.GroupedComment.Conductor">
            <summary>
               Gets and sets the conductor or director of the media
               represented by the current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> object containing the conductor
               or director of the media represented by the current
               instance or <see langword="null" /> if no value present.
            </value>
            <remarks>
               <para>When getting the value, the child comments are
               looped through in order and the first non-<see
               langword="null" /> value is returned.</para>
               <para>When setting the value, it is stored in the first
               comment.</para>
            </remarks>
            <seealso cref="P:TagLib.Tag.Conductor" />
        </member>
        <member name="P:TagLib.Ogg.GroupedComment.Copyright">
            <summary>
               Gets and sets the copyright information for the media
               represented by the current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> object containing the copyright
               information for the media represented by the current
               instance or <see langword="null" /> if no value present.
            </value>
            <remarks>
               <para>When getting the value, the child comments are
               looped through in order and the first non-<see
               langword="null" /> value is returned.</para>
               <para>When setting the value, it is stored in the first
               comment.</para>
            </remarks>
            <seealso cref="P:TagLib.Tag.Copyright" />
        </member>
        <member name="P:TagLib.Ogg.GroupedComment.DateTagged">
            <summary>
               Gets and sets the date at which the tag has been written.
            </summary>
            <value>
               A nullable <see cref="T:System.DateTime" /> object containing the 
               date at which the tag has been written, or <see 
               langword="null" /> if no value present.
            </value>
            <remarks>
               <para>When getting the value, the child comments are
               looped through in order and the first non-<see
               langword="null" /> value is returned.</para>
               <para>When setting the value, it is stored in the first
               comment.</para>
            </remarks>
            <seealso cref="P:TagLib.Tag.DateTagged" />
        </member>
        <member name="P:TagLib.Ogg.GroupedComment.MusicBrainzArtistId">
            <summary>
               Gets and sets the MusicBrainz Artist ID.
            </summary>
            <value>
               A <see cref="T:System.String" /> containing the MusicBrainz
               ArtistID for the media described by the 
               current instance or null if no value is present.
            </value>
            <remarks>
               <para>When getting the value, the child comments are looped
               through in order and the first non-<see langword="null" />
               and non-empty value is returned.</para>
               <para>When setting the value, it is stored in the first
               comment.</para>
            </remarks>
            <seealso cref="P:TagLib.Tag.MusicBrainzArtistId" />
        </member>
        <member name="P:TagLib.Ogg.GroupedComment.MusicBrainzReleaseGroupId">
            <summary>
               Gets and sets the MusicBrainz Release Group ID.
            </summary>
            <value>
               A <see cref="T:System.String" /> containing the MusicBrainz
               ReleaseGroupID for the media described by the 
               current instance or null if no value is present.
            </value>
            <remarks>
               <para>When getting the value, the child comments are looped
               through in order and the first non-<see langword="null" />
               and non-empty value is returned.</para>
               <para>When setting the value, it is stored in the first
               comment.</para>
            </remarks>
            <seealso cref="P:TagLib.Tag.MusicBrainzReleaseGroupId" />
        </member>
        <member name="P:TagLib.Ogg.GroupedComment.MusicBrainzReleaseId">
            <summary>
               Gets and sets the MusicBrainz Release ID.
            </summary>
            <value>
               A <see cref="T:System.String" /> containing the MusicBrainz
               ReleaseID for the media described by the 
               current instance or null if no value is present.
            </value>
            <remarks>
               <para>When getting the value, the child comments are looped
               through in order and the first non-<see langword="null" />
               and non-empty value is returned.</para>
               <para>When setting the value, it is stored in the first
               comment.</para>
            </remarks>
            <seealso cref="P:TagLib.Tag.MusicBrainzReleaseId" />
        </member>
        <member name="P:TagLib.Ogg.GroupedComment.MusicBrainzReleaseArtistId">
            <summary>
               Gets and sets the MusicBrainz Release Artist ID.
            </summary>
            <value>
               A <see cref="T:System.String" /> containing the MusicBrainz
               ReleaseArtistID for the media described by the 
               current instance or null if no value is present.
            </value>
            <remarks>
               <para>When getting the value, the child comments are looped
               through in order and the first non-<see langword="null" />
               and non-empty value is returned.</para>
               <para>When setting the value, it is stored in the first
               comment.</para>
            </remarks>
            <seealso cref="P:TagLib.Tag.MusicBrainzReleaseArtistId" />
        </member>
        <member name="P:TagLib.Ogg.GroupedComment.MusicBrainzTrackId">
            <summary>
               Gets and sets the MusicBrainz Track ID.
            </summary>
            <value>
               A <see cref="T:System.String" /> containing the MusicBrainz
               TrackID for the media described by the 
               current instance or null if no value is present.
            </value>
            <remarks>
               <para>When getting the value, the child comments are looped
               through in order and the first non-<see langword="null" />
               and non-empty value is returned.</para>
               <para>When setting the value, it is stored in the first
               comment.</para>
            </remarks>
            <seealso cref="P:TagLib.Tag.MusicBrainzTrackId" />
        </member>
        <member name="P:TagLib.Ogg.GroupedComment.MusicBrainzDiscId">
            <summary>
               Gets and sets the MusicBrainz Disc ID.
            </summary>
            <value>
               A <see cref="T:System.String" /> containing the MusicBrainz
               DiscID for the media described by the 
               current instance or null if no value is present.
            </value>
            <remarks>
               <para>When getting the value, the child comments are looped
               through in order and the first non-<see langword="null" />
               and non-empty value is returned.</para>
               <para>When setting the value, it is stored in the first
               comment.</para>
            </remarks>
            <seealso cref="P:TagLib.Tag.MusicBrainzDiscId" />
        </member>
        <member name="P:TagLib.Ogg.GroupedComment.MusicIpId">
            <summary>
               Gets and sets the MusicIP PUID.
            </summary>
            <value>
               A <see cref="T:System.String" /> containing the MusicIP PUID
               for the media described by the 
               current instance or null if no value is present.
            </value>
            <remarks>
               <para>When getting the value, the child comments are looped
               through in order and the first non-<see langword="null" />
               and non-empty value is returned.</para>
               <para>When setting the value, it is stored in the first
               comment.</para>
            </remarks>
            <seealso cref="P:TagLib.Tag.MusicIpId" />
        </member>
        <member name="P:TagLib.Ogg.GroupedComment.AmazonId">
            <summary>
               Gets and sets the Amazon ID.
            </summary>
            <value>
               A <see cref="T:System.String" /> containing the Amazon ID
               for the media described by the 
               current instance or null if no value is present.
            </value>
            <remarks>
               <para>When getting the value, the child comments are looped
               through in order and the first non-<see langword="null" />
               and non-empty value is returned.</para>
               <para>When setting the value, it is stored in the first
               comment.</para>
            </remarks>
            <seealso cref="P:TagLib.Tag.AmazonId" />
        </member>
        <member name="P:TagLib.Ogg.GroupedComment.MusicBrainzReleaseStatus">
            <summary>
               Gets and sets the MusicBrainz Release Status.
            </summary>
            <value>
               A <see cref="T:System.String" /> containing the MusicBrainz
               Release Status for the media described by the 
               current instance or null if no value is present.
            </value>
            <remarks>
               <para>When getting the value, the child comments are looped
               through in order and the first non-<see langword="null" />
               and non-empty value is returned.</para>
               <para>When setting the value, it is stored in the first
               comment.</para>
            </remarks>
            <seealso cref="P:TagLib.Tag.MusicBrainzReleaseStatus" />
        </member>
        <member name="P:TagLib.Ogg.GroupedComment.MusicBrainzReleaseType">
            <summary>
               Gets and sets the MusicBrainz Release Type.
            </summary>
            <value>
               A <see cref="T:System.String" /> containing the MusicBrainz
               Release Type for the media described by the 
               current instance or null if no value is present.
            </value>
            <remarks>
               <para>When getting the value, the child comments are looped
               through in order and the first non-<see langword="null" />
               and non-empty value is returned.</para>
               <para>When setting the value, it is stored in the first
               comment.</para>
            </remarks>
            <seealso cref="P:TagLib.Tag.MusicBrainzReleaseType" />
        </member>
        <member name="P:TagLib.Ogg.GroupedComment.MusicBrainzReleaseCountry">
            <summary>
               Gets and sets the MusicBrainz Release Country.
            </summary>
            <value>
               A <see cref="T:System.String" /> containing the MusicBrainz
               Release Country for the media described by the 
               current instance or null if no value is present.
            </value>
            <remarks>
               <para>When getting the value, the child comments are looped
               through in order and the first non-<see langword="null" />
               and non-empty value is returned.</para>
               <para>When setting the value, it is stored in the first
               comment.</para>
            </remarks>
            <seealso cref="P:TagLib.Tag.MusicBrainzReleaseCountry" />
        </member>
        <member name="P:TagLib.Ogg.GroupedComment.ReplayGainTrackGain">
            <summary>
               Gets and sets the ReplayGain Track Value of the media represented by
               the current instance.
            </summary>
            <value>
               A <see cref="T:System.Double" /> containing the ReplayGain Track Value of the
               media represented by the current instance or an empty
               array if no value is present.
            </value>
            <remarks>
               <para>When getting the value, the child tags are looped
               through in order and the first non-<see langword="null" />
               and non-empty value is returned.</para>
               <para>When setting the value, it is stored in the first
               comment.</para>
            </remarks>
            <seealso cref="P:TagLib.Tag.ReplayGainTrackGain" />
        </member>
        <member name="P:TagLib.Ogg.GroupedComment.ReplayGainTrackPeak">
            <summary>
               Gets and sets the ReplayGain Peak Value of the media represented by
               the current instance.
            </summary>
            <value>
               A <see cref="T:System.Double" /> containing the ReplayGain Peak Value of the
               media represented by the current instance or an empty
               array if no value is present.
            </value>
            <remarks>
               <para>When getting the value, the child tags are looped
               through in order and the first non-<see langword="null" />
               and non-empty value is returned.</para>
               <para>When setting the value, it is stored in the first
               comment.</para>
            </remarks>
            <seealso cref="P:TagLib.Tag.ReplayGainTrackPeak" />
        </member>
        <member name="P:TagLib.Ogg.GroupedComment.ReplayGainAlbumGain">
            <summary>
               Gets and sets the ReplayGain Album Value of the media represented by
               the current instance.
            </summary>
            <value>
               A <see cref="T:System.Double" /> containing the ReplayGain Album Value of the
               media represented by the current instance or an empty
               array if no value is present.
            </value>
            <remarks>
               <para>When getting the value, the child tags are looped
               through in order and the first non-<see langword="null" />
               and non-empty value is returned.</para>
               <para>When setting the value, it is stored in the first
               comment.</para>
            </remarks>
            <seealso cref="P:TagLib.Tag.ReplayGainAlbumGain" />
        </member>
        <member name="P:TagLib.Ogg.GroupedComment.ReplayGainAlbumPeak">
            <summary>
               Gets and sets the ReplayGain Album Peak Value of the media represented by
               the current instance.
            </summary>
            <value>
               A <see cref="T:System.Double" /> containing the ReplayGain Album Peak Value of the
               media represented by the current instance or an empty
               array if no value is present.
            </value>
            <remarks>
               <para>When getting the value, the child tags are looped
               through in order and the first non-<see langword="null" />
               and non-empty value is returned.</para>
               <para>When setting the value, it is stored in the first
               comment.</para>
            </remarks>
            <seealso cref="P:TagLib.Tag.ReplayGainAlbumPeak" />
        </member>
        <member name="P:TagLib.Ogg.GroupedComment.Pictures">
            <summary>
               Gets and sets a collection of pictures associated with
               the media represented by the current instance.
            </summary>
            <value>
               A <see cref="T:IPicture[]" /> containing a collection of
               pictures associated with the media represented by the
               current instance or an empty array if none are present.
            </value>
            <remarks>
               <para>When getting the value, the child comments are
               looped through in order and the first non-empty value is
               returned.</para>
               <para>When setting the value, it is stored in the first
               comment.</para>
            </remarks>
            <seealso cref="P:TagLib.Tag.Pictures" />
        </member>
        <member name="P:TagLib.Ogg.GroupedComment.IsEmpty">
            <summary>
               Gets whether or not the current instance is empty.
            </summary>
            <value>
               <see langword="true" /> if all the comments tags are
                empty; otherwise <see langword="false" />.
            </value>
            <seealso cref="P:TagLib.Tag.IsEmpty" />
        </member>
        <member name="M:TagLib.Ogg.GroupedComment.Clear">
            <summary>
               Clears all of the child tags.
            </summary>
        </member>
        <member name="T:TagLib.Ogg.Page">
            <summary>
               This class provides a representation of an Ogg page.
            </summary>
        </member>
        <member name="F:TagLib.Ogg.Page.packets">
            <summary>
               Contains the packets.
            </summary>
        </member>
        <member name="M:TagLib.Ogg.Page.#ctor(TagLib.Ogg.PageHeader)">
            <summary>
               Constructs and intializes a new instance of <see
               cref="T:TagLib.Ogg.Page" /> with a specified header and no packets.
            </summary>
            <param name="header">
               A <see cref="T:TagLib.Ogg.PageHeader"/> object to use as the header of
               the new instance.
            </param>
        </member>
        <member name="M:TagLib.Ogg.Page.#ctor(TagLib.Ogg.File,System.Int64)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Ogg.Page" /> by reading a raw Ogg page from a specified
               position in a specified file.
            </summary>
            <param name="file">
               A <see cref="T:TagLib.Ogg.File" /> object containing the file from
               which the contents of the new instance are to be read.
            </param>
            <param name="position">
               A <see cref="T:System.Int64" /> value specify at what position to
               read.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="file" /> is <see langword="null" />.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
               <paramref name="position" /> is less than zero or greater
               than the size of the file.
            </exception>
            <exception cref="T:TagLib.CorruptFileException">
               The Ogg identifier could not be found at the correct
               location.
            </exception>
        </member>
        <member name="M:TagLib.Ogg.Page.#ctor(TagLib.ByteVectorCollection,TagLib.Ogg.PageHeader)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Ogg.Page" /> with a specified header and packets.
            </summary>
            <param name="packets">
               A <see cref="T:TagLib.ByteVectorCollection" /> object containing
               packets to use for the new instance.
            </param>
            <param name="header">
               A <see cref="T:TagLib.Ogg.PageHeader"/> object to use as the header of
               the new instance.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="packets" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:TagLib.Ogg.Page.Render">
            <summary>
               Renders the current instance as a raw Ogg page.
            </summary>
            <returns>
               A <see cref="T:TagLib.ByteVector" /> object containing the
               rendered version of the current instance.
            </returns>
        </member>
        <member name="P:TagLib.Ogg.Page.Header">
            <summary>
               Gets the header of the current instance.
            </summary>
            <value>
               A <see cref="T:TagLib.Ogg.PageHeader" /> object that applies to the
               current instance.
            </value>
        </member>
        <member name="P:TagLib.Ogg.Page.Packets">
            <summary>
               Gets the packets contained in the current instance.
            </summary>
            <value>
               A <see cref="T:ByteVector[]" /> containing the packets
               contained in the current instance.
            </value>
        </member>
        <member name="P:TagLib.Ogg.Page.Size">
            <summary>
               Gets the total size of the current instance as it
               appeared on disk.
            </summary>
            <value>
               A <see cref="T:System.UInt32" /> value containing the size of the
               page, including the header, as it appeared on disk.
            </value>
        </member>
        <member name="M:TagLib.Ogg.Page.OverwriteSequenceNumbers(TagLib.Ogg.File,System.Int64,System.Collections.Generic.IDictionary{System.UInt32,System.Int32})">
            <summary>
               Overwrites all page headers in a file starting at a
               specified position, shifting the page sequence numbers
               a set amount.
            </summary>
            <param name="file">
               A <see cref="T:TagLib.Ogg.File" /> object containing the file to
               update.
            </param>
            <param name="position">
               A <see cref="T:System.Int64" /> value specify at what position to
               start updating.
            </param>
            <param name="shiftTable">
               A <see cref="T:System.Collections.Generic.IDictionary`2"
               /> object where the key is the serial number of the
               stream to update and the value is the amount to offset
               the page sequence numbers in the stream.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="file" /> or <paramref name="shiftTable"
               /> is <see langword="null" />.
            </exception>
            <remarks>
               When the number of pages in a stream changes, all
               subsequent pages in the stream need to have their page
               sequence number update in order to remain valid.
               Additionally, when the page sequence number changes, the
               page needs to have its checksum recomputed. This makes
               for a costly recalculation if large comment data is
               added.
            </remarks>
        </member>
        <member name="T:TagLib.Ogg.PageFlags">
            <summary>
               Indicates the special properties of a <see cref="T:TagLib.Ogg.Page" />.
            </summary>
        </member>
        <member name="F:TagLib.Ogg.PageFlags.None">
            <summary>
               The page is a normal page.
            </summary>
        </member>
        <member name="F:TagLib.Ogg.PageFlags.FirstPacketContinued">
            <summary>
               The first packet of the page is continued from the
               previous page.
            </summary>
        </member>
        <member name="F:TagLib.Ogg.PageFlags.FirstPageOfStream">
            <summary>
               The page is the first page of the stream.
            </summary>
        </member>
        <member name="F:TagLib.Ogg.PageFlags.LastPageOfStream">
            <summary>
               The page is the last page of the stream.
            </summary>
        </member>
        <member name="T:TagLib.Ogg.PageHeader">
            <summary>
               This structure provides a representation of an Ogg page header.
            </summary>
        </member>
        <member name="F:TagLib.Ogg.PageHeader.packet_sizes">
            <summary>
               Contains the sizes of the packets contained in the
               current instance.
            </summary>
        </member>
        <member name="F:TagLib.Ogg.PageHeader.version">
            <summary>
               Contains the OGG version.
            </summary>
        </member>
        <member name="F:TagLib.Ogg.PageHeader.absolute_granular_position">
            <summary>
               Contains the page absolute granular postion.
            </summary>
        </member>
        <member name="M:TagLib.Ogg.PageHeader.#ctor(System.UInt32,System.UInt32,TagLib.Ogg.PageFlags)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Ogg.PageHeader" /> with a given serial number, page
               number, and flags.
            </summary>
            <param name="streamSerialNumber">
               A <see cref="T:System.UInt32" /> value containing the serial number
               for the stream containing the page described by the new
               instance.
            </param>
            <param name="pageNumber">
               A <see cref="T:System.UInt32" /> value containing the index of the
               page described by the new instance in the stream.
            </param>
            <param name="flags">
               A <see cref="T:TagLib.Ogg.PageFlags" /> object containing the flags
               that apply to the page described by the new instance.
            </param>
        </member>
        <member name="M:TagLib.Ogg.PageHeader.#ctor(TagLib.Ogg.File,System.Int64)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Ogg.PageHeader" /> by reading a raw Ogg page header
               from a specified position in a specified file.
            </summary>
            <param name="file">
               A <see cref="T:TagLib.Ogg.File" /> object containing the file from
               which the contents of the new instance are to be read.
            </param>
            <param name="position">
               A <see cref="T:System.Int64" /> value specify at what position to
               read.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="file" /> is <see langword="null" />.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
               <paramref name="position" /> is less than zero or greater
               than the size of the file.
            </exception>
            <exception cref="T:TagLib.CorruptFileException">
               The Ogg identifier could not be found at the correct
               location.
            </exception>
        </member>
        <member name="M:TagLib.Ogg.PageHeader.#ctor(TagLib.Ogg.PageHeader,System.UInt32,TagLib.Ogg.PageFlags)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Ogg.PageHeader" /> by copying the values from another
               instance, offsetting the page number and applying new
               flags.
            </summary>
            <param name="original">
               A <see cref="T:TagLib.Ogg.PageHeader"/> object to copy the values
               from.
            </param>
            <param name="offset">
               A <see cref="T:System.UInt32"/> value specifying how much to offset
               the page sequence number in the new instance.
            </param>
            <param name="flags">
               A <see cref="T:TagLib.Ogg.PageFlags"/> value specifying the flags to
               use in the new instance.
            </param>
        </member>
        <member name="P:TagLib.Ogg.PageHeader.PacketSizes">
            <summary>
               Gets and sets the sizes for the packets in the page
               described by the current instance.
            </summary>
            <value>
               A <see cref="T:int[]" /> containing the packet sizes.
            </value>
        </member>
        <member name="P:TagLib.Ogg.PageHeader.LastPacketComplete">
            <summary>
               Indicates whether the final packet is continued on the next page
            </summary>
            <value>
               true if the final packet is complete and not continued on the next page
            </value>
        </member>
        <member name="P:TagLib.Ogg.PageHeader.Flags">
            <summary>
               Gets the flags for the page described by the current
               instance.
            </summary>
            <value>
               A <see cref="T:TagLib.Ogg.PageFlags" /> value containing the page
               flags.
            </value>
        </member>
        <member name="P:TagLib.Ogg.PageHeader.AbsoluteGranularPosition">
            <summary>
               Gets the absolute granular position of the page described
               by the current instance.
            </summary>
            <value>
               A <see cref="T:System.Int64" /> value containing the absolute
               granular position of the page.
            </value>
        </member>
        <member name="P:TagLib.Ogg.PageHeader.PageSequenceNumber">
            <summary>
               Gets the sequence number of the page described by the
               current instance.
            </summary>
            <value>
               A <see cref="T:System.UInt32" /> value containing the sequence
               number of the page.
            </value>
        </member>
        <member name="P:TagLib.Ogg.PageHeader.StreamSerialNumber">
            <summary>
               Gets the serial number of stream that the page described
               by the current instance belongs to.
            </summary>
            <value>
               A <see cref="T:System.UInt32" /> value containing the stream serial
               number.
            </value>
        </member>
        <member name="P:TagLib.Ogg.PageHeader.Size">
            <summary>
               Gets the size of the header as it appeared on disk.
            </summary>
            <value>
               A <see cref="T:System.UInt32" /> value containing the header size.
            </value>
        </member>
        <member name="P:TagLib.Ogg.PageHeader.DataSize">
            <summary>
               Gets the size of the data portion of the page described
               by the current instance as it appeared on disk.
            </summary>
            <value>
               A <see cref="T:System.UInt32" /> value containing the data size.
            </value>
        </member>
        <member name="M:TagLib.Ogg.PageHeader.Render">
            <summary>
               Renders the current instance as a raw Ogg page header.
            </summary>
            <returns>
               A <see cref="T:TagLib.ByteVector" /> object containing the
               rendered version of the current instance.
            </returns>
        </member>
        <member name="P:TagLib.Ogg.PageHeader.LacingValues">
            <summary>
               Gets the rendered lacing values for the current instance.
            </summary>
            <value>
               A <see cref="T:TagLib.ByteVector" /> object containing the
               rendered lacing values.
            </value>
        </member>
        <member name="M:TagLib.Ogg.PageHeader.GetHashCode">
            <summary>
               Generates a hash code for the current instance.
            </summary>
            <returns>
               A <see cref="T:System.Int32" /> value containing the hash code for
               the current instance.
            </returns>
        </member>
        <member name="M:TagLib.Ogg.PageHeader.Equals(System.Object)">
            <summary>
               Checks whether or not the current instance is equal to
               another object.
            </summary>
            <param name="other">
               A <see cref="T:System.Object" /> to compare to the current
               instance.
            </param>
            <returns>
               A <see cref="T:System.Boolean" /> value indicating whether or not the
               current instance is equal to <paramref name="other" />.
            </returns>
            <seealso cref="M:System.IEquatable`1.Equals" />
        </member>
        <member name="M:TagLib.Ogg.PageHeader.Equals(TagLib.Ogg.PageHeader)">
            <summary>
               Checks whether or not the current instance is equal to
               another instance of <see cref="T:TagLib.Ogg.PageHeader" />.
            </summary>
            <param name="other">
               A <see cref="T:TagLib.Ogg.PageHeader" /> object to compare to the
               current instance.
            </param>
            <returns>
               A <see cref="T:System.Boolean" /> value indicating whether or not the
               current instance is equal to <paramref name="other" />.
            </returns>
            <seealso cref="M:System.IEquatable`1.Equals" />
        </member>
        <member name="M:TagLib.Ogg.PageHeader.op_Equality(TagLib.Ogg.PageHeader,TagLib.Ogg.PageHeader)">
            <summary>
               Gets whether or not two instances of <see
               cref="T:TagLib.Ogg.PageHeader" /> are equal to eachother.
            </summary>
            <param name="first">
               A <see cref="T:TagLib.Ogg.PageHeader" /> object to compare.
            </param>
            <param name="second">
               A <see cref="T:TagLib.Ogg.PageHeader" /> object to compare.
            </param>
            <returns>
               <see langword="true" /> if <paramref name="first" /> is
               equal to <paramref name="second" />. Otherwise, <see
               langword="false" />.
            </returns>
        </member>
        <member name="M:TagLib.Ogg.PageHeader.op_Inequality(TagLib.Ogg.PageHeader,TagLib.Ogg.PageHeader)">
            <summary>
               Gets whether or not two instances of <see
               cref="T:TagLib.Ogg.PageHeader" /> differ.
            </summary>
            <param name="first">
               A <see cref="T:TagLib.Ogg.PageHeader" /> object to compare.
            </param>
            <param name="second">
               A <see cref="T:TagLib.Ogg.PageHeader" /> object to compare.
            </param>
            <returns>
               <see langword="true" /> if <paramref name="first" /> is
               unequal to <paramref name="second" />. Otherwise, <see
               langword="false" />.
            </returns>
        </member>
        <member name="T:TagLib.Ogg.Paginator">
            <summary>
               This class accepts a sequence of pages for a single Ogg stream,
               accepts changes, and produces a new sequence of pages to write to
               disk.
            </summary>
        </member>
        <member name="F:TagLib.Ogg.Paginator.packets">
            <summary>
               Contains the packets to paginate.
            </summary>
        </member>
        <member name="F:TagLib.Ogg.Paginator.first_page_header">
            <summary>
               Contains the first page header.
            </summary>
        </member>
        <member name="F:TagLib.Ogg.Paginator.codec">
            <summary>
               Contains the codec to use.
            </summary>
        </member>
        <member name="F:TagLib.Ogg.Paginator.pages_read">
            <summary>
               contains the number of pages read.
            </summary>
        </member>
        <member name="M:TagLib.Ogg.Paginator.#ctor(TagLib.Ogg.Codec)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Ogg.Paginator" /> for a given <see cref="T:TagLib.Ogg.Codec" />
               object.
            </summary>
            <param name="codec">
               A <see cref="T:TagLib.Ogg.Codec"/> object to use when processing
               packets.
            </param>
        </member>
        <member name="M:TagLib.Ogg.Paginator.AddPage(TagLib.Ogg.Page)">
            <summary>
               Adds the next page to the current instance.
            </summary>
            <param name="page">
               The next <see cref="T:TagLib.Ogg.Page" /> object found in the stream.
            </param>
        </member>
        <member name="M:TagLib.Ogg.Paginator.SetComment(TagLib.Ogg.XiphComment)">
            <summary>
               Stores a Xiph comment in the codec-specific comment
               packet.
            </summary>
            <param name="comment">
               A <see cref="T:TagLib.Ogg.XiphComment" /> object to store in the
               comment packet.
            </param>
        </member>
        <member name="M:TagLib.Ogg.Paginator.Paginate">
            <summary>
               Repaginates the pages passed into the current instance to
               handle changes made to the Xiph comment.
            </summary>
            <returns>
               A <see cref="T:Page[]" /> containing the new page
               collection.
            </returns>
        </member>
        <member name="M:TagLib.Ogg.Paginator.Paginate(System.Int32@)">
            <summary>
               Repaginates the pages passed into the current instance to
               handle changes made to the Xiph comment.
            </summary>
            <param name="change">
               A <see cref="T:System.Int32" /> value reference containing the
               the difference between the number of pages returned and
               the number of pages that were added to the class.
            </param>
            <returns>
               A <see cref="T:Page[]" /> containing the new page
               collection.
            </returns>
        </member>
        <member name="M:TagLib.Ogg.Paginator.GetLacingValueLength(TagLib.ByteVectorCollection,System.Int32)">
            <summary>
               Gets the number of lacing value bytes that would be
               required for a given packet.
            </summary>
            <param name="packets">
               A <see cref="T:TagLib.ByteVectorCollection" /> object containing
               the packet.
            </param>
            <param name="index">
               A <see cref="T:System.Int32" /> value containing the index of the
               packet to compute.
            </param>
            <returns>
               A <see cref="T:System.Int32" /> value containing the number of bytes
               needed to store the length.
            </returns>
        </member>
        <member name="T:TagLib.Ogg.XiphComment">
            <summary>
               This class extends <see cref="T:TagLib.Tag" /> and implements <see
               cref="T:System.Collections.Generic.IEnumerable`1" /> to provide
               support for reading and writing Xiph comments.
            </summary>
        </member>
        <member name="F:TagLib.Ogg.XiphComment.field_list">
            <summary>
               Contains the comment fields.
            </summary>
        </member>
        <member name="F:TagLib.Ogg.XiphComment.vendor_id">
            <summary>
               Contains the vendor ID.
            </summary>
        </member>
        <member name="F:TagLib.Ogg.XiphComment.SaveBeatsPerMinuteAsTempo">
            <summary>
               Saves BeatsPerMinute tag as either "Tempo" or "BPM"
               based on which was last read.
            </summary>
        </member>
        <member name="F:TagLib.Ogg.XiphComment.pictures">
            <summary>
               Picture instances parsed from the fields.
            </summary>
        </member>
        <member name="F:TagLib.Ogg.XiphComment.picture_fields_dirty">
            <summary>
               true if the picture fields in <see cref="F:TagLib.Ogg.XiphComment.field_list" />
               should be updated from the <see cref="F:TagLib.Ogg.XiphComment.pictures"/> array.
            </summary>
        </member>
        <member name="F:TagLib.Ogg.XiphComment.PICTURE_FIELDS">
            <summary>
               Name of picture fields as defined in the norm.
            </summary>
        </member>
        <member name="F:TagLib.Ogg.XiphComment.EMPTY_PICTURES">
            <summary>
               Cached empty pictures array.
            </summary>
        </member>
        <member name="M:TagLib.Ogg.XiphComment.#ctor">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Ogg.XiphComment" /> with no contents.
            </summary>
        </member>
        <member name="M:TagLib.Ogg.XiphComment.#ctor(TagLib.ByteVector)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Ogg.XiphComment" /> by reading the contents of a raw
               Xiph Comment from a <see cref="T:TagLib.ByteVector" /> object.
            </summary>
            <param name="data">
               A <see cref="T:TagLib.ByteVector" /> object containing a raw Xiph
               comment.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="data" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:TagLib.Ogg.XiphComment.GetField(System.String)">
            <summary>
               Gets the field data for a given field identifier.
            </summary>
            <param name="key">
               A <see cref="T:System.String"/> object containing the field
               identifier.
            </param>
            <returns>
               A <see cref="T:string[]"/> containing the field data or an
               empty array if the field was not found.
            </returns>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="key" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:TagLib.Ogg.XiphComment.GetFirstField(System.String)">
            <summary>
               Gets the first field for a given field identifier.
            </summary>
            <param name="key">
               A <see cref="T:System.String"/> object containing the field
               identifier.
            </param>
            <returns>
               A <see cref="T:System.String"/> containing the field data or <see
               langword="null" /> if the field was not found.
            </returns>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="key" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:TagLib.Ogg.XiphComment.SetField(System.String,System.UInt32,System.String)">
            <summary>
               Sets the contents of a specified field to a number.
            </summary>
            <param name="key">
               A <see cref="T:System.String"/> object containing the field
               identifier.
            </param>
            <param name="number">
               A <see cref="T:System.UInt32" /> value to set the field to.
            </param>
            <param name="format">
               A <see cref="T:System.String" /> value representing the format
               to be used to repreesent the <paramref name="number"/>.
               Default: simple decimal number ("0").
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="key" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:TagLib.Ogg.XiphComment.SetField(System.String,System.String[])">
            <summary>
               Sets the contents of a specified field to the contents of
               a <see cref="T:string[]" />.
            </summary>
            <param name="key">
               A <see cref="T:System.String"/> object containing the field
               identifier.
            </param>
            <param name="values">
               A <see cref="T:string[]"/> containing the values to store
               in the current instance.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="key" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:TagLib.Ogg.XiphComment.RemoveField(System.String)">
            <summary>
               Removes a field and all its values from the current
               instance.
            </summary>
            <param name="key">
               A <see cref="T:System.String"/> object containing the field
               identifier.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="key" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:TagLib.Ogg.XiphComment.Render(System.Boolean)">
            <summary>
               Renders the current instance as a raw Xiph comment,
               optionally adding a framing bit.
            </summary>
            <param name="addFramingBit">
               If <see langword="true" />, a framing bit will be added to
               the end of the content.
            </param>
            <returns>
               A <see cref="T:TagLib.ByteVector"/> object containing the rendered
               version of the current instance.
            </returns>
        </member>
        <member name="P:TagLib.Ogg.XiphComment.FieldCount">
            <summary>
               Gets the number of fields contained in the current
               instance.
            </summary>
            <value>
               A <see cref="T:System.UInt32" /> value containing the number of
               fields in the current instance.
            </value>
        </member>
        <member name="P:TagLib.Ogg.XiphComment.VendorId">
            <summary>
               Gets the vendor ID for the current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> object containing the vendor ID
               for current instance.
            </value>
        </member>
        <member name="M:TagLib.Ogg.XiphComment.Parse(TagLib.ByteVector)">
            <summary>
               Populates and initializes a new instance of <see
               cref="T:TagLib.Ogg.XiphComment" /> by reading the contents of a raw
               Xiph Comment from a <see cref="T:TagLib.ByteVector" /> object.
            </summary>
            <param name="data">
               A <see cref="T:TagLib.ByteVector" /> object containing a raw Xiph
               comment.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="data" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:TagLib.Ogg.XiphComment.EnsurePictureFieldsClean(System.String)">
            <summary>
               If needed, update the pictures field from the value of the
               pictures array.
            </summary>
            <param name="fieldName">
               Name of the field being queried by the user.
               If the field name is not a picture field name, no update will take place.
            </param>
        </member>
        <member name="M:TagLib.Ogg.XiphComment.ParsePictures">
            <summary>
               Parses the pictures from the COVERART and METADATA_BLOCK_PICTURE
               fields contained in the <see cref="F:TagLib.Ogg.XiphComment.field_list" /> variable.
            </summary>
        </member>
        <member name="M:TagLib.Ogg.XiphComment.StorePictures">
            <summary>
               Stores the pictures in the pictures array in the
               METADATA_BLOCK_PICTURE field. Conversion to Flac.Picture is done
               as needed.
            </summary>
        </member>
        <member name="M:TagLib.Ogg.XiphComment.ResetPicturesState(System.String)">
            <summary>
               If the given parameter represents a Xiph field containing
               picture information, clear the currently parsed pictures
               array, so it will be loaded from the field value again
               when the Pictures property is accessed.
            </summary>
            <param name="key">Name of the Xiph field being changed</param>
        </member>
        <member name="M:TagLib.Ogg.XiphComment.IsPictureField(System.String)">
            <summary>
               Returns a value indicating if a field name is a picture field.
            </summary>
            <param name="fieldName">Name of the field</param>
            <returns>
               true if the field represents a field that contains picture art data,
               false otherwise.
            </returns>
        </member>
        <member name="M:TagLib.Ogg.XiphComment.GetEnumerator">
            <summary>
               Gets an enumerator for enumerating through the the field
               identifiers.
            </summary>
            <returns>
               A <see cref="T:System.Collections.IEnumerator`1" /> for
               enumerating through the field identifiers.
            </returns>
        </member>
        <member name="P:TagLib.Ogg.XiphComment.TagTypes">
            <summary>
               Gets the tag types contained in the current instance.
            </summary>
            <value>
               Always <see cref="F:TagLib.TagTypes.Xiph" />.
            </value>
        </member>
        <member name="P:TagLib.Ogg.XiphComment.Title">
            <summary>
               Gets and sets the title for the media described by the
               current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> object containing the title for
               the media described by the current instance or <see
               langword="null" /> if no value is present.
            </value>
            <remarks>
               This property is implemented using the "TITLE" field.
            </remarks>
        </member>
        <member name="P:TagLib.Ogg.XiphComment.TitleSort">
            <summary>
               Gets and sets the sort names for the Track Title of
               the media described by the current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> containing the sort name of 
               the Track Title of the media described by the current
               instance or null if no value is present.
            </value>
            <remarks>
               This property is implemented using the "TITLESORT"
               field.
               http://musicbrainz.org/doc/PicardTagMapping
            </remarks>
        </member>
        <member name="P:TagLib.Ogg.XiphComment.Subtitle">
            <summary>
               Gets and sets a short description, one-liner. 
               It represents the tagline of the Video/music.
            </summary>
            <value>
               A <see cref="T:System.String" /> containing the subtitle
               the media represented by the current instance 
               or an empty array if no value is present.
            </value>
            <remarks>
               <para>This field gives a nice/short precision to 
               the title, which is typically below the title on the
               front cover of a media.
               For example, for "Back to the future", this would be 
               "It's About Time". 
               </para>
            </remarks>
            <remarks>
               This property is implemented using the "SUBTITLE"
               non-standard field.
            </remarks>
        </member>
        <member name="P:TagLib.Ogg.XiphComment.Description">
            <summary>
               Gets and sets a short description of the media.
               For a music, this could be the comment that the artist
               made of its artwork. For a video, this should be a 
               short summary of the story/plot, but a spoiler. This
               should give the impression of what to expect in the
               media.
            </summary>
            <value>
               A <see cref="T:System.String" /> containing the subtitle
               the media represented by the current instance 
               or an empty array if no value is present.
            </value>
            <remarks>
               This property is implemented using the "DESCRIPTION"
               field.
               http://musicbrainz.org/doc/PicardTagMapping
            </remarks>
        </member>
        <member name="P:TagLib.Ogg.XiphComment.Performers">
            <summary>
               Gets and sets the performers or artists who performed in
               the media described by the current instance.
            </summary>
            <value>
               A <see cref="T:string[]" /> containing the performers or
               artists who performed in the media described by the
               current instance or an empty array if no value is
               present.
            </value>
            <remarks>
               This property is implemented using the "ARTIST" field.
            </remarks>
        </member>
        <member name="P:TagLib.Ogg.XiphComment.PerformersSort">
            <summary>
               Gets and sets the sort names of the performers or artists
               who performed in the media described by the current instance.
            </summary>
            <value>
               A <see cref="T:string[]" /> containing the sort names for
               the performers or artists who performed in the media
               described by the current instance, or an empty array if
               no value is present. 
            </value>
            <remarks>
               This property is implemented using the "ARTISTSORT" field.
               http://musicbrainz.org/doc/PicardTagMapping
            </remarks>
        </member>
        <member name="P:TagLib.Ogg.XiphComment.PerformersRole">
            <summary>
               Gets and sets the Charaters for a video media, or
               instruments played for music media. 
               This should match the <see cref="P:TagLib.Ogg.XiphComment.Performers"/> array (for
               each person correspond one/more role). Several roles for
               the same artist/actor can be made up with semicolons. 
               For example, "Marty McFly; Marty McFly Jr.; Marlene McFly".
            </summary>
            <remarks>
               <para> This is typically usefull for movies, although the
               instrument played by each artist in a music may be of
               relevance.
               </para>
               <para>It is highly important to match each role to the 
               performers. This means that a role may be <see 
               langword="null"/> to keep the match between a
               Performers[i] and PerformersRole[i].
               </para>
            </remarks>
            <remarks>
               This property is implemented using the "ARTISTROLE" 
               non-standard field.
            </remarks>
        </member>
        <member name="P:TagLib.Ogg.XiphComment.AlbumArtists">
            <summary>
               Gets and sets the band or artist who is credited in the
               creation of the entire album or collection containing the
               media described by the current instance.
            </summary>
            <value>
               A <see cref="T:string[]" /> containing the band or artist
               who is credited in the creation of the entire album or
               collection containing the media described by the current
               instance or an empty array if no value is present.
            </value>
            <remarks>
               This property is implemented using the "ALBUMARTIST"
               field.
            </remarks>
        </member>
        <member name="P:TagLib.Ogg.XiphComment.AlbumArtistsSort">
            <summary>
               Gets and sets the sort names for the band or artist who
               is credited in the creation of the entire album or
               collection containing the media described by the
               current instance.
            </summary>
            <value>
               A <see cref="T:string[]" /> containing the sort names
               for the band or artist who is credited in the creation
               of the entire album or collection containing the media
               described by the current instance or an empty array if
               no value is present.
            </value>
            <remarks>
               This property is implemented using the "ALBUMARTISTSORT"
               field.
               http://musicbrainz.org/doc/PicardTagMapping
            </remarks>
        </member>
        <member name="P:TagLib.Ogg.XiphComment.Composers">
            <summary>
               Gets and sets the composers of the media represented by
               the current instance.
            </summary>
            <value>
               A <see cref="T:string[]" /> containing the composers of the
               media represented by the current instance or an empty
               array if no value is present.
            </value>
            <remarks>
               This property is implemented using the "COMPOSER" field.
            </remarks>
        </member>
        <member name="P:TagLib.Ogg.XiphComment.ComposersSort">
            <summary>
               Gets and sets the sort names for the composers of
               the media described by the current instance.
            </summary>
            <value>
               A <see cref="T:string[]" /> containing the sort names
               for the composer of the media described by the current
               instance or an empty array if no value is present.
            </value>
            <remarks>
               This property is implemented using the "COMPOSERSORT"
               field.
               http://musicbrainz.org/doc/PicardTagMapping
            </remarks>
        </member>
        <member name="P:TagLib.Ogg.XiphComment.Album">
            <summary>
               Gets and sets the album of the media represented by the
               current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> object containing the album of
               the media represented by the current instance or <see
               langword="null" /> if no value is present.
            </value>
            <remarks>
               This property is implemented using the "ALBUM" field.
            </remarks>
        </member>
        <member name="P:TagLib.Ogg.XiphComment.AlbumSort">
            <summary>
               Gets and sets the sort names for the Album Title of
               the media described by the current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> containing the sort name of 
               the Album Title of the media described by the current
               instance or null if no value is present.
            </value>
            <remarks>
               This property is implemented using the "ALBUMSORT"
               field.
               http://musicbrainz.org/doc/PicardTagMapping
            </remarks>
        </member>
        <member name="P:TagLib.Ogg.XiphComment.Comment">
            <summary>
               Gets and sets a user comment on the media represented by
               the current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> object containing user comments
               on the media represented by the current instance or <see
               langword="null" /> if no value is present.
            </value>
            <remarks>
               This property is implemented using the "COMMENT" field.
            </remarks>
        </member>
        <member name="P:TagLib.Ogg.XiphComment.Genres">
            <summary>
               Gets and sets the genres of the media represented by the
               current instance.
            </summary>
            <value>
               A <see cref="T:string[]" /> containing the genres of the
               media represented by the current instance or an empty
               array if no value is present.
            </value>
            <remarks>
               This property is implemented using the "GENRE" field.
            </remarks>
        </member>
        <member name="P:TagLib.Ogg.XiphComment.Year">
            <summary>
               Gets and sets the year that the media represented by the
               current instance was recorded.
            </summary>
            <value>
               A <see cref="T:System.UInt32" /> containing the year that the media
               represented by the current instance was created or zero
               if no value is present.
            </value>
            <remarks>
               This property is implemented using the "DATE" field. If a
               value greater than 9999 is set, this property will be
               cleared.
            </remarks>
        </member>
        <member name="P:TagLib.Ogg.XiphComment.Track">
            <summary>
               Gets and sets the position of the media represented by
               the current instance in its containing album.
            </summary>
            <value>
               A <see cref="T:System.UInt32" /> containing the position of the
               media represented by the current instance in its
               containing album or zero if not specified.
            </value>
            <remarks>
               This property is implemented using the "TRACKNUMER"
               field.
            </remarks>
        </member>
        <member name="P:TagLib.Ogg.XiphComment.TrackCount">
            <summary>
               Gets and sets the number of tracks in the album
               containing the media represented by the current instance.
            </summary>
            <value>
               A <see cref="T:System.UInt32" /> containing the number of tracks in
               the album containing the media represented by the current
               instance or zero if not specified.
            </value>
            <remarks>
               This property is implemented using the "TRACKTOTAL" field
               but is capable of reading from "TRACKNUMBER" if the total
               is stored in {track}/{count} format.
            </remarks>
        </member>
        <member name="P:TagLib.Ogg.XiphComment.Disc">
            <summary>
               Gets and sets the number of the disc containing the media
               represented by the current instance in the boxed set.
            </summary>
            <value>
               A <see cref="T:System.UInt32" /> containing the number of the disc
               containing the media represented by the current instance
               in the boxed set.
            </value>
            <remarks>
               This property is implemented using the "DISCNUMBER"
               field.
            </remarks>
        </member>
        <member name="P:TagLib.Ogg.XiphComment.DiscCount">
            <summary>
               Gets and sets the number of discs in the boxed set
               containing the media represented by the current instance.
            </summary>
            <value>
               A <see cref="T:System.UInt32" /> containing the number of discs in
               the boxed set containing the media represented by the
               current instance or zero if not specified.
            </value>
            <remarks>
               This property is implemented using the "DISCTOTAL" field
               but is capable of reading from "DISCNUMBER" if the total
               is stored in {disc}/{count} format.
            </remarks>
        </member>
        <member name="P:TagLib.Ogg.XiphComment.Lyrics">
            <summary>
               Gets and sets the lyrics or script of the media
               represented by the current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> object containing the lyrics or
               script of the media represented by the current instance
               or <see langword="null" /> if no value is present.
            </value>
            <remarks>
               This property is implemented using the "LYRICS" field.
            </remarks>
        </member>
        <member name="P:TagLib.Ogg.XiphComment.Grouping">
            <summary>
               Gets and sets the grouping on the album which the media
               in the current instance belongs to.
            </summary>
            <value>
               A <see cref="T:System.String" /> object containing the grouping on
               the album which the media in the current instance belongs
               to or <see langword="null" /> if no value is present.
            </value>
            <remarks>
               This property is implemented using the "GROUPING" field.
            </remarks>
        </member>
        <member name="P:TagLib.Ogg.XiphComment.BeatsPerMinute">
            <summary>
               Gets and sets the number of beats per minute in the audio
               of the media represented by the current instance.
            </summary>
            <value>
               A <see cref="T:System.UInt32" /> containing the number of beats per
               minute in the audio of the media represented by the
               current instance, or zero if not specified.
            </value>
            <remarks>
               This property is implemented using the "TEMPO" field.
               Since there is no official definition, this property is
               also implemented using the "BPM" field.
            </remarks>
        </member>
        <member name="P:TagLib.Ogg.XiphComment.Conductor">
            <summary>
               Gets and sets the conductor or director of the media
               represented by the current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> object containing the conductor
               or director of the media represented by the current
               instance or <see langword="null" /> if no value present.
            </value>
            <remarks>
               This property is implemented using the "CONDUCTOR" field.
            </remarks>
        </member>
        <member name="P:TagLib.Ogg.XiphComment.Copyright">
            <summary>
               Gets and sets the copyright information for the media
               represented by the current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> object containing the copyright
               information for the media represented by the current
               instance or <see langword="null" /> if no value present.
            </value>
            <remarks>
               This property is implemented using the "COPYRIGHT" field.
            </remarks>
        </member>
        <member name="P:TagLib.Ogg.XiphComment.DateTagged">
            <summary>
               Gets and sets the date at which the tag has been written.
            </summary>
            <value>
               A nullable <see cref="T:System.DateTime" /> object containing the 
               date at which the tag has been written, or <see 
               langword="null" /> if no value present.
            </value>
            <remarks>
               This property is implemented using the "DATETAGGED" 
               non-standard field. It used the the ISO 8601 standard:
               YYYY-MM-DDTHH:MM:SS
               <see url="https://wiki.xiph.org/VorbisComment#Date_and_time"/> 
            </remarks>
        </member>
        <member name="P:TagLib.Ogg.XiphComment.MusicBrainzArtistId">
            <summary>
               Gets and sets the MusicBrainz Artist ID for the media
               represented by the current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> object containing the MusicBrainz
               ArtistID for the media represented by the current
               instance or <see langword="null" /> if no value present.
            </value>
            <remarks>
               This property is implemented using the "MUSICBRAINZ_ARTISTID" field.
            </remarks>
        </member>
        <member name="P:TagLib.Ogg.XiphComment.MusicBrainzReleaseGroupId">
            <summary>
               Gets and sets the MusicBrainz Release Group ID for the media
               represented by the current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> object containing the MusicBrainz
               ReleaseGroupID for the media represented by the current
               instance or <see langword="null" /> if no value present.
            </value>
            <remarks>
               This property is implemented using the "MUSICBRAINZ_RELEASEGROUPID" field.
            </remarks>
        </member>
        <member name="P:TagLib.Ogg.XiphComment.MusicBrainzReleaseId">
            <summary>
               Gets and sets the MusicBrainz Release ID for the media
               represented by the current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> object containing the MusicBrainz
               ReleaseID for the media represented by the current
               instance or <see langword="null" /> if no value present.
            </value>
            <remarks>
               This property is implemented using the "MUSICBRAINZ_ALBUMID" field.
            </remarks>
        </member>
        <member name="P:TagLib.Ogg.XiphComment.MusicBrainzReleaseArtistId">
            <summary>
               Gets and sets the MusicBrainz Release Artist ID for the media
               represented by the current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> object containing the MusicBrainz
               ReleaseArtistID for the media represented by the current
               instance or <see langword="null" /> if no value present.
            </value>
            <remarks>
               This property is implemented using the "MUSICBRAINZ_ALBUMARTISTID" field.
            </remarks>
        </member>
        <member name="P:TagLib.Ogg.XiphComment.MusicBrainzTrackId">
            <summary>
               Gets and sets the MusicBrainz Track ID for the media
               represented by the current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> object containing the MusicBrainz
               TrackID for the media represented by the current
               instance or <see langword="null" /> if no value present.
            </value>
            <remarks>
               This property is implemented using the "MUSICBRAINZ_TRACKID" field.
            </remarks>
        </member>
        <member name="P:TagLib.Ogg.XiphComment.MusicBrainzDiscId">
            <summary>
               Gets and sets the MusicBrainz Disc ID for the media
               represented by the current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> object containing the MusicBrainz
               DiscID for the media represented by the current
               instance or <see langword="null" /> if no value present.
            </value>
            <remarks>
               This property is implemented using the "MUSICBRAINZ_DISCID" field.
            </remarks>
        </member>
        <member name="P:TagLib.Ogg.XiphComment.MusicIpId">
            <summary>
               Gets and sets the MusicIP PUID for the media
               represented by the current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> object containing the MusicIP PUID
               for the media represented by the current
               instance or <see langword="null" /> if no value present.
            </value>
            <remarks>
               This property is implemented using the "MUSICIP_PUID" field.
            </remarks>
        </member>
        <member name="P:TagLib.Ogg.XiphComment.AmazonId">
            <summary>
               Gets and sets the Amazon ID for the media
               represented by the current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> object containing the AmazonID
               for the media represented by the current
               instance or <see langword="null" /> if no value present.
            </value>
            <remarks>
               This property is implemented using the "ASIN" field.
            </remarks>
        </member>
        <member name="P:TagLib.Ogg.XiphComment.MusicBrainzReleaseStatus">
            <summary>
               Gets and sets the MusicBrainz Release Status for the media
               represented by the current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> object containing the MusicBrainz
               ReleaseStatus for the media represented by the current
               instance or <see langword="null" /> if no value present.
            </value>
            <remarks>
               This property is implemented using the "MUSICBRAINZ_ALBUMSTATUS" field.
            </remarks>
        </member>
        <member name="P:TagLib.Ogg.XiphComment.MusicBrainzReleaseType">
            <summary>
               Gets and sets the MusicBrainz Release Type for the media
               represented by the current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> object containing the MusicBrainz
               ReleaseType for the media represented by the current
               instance or <see langword="null" /> if no value present.
            </value>
            <remarks>
               This property is implemented using the "MUSICBRAINZ_ALBUMTYPE" field.
            </remarks>
        </member>
        <member name="P:TagLib.Ogg.XiphComment.MusicBrainzReleaseCountry">
            <summary>
               Gets and sets the MusicBrainz Release Country for the media
               represented by the current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> object containing the MusicBrainz
               ReleaseCountry for the media represented by the current
               instance or <see langword="null" /> if no value present.
            </value>
            <remarks>
               This property is implemented using the "RELEASECOUNTRY" field.
            </remarks>
        </member>
        <member name="P:TagLib.Ogg.XiphComment.Pictures">
            <summary>
               Gets and sets a collection of pictures associated with
               the media represented by the current instance.
            </summary>
            <value>
               A <see cref="T:IPicture[]" /> containing a collection of
               pictures associated with the media represented by the
               current instance or an empty array if none are present.
            </value>
            <remarks>
               <para>This property is implemented using the COVERART
               field.</para>
            </remarks>
        </member>
        <member name="P:TagLib.Ogg.XiphComment.IsCompilation">
            <summary>
               Gets and sets whether or not the album described by the
               current instance is a compilation.
            </summary>
            <value>
               A <see cref="T:System.Boolean" /> value indicating whether or not the
               album described by the current instance is a compilation.
            </value>
            <remarks>
               This property is implemented using the "COMPILATION" field.
            </remarks>
        </member>
        <member name="P:TagLib.Ogg.XiphComment.ReplayGainTrackGain">
            <summary>
               Gets and sets the ReplayGain track gain in dB.
            </summary>
            <value>
               A <see cref="T:System.Boolean" /> value in dB for the track gain as
               per the ReplayGain specification.
            </value>
            <remarks>
               This property is implemented using the 
               "REPLAYGAIN_TRACK_GAIN" field. Set the value to double.NaN
               to clear the field.
            </remarks>
        </member>
        <member name="P:TagLib.Ogg.XiphComment.ReplayGainTrackPeak">
            <summary>
               Gets and sets the ReplayGain track peak sample.
            </summary>
            <value>
               A <see cref="T:System.Boolean" /> value for the track peak as per the
               ReplayGain specification.
            </value>
            <remarks>
               This property is implemented using the 
               "REPLAYGAIN_TRACK_PEAK" field. Set the value to double.NaN
               to clear the field.
            </remarks>
        </member>
        <member name="P:TagLib.Ogg.XiphComment.ReplayGainAlbumGain">
            <summary>
               Gets and sets the ReplayGain album gain in dB.
            </summary>
            <value>
               A <see cref="T:System.Boolean" /> value in dB for the album gain as
               per the ReplayGain specification.
            </value>
            <remarks>
               This property is implemented using the 
               "REPLAYGAIN_ALBUM_GAIN" field. Set the value to double.NaN
               to clear the field.
            </remarks>
        </member>
        <member name="P:TagLib.Ogg.XiphComment.ReplayGainAlbumPeak">
            <summary>
               Gets and sets the ReplayGain album peak sample.
            </summary>
            <value>
               A <see cref="T:System.Boolean" /> value for the album peak as per the
               ReplayGain specification.
            </value>
            <remarks>
               This property is implemented using the 
               "REPLAYGAIN_ALBUM_PEAK" field. Set the value to double.NaN
               to clear the field.
            </remarks>
        </member>
        <member name="P:TagLib.Ogg.XiphComment.InitialKey">
            <summary>
               Gets and sets the initial key of the song.
            </summary>
            <value>
               A <see cref="T:System.String" /> object containing the initial key of the song.
            </value>
            <remarks>
               This property is implemented using the "INITIALKEY" field.
            </remarks>
        </member>
        <member name="P:TagLib.Ogg.XiphComment.RemixedBy">
            <summary>
               Gets and sets the remixer of the song.
            </summary>
            <value>
               A <see cref="T:System.String" /> object containing the remixer of the song.
            </value>
            <remarks>
               This property is implemented using the "REMIXEDBY" field.
            </remarks>
        </member>
        <member name="P:TagLib.Ogg.XiphComment.Publisher">
            <summary>
               Gets and sets the publisher of the song.
            </summary>
            <value>
               A <see cref="T:System.String" /> object containing the publisher of the song.
            </value>
            <remarks>
               This property is implemented using the "ORGANIZATION" field.
            </remarks>
        </member>
        <member name="P:TagLib.Ogg.XiphComment.ISRC">
            <summary>
               Gets and sets the ISRC (International Standard Recording Code) of the song.
            </summary>
            <value>
               A <see cref="T:System.String" /> object containing the ISRC of the song.
            </value>
            <remarks>
               This property is implemented using the "ISRC" field.
            </remarks>
        </member>
        <member name="P:TagLib.Ogg.XiphComment.IsEmpty">
            <summary>
               Gets whether or not the current instance is empty.
            </summary>
            <value>
               <see langword="true" /> if the current instance does not
               any values. Otherwise <see langword="false" />.
            </value>
        </member>
        <member name="M:TagLib.Ogg.XiphComment.Clear">
            <summary>
               Clears the values stored in the current instance.
            </summary>
        </member>
        <member name="T:TagLib.PictureType">
            <summary>
               Specifies the type of content appearing in the picture.
            </summary>
        </member>
        <member name="F:TagLib.PictureType.Other">
            <summary>
               The picture is of a type other than those specified.
            </summary>
        </member>
        <member name="F:TagLib.PictureType.FileIcon">
            <summary>
               The picture is a 32x32 PNG image that should be used when
               displaying the file in a browser.
            </summary>
        </member>
        <member name="F:TagLib.PictureType.OtherFileIcon">
            <summary>
               The picture is of an icon different from <see
               cref="F:TagLib.PictureType.FileIcon" />.
            </summary>
        </member>
        <member name="F:TagLib.PictureType.FrontCover">
            <summary>
               The picture is of the front cover of the album.
            </summary>
        </member>
        <member name="F:TagLib.PictureType.BackCover">
            <summary>
               The picture is of the back cover of the album.
            </summary>
        </member>
        <member name="F:TagLib.PictureType.LeafletPage">
            <summary>
               The picture is of a leaflet page including with the
               album.
            </summary>
        </member>
        <member name="F:TagLib.PictureType.Media">
            <summary>
               The picture is of the album or disc itself.
            </summary>
        </member>
        <member name="F:TagLib.PictureType.LeadArtist">
            <summary>
               The picture is of the lead artist or soloist.
            </summary>
        </member>
        <member name="F:TagLib.PictureType.Artist">
            <summary>
               The picture is of the artist or performer.
            </summary>
        </member>
        <member name="F:TagLib.PictureType.Conductor">
            <summary>
               The picture is of the conductor.
            </summary>
        </member>
        <member name="F:TagLib.PictureType.Band">
            <summary>
               The picture is of the band or orchestra.
            </summary>
        </member>
        <member name="F:TagLib.PictureType.Composer">
            <summary>
               The picture is of the composer.
            </summary>
        </member>
        <member name="F:TagLib.PictureType.Lyricist">
            <summary>
               The picture is of the lyricist or text writer.
            </summary>
        </member>
        <member name="F:TagLib.PictureType.RecordingLocation">
            <summary>
               The picture is of the recording location or studio.
            </summary>
        </member>
        <member name="F:TagLib.PictureType.DuringRecording">
            <summary>
               The picture is one taken during the track's recording.
            </summary>
        </member>
        <member name="F:TagLib.PictureType.DuringPerformance">
            <summary>
               The picture is one taken during the track's performance.
            </summary>
        </member>
        <member name="F:TagLib.PictureType.MovieScreenCapture">
            <summary>
               The picture is a capture from a movie screen.
            </summary>
        </member>
        <member name="F:TagLib.PictureType.ColoredFish">
            <summary>
               The picture is of a large, colored fish.
            </summary>
        </member>
        <member name="F:TagLib.PictureType.Illustration">
            <summary>
               The picture is an illustration related to the track.
            </summary>
        </member>
        <member name="F:TagLib.PictureType.BandLogo">
            <summary>
               The picture contains the logo of the band or performer.
            </summary>
        </member>
        <member name="F:TagLib.PictureType.PublisherLogo">
            <summary>
               The picture is the logo of the publisher or record
               company.
            </summary>
        </member>
        <member name="F:TagLib.PictureType.NotAPicture">
            <summary>
               In fact, this is not a Picture, but another file-type.
            </summary>
        </member>
        <member name="T:TagLib.IPicture">
            <summary>
               This interface provides generic information about a picture,
               including its contents, as used by various formats.
            </summary>
        </member>
        <member name="P:TagLib.IPicture.MimeType">
            <summary>
               Gets and sets the mime-type of the picture data
               stored in the current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> object containing the mime-type
               of the picture data stored in the current instance.
            </value>
        </member>
        <member name="P:TagLib.IPicture.Type">
            <summary>
               Gets and sets the type of content visible in the picture
               stored in the current instance.
            </summary>
            <value>
               A <see cref="T:TagLib.PictureType" /> containing the type of
               content visible in the picture stored in the current
               instance.
            </value>
        </member>
        <member name="P:TagLib.IPicture.Filename">
            <summary>
               Gets and sets a filename of the picture stored in the
               current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> object containing the filename,
               with its extension, of the picture stored in the current 
               instance.
            </value>
        </member>
        <member name="P:TagLib.IPicture.Description">
            <summary>
               Gets and sets a description of the picture stored in the
               current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> object containing a description
               of the picture stored in the current instance.
            </value>
        </member>
        <member name="P:TagLib.IPicture.Data">
            <summary>
               Gets and sets the picture data stored in the current
               instance.
            </summary>
            <value>
               A <see cref="T:TagLib.ByteVector" /> object containing the picture
               data stored in the current instance.
            </value>
        </member>
        <member name="T:TagLib.Picture">
            <summary>
               This class implements <see cref="T:TagLib.IPicture" /> and provides
               mechanisms for loading pictures from files.
            </summary>
        </member>
        <member name="F:TagLib.Picture.lutExtensionMime">
            <summary>
               Look-Up-Table associating a file-extension to 
               a Mime-Type 
            </summary>
        </member>
        <member name="M:TagLib.Picture.#ctor">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Picture" /> with no data or values.
            </summary>
        </member>
        <member name="M:TagLib.Picture.#ctor(System.String)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Picture" /> by reading in the contents of a
               specified file.
            </summary>
            <param name="path">
               A <see cref="T:System.String"/> object containing the path of the
               file to read.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="path" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:TagLib.Picture.#ctor(TagLib.File.IFileAbstraction)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Picture" /> by reading in the contents of a
               specified file abstraction.
            </summary>
            <param name="abstraction">
               A <see cref="T:TagLib.File.IFileAbstraction"/> object containing
               abstraction of the file to read.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="abstraction" /> is <see langword="null"
               />.
            </exception>
        </member>
        <member name="M:TagLib.Picture.#ctor(TagLib.ByteVector)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Picture" /> by using the contents of a <see
               cref="T:TagLib.ByteVector" /> object.
            </summary>
            <param name="data">
               A <see cref="T:TagLib.ByteVector"/> object containing picture data
               to use.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="data" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:TagLib.Picture.#ctor(TagLib.IPicture)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Picture" /> by doing a shallow copy of <see 
               cref="T:TagLib.IPicture" />.
            </summary>
            <param name="picture">
               A <see cref="T:TagLib.IPicture"/> object containing picture data
               to convert to an Picture.
            </param>
        </member>
        <member name="M:TagLib.Picture.CreateFromPath(System.String)">
            <summary>
               Creates a new <see cref="T:TagLib.Picture" />, populating it with
               the contents of a file.
            </summary>
            <param name="filename">
               A <see cref="T:System.String" /> object containing the path to a
               file to read the picture from.
            </param>
            <returns>
               A new <see cref="T:TagLib.Picture" /> object containing the
               contents of the file and with a mime-type guessed from
               the file's contents.
            </returns>
        </member>
        <member name="M:TagLib.Picture.CreateFromFile(TagLib.File.IFileAbstraction)">
            <summary>
               Creates a new <see cref="T:TagLib.Picture" />, populating it with
               the contents of a file.
            </summary>
            <param name="abstraction">
               A <see cref="T:TagLib.File.IFileAbstraction" /> object containing
               the file abstraction to read the picture from.
            </param>
            <returns>
               A new <see cref="T:TagLib.Picture" /> object containing the
               contents of the file and with a mime-type guessed from
               the file's contents.
            </returns>
        </member>
        <member name="P:TagLib.Picture.MimeType">
            <summary>
               Gets and sets the mime-type of the picture data
               stored in the current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> object containing the mime-type
               of the picture data stored in the current instance.
            </value>
        </member>
        <member name="P:TagLib.Picture.Type">
            <summary>
               Gets and sets the type of content visible in the picture
               stored in the current instance.
            </summary>
            <value>
               A <see cref="T:TagLib.PictureType" /> containing the type of
               content visible in the picture stored in the current
               instance.
            </value>
        </member>
        <member name="P:TagLib.Picture.Filename">
            <summary>
               Gets and sets a filename of the picture stored in the
               current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> object containing a fielname, with
               extension, of the picture stored in the current instance.
            </value>
        </member>
        <member name="P:TagLib.Picture.Description">
            <summary>
               Gets and sets a description of the picture stored in the
               current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> object containing a description
               of the picture stored in the current instance.
            </value>
        </member>
        <member name="P:TagLib.Picture.Data">
            <summary>
               Gets and sets the picture data stored in the current
               instance.
            </summary>
            <value>
               A <see cref="T:TagLib.ByteVector" /> object containing the picture
               data stored in the current instance.
            </value>
        </member>
        <member name="M:TagLib.Picture.GetExtensionFromData(TagLib.ByteVector)">
            <summary>
               Retrieve a mime type from raw file data by reading
               the first few bytes of the file. 
               Less accurate than <see cref="M:TagLib.Picture.GetExtensionFromMime(System.String)"/>.
            </summary>
            <param name="data">
               file name with extension, or just extension of a file
            </param>
            <returns>File-extension as <see cref="T:System.String"/>, or null if 
               not identified</returns>
        </member>
        <member name="M:TagLib.Picture.GetExtensionFromMime(System.String)">
            <summary>
               Gets the file-extension that fits a mime-type. 
               More accurate than <see cref="M:TagLib.Picture.GetExtensionFromData(TagLib.ByteVector)"/>.
            </summary>
            <param name="mime">
               Mime-type as <see cref="T:System.String"/>.
            </param>
            <returns>File-extension as <see cref="T:System.String"/>, or null if 
               not identified</returns>
        </member>
        <member name="M:TagLib.Picture.GetMimeFromExtension(System.String)">
            <summary>
               Gets the mime type of from a file-name (it's extensions). 
               If the format cannot be identified, it assumed to be a Binary file.
            </summary>
            <param name="name">
               file name with extension, or just extension of a file
            </param>
            <returns>Mime-type as <see cref="T:System.String"/></returns>
        </member>
        <member name="T:TagLib.PictureLazy">
            <summary>
               This class implements <see cref="T:TagLib.IPicture" /> and provides
               mechanisms for loading pictures from files.
               Contrary to <see cref="T:TagLib.Picture" />, a reference to a file
               where the picture is located can be given and the picture 
               is lazily loaded from the file, meaning that it will be 
               read from the file only when needed. This saves time and 
               memory if the picture loading is not required.
            </summary>
        </member>
        <member name="F:TagLib.PictureLazy.mime_type">
            <summary>
               Contains the mime-type.
            </summary>
        </member>
        <member name="F:TagLib.PictureLazy.type">
            <summary>
               Contains the content type.
            </summary>
        </member>
        <member name="F:TagLib.PictureLazy.filename">
            <summary>
               Contains the filename.
            </summary>
        </member>
        <member name="F:TagLib.PictureLazy.data">
            <summary>
               Contains the picture data.
            </summary>
        </member>
        <member name="F:TagLib.PictureLazy.file">
            <summary>
            Stream where the picture is located
            </summary>
        </member>
        <member name="F:TagLib.PictureLazy.stream_offset">
            <summary>
            Offset from where the picture start in the <see cref="F:TagLib.PictureLazy.file"/>
            </summary>
        </member>
        <member name="F:TagLib.PictureLazy.stream_size">
            <summary>
            Size of the picture in the <see cref="F:TagLib.PictureLazy.file"/> (-1 = until end of Stream)
            </summary>
        </member>
        <member name="M:TagLib.PictureLazy.#ctor">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.PictureLazy" /> with no data or values.
            </summary>
        </member>
        <member name="M:TagLib.PictureLazy.#ctor(System.String)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.PictureLazy" /> from a file.
               The content will be lazily loaded.
            </summary>
            <param name="path">
               A <see cref="T:System.String"/> object containing the path of the
               file to read.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="path" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:TagLib.PictureLazy.#ctor(TagLib.File.IFileAbstraction,System.Int64,System.Int64)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.PictureLazy" /> from a file abstraction.
               The content will be lazily loaded.
            </summary>
            <param name="abstraction">
               A <see cref="T:TagLib.File.IFileAbstraction"/> object containing
               abstraction of the file to read.
            </param>
            <param name="offset">
               The position in bytes where the picture is located in the
               <see cref="T:TagLib.File.IFileAbstraction"/>.
            </param>
            <param name="size">
               The size in bytes of the picture in the
               <see cref="T:TagLib.File.IFileAbstraction"/> (default: read all).
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="abstraction" /> is <see langword="null"
               />.
            </exception>
        </member>
        <member name="M:TagLib.PictureLazy.#ctor(TagLib.ByteVector)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.PictureLazy" /> by using the contents of a <see
               cref="T:TagLib.ByteVector" /> object.
               The content will not be lazily loaded.
            </summary>
            <param name="data">
               A <see cref="T:TagLib.ByteVector"/> object containing picture data
               to use.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="data" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:TagLib.PictureLazy.#ctor(TagLib.IPicture)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.PictureLazy" /> by doing a shallow copy of <see 
               cref="T:TagLib.IPicture" />.
               The content will not be lazily loaded.
            </summary>
            <param name="picture">
               A <see cref="T:TagLib.IPicture"/> object containing picture data
               to convert to an Picture.
            </param>
        </member>
        <member name="M:TagLib.PictureLazy.Load">
            <summary>
            Load the picture data from the file,
            if not done yet.
            </summary>
        </member>
        <member name="P:TagLib.PictureLazy.MimeType">
            <summary>
               Gets and sets the mime-type of the picture data
               stored in the current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> object containing the mime-type
               of the picture data stored in the current instance.
            </value>
        </member>
        <member name="P:TagLib.PictureLazy.Type">
            <summary>
               Gets and sets the type of content visible in the picture
               stored in the current instance.
            </summary>
            <value>
               A <see cref="T:TagLib.PictureType" /> containing the type of
               content visible in the picture stored in the current
               instance.
            </value>
        </member>
        <member name="P:TagLib.PictureLazy.Filename">
            <summary>
               Gets and sets a filename of the picture stored in the
               current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> object containing a fielname, with
               extension, of the picture stored in the current instance.
            </value>
        </member>
        <member name="P:TagLib.PictureLazy.Description">
            <summary>
               Gets and sets a description of the picture stored in the
               current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> object containing a description
               of the picture stored in the current instance.
            </value>
        </member>
        <member name="P:TagLib.PictureLazy.Data">
            <summary>
               Gets and sets the picture data stored in the current
               instance.
            </summary>
            <value>
               A <see cref="T:TagLib.ByteVector" /> object containing the picture
               data stored in the current instance.
            </value>
        </member>
        <member name="P:TagLib.PictureLazy.IsLoaded">
            <summary>
               Gets an indication whether the picture is loaded.
            </summary>
        </member>
        <member name="T:TagLib.Png.Codec">
            <summary>
               A Png photo codec. Contains basic photo details.
            </summary>
        </member>
        <member name="P:TagLib.Png.Codec.Description">
            <summary>
               Gets a text description of the media represented by the
               current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> object containing a description
               of the media represented by the current instance.
            </value>
        </member>
        <member name="M:TagLib.Png.Codec.#ctor(System.Int32,System.Int32)">
            <summary>
               Constructs a new <see cref="T:TagLib.Png.Codec" /> with the given width
               and height.
            </summary>
            <param name="width">
               The width of the photo.
            </param>
            <param name="height">
               The height of the photo.
            </param>
            <returns>
               A new <see cref="T:TagLib.Png.Codec" /> instance.
            </returns>
        </member>
        <member name="T:TagLib.Png.File">
            <summary>
               This class extends <see cref="T:TagLib.Image.ImageBlockFile" /> to provide tagging
               for PNG image files.
            </summary>
            <remarks>
               This implementation is based on http://www.w3.org/TR/PNG
            </remarks>
        </member>
        <member name="F:TagLib.Png.File.HEADER">
            <summary>
               The PNG Header every png file starts with.
            </summary>
        </member>
        <member name="F:TagLib.Png.File.IHDR_CHUNK_TYPE">
            <summary>
               byte sequence to indicate a IHDR Chunk
            </summary>
        </member>
        <member name="F:TagLib.Png.File.IEND_CHUNK_TYPE">
            <summary>
               byte sequence to indicate a IEND Chunk
            </summary>
        </member>
        <member name="F:TagLib.Png.File.iTXt_CHUNK_TYPE">
            <summary>
               byte sequence to indicate a iTXt Chunk
            </summary>
        </member>
        <member name="F:TagLib.Png.File.tEXt_CHUNK_TYPE">
            <summary>
               byte sequence to indicate a tEXt Chunk
            </summary>
        </member>
        <member name="F:TagLib.Png.File.zTXt_CHUNK_TYPE">
            <summary>
               byte sequence to indicate a zTXt Chunk
            </summary>
        </member>
        <member name="F:TagLib.Png.File.XMP_CHUNK_HEADER">
            <summary>
               header of a iTXt which contains XMP data.
            </summary>
        </member>
        <member name="F:TagLib.Png.File.height">
            <summary>
               The height of the image
            </summary>
        </member>
        <member name="F:TagLib.Png.File.width">
            <summary>
               The width of the image
            </summary>
        </member>
        <member name="F:TagLib.Png.File.properties">
            <summary>
               The Properties of the image
            </summary>
        </member>
        <member name="P:TagLib.Png.File.Properties">
            <summary>
               Gets the media properties of the file represented by the
               current instance.
            </summary>
            <value>
               A <see cref="T:TagLib.Properties" /> object containing the
               media properties of the file represented by the current
               instance.
            </value>
        </member>
        <member name="M:TagLib.Png.File.#ctor(System.String,TagLib.ReadStyle)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Png.File" /> for a specified path in the local file
               system and specified read style.
            </summary>
            <param name="path">
               A <see cref="T:System.String" /> object containing the path of the
               file to use in the new instance.
            </param>
            <param name="propertiesStyle">
               A <see cref="T:TagLib.ReadStyle" /> value specifying at what level
               of accuracy to read the media properties, or <see
               cref="F:TagLib.ReadStyle.None" /> to ignore the properties.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="path" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:TagLib.Png.File.#ctor(System.String)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Png.File" /> for a specified path in the local file
               system.
            </summary>
            <param name="path">
               A <see cref="T:System.String" /> object containing the path of the
               file to use in the new instance.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="path" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:TagLib.Png.File.#ctor(TagLib.File.IFileAbstraction,TagLib.ReadStyle)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Png.File" /> for a specified file abstraction and
               specified read style.
            </summary>
            <param name="abstraction">
               A <see cref="T:TagLib.File.IFileAbstraction" /> object to use when
               reading from and writing to the file.
            </param>
            <param name="propertiesStyle">
               A <see cref="T:TagLib.ReadStyle" /> value specifying at what level
               of accuracy to read the media properties, or <see
               cref="F:TagLib.ReadStyle.None" /> to ignore the properties.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="abstraction" /> is <see langword="null"
               />.
            </exception>
        </member>
        <member name="M:TagLib.Png.File.#ctor(TagLib.File.IFileAbstraction)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Png.File" /> for a specified file abstraction.
            </summary>
            <param name="abstraction">
               A <see cref="T:TagLib.File.IFileAbstraction" /> object to use when
               reading from and writing to the file.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="abstraction" /> is <see langword="null"
               />.
            </exception>
        </member>
        <member name="M:TagLib.Png.File.Save">
            <summary>
               Saves the changes made in the current instance to the
               file it represents.
            </summary>
        </member>
        <member name="M:TagLib.Png.File.Read(TagLib.ReadStyle)">
            <summary>
               Reads the information from file with a specified read style.
            </summary>
            <param name="propertiesStyle">
               A <see cref="T:TagLib.ReadStyle" /> value specifying at what level
               of accuracy to read the media properties, or <see
               cref="F:TagLib.ReadStyle.None" /> to ignore the properties.
            </param>
        </member>
        <member name="M:TagLib.Png.File.ValidateHeader">
            <summary>
               Validates the header of a PNG file. Therfore, the current position to
               read must be the start of the file.
            </summary>
        </member>
        <member name="M:TagLib.Png.File.ReadChunkLength">
            <summary>
               Reads the length of data of a chunk from the current position
            </summary>
            <returns>
               A <see cref="T:System.Int32"/> with the length of data.
            </returns>
            <remarks>
               The length is stored in a 4-byte unsigned integer in the file,
               but due to the PNG specification this value does not exceed
               2^31-1 and can therfore be safely returned as an signed integer.
               This prevents unsafe casts for using the length as parameter
               for other methods.
            </remarks>
        </member>
        <member name="M:TagLib.Png.File.ReadChunkType">
            <summary>
               Reads the type of a chunk from the current position.
            </summary>
            <returns>
               A <see cref="T:TagLib.ByteVector"/> with 4 bytes containing the type of
               the Chunk.
            </returns>
        </member>
        <member name="M:TagLib.Png.File.ReadCRC">
            <summary>
               Reads the CRC value for a chunk from the current position.
            </summary>
            <returns>
               A <see cref="T:TagLib.ByteVector"/> with 4 bytes with the CRC value.
            </returns>
        </member>
        <member name="M:TagLib.Png.File.ReadChunkData(System.Int32)">
            <summary>
               Reads the whole Chunk data starting from the current position.
            </summary>
            <param name="data_length">
               A <see cref="T:System.Int32"/> with the length of the Chunk Data.
            </param>
            <returns>
               A <see cref="T:TagLib.ByteVector"/> with the Chunk Data which is read.
            </returns>
        </member>
        <member name="M:TagLib.Png.File.ReadTerminatedString(TagLib.ByteVector,System.Int32,System.Int32@)">
            <summary>
               Reads a null terminated string from the given data from given position.
            </summary>
            <param name="data">
               A <see cref="T:TagLib.ByteVector"/> with teh data to read the string from
            </param>
            <param name="start_index">
               A <see cref="T:System.Int32"/> with the index to start reading
            </param>
            <param name="terminator_index">
               A <see cref="T:System.Int32"/> with the index of the null byte
            </param>
            <returns>
               A <see cref="T:System.String"/> with the read string. The null byte
               is not included.
            </returns>
        </member>
        <member name="M:TagLib.Png.File.ReadKeyword(TagLib.ByteVector,System.Int32,System.Int32@)">
            <summary>
               Reads a null terminated keyword from he given data from given position.
            </summary>
            <param name="data">
               A <see cref="T:TagLib.ByteVector"/> with teh data to read the string from
            </param>
            <param name="start_index">
               A <see cref="T:System.Int32"/> with the index to start reading
            </param>
            <param name="terminator_index">
               A <see cref="T:System.Int32"/> with the index of the null byte
            </param>
            <returns>
               A <see cref="T:System.String"/> with the read keyword. The null byte
               is not included.
            </returns>
        </member>
        <member name="M:TagLib.Png.File.SkipChunkData(System.Int32)">
            <summary>
               Skips the Chunk Data and CRC Data. The read position must be at the
               beginning of the Chunk data.
            </summary>
            <param name="data_size">
               A <see cref="T:System.Int32"/> with the length of the chunk data read
               before.
            </param>
        </member>
        <member name="M:TagLib.Png.File.ReadMetadata">
            <summary>
               Reads the whole metadata from file. The current position must be set to
               the first Chunk which is contained in the file.
            </summary>
        </member>
        <member name="M:TagLib.Png.File.ReadIHDRChunk(System.Int32)">
            <summary>
               Reads the IHDR Chunk from file and extracts some image information
               like width and height. The current position must be set to the start
               of the Chunk Data.
            </summary>
            <param name="data_length">
                A <see cref="T:System.Int32"/> with the length of the Chunk Data.
            </param>
        </member>
        <member name="M:TagLib.Png.File.ReadiTXtChunk(System.Int32)">
            <summary>
               Reads an iTXt Chunk from file. The current position must be set
               to the start of the Chunk Data. Such a Chunk may contain XMP data
               or translated keywords.
            </summary>
            <param name="data_length">
               A <see cref="T:System.Int32"/> with the length of the Chunk Data.
            </param>
        </member>
        <member name="M:TagLib.Png.File.ReadtEXtChunk(System.Int32)">
            <summary>
               Reads an tEXt Chunk from file. The current position must be set
               to the start of the Chunk Data. Such a Chunk contains plain
               keywords.
            </summary>
            <param name="data_length">
               A <see cref="T:System.Int32"/> with the length of the Chunk Data.
            </param>
        </member>
        <member name="M:TagLib.Png.File.ReadzTXtChunk(System.Int32)">
            <summary>
               Reads an zTXt Chunk from file. The current position must be set
               to the start of the Chunk Data. Such a Chunk contains compressed
               keywords.
            </summary>
            <param name="data_length">
               A <see cref="T:System.Int32"/> with the length of the Chunk Data.
            </param>
            <remarks>
               The Chunk may also contain compressed Exif data which is written
               by other tools. But, since the PNG specification does not support
               Exif data, we ignore it here.
            </remarks>
        </member>
        <member name="M:TagLib.Png.File.SaveMetadata">
            <summary>
               Save the metadata to file.
            </summary>
        </member>
        <member name="M:TagLib.Png.File.RenderXMPChunk">
            <summary>
               Creates a Chunk containing the XMP data.
            </summary>
            <returns>
               A <see cref="T:TagLib.ByteVector"/> with the XMP data chunk
               or <see langword="null" /> if no XMP data is contained.
            </returns>
        </member>
        <member name="M:TagLib.Png.File.RenderKeywordChunks">
            <summary>
               Creates a list of Chunks containing the PNG keywords
            </summary>
            <returns>
               A <see cref="T:TagLib.ByteVector"/> with the list of chunks, or
               or <see langword="null" /> if no PNG Keywords are contained.
            </returns>
        </member>
        <member name="M:TagLib.Png.File.ExtractProperties">
            <summary>
               Attempts to extract the media properties of the main
               photo.
            </summary>
            <returns>
               A <see cref="P:TagLib.Png.File.Properties" /> object with a best effort guess
               at the right values. When no guess at all can be made,
               <see langword="null" /> is returned.
            </returns>
        </member>
        <member name="M:TagLib.Png.File.CheckCRC(TagLib.ByteVector,TagLib.ByteVector,TagLib.ByteVector)">
            <summary>
               Checks the CRC for a Chunk.
            </summary>
            <param name="chunk_type">
               A <see cref="T:TagLib.ByteVector"/> whith the Chunk type
            </param>
            <param name="chunk_data">
               A <see cref="T:TagLib.ByteVector"/> with the Chunk data.
            </param>
            <param name="crc_data">
               A <see cref="T:TagLib.ByteVector"/> with the read CRC data.
            </param>
        </member>
        <member name="M:TagLib.Png.File.ComputeCRC(TagLib.ByteVector[])">
            <summary>
               Computes a 32bit CRC for the given data.
            </summary>
            <param name="datas">
               A <see cref="T:ByteVector[]"/> with data to compute
               the CRC for.
            </param>
            <returns>
               A <see cref="T:TagLib.ByteVector"/> with 4 bytes (32bit) containing the CRC.
            </returns>
        </member>
        <member name="F:TagLib.Png.File.crc_table">
            <summary>
               Table for faster computation of CRC.
            </summary>
        </member>
        <member name="M:TagLib.Png.File.BuildCRCTable">
            <summary>
               Initializes the CRC Table.
            </summary>
        </member>
        <member name="T:TagLib.Png.PngTag">
            <summary>
               Native Png Keywords
            </summary>
        </member>
        <member name="F:TagLib.Png.PngTag.TITLE">
            <summary>
               Short (one line) title or caption for image
            </summary>
        </member>
        <member name="F:TagLib.Png.PngTag.AUTHOR">
            <summary>
               Name of image's creator
            </summary>
        </member>
        <member name="F:TagLib.Png.PngTag.DESCRIPTION">
            <summary>
               Description of image (possibly long)
            </summary>
        </member>
        <member name="F:TagLib.Png.PngTag.COPYRIGHT">
            <summary>
               Copyright notice
            </summary>
        </member>
        <member name="F:TagLib.Png.PngTag.CREATION_TIME">
            <summary>
               Time of original image creation
            </summary>
        </member>
        <member name="F:TagLib.Png.PngTag.SOFTWARE">
            <summary>
               Software used to create the image
            </summary>
        </member>
        <member name="F:TagLib.Png.PngTag.DISCLAIMER">
            <summary>
               Legal disclaimer
            </summary>
        </member>
        <member name="F:TagLib.Png.PngTag.WARNING">
            <summary>
               Warning of nature of content
            </summary>
        </member>
        <member name="F:TagLib.Png.PngTag.SOURCE">
            <summary>
               Device used to create the image
            </summary>
        </member>
        <member name="F:TagLib.Png.PngTag.COMMENT">
            <summary>
               Miscellaneous comment
            </summary>
        </member>
        <member name="F:TagLib.Png.PngTag.keyword_store">
            <summary>
               Store the keywords with their values
            </summary>
        </member>
        <member name="M:TagLib.Png.PngTag.#ctor">
            <summary>
               Constructor.
            </summary>
        </member>
        <member name="P:TagLib.Png.PngTag.Comment">
            <summary>
               Gets or sets the comment for the image described
               by the current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> containing the comment of the
               current instace.
            </value>
            <remarks>
               We use here both keywords Description and Comment of the
               PNG specification to store the comment.
            </remarks>
        </member>
        <member name="P:TagLib.Png.PngTag.Title">
            <summary>
               Gets and sets the title for the media described by the
               current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> object containing the title for
               the media described by the current instance or <see
               langword="null" /> if no value is present.
            </value>
        </member>
        <member name="P:TagLib.Png.PngTag.Creator">
            <summary>
               Gets or sets the creator of the image.
            </summary>
            <value>
               A <see cref="T:System.String" /> with the name of the creator.
            </value>
        </member>
        <member name="P:TagLib.Png.PngTag.Copyright">
            <summary>
               Gets and sets the copyright information for the media
               represented by the current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> object containing the copyright
               information for the media represented by the current
               instance or <see langword="null" /> if no value present.
            </value>
        </member>
        <member name="P:TagLib.Png.PngTag.Software">
            <summary>
               Gets or sets the software the image, the current instance
               belongs to, was created with.
            </summary>
            <value>
               A <see cref="T:System.String" /> containing the name of the
               software the current instace was created with.
            </value>
        </member>
        <member name="P:TagLib.Png.PngTag.DateTime">
            <summary>
               Gets or sets the time when the image, the current instance
               belongs to, was taken.
            </summary>
            <value>
               A <see cref="T:System.Nullable"/> with the time the image was taken.
            </value>
        </member>
        <member name="M:TagLib.Png.PngTag.SetKeyword(System.String,System.String)">
            <summary>
               Sets a keyword of to the given value.
            </summary>
            <param name="keyword">
               A <see cref="T:System.String"/> with the keyword to set.
            </param>
            <param name="value">
               A <see cref="T:System.String"/> with the value.
            </param>
        </member>
        <member name="M:TagLib.Png.PngTag.GetKeyword(System.String)">
            <summary>
               Gets a value of a keyword.
            </summary>
            <param name="keyword">
               A <see cref="T:System.String"/> with the keyword to get the value for.
            </param>
            <returns>
               A <see cref="T:System.String"/> with the value or  <see langword="null" />
               if the keyword is not contained.
            </returns>
        </member>
        <member name="P:TagLib.Png.PngTag.TagTypes">
            <summary>
               Gets the tag types contained in the current instance.
            </summary>
            <value>
               Always <see cref="F:TagLib.TagTypes.Png" />.
            </value>
        </member>
        <member name="M:TagLib.Png.PngTag.Clear">
            <summary>
               Clears the values stored in the current instance.
            </summary>
        </member>
        <member name="M:TagLib.Png.PngTag.GetEnumerator">
            <summary>
               Returns an enumerator to enumerate all keywords.
            </summary>
            <returns>
               A <see cref="T:System.Collections.IEnumerator"/> to enumerate
               the keywords.
            </returns>
        </member>
        <member name="T:TagLib.Properties">
            <summary>
               This class implements <see cref="T:TagLib.IAudioCodec" />, <see
               cref="T:TagLib.IVideoCodec" /> and <see cref="T:TagLib.IPhotoCodec" />
               and combines codecs to create generic media properties
               for a file.
            </summary>
        </member>
        <member name="F:TagLib.Properties.codecs">
            <summary>
               Contains the codecs.
            </summary>
        </member>
        <member name="F:TagLib.Properties.duration">
            <summary>
               Contains the duration.
            </summary>
        </member>
        <member name="M:TagLib.Properties.#ctor">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Properties" /> with no codecs or duration.
            </summary>
            <remarks>
               <para>This constructor is used when media properties are
               not read.</para>
            </remarks>
        </member>
        <member name="M:TagLib.Properties.#ctor(System.TimeSpan,TagLib.ICodec[])">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Properties" /> with a specified duration and array
               of codecs.
            </summary>
            <param name="duration">
               A <see cref="T:System.TimeSpan" /> containing the duration of the
               media, or <see cref="F:System.TimeSpan.Zero" /> if the duration is
               to be read from the codecs.
            </param>
            <param name="codecs">
               A <see cref="T:T:ICodec[]" /> containing the codecs to be
               used in the new instance.
            </param>
        </member>
        <member name="M:TagLib.Properties.#ctor(System.TimeSpan,System.Collections.Generic.IEnumerable{TagLib.ICodec})">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Properties" /> with a specified duration and
               enumaration of codecs.
            </summary>
            <param name="duration">
               A <see cref="T:System.TimeSpan" /> containing the duration of the
               media, or <see cref="F:System.TimeSpan.Zero" /> if the duration is
               to be read from the codecs.
            </param>
            <param name="codecs">
               A <see cref="T:System.Collections.Generic.IEnumerable`1" /> object containing the
               codec to be used in the new instance.
            </param>
        </member>
        <member name="P:TagLib.Properties.Codecs">
            <summary>
               Gets the codecs contained in the current instance.
            </summary>
            <value>
               A <see cref="T:System.Collections.Generic.IEnumerable`1" /> object containing the
               <see cref="T:TagLib.ICodec" /> objects contained in the current
               instance.
            </value>
        </member>
        <member name="P:TagLib.Properties.Duration">
            <summary>
               Gets the duration of the media represented by the current
               instance.
            </summary>
            <value>
               A <see cref="T:System.TimeSpan" /> containing the duration of the
               media represented by the current instance.
            </value>
            <remarks>
               If the duration was set in the constructor, that value is
               returned. Otherwise, the longest codec duration is used.
            </remarks>
        </member>
        <member name="P:TagLib.Properties.MediaTypes">
            <summary>
               Gets the types of media represented by the current
               instance.
            </summary>
            <value>
               A bitwise combined <see cref="P:TagLib.Properties.MediaTypes" /> containing
               the types of media represented by the current instance.
            </value>
        </member>
        <member name="P:TagLib.Properties.Description">
            <summary>
               Gets a string description of the media represented by the
               current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> object containing a description
               of the media represented by the current instance.
            </value>
            <remarks>
               The value contains the descriptions of the codecs joined
               by colons.
            </remarks>
        </member>
        <member name="P:TagLib.Properties.AudioBitrate">
            <summary>
               Gets the bitrate of the audio represented by the current
               instance.
            </summary>
            <value>
               A <see cref="T:System.Int32" /> containing the bitrate of the audio
               represented by the current instance.
            </value>
            <remarks>
               This value is equal to the first non-zero audio bitrate.
            </remarks>
        </member>
        <member name="P:TagLib.Properties.AudioSampleRate">
            <summary>
               Gets the sample rate of the audio represented by the
               current instance.
            </summary>
            <value>
               A <see cref="T:System.Int32" /> containing the sample rate of the
               audio represented by the current instance.
            </value>
            <remarks>
               This value is equal to the first non-zero audio sample
               rate.
            </remarks>
        </member>
        <member name="P:TagLib.Properties.BitsPerSample">
            <summary>
               Gets the number of bits per sample in the audio
               represented by the current instance.
            </summary>
            <value>
               A <see cref="T:System.Int32" /> value containing the number of bits
               per sample in the audio represented by the current
               instance.
            </value>
            <remarks>
               This value is equal to the first non-zero quantization.
            </remarks>
        </member>
        <member name="P:TagLib.Properties.AudioChannels">
            <summary>
               Gets the number of channels in the audio represented by
               the current instance.
            </summary>
            <value>
               A <see cref="T:System.Int32" /> object containing the number of
               channels in the audio represented by the current
               instance.
            </value>
            <remarks>
               This value is equal to the first non-zero audio channel
               count.
            </remarks>
        </member>
        <member name="P:TagLib.Properties.VideoWidth">
            <summary>
               Gets the width of the video represented by the current
               instance.
            </summary>
            <value>
               A <see cref="T:System.Int32" /> containing the width of the video
               represented by the current instance.
            </value>
            <remarks>
               This value is equal to the first non-zero video width.
            </remarks>
        </member>
        <member name="P:TagLib.Properties.VideoHeight">
            <summary>
               Gets the height of the video represented by the current
               instance.
            </summary>
            <value>
               A <see cref="T:System.Int32" /> containing the height of the video
               represented by the current instance.
            </value>
            <remarks>
               This value is equal to the first non-zero video height.
            </remarks>
        </member>
        <member name="P:TagLib.Properties.PhotoWidth">
            <summary>
               Gets the width of the photo represented by the current
               instance.
            </summary>
            <value>
               A <see cref="T:System.Int32" /> value containing the width of the
               photo represented by the current instance.
            </value>
        </member>
        <member name="P:TagLib.Properties.PhotoHeight">
            <summary>
               Gets the height of the photo represented by the current
               instance.
            </summary>
            <value>
               A <see cref="T:System.Int32" /> value containing the height of the
               photo represented by the current instance.
            </value>
        </member>
        <member name="P:TagLib.Properties.PhotoQuality">
            <summary>
               Gets the (format specific) quality indicator of the photo
               represented by the current instance.
            </summary>
            <value>
               A <see cref="T:System.Int32" /> value indicating the quality. A value
               0 means that there was no quality indicator for the format
               or the file.
            </value>
        </member>
        <member name="T:TagLib.ReadOnlyByteVector">
            <summary>
               This class extends <see cref="T:TagLib.ByteVector" /> to provide an
               immutable version.
            </summary>
        </member>
        <member name="M:TagLib.ReadOnlyByteVector.#ctor">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.ReadOnlyByteVector" /> with no contents.
            </summary>
        </member>
        <member name="M:TagLib.ReadOnlyByteVector.#ctor(System.Int32,System.Byte)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.ReadOnlyByteVector" /> of a specified length filled
               with bytes of a specified value.
            </summary>
            <param name="size">
               A <see cref="T:System.Int32" /> specifying the number of bytes to
               add to the new instance.
            </param>
            <param name="value">
               A <see cref="T:System.Byte" /> specifying the value to use for the
               bytes added to the new instance.
            </param>
        </member>
        <member name="M:TagLib.ReadOnlyByteVector.#ctor(System.Int32)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.ReadOnlyByteVector" /> of a specified length filled
               with bytes with a value of zero.
            </summary>
            <param name="size">
               A <see cref="T:System.Int32" /> specifying the number of bytes to
               add to the new instance.
            </param>
            <remarks>
               <para>To specify the value to fill the new instance with,
               use <see cref="M:TagLib.ReadOnlyByteVector.#ctor(System.Int32,System.Byte)" />.</para>
            </remarks>
        </member>
        <member name="M:TagLib.ReadOnlyByteVector.#ctor(TagLib.ByteVector)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.ReadOnlyByteVector" /> by copying the contents from
               another instance.
            </summary>
            <param name="vector">
               A <see cref="T:TagLib.ByteVector" /> object to copy the values
               from.
            </param>
        </member>
        <member name="M:TagLib.ReadOnlyByteVector.#ctor(System.Byte[],System.Int32)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.ReadOnlyByteVector" /> by copying a specified
               number of bytes from an array.
            </summary>
            <param name="data">
               A <see cref="T:byte[]" /> to copy values from.
            </param>
            <param name="length">
               A <see cref="T:System.Int32" /> specifying the number of bytes to
               copy.
            </param>
            <remarks>
               <para>If copying the entire contents of an array, use
               <see cref="M:TagLib.ReadOnlyByteVector.#ctor(System.Byte[])" />.</para>
            </remarks>
        </member>
        <member name="M:TagLib.ReadOnlyByteVector.#ctor(System.Byte[])">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.ReadOnlyByteVector" /> by copying the contents of a
               specified array.
            </summary>
            <param name="data">
               A <see cref="T:byte[]" /> to copy values from.
            </param>
            <remarks>
               <para>To copy only part of the array, use <see
               cref="M:TagLib.ReadOnlyByteVector.#ctor(System.Byte[],System.Int32)" />.</para>
            </remarks>
        </member>
        <member name="M:TagLib.ReadOnlyByteVector.op_Implicit(System.Byte)~TagLib.ReadOnlyByteVector">
            <summary>
               Implicitly converts a <see cref="T:System.Byte" /> to a new
               <see cref="T:TagLib.ReadOnlyByteVector" />.
            </summary>
            <param name="value">
               A <see cref="T:System.Byte" /> object to convert.
            </param>
            <returns>
               A <see cref="T:TagLib.ReadOnlyByteVector" /> equivalent to
               <paramref name="value" />.
            </returns>
        </member>
        <member name="M:TagLib.ReadOnlyByteVector.op_Implicit(System.Byte[])~TagLib.ReadOnlyByteVector">
            <summary>
               Implicitly converts a <see cref="T:byte[]" /> to a new
               <see cref="T:TagLib.ReadOnlyByteVector" />.
            </summary>
            <param name="value">
               A <see cref="T:byte[]" /> object to convert.
            </param>
            <returns>
               A <see cref="T:TagLib.ReadOnlyByteVector" /> equivalent to
               <paramref name="value" />.
            </returns>
        </member>
        <member name="M:TagLib.ReadOnlyByteVector.op_Implicit(System.String)~TagLib.ReadOnlyByteVector">
            <summary>
               Implicitly converts a <see cref="T:System.String" /> object to a
               new <see cref="T:TagLib.ReadOnlyByteVector" /> using the UTF-8
               encoding.
            </summary>
            <param name="value">
               A <see cref="T:System.String" /> object to convert.
            </param>
            <returns>
               A <see cref="T:TagLib.ReadOnlyByteVector" /> equivalent to
               <paramref name="value" />.
            </returns>
        </member>
        <member name="P:TagLib.ReadOnlyByteVector.IsReadOnly">
            <summary>
               Gets whether or not the current instance is read-only.
            </summary>
            <value>
               Always <see langword="true" />.
            </value>
        </member>
        <member name="P:TagLib.ReadOnlyByteVector.IsFixedSize">
            <summary>
               Gets whether or not the current instance is fixed size.
            </summary>
            <value>
               Always <see langword="true" />.
            </value>
        </member>
        <member name="T:TagLib.Riff.AviHeaderList">
            <summary>
               This class provides support for reading an AVI header list to
               extract stream information.
            </summary>
        </member>
        <member name="F:TagLib.Riff.AviHeaderList.codecs">
            <summary>
               Contains the AVI codec information.
            </summary>
        </member>
        <member name="M:TagLib.Riff.AviHeaderList.#ctor(TagLib.File,System.Int64,System.Int32)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Riff.AviHeaderList" /> by reading the contents of a raw
               RIFF list from a specified position in a <see
               cref="T:TagLib.File"/>.
            </summary>
            <param name="file">
               A <see cref="T:TagLib.File" /> object containing the file
               from which the contents of the new instance is to be
               read.
            </param>
            <param name="position">
               A <see cref="T:System.Int64" /> value specify at what position to
               read the list.
            </param>
            <param name="length">
               A <see cref="T:System.Int32" /> value specifying the number of bytes
               to read.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="file" /> is <see langword="null" />.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
               <paramref name="position" /> is less than zero or greater
               than the size of the file.
            </exception>
            <exception cref="T:TagLib.CorruptFileException">
               The list does not contain an AVI header or the AVI header
               is the wrong length.
            </exception>
        </member>
        <member name="P:TagLib.Riff.AviHeaderList.Header">
            <summary>
               Gets the header for the current instance.
            </summary>
            <value>
               A <see cref="T:TagLib.Riff.AviHeader" /> object containing the header
               for the current instance.
            </value>
        </member>
        <member name="P:TagLib.Riff.AviHeaderList.Codecs">
            <summary>
               Gets the codecs contained in the current instance.
            </summary>
            <value>
               A <see cref="T:ICodec[]" /> containing the codecs contained
               in the current instance.
            </value>
        </member>
        <member name="T:TagLib.Riff.AviHeader">
            <summary>
               This structure provides a representation of a Microsoft
               AviMainHeader structure, minus the first 8 bytes.
            </summary>
        </member>
        <member name="M:TagLib.Riff.AviHeader.#ctor(TagLib.ByteVector)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Riff.AviHeader" /> by reading the raw structure from the
               beginning of a <see cref="T:TagLib.ByteVector" /> object.
            </summary>
            <param name="data">
               A <see cref="T:TagLib.ByteVector" /> object containing the raw
               data structure.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="data" /> is <see langword="null" />.
            </exception>
            <exception cref="T:TagLib.CorruptFileException">
               <paramref name="data" /> contains less than 40 bytes.
            </exception>
        </member>
        <member name="M:TagLib.Riff.AviHeader.#ctor(TagLib.ByteVector,System.Int32)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Riff.AviStreamHeader" /> by reading the raw structure
               from a specified position in a <see cref="T:TagLib.ByteVector" />
               object.
            </summary>
            <param name="data">
               A <see cref="T:TagLib.ByteVector" /> object containing the raw
               data structure.
            </param>
            <param name="offset">
               A <see cref="T:System.Int32" /> value specifying the index in
               <paramref name="data"/> at which the structure begins.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="data" /> is <see langword="null" />.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
               <paramref name="offset" /> is less than zero.
            </exception>
            <exception cref="T:TagLib.CorruptFileException">
               <paramref name="data" /> contains less than 40 bytes at
               <paramref name="offset" />.
            </exception>
        </member>
        <member name="P:TagLib.Riff.AviHeader.MicrosecondsPerFrame">
            <summary>
               Gets the number of microseconds per frame.
            </summary>
            <value>
               A <see cref="T:System.UInt32" /> value specifying number of
               microseconds per frame.
            </value>
        </member>
        <member name="P:TagLib.Riff.AviHeader.MaxBytesPerSecond">
            <summary>
               Gets the maximum number of bytes per second.
            </summary>
            <value>
               A <see cref="T:System.UInt32" /> value specifying maximum number of
               bytes per second.
            </value>
        </member>
        <member name="P:TagLib.Riff.AviHeader.Flags">
            <summary>
               Gets the file flags.
            </summary>
            <value>
               A <see cref="T:System.UInt32" /> value specifying file flags.
            </value>
        </member>
        <member name="P:TagLib.Riff.AviHeader.TotalFrames">
            <summary>
               Gets the number of frames in the file.
            </summary>
            <value>
               A <see cref="T:System.UInt32" /> value specifying the number of
               frames in the file.
            </value>
        </member>
        <member name="P:TagLib.Riff.AviHeader.InitialFrames">
            <summary>
               Gets how far ahead audio is from video.
            </summary>
            <value>
               A <see cref="T:System.UInt32" /> value specifying how far ahead
               audio is from video.
            </value>
        </member>
        <member name="P:TagLib.Riff.AviHeader.Streams">
            <summary>
               Gets the number of streams in the file.
            </summary>
            <value>
               A <see cref="T:System.UInt32" /> value specifying the number of
               streams in the file.
            </value>
        </member>
        <member name="P:TagLib.Riff.AviHeader.SuggestedBufferSize">
            <summary>
               Gets the suggested buffer size for the file.
            </summary>
            <value>
               A <see cref="T:System.UInt32" /> value specifying the buffer size.
            </value>
        </member>
        <member name="P:TagLib.Riff.AviHeader.Width">
            <summary>
               Gets the width of the video in the file.
            </summary>
            <value>
               A <see cref="T:System.UInt32" /> value containing the width of the
               video.
            </value>
        </member>
        <member name="P:TagLib.Riff.AviHeader.Height">
            <summary>
               Gets the height of the video in the file.
            </summary>
            <value>
               A <see cref="T:System.UInt32" /> value containing the height of the
               video.
            </value>
        </member>
        <member name="P:TagLib.Riff.AviHeader.Duration">
            <summary>
               Gets the duration of the media in the file.
            </summary>
            <value>
               A <see cref="T:System.TimeSpan" /> value containing the duration
               of the file.
            </value>
        </member>
        <member name="T:TagLib.Riff.AviStream">
            <summary>
               This abstract class provides basic support for parsing a raw AVI
               stream list.
            </summary>
        </member>
        <member name="M:TagLib.Riff.AviStream.#ctor(TagLib.Riff.AviStreamHeader)">
            <summary>
               Constructs and intializes a new instance of <see
               cref="T:TagLib.Riff.AviStream" /> with a specified stream header.
            </summary>
            <param name="header">
              A <see cref="T:TagLib.Riff.AviStreamHeader"/> object containing the
              stream's header.
            </param>
        </member>
        <member name="M:TagLib.Riff.AviStream.ParseItem(TagLib.ByteVector,TagLib.ByteVector,System.Int32,System.Int32)">
            <summary>
               Parses a stream list item.
            </summary>
            <param name="id">
               A <see cref="T:TagLib.ByteVector" /> object containing the item's
               ID.
            </param>
            <param name="data">
               A <see cref="T:TagLib.ByteVector" /> object containing the item's
               data.
            </param>
            <param name="start">
               A <see cref="T:System.UInt32" /> value specifying the index in
               <paramref name="data" /> at which the item data begins.
            </param>
            <param name="length">
               A <see cref="T:System.UInt32" /> value specifying the length of the
               item.
            </param>
        </member>
        <member name="P:TagLib.Riff.AviStream.Header">
            <summary>
               Gets the stream header.
            </summary>
            <value>
               A <see cref="T:TagLib.Riff.AviStreamHeader" /> object containing the
               header information for the stream.
            </value>
        </member>
        <member name="P:TagLib.Riff.AviStream.Codec">
            <summary>
               Gets the codec information.
            </summary>
            <value>
               A <see cref="T:TagLib.ICodec" /> object containing the codec
               information for the stream.
            </value>
        </member>
        <member name="M:TagLib.Riff.AviStream.ParseStreamList(TagLib.ByteVector)">
            <summary>
               Parses a raw AVI stream list and returns the stream
               information.
            </summary>
            <param name="data">
               A <see cref="T:TagLib.ByteVector" /> object containing raw stream
               list.
            </param>
            <returns>
               A <see cref="T:TagLib.Riff.AviStream" /> object containing stream
               information.
            </returns>
        </member>
        <member name="T:TagLib.Riff.AviAudioStream">
            <summary>
               This class extends <see cref="T:TagLib.Riff.AviStream" /> to provide support
               for reading audio stream data.
            </summary>
        </member>
        <member name="M:TagLib.Riff.AviAudioStream.#ctor(TagLib.Riff.AviStreamHeader)">
            <summary>
               Constructs and intializes a new instance of <see
               cref="T:TagLib.Riff.AviAudioStream" /> with a specified stream header.
            </summary>
            <param name="header">
              A <see cref="T:TagLib.Riff.AviStreamHeader"/> object containing the
              stream's header.
            </param>
        </member>
        <member name="M:TagLib.Riff.AviAudioStream.ParseItem(TagLib.ByteVector,TagLib.ByteVector,System.Int32,System.Int32)">
            <summary>
               Parses a stream list item.
            </summary>
            <param name="id">
               A <see cref="T:TagLib.ByteVector" /> object containing the item's
               ID.
            </param>
            <param name="data">
               A <see cref="T:TagLib.ByteVector" /> object containing the item's
               data.
            </param>
            <param name="start">
               A <see cref="T:System.UInt32" /> value specifying the index in
               <paramref name="data" /> at which the item data begins.
            </param>
            <param name="length">
               A <see cref="T:System.UInt32" /> value specifying the length of the
               item.
            </param>
        </member>
        <member name="T:TagLib.Riff.AviVideoStream">
            <summary>
               This class extends <see cref="T:TagLib.Riff.AviStream" /> to provide support
               for reading video stream data.
            </summary>
        </member>
        <member name="M:TagLib.Riff.AviVideoStream.#ctor(TagLib.Riff.AviStreamHeader)">
            <summary>
               Constructs and intializes a new instance of <see
               cref="T:TagLib.Riff.AviVideoStream" /> with a specified stream header.
            </summary>
            <param name="header">
              A <see cref="T:TagLib.Riff.AviStreamHeader"/> object containing the
              stream's header.
            </param>
        </member>
        <member name="M:TagLib.Riff.AviVideoStream.ParseItem(TagLib.ByteVector,TagLib.ByteVector,System.Int32,System.Int32)">
            <summary>
               Parses a stream list item.
            </summary>
            <param name="id">
               A <see cref="T:TagLib.ByteVector" /> object containing the item's
               ID.
            </param>
            <param name="data">
               A <see cref="T:TagLib.ByteVector" /> object containing the item's
               data.
            </param>
            <param name="start">
               A <see cref="T:System.UInt32" /> value specifying the index in
               <paramref name="data" /> at which the item data begins.
            </param>
            <param name="length">
               A <see cref="T:System.UInt32" /> value specifying the length of the
               item.
            </param>
        </member>
        <member name="T:TagLib.Riff.AviStreamHeader">
            <summary>
               This structure provides a representation of a Microsoft
               AviStreamHeader structure, minus the first 8 bytes.
            </summary>
        </member>
        <member name="M:TagLib.Riff.AviStreamHeader.#ctor(TagLib.ByteVector)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Riff.AviStreamHeader" /> by reading the raw structure
               from the beginning of a <see cref="T:TagLib.ByteVector" /> object.
            </summary>
            <param name="data">
               A <see cref="T:TagLib.ByteVector" /> object containing the raw
               data structure.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="data" /> is <see langword="null" />.
            </exception>
            <exception cref="T:TagLib.CorruptFileException">
               <paramref name="data" /> contains less than 56 bytes.
            </exception>
        </member>
        <member name="M:TagLib.Riff.AviStreamHeader.#ctor(TagLib.ByteVector,System.Int32)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Riff.AviStreamHeader" /> by reading the raw structure
               from a specified position in a <see cref="T:TagLib.ByteVector" />
               object.
            </summary>
            <param name="data">
               A <see cref="T:TagLib.ByteVector" /> object containing the raw
               data structure.
            </param>
            <param name="offset">
               A <see cref="T:System.Int32" /> value specifying the index in
               <paramref name="data"/> at which the structure begins.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="data" /> is <see langword="null" />.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
               <paramref name="offset" /> is less than zero.
            </exception>
            <exception cref="T:TagLib.CorruptFileException">
               <paramref name="data" /> contains less than 56 bytes at
               <paramref name="offset" />.
            </exception>
        </member>
        <member name="P:TagLib.Riff.AviStreamHeader.Type">
            <summary>
               Gets the stream type.
            </summary>
            <value>
               A four-byte <see cref="T:TagLib.ByteVector" /> object specifying
               stream type.
            </value>
        </member>
        <member name="P:TagLib.Riff.AviStreamHeader.Handler">
            <summary>
               Gets the stream handler (codec) ID.
            </summary>
            <value>
               A four-byte <see cref="T:TagLib.ByteVector" /> object specifying
               stream handler ID.
            </value>
        </member>
        <member name="P:TagLib.Riff.AviStreamHeader.Flags">
            <summary>
               Gets the stream flags.
            </summary>
            <value>
               A <see cref="T:System.UInt32" /> value specifying stream flags.
            </value>
        </member>
        <member name="P:TagLib.Riff.AviStreamHeader.Priority">
            <summary>
               Gets the stream priority.
            </summary>
            <value>
               A <see cref="T:System.UInt32" /> value specifying stream priority.
            </value>
        </member>
        <member name="P:TagLib.Riff.AviStreamHeader.InitialFrames">
            <summary>
               Gets how far ahead audio is from video.
            </summary>
            <value>
               A <see cref="T:System.UInt32" /> value specifying how far ahead
               audio is from video.
            </value>
        </member>
        <member name="P:TagLib.Riff.AviStreamHeader.Scale">
            <summary>
               Gets the scale of the stream.
            </summary>
            <value>
               A <see cref="T:System.UInt32" /> value specifying the scale of the
               stream.
            </value>
            <remarks>
               Dividing <see cref="P:TagLib.Riff.AviStreamHeader.Rate"/> by <see cref="P:TagLib.Riff.AviStreamHeader.Scale" /> gives
               the number of samples per second.
            </remarks>
        </member>
        <member name="P:TagLib.Riff.AviStreamHeader.Rate">
            <summary>
               Gets the rate of the stream.
            </summary>
            <value>
               A <see cref="T:System.UInt32" /> value specifying the rate of the
               stream.
            </value>
            <remarks>
               Dividing <see cref="P:TagLib.Riff.AviStreamHeader.Rate"/> by <see cref="P:TagLib.Riff.AviStreamHeader.Scale" /> gives
               the number of samples per second.
            </remarks>
        </member>
        <member name="P:TagLib.Riff.AviStreamHeader.Start">
            <summary>
               Gets the start delay of the stream.
            </summary>
            <value>
               A <see cref="T:System.UInt32" /> value specifying the start delay of
               the stream.
            </value>
        </member>
        <member name="P:TagLib.Riff.AviStreamHeader.Length">
            <summary>
               Gets the length of the stream.
            </summary>
            <value>
               A <see cref="T:System.UInt32" /> value specifying the length of the
               stream.
            </value>
        </member>
        <member name="P:TagLib.Riff.AviStreamHeader.SuggestedBufferSize">
            <summary>
               Gets the suggested buffer size for the stream.
            </summary>
            <value>
               A <see cref="T:System.UInt32" /> value specifying the buffer size.
            </value>
        </member>
        <member name="P:TagLib.Riff.AviStreamHeader.Quality">
            <summary>
               Gets the quality of the stream data.
            </summary>
            <value>
               A <see cref="T:System.UInt32" /> value specifying the quality of the
               stream data between 0 and 10,000.
            </value>
        </member>
        <member name="P:TagLib.Riff.AviStreamHeader.SampleSize">
            <summary>
               Gets the sample size of the stream data.
            </summary>
            <value>
               A <see cref="T:System.UInt32" /> value specifying the sample size.
            </value>
        </member>
        <member name="P:TagLib.Riff.AviStreamHeader.Left">
            <summary>
               Gets the position at which the left of the video is to
               be displayed in the rectangle whose width is given in the
               the file's <see cref="T:TagLib.Riff.AviHeader"/>.
            </summary>
            <value>
               A <see cref="T:System.UInt16" /> value specifying the left
               position.
            </value>
        </member>
        <member name="P:TagLib.Riff.AviStreamHeader.Top">
            <summary>
               Gets the position at which the top of the video is to be
               displayed in the rectangle whose height is given in the
               the file's <see cref="T:TagLib.Riff.AviHeader"/>.
            </summary>
            <value>
               A <see cref="T:System.UInt16" /> value specifying the top
               position.
            </value>
        </member>
        <member name="P:TagLib.Riff.AviStreamHeader.Right">
            <summary>
               Gets the position at which the right of the video is to
               be displayed in the rectangle whose width is given in the
               the file's <see cref="T:TagLib.Riff.AviHeader"/>.
            </summary>
            <value>
               A <see cref="T:System.UInt16" /> value specifying the right
               position.
            </value>
        </member>
        <member name="P:TagLib.Riff.AviStreamHeader.Bottom">
            <summary>
               Gets the position at which the bottom of the video is
               to be displayed in the rectangle whose height is given in
               the file's <see cref="T:TagLib.Riff.AviHeader"/>.
            </summary>
            <value>
               A <see cref="T:System.UInt16" /> value specifying the bottom
               position.
            </value>
        </member>
        <member name="T:TagLib.Riff.BitmapInfoHeader">
            <summary>
               This structure provides a representation of a Microsoft
               BitmapInfoHeader structure.
            </summary>
        </member>
        <member name="F:TagLib.Riff.BitmapInfoHeader.width">
            <summary>
               Contains the video width.
            </summary>
        </member>
        <member name="F:TagLib.Riff.BitmapInfoHeader.height">
            <summary>
               Contains the video height.
            </summary>
        </member>
        <member name="M:TagLib.Riff.BitmapInfoHeader.#ctor(TagLib.ByteVector)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Riff.BitmapInfoHeader" /> by reading the raw structure
               from the beginning of a <see cref="T:TagLib.ByteVector" /> object.
            </summary>
            <param name="data">
               A <see cref="T:TagLib.ByteVector" /> object containing the raw
               data structure.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="data" /> is <see langword="null" />.
            </exception>
            <exception cref="T:TagLib.CorruptFileException">
               <paramref name="data" /> contains less than 40 bytes.
            </exception>
        </member>
        <member name="M:TagLib.Riff.BitmapInfoHeader.#ctor(TagLib.ByteVector,System.Int32)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Riff.BitmapInfoHeader" /> by reading the raw structure
               from a specified position in a <see cref="T:TagLib.ByteVector" />
               object.
            </summary>
            <param name="data">
               A <see cref="T:TagLib.ByteVector" /> object containing the raw
               data structure.
            </param>
            <param name="offset">
               A <see cref="T:System.Int32" /> value specifying the index in
               <paramref name="data"/> at which the structure begins.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="data" /> is <see langword="null" />.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
               <paramref name="offset" /> is less than zero.
            </exception>
            <exception cref="T:TagLib.CorruptFileException">
               <paramref name="data" /> contains less than 16 bytes at
               <paramref name="offset" />.
            </exception>
        </member>
        <member name="P:TagLib.Riff.BitmapInfoHeader.HeaderSize">
            <summary>
               Gets the size of the structure in bytes.
            </summary>
            <value>
               A <see cref="T:System.UInt32" /> value containing the number of
               bytes in the structure.
            </value>
        </member>
        <member name="P:TagLib.Riff.BitmapInfoHeader.Planes">
            <summary>
               Gets the number of planes in the image.
            </summary>
            <value>
               A <see cref="T:System.UInt16" /> value containing the number of
               planes.
            </value>
        </member>
        <member name="P:TagLib.Riff.BitmapInfoHeader.BitCount">
            <summary>
               Gets the number of bits per pixel.
            </summary>
            <value>
               A <see cref="T:System.UInt16" /> value containing the number of
               bits per pixel, equivalent to the log base 2 of the
               maximum number of colors.
            </value>
        </member>
        <member name="P:TagLib.Riff.BitmapInfoHeader.CompressionId">
            <summary>
               Gets the compression ID for image.
            </summary>
            <value>
               A four-byte <see cref="T:TagLib.ByteVector" /> object containing
               the ID of the compression system (codec) used by the
               image.
            </value>
        </member>
        <member name="P:TagLib.Riff.BitmapInfoHeader.ImageSize">
            <summary>
               Gets the size of the image in bytes.
            </summary>
            <value>
               A <see cref="T:System.UInt32" /> value containing the number of
               bytes in the image.
            </value>
        </member>
        <member name="P:TagLib.Riff.BitmapInfoHeader.XPixelsPerMeter">
            <summary>
               Gets the horizontal resolution of the target device.
            </summary>
            <value>
               A <see cref="T:System.UInt32" /> value containing the number of
               pixels-per-meter in the hoizontal direction for the
               target device.
            </value>
        </member>
        <member name="P:TagLib.Riff.BitmapInfoHeader.YPixelsPerMeter">
            <summary>
               Gets the vertical resolution of the target device.
            </summary>
            <value>
               A <see cref="T:System.UInt32" /> value containing the number of
               pixels-per-meter in the vertical direction for the
               target device.
            </value>
        </member>
        <member name="P:TagLib.Riff.BitmapInfoHeader.ColorsUsed">
            <summary>
               Gets the number of colors in the image.
            </summary>
            <value>
               A <see cref="T:System.UInt32" /> value containing the number of
               colors.
            </value>
        </member>
        <member name="P:TagLib.Riff.BitmapInfoHeader.ImportantColors">
            <summary>
               Gets the number of colors important in displaying the
               image.
            </summary>
            <value>
               A <see cref="T:System.UInt32" /> value containing the number of
               important colors.
            </value>
        </member>
        <member name="P:TagLib.Riff.BitmapInfoHeader.VideoWidth">
            <summary>
               Gets the width of the video represented by the current
               instance.
            </summary>
            <value>
               A <see cref="T:System.Int32" /> value containing the width of the
               video represented by the current instance.
            </value>
        </member>
        <member name="P:TagLib.Riff.BitmapInfoHeader.VideoHeight">
            <summary>
               Gets the height of the video represented by the current
               instance.
            </summary>
            <value>
               A <see cref="T:System.Int32" /> value containing the height of the
               video represented by the current instance.
            </value>
        </member>
        <member name="P:TagLib.Riff.BitmapInfoHeader.MediaTypes">
            <summary>
               Gets the types of media represented by the current
               instance.
            </summary>
            <value>
               Always <see cref="F:TagLib.MediaTypes.Video" />.
            </value>
        </member>
        <member name="P:TagLib.Riff.BitmapInfoHeader.Duration">
            <summary>
               Gets the duration of the media represented by the current
               instance.
            </summary>
            <value>
               Always <see cref="F:System.TimeSpan.Zero" />.
            </value>
        </member>
        <member name="P:TagLib.Riff.BitmapInfoHeader.Description">
            <summary>
               Gets a text description of the media represented by the
               current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> object containing a description
               of the media represented by the current instance.
            </value>
        </member>
        <member name="M:TagLib.Riff.BitmapInfoHeader.GetHashCode">
            <summary>
               Generates a hash code for the current instance.
            </summary>
            <returns>
               A <see cref="T:System.Int32" /> value containing the hash code for
               the current instance.
            </returns>
        </member>
        <member name="M:TagLib.Riff.BitmapInfoHeader.Equals(System.Object)">
            <summary>
               Checks whether or not the current instance is equal to
               another object.
            </summary>
            <param name="other">
               A <see cref="T:System.Object" /> to compare to the current
               instance.
            </param>
            <returns>
               A <see cref="T:System.Boolean" /> value indicating whether or not the
               current instance is equal to <paramref name="other" />.
            </returns>
            <seealso cref="M:System.IEquatable`1.Equals" />
        </member>
        <member name="M:TagLib.Riff.BitmapInfoHeader.Equals(TagLib.Riff.BitmapInfoHeader)">
            <summary>
               Checks whether or not the current instance is equal to
               another instance of <see cref="T:TagLib.Riff.BitmapInfoHeader" />.
            </summary>
            <param name="other">
               A <see cref="T:TagLib.Riff.BitmapInfoHeader" /> object to compare to
               the current instance.
            </param>
            <returns>
               A <see cref="T:System.Boolean" /> value indicating whether or not the
               current instance is equal to <paramref name="other" />.
            </returns>
            <seealso cref="M:System.IEquatable`1.Equals" />
        </member>
        <member name="M:TagLib.Riff.BitmapInfoHeader.op_Equality(TagLib.Riff.BitmapInfoHeader,TagLib.Riff.BitmapInfoHeader)">
            <summary>
               Gets whether or not two instances of <see
               cref="T:TagLib.Riff.WaveFormatEx" /> are equal to eachother.
            </summary>
            <param name="first">
               A <see cref="T:TagLib.Riff.BitmapInfoHeader" /> object to compare.
            </param>
            <param name="second">
               A <see cref="T:TagLib.Riff.BitmapInfoHeader" /> object to compare.
            </param>
            <returns>
               <see langword="true" /> if <paramref name="first" /> is
               equal to <paramref name="second" />. Otherwise, <see
               langword="false" />.
            </returns>
        </member>
        <member name="M:TagLib.Riff.BitmapInfoHeader.op_Inequality(TagLib.Riff.BitmapInfoHeader,TagLib.Riff.BitmapInfoHeader)">
            <summary>
               Gets whether or not two instances of <see
               cref="T:TagLib.Riff.BitmapInfoHeader" /> differ.
            </summary>
            <param name="first">
               A <see cref="T:TagLib.Riff.BitmapInfoHeader" /> object to compare.
            </param>
            <param name="second">
               A <see cref="T:TagLib.Riff.BitmapInfoHeader" /> object to compare.
            </param>
            <returns>
               <see langword="true" /> if <paramref name="first" /> is
               unequal to <paramref name="second" />. Otherwise, <see
               langword="false" />.
            </returns>
        </member>
        <member name="T:TagLib.Riff.DivXTag">
            <summary>
               This class extends <see cref="T:TagLib.Tag" /> to provide support for
               reading and writing tags stored in the DivX format.
            </summary>
        </member>
        <member name="F:TagLib.Riff.DivXTag.title">
            <summary>
               Contains the title.
            </summary>
        </member>
        <member name="F:TagLib.Riff.DivXTag.artist">
            <summary>
               Contains the semicolon separated performers.
            </summary>
        </member>
        <member name="F:TagLib.Riff.DivXTag.year">
            <summary>
               Contains the 4 digit year.
            </summary>
        </member>
        <member name="F:TagLib.Riff.DivXTag.comment">
            <summary>
               Contains a comment on track.
            </summary>
        </member>
        <member name="F:TagLib.Riff.DivXTag.genre">
            <summary>
               Contains the genre index.
            </summary>
        </member>
        <member name="F:TagLib.Riff.DivXTag.extra_data">
            <summary>
               Contains the extra 6 bytes at the end of the tag.
            </summary>
        </member>
        <member name="F:TagLib.Riff.DivXTag.Size">
            <summary>
               The size of a DivX tag.
            </summary>
        </member>
        <member name="F:TagLib.Riff.DivXTag.FileIdentifier">
            <summary>
               The identifier used to recognize a DivX tags.
            </summary>
            <value>
               "DIVXTAG"
            </value>
        </member>
        <member name="M:TagLib.Riff.DivXTag.#ctor">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Riff.DivXTag" /> with no contents.
            </summary>
        </member>
        <member name="M:TagLib.Riff.DivXTag.#ctor(TagLib.Riff.File,System.Int64)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Riff.DivXTag" /> by reading the contents from a
               specified position in a specified file.
            </summary>
            <param name="file">
               A <see cref="T:TagLib.Riff.File" /> object containing the file from
               which the contents of the new instance is to be read.
            </param>
            <param name="position">
               A <see cref="T:System.Int64" /> value specify at what position to
               read the tag.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="file" /> is <see langword="null" />.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
               <paramref name="position" /> is less than zero or greater
               than the size of the file.
            </exception>
            <exception cref="T:TagLib.CorruptFileException">
               The file does not contain the file identifier at the
               correct offset from the given position.
            </exception>
        </member>
        <member name="M:TagLib.Riff.DivXTag.#ctor(TagLib.ByteVector)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Riff.DivXTag" /> by reading the contents raw tag data
               stored in a specified <see cref="T:TagLib.ByteVector" /> object.
            </summary>
            <param name="data">
               A <see cref="T:TagLib.ByteVector"/> containing a raw DivX tag to
               read into the new instance.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="data" /> is <see langword="null" />.
            </exception>
            <exception cref="T:TagLib.CorruptFileException">
               The file does not contain the file identifier at the
               correct offset from the given position.
            </exception>
        </member>
        <member name="M:TagLib.Riff.DivXTag.Render">
            <summary>
               Renders the current instance as a raw DivX tag.
            </summary>
            <returns>
               A <see cref="T:TagLib.ByteVector" /> object containing the
               rendered tag.
            </returns>
        </member>
        <member name="M:TagLib.Riff.DivXTag.Parse(TagLib.ByteVector)">
            <summary>
               Populates the current instance by parsing the contents of
               a raw DivX tag.
            </summary>
            <param name="data">
               A <see cref="T:TagLib.ByteVector" /> object containing the
               starting with an DivX tag.
            </param>
        </member>
        <member name="P:TagLib.Riff.DivXTag.TagTypes">
            <summary>
               Gets the tag types contained in the current instance.
            </summary>
            <value>
               Always <see cref="F:TagLib.TagTypes.Id3v1" />.
            </value>
        </member>
        <member name="P:TagLib.Riff.DivXTag.Title">
            <summary>
               Gets and sets the title for the media described by the
               current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> object containing the title for
               the media described by the current instance or <see
               langword="null" /> if no value is present.
            </value>
            <remarks>
               When stored on disk, only the first 32 bytes of the
               Latin-1 encoded value will be stored. This may result in
               lost data.
            </remarks>
        </member>
        <member name="P:TagLib.Riff.DivXTag.Performers">
            <summary>
               Gets and sets the performers or artists who performed in
               the media described by the current instance.
            </summary>
            <value>
               A <see cref="T:string[]" /> containing the performers or
               artists who performed in the media described by the
               current instance or an empty array if no value is
               present.
            </value>
            <remarks>
               When stored on disk, only the first 28 bytes of the
               Latin-1 encoded value will be stored, minus a byte for
               each additionial performer (i.e. two performers will only
               have 27 bytes and three performers will only have 26
               bytes).This may result in lost data.
            </remarks>
        </member>
        <member name="P:TagLib.Riff.DivXTag.Comment">
            <summary>
               Gets and sets a user comment on the media represented by
               the current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> object containing user comments
               on the media represented by the current instance or <see
               langword="null" /> if no value is present.
            </value>
            <remarks>
               When stored on disk, only the first 48 bytes of the
               Latin-1 encoded value will be stored. This may result in
               lost data.
            </remarks>
        </member>
        <member name="P:TagLib.Riff.DivXTag.Genres">
            <summary>
               Gets and sets the genres of the media represented by the
               current instance.
            </summary>
            <value>
               A <see cref="T:string[]" /> containing the genres of the
               media represented by the current instance or an empty
               array if no value is present.
            </value>
            <remarks>
               Only first genre will be stored and only if it is an
               exact match for a value appearing in <see
               cref="P:TagLib.Genres.Video" />. All other values will
               result in the property being cleared.
            </remarks>
        </member>
        <member name="P:TagLib.Riff.DivXTag.Year">
            <summary>
               Gets and sets the year that the media represented by the
               current instance was recorded.
            </summary>
            <value>
               A <see cref="T:System.UInt32" /> containing the year that the media
               represented by the current instance was created or zero
               if no value is present.
            </value>
            <remarks>
               Only values between 1 and 9999 will be stored, all other
               values will result in the property being zeroed.
            </remarks>
        </member>
        <member name="M:TagLib.Riff.DivXTag.Clear">
            <summary>
               Clears the values stored in the current instance.
            </summary>
        </member>
        <member name="T:TagLib.Riff.File">
            <summary>
               This class extends <see cref="T:TagLib.File" /> to provide
               support for reading and writing tags and properties for files
               using the RIFF file format such as AVI and Wave files.
            </summary>
        </member>
        <member name="F:TagLib.Riff.File.tag">
            <summary>
             Contains all the tags of the file.
            </summary>
        </member>
        <member name="F:TagLib.Riff.File.info_tag">
            <summary>
             Contains the INFO tag.
            </summary>
        </member>
        <member name="F:TagLib.Riff.File.mid_tag">
            <summary>
             Contains the MovieID tag.
            </summary>
        </member>
        <member name="F:TagLib.Riff.File.divx_tag">
            <summary>
             Contains the DivX tag.
            </summary>
        </member>
        <member name="F:TagLib.Riff.File.id32_tag">
            <summary>
             Contains the Id3v2 tag.
            </summary>
        </member>
        <member name="F:TagLib.Riff.File.properties">
            <summary>
             Contains the media properties.
            </summary>
        </member>
        <member name="F:TagLib.Riff.File.FileIdentifier">
            <summary>
               The identifier used to recognize a RIFF files.
            </summary>
            <value>
               "RIFF"
            </value>
        </member>
        <member name="M:TagLib.Riff.File.#ctor(System.String,TagLib.ReadStyle)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Riff.File" /> for a specified path in the local file
               system and specified read style.
            </summary>
            <param name="path">
               A <see cref="T:System.String" /> object containing the path of the
               file to use in the new instance.
            </param>
            <param name="propertiesStyle">
               A <see cref="T:TagLib.ReadStyle" /> value specifying at what level
               of accuracy to read the media properties, or <see
               cref="F:TagLib.ReadStyle.None" /> to ignore the properties.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="path" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:TagLib.Riff.File.#ctor(System.String)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Riff.File" /> for a specified path in the local file
               system with an average read style.
            </summary>
            <param name="path">
               A <see cref="T:System.String" /> object containing the path of the
               file to use in the new instance.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="path" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:TagLib.Riff.File.#ctor(TagLib.File.IFileAbstraction,TagLib.ReadStyle)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Riff.File" /> for a specified file abstraction and
               specified read style.
            </summary>
            <param name="abstraction">
               A <see cref="T:TagLib.File.IFileAbstraction" /> object to use when
               reading from and writing to the file.
            </param>
            <param name="propertiesStyle">
               A <see cref="T:TagLib.ReadStyle" /> value specifying at what level
               of accuracy to read the media properties, or <see
               cref="F:TagLib.ReadStyle.None" /> to ignore the properties.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="abstraction" /> is <see langword="null"
               />.
            </exception>
        </member>
        <member name="M:TagLib.Riff.File.#ctor(TagLib.File.IFileAbstraction)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Riff.File" /> for a specified file abstraction with an
               average read style.
            </summary>
            <param name="abstraction">
               A <see cref="T:TagLib.File.IFileAbstraction" /> object to use when
               reading from and writing to the file.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="abstraction" /> is <see langword="null"
               />.
            </exception>
        </member>
        <member name="P:TagLib.Riff.File.Tag">
            <summary>
               Gets a abstract representation of all tags stored in the
               current instance.
            </summary>
            <value>
               A <see cref="T:TagLib.Tag" /> object representing all tags
               stored in the current instance.
            </value>
        </member>
        <member name="P:TagLib.Riff.File.Properties">
            <summary>
               Gets the media properties of the file represented by the
               current instance.
            </summary>
            <value>
               A <see cref="T:TagLib.Properties" /> object containing the
               media properties of the file represented by the current
               instance.
            </value>
        </member>
        <member name="M:TagLib.Riff.File.Save">
            <summary>
               Saves the changes made in the current instance to the
               file it represents.
            </summary>
        </member>
        <member name="M:TagLib.Riff.File.RemoveTags(TagLib.TagTypes)">
            <summary>
               Removes a set of tag types from the current instance.
            </summary>
            <param name="types">
               A bitwise combined <see cref="T:TagLib.TagTypes" /> value
               containing tag types to be removed from the file.
            </param>
            <remarks>
               In order to remove all tags from a file, pass <see
               cref="F:TagLib.TagTypes.AllTags" /> as <paramref name="types" />.
            </remarks>
        </member>
        <member name="M:TagLib.Riff.File.GetTag(TagLib.TagTypes,System.Boolean)">
            <summary>
               Gets a tag of a specified type from the current instance,
               optionally creating a new tag if possible.
            </summary>
            <param name="type">
               A <see cref="T:TagLib.TagTypes" /> value indicating the
               type of tag to read.
            </param>
            <param name="create">
               A <see cref="T:System.Boolean" /> value specifying whether or not to
               try and create the tag if one is not found.
            </param>
            <returns>
               A <see cref="P:TagLib.Riff.File.Tag" /> object containing the tag that was
               found in or added to the current instance. If no
               matching tag was found and none was created, <see
               langword="null" /> is returned.
            </returns>
        </member>
        <member name="M:TagLib.Riff.File.Read(System.Boolean,TagLib.ReadStyle,System.UInt32@,System.Int64@,System.Int64@)">
            <summary>
               Reads the contents of the current instance determining
               the size of the riff data, the area the tagging is in,
               and optionally reading in the tags and media properties.
            </summary>
            <param name="read_tags">
               If <see langword="true" />, any tags found will be read
               into the current instance.
            </param>
            <param name="style">
               A <see cref="T:TagLib.ReadStyle"/> value specifying how the media
               data is to be read into the current instance.
            </param>
            <param name="riff_size">
               A <see cref="T:System.UInt32"/> value reference to be filled with
               the size of the RIFF data as read from the file.
            </param>
            <param name="tag_start">
               A <see cref="T:System.Int64" /> value reference to be filled with
               the absolute seek position at which the tagging data
               starts.
            </param>
            <param name="tag_end">
               A <see cref="T:System.Int64" /> value reference to be filled with
               the absolute seek position at which the tagging data
               ends.
            </param>
            <exception cref="T:TagLib.CorruptFileException">
               The file does not begin with <see cref="F:TagLib.Riff.File.FileIdentifier"
               />.
            </exception>
        </member>
        <member name="T:TagLib.Riff.InfoTag">
            <summary>
               This class extends <see cref="T:TagLib.Riff.ListTag" /> to provide support for
               reading and writing standard INFO tags.
            </summary>
        </member>
        <member name="M:TagLib.Riff.InfoTag.#ctor">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Riff.InfoTag" /> with no contents.
            </summary>
        </member>
        <member name="M:TagLib.Riff.InfoTag.#ctor(TagLib.ByteVector)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Riff.InfoTag" /> by reading the contents of a raw
               RIFF list stored in a <see cref="T:TagLib.ByteVector" /> object.
            </summary>
            <param name="data">
               A <see cref="T:TagLib.ByteVector"/> containing a raw RIFF list to
               read into the new instance.
            </param>
        </member>
        <member name="M:TagLib.Riff.InfoTag.#ctor(TagLib.File,System.Int64,System.Int32)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Riff.InfoTag" /> by reading the contents of a raw RIFF
               list from a specified position in a <see
               cref="T:TagLib.File"/>.
            </summary>
            <param name="file">
               A <see cref="T:TagLib.File" /> object containing the file
               from which the contents of the new instance is to be
               read.
            </param>
            <param name="position">
               A <see cref="T:System.Int64" /> value specify at what position to
               read the list.
            </param>
            <param name="length">
               A <see cref="T:System.Int32" /> value specifying the number of bytes
               to read.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="file" /> is <see langword="null" />.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
               <paramref name="position" /> is less than zero or greater
               than the size of the file.
            </exception>
        </member>
        <member name="M:TagLib.Riff.InfoTag.RenderEnclosed">
            <summary>
               Renders the current instance enclosed in a "INFO" item.
            </summary>
            <returns>
               A <see cref="T:TagLib.ByteVector"/> object containing the rendered
               version of the current instance.
            </returns>
        </member>
        <member name="P:TagLib.Riff.InfoTag.TagTypes">
            <summary>
               Gets the tag types contained in the current instance.
            </summary>
            <value>
               Always <see cref="F:TagLib.TagTypes.RiffInfo" />.
            </value>
        </member>
        <member name="P:TagLib.Riff.InfoTag.Title">
            <summary>
               Gets and sets the title for the media described by the
               current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> object containing the title for
               the media described by the current instance or <see
               langword="null" /> if no value is present.
            </value>
            <remarks>
               This property is implemented using the "INAM" item.
            </remarks>
        </member>
        <member name="P:TagLib.Riff.InfoTag.Description">
            <summary>
               Gets and sets a short description of the media.
               For a music, this could be the comment that the artist
               made of its artwork. For a video, this should be a 
               short summary of the story/plot, but a spoiler. This
               should give the impression of what to expect in the
               media.
            </summary>
            <value>
               A <see cref="T:System.String" /> containing the subtitle
               the media represented by the current instance 
               or an empty array if no value is present.
            </value>
            <remarks>
               This property is implemented using the "ISBJ" item.
            </remarks>
        </member>
        <member name="P:TagLib.Riff.InfoTag.Performers">
            <summary>
               Gets and sets the performers or artists who performed in
               the media described by the current instance.
            </summary>
            <value>
               A <see cref="T:string[]" /> containing the performers or
               artists who performed in the media described by the
               current instance or an empty array if no value is
               present.
            </value>
            <remarks>
               This property is implemented using the "ISTR" item.
            </remarks>
        </member>
        <member name="P:TagLib.Riff.InfoTag.AlbumArtists">
            <summary>
               Gets and sets the band or artist who is credited in the
               creation of the entire album or collection containing the
               media described by the current instance.
            </summary>
            <value>
               A <see cref="T:string[]" /> containing the band or artist
               who is credited in the creation of the entire album or
               collection containing the media described by the current
               instance or an empty array if no value is present.
            </value>
            <remarks>
               This property is implemented using the "IART" item.
            </remarks>
        </member>
        <member name="P:TagLib.Riff.InfoTag.Composers">
            <summary>
               Gets and sets the composers of the media represented by
               the current instance.
            </summary>
            <value>
               A <see cref="T:string[]" /> containing the composers of the
               media represented by the current instance or an empty
               array if no value is present.
            </value>
            <remarks>
               This property is implemented using the "IWRI" item.
            </remarks>
        </member>
        <member name="P:TagLib.Riff.InfoTag.Album">
            <summary>
               Gets and sets the album of the media represented by the
               current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> object containing the album of
               the media represented by the current instance or <see
               langword="null" /> if no value is present.
            </value>
            <remarks>
               This property is implemented using the non-standard
               "DIRC" (Directory) item.
            </remarks>
        </member>
        <member name="P:TagLib.Riff.InfoTag.Conductor">
            <summary>
               Gets and sets the conductor or director of the media
               represented by the current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> object containing the conductor
               or director of the media represented by the current
               instance or <see langword="null" /> if no value present.
            </value>
            <remarks>
               This property is implemented using the "ICNM" 
               (Cinematographer) non-standard item.
            </remarks>
        </member>
        <member name="P:TagLib.Riff.InfoTag.Comment">
            <summary>
               Gets and sets a user comment on the media represented by
               the current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> object containing user comments
               on the media represented by the current instance or <see
               langword="null" /> if no value is present.
            </value>
            <remarks>
               This property is implemented using the "ICMT" item.
            </remarks>
        </member>
        <member name="P:TagLib.Riff.InfoTag.Genres">
            <summary>
               Gets and sets the genres of the media represented by the
               current instance.
            </summary>
            <value>
               A <see cref="T:string[]" /> containing the genres of the
               media represented by the current instance or an empty
               array if no value is present.
            </value>
            <remarks>
               This property is implemented using the "IGNR" item.
            </remarks>
        </member>
        <member name="P:TagLib.Riff.InfoTag.Year">
            <summary>
               Gets and sets the year that the media represented by the
               current instance was recorded.
            </summary>
            <value>
               A <see cref="T:System.UInt32" /> containing the year that the media
               represented by the current instance was created or zero
               if no value is present.
            </value>
            <remarks>
               This property is implemented using the "ICRD" item.
            </remarks>
        </member>
        <member name="P:TagLib.Riff.InfoTag.Track">
            <summary>
               Gets and sets the position of the media represented by
               the current instance in its containing album.
            </summary>
            <value>
               A <see cref="T:System.UInt32" /> containing the position of the
               media represented by the current instance in its
               containing album or zero if not specified.
            </value>
            <remarks>
               This property is implemented using the "IPRT" item.
            </remarks>
        </member>
        <member name="P:TagLib.Riff.InfoTag.TrackCount">
            <summary>
               Gets and sets the number of tracks in the album
               containing the media represented by the current instance.
            </summary>
            <value>
               A <see cref="T:System.UInt32" /> containing the number of tracks in
               the album containing the media represented by the current
               instance or zero if not specified.
            </value>
            <remarks>
               This property is implemented using the "IFRM" item.
            </remarks>
        </member>
        <member name="P:TagLib.Riff.InfoTag.Copyright">
            <summary>
               Gets and sets the copyright information for the media
               represented by the current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> object containing the copyright
               information for the media represented by the current
               instance or <see langword="null" /> if no value present.
            </value>
            <remarks>
               This property is implemented using the "ICOP" item.
            </remarks>
        </member>
        <member name="T:TagLib.Riff.List">
            <summary>
               This class extends <see
               cref="T:System.Collections.Generic.Dictionary`2" /> to provide
               support for reading and writing RIFF lists.
            </summary>
        </member>
        <member name="F:TagLib.Riff.List.string_type">
            <summary>
               Contains the <see cref="P:TagLib.Riff.List.StringType"/> value used for parsing
               and rendering the contents of this list.
            </summary>
        </member>
        <member name="M:TagLib.Riff.List.#ctor">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Riff.List" /> with no contents.
            </summary>
        </member>
        <member name="M:TagLib.Riff.List.#ctor(TagLib.ByteVector)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Riff.List" /> by reading the contents of a raw RIFF
               list stored in a <see cref="T:TagLib.ByteVector" /> object.
            </summary>
            <param name="data">
               A <see cref="T:TagLib.ByteVector"/> containing a raw RIFF list to
               read into the new instance.
            </param>
        </member>
        <member name="M:TagLib.Riff.List.#ctor(TagLib.File,System.Int64,System.Int32)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Riff.List" /> by reading the contents of a raw RIFF list
               from a specified position in a <see cref="T:TagLib.File"/>.
            </summary>
            <param name="file">
               A <see cref="T:TagLib.File" /> object containing the file
               from which the contents of the new instance is to be
               read.
            </param>
            <param name="position">
               A <see cref="T:System.Int64" /> value specify at what position to
               read the list.
            </param>
            <param name="length">
               A <see cref="T:System.Int32" /> value specifying the number of bytes
               to read.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="file" /> is <see langword="null" />.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
               <paramref name="position" /> is less than zero or greater
               than the size of the file.
            </exception>
        </member>
        <member name="M:TagLib.Riff.List.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Riff.List" /> from a specified serialization info and
               streaming context.
            </summary>
            <param name="info">
               A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object containing the
               serialized data to be used for the new instance.
            </param>
            <param name="context">
               A <see cref="T:System.Runtime.Serialization.StreamingContext" /> object containing the
               streaming context information for the new instance.
            </param>
            <remarks>
               This constructor is implemented because <see
               cref="T:TagLib.Riff.List" /> implements the <see cref="T:System.Runtime.Serialization.ISerializable"
               /> interface.
            </remarks>
        </member>
        <member name="P:TagLib.Riff.List.StringType">
            <summary>
               Gets or sets the <see cref="P:TagLib.Riff.List.StringType"/> value used for parsing
               and rendering the contents of this list.
            </summary>
            <remarks>
               The value must be StringType.Latin1 or StringType.UTF8.
            </remarks>
        </member>
        <member name="M:TagLib.Riff.List.Render">
            <summary>
               Renders the current instance as a raw RIFF list.
            </summary>
            <returns>
               A <see cref="T:TagLib.ByteVector"/> object containing the rendered
               version of the current instance.
            </returns>
        </member>
        <member name="M:TagLib.Riff.List.RenderEnclosed(TagLib.ByteVector)">
            <summary>
               Renders the current instance enclosed in an item with a
               specified ID.
            </summary>
            <param name="id">
               A <see cref="T:TagLib.ByteVector"/> object containing the ID of
               the item to enclose the current instance in.
            </param>
            <returns>
               A <see cref="T:TagLib.ByteVector"/> object containing the rendered
               version of the current instance.
            </returns>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="id" /> is <see langword="null" />.
            </exception>
            <exception cref="T:System.ArgumentException">
               <paramref name="id" /> isn't exactly four bytes long.
            </exception>
        </member>
        <member name="M:TagLib.Riff.List.GetValues(TagLib.ByteVector)">
            <summary>
               Gets the values for a specified item in the current
               instance as a <see cref="T:TagLib.ByteVectorCollection" />.
            </summary>
            <param name="id">
               A <see cref="T:TagLib.ByteVector" /> object containing the ID of
               the item to set.
            </param>
            <returns>
               A <see cref="T:TagLib.ByteVectorCollection" /> object containing
               the values of the specified item.
            </returns>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="id" /> is <see langword="null" />.
            </exception>
            <exception cref="T:System.ArgumentException">
               <paramref name="id" /> isn't exactly four bytes long.
            </exception>
        </member>
        <member name="M:TagLib.Riff.List.GetValuesAsStrings(TagLib.ByteVector)">
            <summary>
               Gets the values for a specified item in the current
               instance as a <see cref="T:string[]" />.
            </summary>
            <param name="id">
               A <see cref="T:TagLib.ByteVector" /> object containing the ID of
               the item to set.
            </param>
            <returns>
               A <see cref="T:string[]" /> containing the values of the
               specified item.
            </returns>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="id" /> is <see langword="null" />.
            </exception>
            <exception cref="T:System.ArgumentException">
               <paramref name="id" /> isn't exactly four bytes long.
            </exception>
        </member>
        <member name="M:TagLib.Riff.List.GetValuesAsStringCollection(TagLib.ByteVector)">
            <summary>
               Gets the values for a specified item in the current
               instance as a <see cref="T:TagLib.StringCollection" />.
            </summary>
            <param name="id">
               A <see cref="T:TagLib.ByteVector" /> object containing the ID of
               the item to set.
            </param>
            <returns>
               A <see cref="T:TagLib.StringCollection" /> object containing the
               values of the specified item.
            </returns>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="id" /> is <see langword="null" />.
            </exception>
            <exception cref="T:System.ArgumentException">
               <paramref name="id" /> isn't exactly four bytes long.
            </exception>
        </member>
        <member name="M:TagLib.Riff.List.GetValueAsUInt(TagLib.ByteVector)">
            <summary>
               Gets the value for a specified item in the current
               instance as a <see cref="T:System.UInt32"/>.
            </summary>
            <param name="id">
               A <see cref="T:TagLib.ByteVector" /> object containing the ID of
               the item to set.
            </param>
            <returns>
               A <see cref="T:System.UInt32" /> value containing the first value
               with the specified ID that could be converted to an
               integer, or zero if none could be found.
            </returns>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="id" /> is <see langword="null" />.
            </exception>
            <exception cref="T:System.ArgumentException">
               <paramref name="id" /> isn't exactly four bytes long.
            </exception>
        </member>
        <member name="M:TagLib.Riff.List.SetValue(TagLib.ByteVector,System.Collections.Generic.IEnumerable{TagLib.ByteVector})">
            <summary>
               Sets the value for a specified item in the current
               instance to the contents of a <see
               cref="T:System.Collections.Generic.IEnumerable`1" />.
            </summary>
            <param name="id">
               A <see cref="T:TagLib.ByteVector" /> object containing the ID of
               the item to set.
            </param>
            <param name="values">
               A <see cref="T:System.Collections.Generic.IEnumerable`1"
               /> containing the <see cref="T:TagLib.ByteVector"/> objects to
               store in the specified item.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="id" /> is <see langword="null" />.
            </exception>
            <exception cref="T:System.ArgumentException">
               <paramref name="id" /> isn't exactly four bytes long.
            </exception>
        </member>
        <member name="M:TagLib.Riff.List.SetValue(TagLib.ByteVector,TagLib.ByteVector[])">
            <summary>
               Sets the value for a specified item in the current
               instance to the contents of a <see cref="T:ByteVector[]"
               />.
            </summary>
            <param name="id">
               A <see cref="T:TagLib.ByteVector" /> object containing the ID of
               the item to set.
            </param>
            <param name="values">
               A <see cref="T:ByteVector[]" /> containing the values to
               store in the specified item.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="id" /> is <see langword="null" />.
            </exception>
            <exception cref="T:System.ArgumentException">
               <paramref name="id" /> isn't exactly four bytes long.
            </exception>
        </member>
        <member name="M:TagLib.Riff.List.SetValue(TagLib.ByteVector,System.UInt32)">
            <summary>
               Sets the value for a specified item in the current
               instance to the value of a <see cref="T:System.UInt32"/>.
            </summary>
            <param name="id">
               A <see cref="T:TagLib.ByteVector" /> object containing the ID of
               the item to set.
            </param>
            <param name="value">
               A <see cref="T:System.UInt32" /> value to store in the specified
               item.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="id" /> is <see langword="null" />.
            </exception>
            <exception cref="T:System.ArgumentException">
               <paramref name="id" /> isn't exactly four bytes long.
            </exception>
        </member>
        <member name="M:TagLib.Riff.List.SetValue(TagLib.ByteVector,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
               Sets the value for a specified item in the current
               instance to the contents of a <see
               cref="T:System.Collections.Generic.IEnumerable`1" />.
            </summary>
            <param name="id">
               A <see cref="T:TagLib.ByteVector" /> object containing the ID of
               the item to set.
            </param>
            <param name="values">
               A <see cref="T:System.Collections.Generic.IEnumerable`1"
               /> containing the <see cref="T:System.String"/> objects to store
               in the specified item.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="id" /> is <see langword="null" />.
            </exception>
            <exception cref="T:System.ArgumentException">
               <paramref name="id" /> isn't exactly four bytes long.
            </exception>
        </member>
        <member name="M:TagLib.Riff.List.SetValue(TagLib.ByteVector,System.String[])">
            <summary>
               Sets the value for a specified item in the current
               instance to the contents of a <see cref="T:string[]" />.
            </summary>
            <param name="id">
               A <see cref="T:TagLib.ByteVector" /> object containing the ID of
               the item to set.
            </param>
            <param name="values">
               A <see cref="T:string[]" /> containing the values to store
               in the specified item.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="id" /> is <see langword="null" />.
            </exception>
            <exception cref="T:System.ArgumentException">
               <paramref name="id" /> isn't exactly four bytes long.
            </exception>
        </member>
        <member name="M:TagLib.Riff.List.RemoveValue(TagLib.ByteVector)">
            <summary>
               Removes the item with the specified ID from the current
               instance.
            </summary>
            <param name="id">
               A <see cref="T:TagLib.ByteVector"/> object containing the ID of
               the item to remove from the current instance.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="id" /> is <see langword="null" />.
            </exception>
            <exception cref="T:System.ArgumentException">
               <paramref name="id" /> isn't exactly four bytes long.
            </exception>
        </member>
        <member name="M:TagLib.Riff.List.Parse(TagLib.ByteVector)">
            <summary>
               Populates the current instance by reading in the contents
               of a raw RIFF list stored in a <see cref="T:TagLib.ByteVector" />
               object.
            </summary>
            <param name="data">
               A <see cref="T:TagLib.ByteVector"/> containing a raw RIFF list to
               read into the current instance.
            </param>
        </member>
        <member name="T:TagLib.Riff.ListTag">
            <summary>
               This abstract class extends <see cref="T:TagLib.Tag" /> to provide support
               for reading and writing tags stored in the RIFF list format.
            </summary>
        </member>
        <member name="F:TagLib.Riff.ListTag.fields">
            <summary>
               Contains the <see cref="T:TagLib.Riff.List" /> object.
            </summary>
        </member>
        <member name="M:TagLib.Riff.ListTag.#ctor">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Riff.ListTag" /> with no contents.
            </summary>
        </member>
        <member name="M:TagLib.Riff.ListTag.#ctor(TagLib.Riff.List)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Riff.MovieIdTag" /> using a specified RIFF list.
            </summary>
            <param name="fields">
               A <see cref="T:TagLib.Riff.List"/> object to use in the new instance.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="fields" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:TagLib.Riff.ListTag.#ctor(TagLib.ByteVector)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Riff.ListTag" /> by reading the contents of a raw
               RIFF list stored in a <see cref="T:TagLib.ByteVector" /> object.
            </summary>
            <param name="data">
               A <see cref="T:TagLib.ByteVector"/> containing a raw RIFF list to
               read into the new instance.
            </param>
        </member>
        <member name="M:TagLib.Riff.ListTag.#ctor(TagLib.File,System.Int64,System.Int32)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Riff.ListTag" /> by reading the contents of a raw RIFF
               list from a specified position in a <see
               cref="T:TagLib.File" />.
            </summary>
            <param name="file">
               A <see cref="T:TagLib.File" /> object containing the file
               from which the contents of the new instance is to be
               read.
            </param>
            <param name="position">
               A <see cref="T:System.Int64" /> value specify at what position to
               read the list.
            </param>
            <param name="length">
               A <see cref="T:System.Int32" /> value specifying the number of bytes
               to read.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="file" /> is <see langword="null" />.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
               <paramref name="position" /> is less than zero or greater
               than the size of the file.
            </exception>
        </member>
        <member name="P:TagLib.Riff.ListTag.StringType">
            <summary>
               Gets or sets the <see cref="P:TagLib.Riff.ListTag.StringType"/> value used for parsing
               and rendering the contents of this tag.
            </summary>
            <remarks>
               The value must be StringType.Latin1 or StringType.UTF8.
            </remarks>
        </member>
        <member name="M:TagLib.Riff.ListTag.RenderEnclosed">
            <summary>
               Renders the current instance enclosed in the appropriate
               item.
            </summary>
            <returns>
               A <see cref="T:TagLib.ByteVector"/> object containing the rendered
               version of the current instance.
            </returns>
        </member>
        <member name="M:TagLib.Riff.ListTag.RenderEnclosed(TagLib.ByteVector)">
            <summary>
               Renders the current instance enclosed in an item with a
               specified ID.
            </summary>
            <param name="id">
               A <see cref="T:TagLib.ByteVector"/> object containing the ID of
               the item to enclose the current instance in.
            </param>
            <returns>
               A <see cref="T:TagLib.ByteVector"/> object containing the rendered
               version of the current instance.
            </returns>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="id" /> is <see langword="null" />.
            </exception>
            <exception cref="T:System.ArgumentException">
               <paramref name="id" /> isn't exactly four bytes long.
            </exception>
        </member>
        <member name="M:TagLib.Riff.ListTag.Render">
            <summary>
               Renders the current instance as a raw RIFF list.
            </summary>
            <returns>
               A <see cref="T:TagLib.ByteVector"/> object containing the rendered
               version of the current instance.
            </returns>
        </member>
        <member name="M:TagLib.Riff.ListTag.GetValues(TagLib.ByteVector)">
            <summary>
               Gets the values for a specified item in the current
               instance as a <see cref="T:TagLib.ByteVectorCollection" />.
            </summary>
            <param name="id">
               A <see cref="T:TagLib.ByteVector" /> object containing the ID of
               the item to set.
            </param>
            <returns>
               A <see cref="T:TagLib.ByteVectorCollection" /> object containing
               the values of the specified item.
            </returns>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="id" /> is <see langword="null" />.
            </exception>
            <exception cref="T:System.ArgumentException">
               <paramref name="id" /> isn't exactly four bytes long.
            </exception>
        </member>
        <member name="M:TagLib.Riff.ListTag.GetValuesAsStrings(TagLib.ByteVector)">
            <summary>
               Gets the values for a specified item in the current
               instance as a <see cref="T:string[]" />.
            </summary>
            <param name="id">
               A <see cref="T:TagLib.ByteVector" /> object containing the ID of
               the item to set.
            </param>
            <returns>
               A <see cref="T:string[]" /> containing the values of the
               specified item.
            </returns>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="id" /> is <see langword="null" />.
            </exception>
            <exception cref="T:System.ArgumentException">
               <paramref name="id" /> isn't exactly four bytes long.
            </exception>
        </member>
        <member name="M:TagLib.Riff.ListTag.GetValuesAsStringCollection(TagLib.ByteVector)">
            <summary>
               Gets the values for a specified item in the current
               instance as a <see cref="T:TagLib.StringCollection" />.
            </summary>
            <param name="id">
               A <see cref="T:TagLib.ByteVector" /> object containing the ID of
               the item to set.
            </param>
            <returns>
               A <see cref="T:TagLib.StringCollection" /> object containing the
               values of the specified item.
            </returns>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="id" /> is <see langword="null" />.
            </exception>
            <exception cref="T:System.ArgumentException">
               <paramref name="id" /> isn't exactly four bytes long.
            </exception>
        </member>
        <member name="M:TagLib.Riff.ListTag.GetValueAsUInt(TagLib.ByteVector)">
            <summary>
               Gets the value for a specified item in the current
               instance as a <see cref="T:System.UInt32"/>.
            </summary>
            <param name="id">
               A <see cref="T:TagLib.ByteVector" /> object containing the ID of
               the item to set.
            </param>
            <returns>
               A <see cref="T:System.UInt32" /> value containing the first value
               with the specified ID that could be converted to an
               integer, or zero if none could be found.
            </returns>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="id" /> is <see langword="null" />.
            </exception>
            <exception cref="T:System.ArgumentException">
               <paramref name="id" /> isn't exactly four bytes long.
            </exception>
        </member>
        <member name="M:TagLib.Riff.ListTag.SetValue(TagLib.ByteVector,TagLib.ByteVector[])">
            <summary>
               Sets the value for a specified item in the current
               instance to the contents of a <see cref="T:ByteVector[]"
               />.
            </summary>
            <param name="id">
               A <see cref="T:TagLib.ByteVector" /> object containing the ID of
               the item to set.
            </param>
            <param name="value">
               A <see cref="T:ByteVector[]" /> containing the values to
               store in the specified item.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="id" /> is <see langword="null" />.
            </exception>
            <exception cref="T:System.ArgumentException">
               <paramref name="id" /> isn't exactly four bytes long.
            </exception>
        </member>
        <member name="M:TagLib.Riff.ListTag.SetValue(TagLib.ByteVector,TagLib.ByteVectorCollection)">
            <summary>
               Sets the value for a specified item in the current
               instance to the contents of a <see
               cref="T:TagLib.ByteVectorCollection" />.
            </summary>
            <param name="id">
               A <see cref="T:TagLib.ByteVector" /> object containing the ID of
               the item to set.
            </param>
            <param name="value">
               A <see cref="T:TagLib.ByteVectorCollection" /> object containing
               the values to store in the specified item.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="id" /> is <see langword="null" />.
            </exception>
            <exception cref="T:System.ArgumentException">
               <paramref name="id" /> isn't exactly four bytes long.
            </exception>
        </member>
        <member name="M:TagLib.Riff.ListTag.SetValue(TagLib.ByteVector,System.UInt32)">
            <summary>
               Sets the value for a specified item in the current
               instance to the value of a <see cref="T:System.UInt32"/>.
            </summary>
            <param name="id">
               A <see cref="T:TagLib.ByteVector" /> object containing the ID of
               the item to set.
            </param>
            <param name="value">
               A <see cref="T:System.UInt32" /> value to store in the specified
               item.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="id" /> is <see langword="null" />.
            </exception>
            <exception cref="T:System.ArgumentException">
               <paramref name="id" /> isn't exactly four bytes long.
            </exception>
        </member>
        <member name="M:TagLib.Riff.ListTag.SetValue(TagLib.ByteVector,TagLib.StringCollection)">
            <summary>
               Sets the value for a specified item in the current
               instance to the contents of a <see
               cref="T:TagLib.StringCollection" />.
            </summary>
            <param name="id">
               A <see cref="T:TagLib.ByteVector" /> object containing the ID of
               the item to set.
            </param>
            <param name="value">
               A <see cref="T:TagLib.StringCollection" /> object containing the
               values to store in the specified item.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="id" /> is <see langword="null" />.
            </exception>
            <exception cref="T:System.ArgumentException">
               <paramref name="id" /> isn't exactly four bytes long.
            </exception>
        </member>
        <member name="M:TagLib.Riff.ListTag.SetValue(TagLib.ByteVector,System.String[])">
            <summary>
               Sets the value for a specified item in the current
               instance to the contents of a <see cref="T:string[]" />.
            </summary>
            <param name="id">
               A <see cref="T:TagLib.ByteVector" /> object containing the ID of
               the item to set.
            </param>
            <param name="value">
               A <see cref="T:string[]" /> containing the values to store
               in the specified item.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="id" /> is <see langword="null" />.
            </exception>
            <exception cref="T:System.ArgumentException">
               <paramref name="id" /> isn't exactly four bytes long.
            </exception>
        </member>
        <member name="M:TagLib.Riff.ListTag.RemoveValue(TagLib.ByteVector)">
            <summary>
               Removes the item with the specified ID from the current
               instance.
            </summary>
            <param name="id">
               A <see cref="T:TagLib.ByteVector"/> object containing the ID of
               the item to remove from the current instance.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="id" /> is <see langword="null" />.
            </exception>
            <exception cref="T:System.ArgumentException">
               <paramref name="id" /> isn't exactly four bytes long.
            </exception>
        </member>
        <member name="P:TagLib.Riff.ListTag.IsEmpty">
            <summary>
               Gets whether or not the current instance is empty.
            </summary>
            <value>
               <see langword="true" /> if the current instance does not
               any values. Otherwise <see langword="false" />.
            </value>
        </member>
        <member name="M:TagLib.Riff.ListTag.Clear">
            <summary>
               Clears the values stored in the current instance.
            </summary>
        </member>
        <member name="T:TagLib.Riff.MovieIdTag">
            <summary>
               This class extends <see cref="T:TagLib.Riff.ListTag" /> to provide support for
               reading and writing MovieID tags.
            </summary>
        </member>
        <member name="M:TagLib.Riff.MovieIdTag.#ctor">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Riff.MovieIdTag" /> with no contents.
            </summary>
        </member>
        <member name="M:TagLib.Riff.MovieIdTag.#ctor(TagLib.ByteVector)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Riff.MovieIdTag" /> by reading the contents of a raw
               RIFF list stored in a <see cref="T:TagLib.ByteVector" /> object.
            </summary>
            <param name="data">
               A <see cref="T:TagLib.ByteVector"/> containing a raw RIFF list to
               read into the new instance.
            </param>
        </member>
        <member name="M:TagLib.Riff.MovieIdTag.#ctor(TagLib.File,System.Int64,System.Int32)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Riff.MovieIdTag" /> by reading the contents of a raw
               RIFF list from a specified position in a <see
               cref="T:TagLib.File"/>.
            </summary>
            <param name="file">
               A <see cref="T:TagLib.File" /> object containing the file
               from which the contents of the new instance is to be
               read.
            </param>
            <param name="position">
               A <see cref="T:System.Int64" /> value specify at what position to
               read the list.
            </param>
            <param name="length">
               A <see cref="T:System.Int32" /> value specifying the number of bytes
               to read.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="file" /> is <see langword="null" />.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
               <paramref name="position" /> is less than zero or greater
               than the size of the file.
            </exception>
        </member>
        <member name="M:TagLib.Riff.MovieIdTag.RenderEnclosed">
            <summary>
               Renders the current instance enclosed in a "MID " item.
            </summary>
            <returns>
               A <see cref="T:TagLib.ByteVector"/> object containing the rendered
               version of the current instance.
            </returns>
        </member>
        <member name="P:TagLib.Riff.MovieIdTag.TagTypes">
            <summary>
               Gets the tag types contained in the current instance.
            </summary>
            <value>
               Always <see cref="F:TagLib.TagTypes.MovieId" />.
            </value>
        </member>
        <member name="P:TagLib.Riff.MovieIdTag.Title">
            <summary>
               Gets and sets the title for the media described by the
               current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> object containing the title for
               the media described by the current instance or <see
               langword="null" /> if no value is present.
            </value>
            <remarks>
               This property is implemented using the "TITL" item.
            </remarks>
        </member>
        <member name="P:TagLib.Riff.MovieIdTag.Performers">
            <summary>
               Gets and sets the performers or artists who performed in
               the media described by the current instance.
            </summary>
            <value>
               A <see cref="T:string[]" /> containing the performers or
               artists who performed in the media described by the
               current instance or an empty array if no value is
               present.
            </value>
            <remarks>
               This property is implemented using the "IART" item.
            </remarks>
        </member>
        <member name="P:TagLib.Riff.MovieIdTag.Comment">
            <summary>
               Gets and sets a user comment on the media represented by
               the current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> object containing user comments
               on the media represented by the current instance or <see
               langword="null" /> if no value is present.
            </value>
            <remarks>
               This property is implemented using the "COMM" item.
            </remarks>
        </member>
        <member name="P:TagLib.Riff.MovieIdTag.Genres">
            <summary>
               Gets and sets the genres of the media represented by the
               current instance.
            </summary>
            <value>
               A <see cref="T:string[]" /> containing the genres of the
               media represented by the current instance or an empty
               array if no value is present.
            </value>
            <remarks>
               This property is implemented using the "GENR" item.
            </remarks>
        </member>
        <member name="P:TagLib.Riff.MovieIdTag.Track">
            <summary>
               Gets and sets the position of the media represented by
               the current instance in its containing album.
            </summary>
            <value>
               A <see cref="T:System.UInt32" /> containing the position of the
               media represented by the current instance in its
               containing album or zero if not specified.
            </value>
            <remarks>
               This property is implemented using the "PRT1" item.
            </remarks>
        </member>
        <member name="P:TagLib.Riff.MovieIdTag.TrackCount">
            <summary>
               Gets and sets the number of tracks in the album
               containing the media represented by the current instance.
            </summary>
            <value>
               A <see cref="T:System.UInt32" /> containing the number of tracks in
               the album containing the media represented by the current
               instance or zero if not specified.
            </value>
            <remarks>
               This property is implemented using the "PRT2" item.
            </remarks>
        </member>
        <member name="T:TagLib.Riff.WaveFormatEx">
            <summary>
               This structure provides a representation of a Microsoft
               WaveFormatEx structure.
            </summary>
        </member>
        <member name="F:TagLib.Riff.WaveFormatEx.channels">
            <summary>
               Contains the number of audio channels.
            </summary>
        </member>
        <member name="F:TagLib.Riff.WaveFormatEx.samples_per_second">
            <summary>
               Contains the number of samples per second.
            </summary>
        </member>
        <member name="M:TagLib.Riff.WaveFormatEx.#ctor(TagLib.ByteVector)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Riff.WaveFormatEx" /> by reading the raw structure from
               the beginning of a <see cref="T:TagLib.ByteVector" /> object.
            </summary>
            <param name="data">
               A <see cref="T:TagLib.ByteVector" /> object containing the raw
               data structure.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="data" /> is <see langword="null" />.
            </exception>
            <exception cref="T:TagLib.CorruptFileException">
               <paramref name="data" /> contains less than 16 bytes.
            </exception>
        </member>
        <member name="M:TagLib.Riff.WaveFormatEx.#ctor(TagLib.ByteVector,System.Int32)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Riff.WaveFormatEx" /> by reading the raw structure from
               a specified position in a <see cref="T:TagLib.ByteVector" />
               object.
            </summary>
            <param name="data">
               A <see cref="T:TagLib.ByteVector" /> object containing the raw
               data structure.
            </param>
            <param name="offset">
               A <see cref="T:System.Int32" /> value specifying the index in
               <paramref name="data"/> at which the structure begins.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="data" /> is <see langword="null" />.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
               <paramref name="offset" /> is less than zero.
            </exception>
            <exception cref="T:TagLib.CorruptFileException">
               <paramref name="data" /> contains less than 16 bytes at
               <paramref name="offset" />.
            </exception>
        </member>
        <member name="P:TagLib.Riff.WaveFormatEx.FormatTag">
            <summary>
               Gets the format tag of the audio described by the
               current instance.
            </summary>
            <returns>
               A <see cref="T:System.UInt16" /> value containing the format tag
               of the audio.
            </returns>
            <remarks>
               Format tags indicate the codec of the audio contained in
               the file and are contained in a Microsoft registry. For
               a description of the format, use <see cref="P:TagLib.Riff.WaveFormatEx.Description"
               />.
            </remarks>
        </member>
        <member name="P:TagLib.Riff.WaveFormatEx.AverageBytesPerSecond">
            <summary>
               Gets the average bytes per second of the audio described
               by the current instance.
            </summary>
            <returns>
               A <see cref="T:System.UInt16" /> value containing the average
               bytes per second of the audio.
            </returns>
        </member>
        <member name="P:TagLib.Riff.WaveFormatEx.BitsPerSample">
            <summary>
               Gets the bits per sample of the audio described by the
               current instance.
            </summary>
            <returns>
               A <see cref="T:System.UInt16" /> value containing the bits per
               sample of the audio.
            </returns>
        </member>
        <member name="P:TagLib.Riff.WaveFormatEx.AudioBitrate">
            <summary>
               Gets the bitrate of the audio represented by the current
               instance.
            </summary>
            <value>
               A <see cref="T:System.Int32" /> value containing a bitrate of the
               audio represented by the current instance.
            </value>
        </member>
        <member name="P:TagLib.Riff.WaveFormatEx.AudioSampleRate">
            <summary>
               Gets the sample rate of the audio represented by the
               current instance.
            </summary>
            <value>
               A <see cref="T:System.Int32" /> value containing the sample rate of
               the audio represented by the current instance.
            </value>
        </member>
        <member name="P:TagLib.Riff.WaveFormatEx.AudioChannels">
            <summary>
               Gets the number of channels in the audio represented by
               the current instance.
            </summary>
            <value>
               A <see cref="T:System.Int32" /> value containing the number of
               channels in the audio represented by the current
               instance.
            </value>
        </member>
        <member name="P:TagLib.Riff.WaveFormatEx.MediaTypes">
            <summary>
               Gets the types of media represented by the current
               instance.
            </summary>
            <value>
               Always <see cref="F:TagLib.MediaTypes.Audio" />.
            </value>
        </member>
        <member name="P:TagLib.Riff.WaveFormatEx.Duration">
            <summary>
               Gets the duration of the media represented by the current
               instance.
            </summary>
            <value>
               Always <see cref="F:System.TimeSpan.Zero" />.
            </value>
        </member>
        <member name="P:TagLib.Riff.WaveFormatEx.Description">
            <summary>
               Gets a text description of the media represented by the
               current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> object containing a description
               of the media represented by the current instance.
            </value>
        </member>
        <member name="M:TagLib.Riff.WaveFormatEx.GetHashCode">
            <summary>
               Generates a hash code for the current instance.
            </summary>
            <returns>
               A <see cref="T:System.Int32" /> value containing the hash code for
               the current instance.
            </returns>
        </member>
        <member name="M:TagLib.Riff.WaveFormatEx.Equals(System.Object)">
            <summary>
               Checks whether or not the current instance is equal to
               another object.
            </summary>
            <param name="other">
               A <see cref="T:System.Object" /> to compare to the current
               instance.
            </param>
            <returns>
               A <see cref="T:System.Boolean" /> value indicating whether or not the
               current instance is equal to <paramref name="other" />.
            </returns>
            <seealso cref="M:System.IEquatable`1.Equals" />
        </member>
        <member name="M:TagLib.Riff.WaveFormatEx.Equals(TagLib.Riff.WaveFormatEx)">
            <summary>
               Checks whether or not the current instance is equal to
               another instance of <see cref="T:TagLib.Riff.WaveFormatEx" />.
            </summary>
            <param name="other">
               A <see cref="T:TagLib.Riff.WaveFormatEx" /> object to compare to the
               current instance.
            </param>
            <returns>
               A <see cref="T:System.Boolean" /> value indicating whether or not the
               current instance is equal to <paramref name="other" />.
            </returns>
            <seealso cref="M:System.IEquatable`1.Equals" />
        </member>
        <member name="M:TagLib.Riff.WaveFormatEx.op_Equality(TagLib.Riff.WaveFormatEx,TagLib.Riff.WaveFormatEx)">
            <summary>
               Gets whether or not two instances of <see
               cref="T:TagLib.Riff.WaveFormatEx" /> are equal to eachother.
            </summary>
            <param name="first">
               A <see cref="T:TagLib.Riff.WaveFormatEx" /> object to compare.
            </param>
            <param name="second">
               A <see cref="T:TagLib.Riff.WaveFormatEx" /> object to compare.
            </param>
            <returns>
               <see langword="true" /> if <paramref name="first" /> is
               equal to <paramref name="second" />. Otherwise, <see
               langword="false" />.
            </returns>
        </member>
        <member name="M:TagLib.Riff.WaveFormatEx.op_Inequality(TagLib.Riff.WaveFormatEx,TagLib.Riff.WaveFormatEx)">
            <summary>
               Gets whether or not two instances of <see
               cref="T:TagLib.Riff.WaveFormatEx" /> differ.
            </summary>
            <param name="first">
               A <see cref="T:TagLib.Riff.WaveFormatEx" /> object to compare.
            </param>
            <param name="second">
               A <see cref="T:TagLib.Riff.WaveFormatEx" /> object to compare.
            </param>
            <returns>
               <see langword="true" /> if <paramref name="first" /> is
               unequal to <paramref name="second" />. Otherwise, <see
               langword="false" />.
            </returns>
        </member>
        <member name="T:TagLib.StringCollection">
            <summary>
               This class extends <see cref="T:TagLib.ListBase`1" /> for a collection of
               <see cref="T:System.String" /> objects.
            </summary>
        </member>
        <member name="M:TagLib.StringCollection.#ctor">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.StringCollection" /> with no contents.
            </summary>
        </member>
        <member name="M:TagLib.StringCollection.#ctor(TagLib.StringCollection)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.StringCollection" /> with the contents of another
               instance.
            </summary>
            <param name="values">
               A <see cref="T:TagLib.StringCollection" /> object whose values are
               to be added to the new instance.
            </param>
        </member>
        <member name="M:TagLib.StringCollection.#ctor(System.String[])">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.StringCollection" /> with the contents of a
               specified array.
            </summary>
            <param name="values">
               A <see cref="T:string[]" /> whose values are to be added to
               the new instance.
            </param>
        </member>
        <member name="M:TagLib.StringCollection.#ctor(TagLib.ByteVectorCollection,TagLib.StringType)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.StringCollection" /> by converting a collection of
               <see cref="T:TagLib.ByteVector" /> objects to strings with a
               specified encoding.
            </summary>
            <param name="vectorList">
               A <see cref="T:TagLib.ByteVectorCollection" /> object containing
               values to convert and add to the new instance.
            </param>
            <param name="type">
               A <see cref="T:TagLib.StringType" /> specifying what encoding to
               use when converting the data to strings.
            </param>
        </member>
        <member name="M:TagLib.StringCollection.#ctor(TagLib.ByteVectorCollection)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.StringCollection" /> by converting a collection of
               <see cref="T:TagLib.ByteVector" /> objects to strings using the
               UTF-8 encoding.
            </summary>
            <param name="vectorList">
               A <see cref="T:TagLib.ByteVectorCollection" /> object containing
               values to convert and add to the new instance.
            </param>
        </member>
        <member name="M:TagLib.StringCollection.Split(System.String,System.String)">
            <summary>
               Splits a single <see cref="T:System.String" /> into a <see
               cref="T:TagLib.StringCollection" /> using a pattern.
            </summary>
            <param name="value">
               A <see cref="T:System.String" /> object to split.
            </param>
            <param name="pattern">
               A <see cref="T:System.String" /> object containing a pattern to
               use to split <paramref name="value" />.
            </param>
            <returns>
               A <see cref="T:TagLib.StringCollection" /> object containing the
               split values.
            </returns>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="value" /> or <paramref name="pattern" />
               is <see langword="null" />.
            </exception>
        </member>
        <member name="T:TagLib.SupportedMimeType">
             <summary>
                This class provides an attribute for listing supported mime-types
                for classes that extend <see cref="T:TagLib.File" />.
             </summary>
             <remarks>
                When classes that extend <see cref="T:TagLib.File" /> are registered with
                <see cref="M:TagLib.FileTypes.Register(System.Type)" />, its <see
                cref="T:TagLib.SupportedMimeType" /> attributes are read.
             </remarks>
             <example>
                <code lang="C#">using TagLib;
            
            [SupportedMimeType("taglib/wv", "wv")]
            [SupportedMimeType("audio/x-wavpack")]
            public class MyFile : File {
            	...
            }</code>
             </example>
        </member>
        <member name="F:TagLib.SupportedMimeType.mimetypes">
            <summary>
               Contains the registered <see cref="T:TagLib.SupportedMimeType" />
               objects.
            </summary>
        </member>
        <member name="M:TagLib.SupportedMimeType.#cctor">
            <summary>
               Constructs and initializes the <see
               cref="T:TagLib.SupportedMimeType" /> class by initializing the
               <see cref="T:TagLib.FileTypes" /> class.
            </summary>
        </member>
        <member name="M:TagLib.SupportedMimeType.#ctor(System.String)">
            <summary>
               Constructs and initializes a new instance of the <see
               cref="T:TagLib.SupportedMimeType" /> attribute for a specified
               mime-type.
            </summary>
            <param name="mimetype">
               A <see cref="T:System.String" /> object containing a standard
               mime-type.
            </param>
            <remarks>
               <para>Standard practice is to use <see
               cref="M:TagLib.SupportedMimeType.#ctor(System.String)" /> to register standard
               mime-types, like "audio/mp3" and "video/mpeg" and to use
               <see cref="M:TagLib.SupportedMimeType.#ctor(System.String,System.String)" /> strictly
               to register extensions, using "taglib/ext" for the mime
               type. Eg. <c>SupportedMimeType("taglib/mp3",
               "mp3")</c>.</para>
            </remarks>
        </member>
        <member name="M:TagLib.SupportedMimeType.#ctor(System.String,System.String)">
            <summary>
               Constructs and initializes a new instance of the <see
               cref="T:TagLib.SupportedMimeType" /> attribute for a specified
               mime-type and extension.
            </summary>
            <param name="mimetype">
               A <see cref="T:System.String" /> object containing a standard
               mime-type.
            </param>
            <param name="extension">
               A <see cref="T:System.String" /> object containing a file
               extension.
            </param>
            <remarks>
               <para>Standard practice is to use <see
               cref="M:TagLib.SupportedMimeType.#ctor(System.String)" /> to register standard
               mime-types, like "audio/mp3" and "video/mpeg" and to use
               <see cref="M:TagLib.SupportedMimeType.#ctor(System.String,System.String)" /> strictly
               to register extensions, using "taglib/ext" for the mime
               type. Eg. <c>SupportedMimeType("taglib/mp3",
               "mp3")</c>.</para>
            </remarks>
        </member>
        <member name="P:TagLib.SupportedMimeType.MimeType">
            <summary>
               Gets the mime-type registered by the current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> object containing the mime-type
               registered by the current instance.
            </value>
            <remarks>
               <para>The value is in the format "generic/specific". For
               example, "video/mp4".</para>
            </remarks>
        </member>
        <member name="P:TagLib.SupportedMimeType.Extension">
            <summary>
               Gets the extension registered by the current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> object containing the extension
               registered by the current instance, or <see
               langword="null" /> if not specified.
            </value>
            <remarks>
               <para>The value is the file extension minus the preceding
               ".". For example, "m4v".</para>
            </remarks>
        </member>
        <member name="P:TagLib.SupportedMimeType.AllMimeTypes">
            <summary>
               Gets all the mime-types that have been registered with
               <see cref="T:TagLib.SupportedMimeType" />.
            </summary>
            <value>
               A <see cref="T:System.Collections.Generic.IEnumerable`1" /> object containing all the
               mime-types that have been registered with <see
               cref="T:TagLib.SupportedMimeType" />.
            </value>
            <remarks>
               <para>These values are used by <see
               cref="M:TagLib.File.Create(System.String,System.String,TagLib.ReadStyle)" /> to
               match file types.</para>
            </remarks>
        </member>
        <member name="P:TagLib.SupportedMimeType.AllExtensions">
            <summary>
               Gets all the extensions that have been registered with
               <see cref="T:TagLib.SupportedMimeType" />.
            </summary>
            <value>
               A <see cref="T:System.Collections.Generic.IEnumerable`1" /> object containing all the
               extensions that have been registered with <see
               cref="T:TagLib.SupportedMimeType" />.
            </value>
            <remarks>
               <para>These values are currently not used in file type
               recognition.</para>
            </remarks>
        </member>
        <member name="T:TagLib.TagTypes">
            <summary>
               Indicates the tag types used by a file.
            </summary>
        </member>
        <member name="F:TagLib.TagTypes.None">
            <summary>
               No tag types.
            </summary>
        </member>
        <member name="F:TagLib.TagTypes.Xiph">
            <summary>
               Xiph's Vorbis Comment
            </summary>
        </member>
        <member name="F:TagLib.TagTypes.Id3v1">
            <summary>
               ID3v1 Tag
            </summary>
        </member>
        <member name="F:TagLib.TagTypes.Id3v2">
            <summary>
               ID3v2 Tag
            </summary>
        </member>
        <member name="F:TagLib.TagTypes.Ape">
            <summary>
               APE Tag
            </summary>
        </member>
        <member name="F:TagLib.TagTypes.Apple">
            <summary>
               Apple's ILST Tag Format
            </summary>
        </member>
        <member name="F:TagLib.TagTypes.Asf">
            <summary>
               ASF Tag
            </summary>
        </member>
        <member name="F:TagLib.TagTypes.RiffInfo">
            <summary>
               Standard RIFF INFO List Tag
            </summary>
        </member>
        <member name="F:TagLib.TagTypes.MovieId">
            <summary>
               RIFF Movie ID List Tag
            </summary>
        </member>
        <member name="F:TagLib.TagTypes.DivX">
            <summary>
               DivX Tag
            </summary>
        </member>
        <member name="F:TagLib.TagTypes.FlacMetadata">
            <summary>
               FLAC Metadata Blocks Tag
            </summary>
        </member>
        <member name="F:TagLib.TagTypes.TiffIFD">
            <summary>
               TIFF IFD Tag
            </summary>
        </member>
        <member name="F:TagLib.TagTypes.XMP">
            <summary>
               XMP Tag
            </summary>
        </member>
        <member name="F:TagLib.TagTypes.JpegComment">
            <summary>
               Jpeg Comment Tag
            </summary>
        </member>
        <member name="F:TagLib.TagTypes.GifComment">
            <summary>
               Gif Comment Tag
            </summary>
        </member>
        <member name="F:TagLib.TagTypes.Png">
            <summary>
               native PNG keywords
            </summary>
        </member>
        <member name="F:TagLib.TagTypes.IPTCIIM">
            <summary>
            IPTC-IIM tag
            </summary>
        </member>
        <member name="F:TagLib.TagTypes.AudibleMetadata">
            <summary>
               Audible Metadata Blocks Tag
            </summary>
        </member>
        <member name="F:TagLib.TagTypes.Matroska">
            <summary>
            Matroska native tag
            </summary>
        </member>
        <member name="F:TagLib.TagTypes.AllTags">
            <summary>
               All tag types.
            </summary>
        </member>
        <member name="T:TagLib.Tag">
            <summary>
               This abstract class provides generic access to standard tag
               features. All tag types will extend this class.
            </summary>
            <remarks>
               Because not every tag type supports the same features, it may be
               useful to check that the value is stored by re-reading the
               property after it is stored.
            </remarks>
        </member>
        <member name="P:TagLib.Tag.TagTypes">
            <summary>
               Gets the tag types contained in the current instance.
            </summary>
            <value>
               A bitwise combined <see cref="T:TagLib.TagTypes" />
               containing the tag types contained in the current
               instance.
            </value>
            <remarks>
               For a standard tag, the value should be intuitive. For
               example, <see cref="T:TagLib.Id3v2.Tag" /> objects have a
               value of <see cref="F:TagLib.TagTypes.Id3v2" />. However,
               for tags of type <see cref="T:TagLib.CombinedTag" /> may
               contain multiple or no types.
            </remarks>
        </member>
        <member name="P:TagLib.Tag.Title">
            <summary>
               Gets and sets the title for the media described by the
               current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> object containing the title for
               the media described by the current instance or <see
               langword="null" /> if no value is present.
            </value>
            <remarks>
               The title is most commonly the name of the song or
               episode or a movie title. For example, "Daydream
               Believer" (a song by the Monkies), "Space Seed" (an
               episode of Star Trek), or "Harold and Kumar Go To White
               Castle" (a movie).
            </remarks>
        </member>
        <member name="P:TagLib.Tag.TitleSort">
            <summary>
               Gets and sets the sort name for the title of the media 
               described by the current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> object containing the sort name for
               the title of the media described by the current instance or <see
               langword="null" /> if no value is present.
            </value>
            <remarks>
               Possibly used to sort compilations, or episodic content.
            </remarks>
        </member>
        <member name="P:TagLib.Tag.Subtitle">
            <summary>
               Gets and sets a short description, one-liner. 
               It represents the tagline of the Video/music.
            </summary>
            <value>
               A <see cref="T:System.String" /> containing the subtitle
               the media represented by the current instance 
               or an empty array if no value is present.
            </value>
            <remarks>
               <para>This field gives a nice/short precision to 
               the title, which is typically below the title on the
               front cover of a media.
               For example, for "Back to the future", this would be 
               "It's About Time". 
               </para>
            </remarks>
        </member>
        <member name="P:TagLib.Tag.Description">
            <summary>
               Gets and sets a short description of the media.
               For a music, this could be the comment that the artist
               made of its artwork. For a video, this should be a 
               short summary of the story/plot, but a spoiler. This
               should give the impression of what to expect in the
               media.
            </summary>
            <value>
               A <see cref="T:System.String" /> containing the subtitle
               the media represented by the current instance 
               or an empty array if no value is present.
            </value>
            <remarks>
               <para>This is especially relevant for a movie.
               For example, for "Back to the Future 2", this could be
               "After visiting 2015, Marty McFly must repeat his visit 
               to 1955 to prevent disastrous changes to 1985...without
               interfering with his first trip".
               </para>
            </remarks>
        </member>
        <member name="P:TagLib.Tag.Performers">
            <summary>
               Gets and sets the performers or artists who performed in
               the media described by the current instance.
            </summary>
            <value>
               A <see cref="T:string[]" /> containing the performers or
               artists who performed in the media described by the
               current instance or an empty array if no value is
               present.
            </value>
            <remarks>
               <para>This field is most commonly called "Artists" in
               Audio media, or "Actor" in Video media, and should be 
               used to represent each artist/actor appearing in the 
               media. It can be simple in the form of "The Beatles"
               or more complicated in the form of "John Lennon,
               Paul McCartney, George Harrison, Pete Best", depending
               on the preferences of the listener/spectator
               and the degree to which they organize their media
               collection.</para>
               <para>As the preference of the user may vary,
               applications should not try to limit the user in what
               choice they may make.</para>
            </remarks>
        </member>
        <member name="P:TagLib.Tag.PerformersSort">
            <summary>
               Gets and sets the sort names of the performers or artists
               who performed in the media described by the current instance.
            </summary>
            <value>
               A <see cref="T:string[]" /> containing the sort names for
               the performers or artists who performed in the media
               described by the current instance, or an empty array if
               no value is present. 
            </value>
            <remarks>
               <para>This is used to provide more control over how tracks
               are sorted. Typical uses are to skip common prefixes or
               sort by last name. For example, "The Beatles" might be
               sorted as "Beatles, The".
               </para>
            </remarks>
        </member>
        <member name="P:TagLib.Tag.PerformersRole">
            <summary>
               Gets and sets the Charaters for a video media, or
               instruments played for music media. 
               This should match the <see cref="P:TagLib.Tag.Performers"/> array (for
               each person correspond one/more role). Several roles for
               the same artist/actor can be made up with semicolons. 
               For example, "Marty McFly; Marty McFly Jr.; Marlene McFly".
            </summary>
            <remarks>
               <para> This is typically usefull for movies, although the
               instrument played by each artist in a music may be of
               relevance.
               </para>
               <para>It is highly important to match each role to the 
               performers. This means that a role may be <see 
               langword="null"/> to keep the match between a
               Performers[i] and PerformersRole[i].
               </para>
            </remarks>
        </member>
        <member name="P:TagLib.Tag.AlbumArtists">
            <summary>
               Gets and sets the band or artist who is credited in the
               creation of the entire album or collection containing the
               media described by the current instance.
            </summary>
            <value>
               A <see cref="T:string[]" /> containing the band or artist
               who is credited in the creation of the entire album or
               collection containing the media described by the current
               instance or an empty array if no value is present.
            </value>
            <remarks>
               <para>This field is typically optional but aids in the
               sorting of compilations or albums with multiple artists.
               For example, if an album has several artists, sorting by
               artist will split up the album and sorting by album will
               split up albums by the same artist. Having a single album
               artist for an entire album will solve this
               problem.</para>
               <para>As this value is to be used as a sorting key, it
               should be used with less variation than <see
               cref="P:TagLib.Tag.Performers" />. Where performers can be broken into
               muliple artist it is best to stick with a single band
               name. For example, "The Beatles".</para>
            </remarks>
        </member>
        <member name="P:TagLib.Tag.AlbumArtistsSort">
            <summary>
               Gets and sets the sort names for the band or artist who
               is credited in the creation of the entire album or
               collection containing the media described by the
               current instance.
            </summary>
            <value>
               A <see cref="T:string[]" /> containing the sort names
               for the band or artist who is credited in the creation
               of the entire album or collection containing the media
               described by the current instance or an empty array if
               no value is present.
            </value>
            <remarks>
               <para>This field is typically optional but aids in the
               sorting of compilations or albums with multiple artists.
               For example, if an album has several artists, sorting by
               artist will split up the album and sorting by album will
               split up albums by the same artist. Having a single album
               artist for an entire album will solve this
               problem.</para>
               <para>As this value is to be used as a sorting key, it
               should be used with less variation than <see
               cref="P:TagLib.Tag.Performers" />. Where performers can be broken into
               muliple artist it is best to stick with a single band
               name. For example, "Beatles, The".</para>
            </remarks>
        </member>
        <member name="P:TagLib.Tag.Composers">
            <summary>
               Gets and sets the composers of the media represented by
               the current instance.
            </summary>
            <value>
               A <see cref="T:string[]" /> containing the composers of the
               media represented by the current instance or an empty
               array if no value is present.
            </value>
            <remarks>
               <para>This field represents the composers, song writers,
               script writers, or persons who claim authorship of the
               media.</para>
            </remarks>
        </member>
        <member name="P:TagLib.Tag.ComposersSort">
            <summary>
               Gets and sets the sort names for the composers of the 
               media represented by the current instance.
            </summary>
            <value>
               A <see cref="T:string[]" /> containing the sort names
               for the composers of the media represented by the 
               current instance or an empty array if no value is present.
            </value>
            <remarks>
               <para>This field is typically optional but aids in the
               sorting of compilations or albums with multiple Composers.
               </para>
               <para>As this value is to be used as a sorting key, it
               should be used with less variation than <see
               cref="P:TagLib.Tag.Composers" />. Where performers can be broken into
               muliple artist it is best to stick with a single composer.
               For example, "McCartney, Paul".</para>
            </remarks>
        </member>
        <member name="P:TagLib.Tag.Album">
            <summary>
               Gets and sets the album of the media represented by the
               current instance. For a video media, this represent the
               collection the video belongs to. 
            </summary>
            <value>
               A <see cref="T:System.String" /> object containing the album of
               the media represented by the current instance or <see
               langword="null" /> if no value is present.
            </value>
            <remarks>
               <para>This field represents the name of the album the
               media belongs to. In the case of a boxed set, it should
               be the name of the entire set rather than the individual
               disc. In case of a Serie, this should be name of the serie,
               rather than the season of a serie.</para>
               <para>For example, "Rubber Soul" (an album by the
               Beatles), "The Sopranos: Complete First Season" (a boxed
               set of TV episodes), "Back To The Future" (a 
               serie of movies/sequels), or "Game of Thrones" (a serie
               with several seasons).</para>
            </remarks>
        </member>
        <member name="P:TagLib.Tag.AlbumSort">
            <summary>
               Gets and sets the sort names for the Album Title of the 
               media represented by the current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> containing the sort names
               for the Album Title of the media represented by the 
               current instance or an empty array if no value is present.
            </value>
            <remarks>
               <para>This field is typically optional but aids in the
               sorting of compilations or albums with Similar Titles.
               </para>
            </remarks>
        </member>
        <member name="P:TagLib.Tag.Comment">
            <summary>
               Gets and sets a user comment on the media represented by
               the current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> object containing user comments
               on the media represented by the current instance or <see
               langword="null" /> if no value is present.
            </value>
            <remarks>
               <para>This field should be used to store user notes and
               comments. There is no constraint on what text can be
               stored here, but it should not contain program
               information.</para>
               <para>Because this field contains notes that the user
               might think of while listening to the media, it may be
               useful for an application to make this field easily
               accessible, perhaps even including it in the main
               interface.</para>
            </remarks>
        </member>
        <member name="P:TagLib.Tag.Genres">
            <summary>
               Gets and sets the genres of the media represented by the
               current instance.
            </summary>
            <value>
               A <see cref="T:string[]" /> containing the genres of the
               media represented by the current instance or an empty
               array if no value is present.
            </value>
            <remarks>
               <para>This field represents genres that apply to the song,
               album or video. This is often used for filtering media.
               </para>
               <para>A list of common audio genres as popularized by
               ID3v1, are stored in <see cref="P:TagLib.Genres.Audio" />.
               Additionally, <see cref="P:TagLib.Genres.Video" /> contains video
               genres as used by DivX.</para>
            </remarks>
        </member>
        <member name="P:TagLib.Tag.Year">
            <summary>
               Gets and sets the year that the media represented by the
               current instance was recorded.
            </summary>
            <value>
               A <see cref="T:System.UInt32" /> containing the year that the media
               represented by the current instance was created or zero
               if no value is present.
            </value>
            <remarks>
               <para>Years greater than 9999 cannot be stored by most
               tagging formats and will be cleared if a higher value is
               set.</para>
               <para>Some tagging formats store higher precision dates
               which will be truncated when this property is set. Format
               specific implementations are necessary access the higher
               precision values.</para>
            </remarks>
        </member>
        <member name="P:TagLib.Tag.Track">
            <summary>
               Gets and sets the position of the media represented by
               the current instance in its containing album, or season
               (for series).
            </summary>
            <value>
               A <see cref="T:System.UInt32" /> containing the position of the
               media represented by the current instance in its
               containing album or zero if not specified.
            </value>
            <remarks>
               <para>This value should be the same as is listed on the
               album cover and no more than <see cref="P:TagLib.Tag.TrackCount"
               /> if <see cref="P:TagLib.Tag.TrackCount" /> is non-zero.</para>
               <para>Most tagging formats store this as a string. To
               help sorting, a two-digit zero-filled value is used 
               in the resulting tag.</para>
               <para>For a serie, this property represents the episode
               in a season of the serie.
               </para>
            </remarks>
        </member>
        <member name="P:TagLib.Tag.TrackCount">
            <summary>
               Gets and sets the number of tracks in the album, or the
               number of episodes in a serie, of the media represented 
               by the current instance.
            </summary>
            <value>
               A <see cref="T:System.UInt32" /> containing the number of tracks in
               the album, or the number of episodes in a serie, of the 
               media represented by the current instance or zero if not
               specified.
            </value>
            <remarks>
               <para>If non-zero, this value should be at least equal to
               <see cref="P:TagLib.Tag.Track" />. If <see cref="P:TagLib.Tag.Track" /> is zero,
               this value should also be zero.</para>
            </remarks>
        </member>
        <member name="P:TagLib.Tag.Disc">
            <summary>
               Gets and sets the number of the disc containing the media
               represented by the current instance in the boxed set. For
               a serie, this represents the season number.
            </summary>
            <value>
               A <see cref="T:System.UInt32" /> containing the number of the disc
               or season of the media represented by the current instance
               in the boxed set.
            </value>
            <remarks>
               <para>This value should be the same as is number that
               appears on the disc. For example, if the disc is the
               first of three, the value should be <c>1</c>. It should
               be no more than <see cref="P:TagLib.Tag.DiscCount" /> if <see
               cref="P:TagLib.Tag.DiscCount" /> is non-zero.</para>
            </remarks>
        </member>
        <member name="P:TagLib.Tag.DiscCount">
            <summary>
               Gets and sets the number of discs or seasons in the 
               boxed set containing the media represented by the 
               current instance.
            </summary>
            <value>
               A <see cref="T:System.UInt32" /> containing the number of discs 
               or seasons in the boxed set containing the media 
               represented by the current instance or zero if not 
               specified.
            </value>
            <remarks>
               <para>If non-zero, this value should be at least equal to
               <see cref="P:TagLib.Tag.Disc" />. If <see cref="P:TagLib.Tag.Disc" /> is zero,
               this value should also be zero.</para>
            </remarks>
        </member>
        <member name="P:TagLib.Tag.Lyrics">
            <summary>
               Gets and sets the lyrics or script of the media
               represented by the current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> object containing the lyrics or
               script of the media represented by the current instance
               or <see langword="null" /> if no value is present.
            </value>
            <remarks>
               <para>This field contains a plain text representation of
               the lyrics or scripts with line breaks and whitespace
               being the only formatting marks.</para>
               <para>Some formats support more advances lyrics, like
               synchronized lyrics, but those must be accessed using
               format specific implementations.</para>
            </remarks>
        </member>
        <member name="P:TagLib.Tag.Grouping">
            <summary>
               Gets and sets the grouping on the album which the media
               in the current instance belongs to.
            </summary>
            <value>
               A <see cref="T:System.String" /> object containing the grouping on
               the album which the media in the current instance belongs
               to or <see langword="null" /> if no value is present.
            </value>
            <remarks>
               <para>This field contains a non-physical grouping to
               which the track belongs. In classical music, this could
               be a movement. It could also be parts of a series like
               "Introduction", "Closing Remarks", etc.</para>
            </remarks>
        </member>
        <member name="P:TagLib.Tag.BeatsPerMinute">
            <summary>
               Gets and sets the number of beats per minute in the audio
               of the media represented by the current instance.
            </summary>
            <value>
               A <see cref="T:System.UInt32" /> containing the number of beats per
               minute in the audio of the media represented by the
               current instance, or zero if not specified.
            </value>
            <remarks>
               <para>This field is useful for DJ's who are trying to
               match songs. It should be calculated from the audio or
               pulled from a database.</para>
            </remarks>
        </member>
        <member name="P:TagLib.Tag.Conductor">
            <summary>
               Gets and sets the conductor or director of the media
               represented by the current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> object containing the conductor
               or director of the media represented by the current
               instance or <see langword="null" /> if no value present.
            </value>
            <remarks>
               <para>This field is most useful for organizing classical
               music and movies.</para>
            </remarks>
        </member>
        <member name="P:TagLib.Tag.Copyright">
            <summary>
               Gets and sets the copyright information for the media
               represented by the current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> object containing the copyright
               information for the media represented by the current
               instance or <see langword="null" /> if no value present.
            </value>
            <remarks>
               <para>This field should be used for storing copyright
               information. It may be useful to show this information
               somewhere in the program while the media is
               playing.</para>
               <para>Players should not support editing this field, but
               media creation tools should definitely allow
               modification.</para>
            </remarks>
        </member>
        <member name="P:TagLib.Tag.DateTagged">
            <summary>
               Gets and sets the date at which the tag has been written.
            </summary>
            <value>
               A nullable <see cref="T:System.DateTime" /> object containing the 
               date at which the tag has been written, or <see 
               langword="null" /> if no value present.
            </value>
        </member>
        <member name="P:TagLib.Tag.MusicBrainzArtistId">
            <summary>
               Gets and sets the MusicBrainz Artist ID of the media represented by
               the current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> containing the MusicBrainz ArtistID of the
               media represented by the current instance or an empty
               array if no value is present.
            </value>
            <remarks>
               <para>This field represents the MusicBrainz ArtistID, and is used
               to uniquely identify a particular Artist of the track.</para>
            </remarks>
        </member>
        <member name="P:TagLib.Tag.MusicBrainzReleaseGroupId">
            <summary>
               Gets and sets the MusicBrainz Release Group ID of the media represented by
               the current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> containing the MusicBrainz ReleaseGroupID of the
               media represented by the current instance or an empty
               array if no value is present.
            </value>
            <remarks>
               <para>This field represents the MusicBrainz ReleaseGroupID, and is used
               to uniquely identify a particular Release Group to which this track belongs.</para>
            </remarks>
        </member>
        <member name="P:TagLib.Tag.MusicBrainzReleaseId">
            <summary>
               Gets and sets the MusicBrainz Release ID of the media represented by
               the current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> containing the MusicBrainz ReleaseID of the
               media represented by the current instance or an empty
               array if no value is present.
            </value>
            <remarks>
               <para>This field represents the MusicBrainz ReleaseID, and is used
               to uniquely identify a particular Release to which this track belongs.</para>
            </remarks>
        </member>
        <member name="P:TagLib.Tag.MusicBrainzReleaseArtistId">
            <summary>
               Gets and sets the MusicBrainz Release Artist ID of the media represented by
               the current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> containing the MusicBrainz ReleaseArtistID of the
               media represented by the current instance or an empty
               array if no value is present.
            </value>
            <remarks>
               <para>This field represents the MusicBrainz Release ArtistID, and is used
               to uniquely identify a particular Album Artist credited with the Album.</para>
            </remarks>
        </member>
        <member name="P:TagLib.Tag.MusicBrainzTrackId">
            <summary>
               Gets and sets the MusicBrainz Track ID of the media represented by
               the current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> containing the MusicBrainz TrackID of the
               media represented by the current instance or an empty
               array if no value is present.
            </value>
            <remarks>
               <para>This field represents the MusicBrainz TrackID, and is used
               to uniquely identify a particular track.</para>
            </remarks>
        </member>
        <member name="P:TagLib.Tag.MusicBrainzDiscId">
            <summary>
               Gets and sets the MusicBrainz Disc ID of the media represented by
               the current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> containing the MusicBrainz DiscID of the
               media represented by the current instance or an empty
               array if no value is present.
            </value>
            <remarks>
               <para>This field represents the MusicBrainz DiscID, and is used
               to uniquely identify the particular Released Media associated with
               this track.</para>
            </remarks>
        </member>
        <member name="P:TagLib.Tag.MusicIpId">
            <summary>
               Gets and sets the MusicIP PUID of the media represented by
               the current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> containing the MusicIP PUID of the
               media represented by the current instance or an empty
               array if no value is present.
            </value>
            <remarks>
               <para>This field represents the MusicIP PUID, and is an acoustic
               fingerprint identifier.  It Identifies what this track "Sounds Like".</para>
            </remarks>
        </member>
        <member name="P:TagLib.Tag.AmazonId">
            <summary>
               Gets and sets the Amazon ID of the media represented by
               the current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> containing the AmazonID of the
               media represented by the current instance or an empty
               array if no value is present.
            </value>
            <remarks>
               <para>This field represents the AmazonID, and is used
               to identify the particular track or album in the Amazon Catalog.</para>
            </remarks>
        </member>
        <member name="P:TagLib.Tag.MusicBrainzReleaseStatus">
            <summary>
               Gets and sets the MusicBrainz Release Status of the media represented by
               the current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> containing the MusicBrainz ReleaseStatus of the
               media represented by the current instance or an empty
               array if no value is present.
            </value>
            <remarks>
               <para>This field represents the MusicBrainz ReleaseStatus, and is used
               to describes how 'official' a Release is.  Common Status are: Official, Promotion,
               Bootleg, Pseudo-release.</para>
            </remarks>
        </member>
        <member name="P:TagLib.Tag.MusicBrainzReleaseType">
            <summary>
               Gets and sets the MusicBrainz Release Type of the media represented by
               the current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> containing the MusicBrainz ReleaseType of the
               media represented by the current instance or an empty
               array if no value is present.
            </value>
            <remarks>
               <para>This field represents the MusicBrainz ReleaseType, that describes
               what kind of release a Release is..  Common Status are: Single, Album,
               EP, Compilation, Soundtrack, SpokenWord, Interview, Audiobook, Live, Remix,
               and Other.  Careful thought must be given when using this field to decide if
               a particular track "Is a Compilation".</para>
            </remarks>
        </member>
        <member name="P:TagLib.Tag.MusicBrainzReleaseCountry">
            <summary>
               Gets and sets the MusicBrainz Release Country of the media represented by
               the current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> containing the MusicBrainz ReleaseCountry of the
               media represented by the current instance or an empty
               array if no value is present.
            </value>
            <remarks>
               <para>This field represents the MusicBrainz ReleaseCountry, that describes
               the country in which an album was released.  Note that the ReleaseCountry 
               of an album is not necessarily the country in which it was produced. The 
               label itself will typically be more relevant. eg, a release on "Foo Records UK" 
               that has "Made in Austria" printed on it, will likely be a UK release.</para>
            </remarks>
        </member>
        <member name="P:TagLib.Tag.ReplayGainTrackGain">
            <summary>
               Gets and sets the ReplayGain track gain in dB.
            </summary>
            <value>
               A <see cref="T:System.Boolean" /> value in dB for the track gain as
               per the ReplayGain specification.
            </value>
        </member>
        <member name="P:TagLib.Tag.ReplayGainTrackPeak">
            <summary>
               Gets and sets the ReplayGain track peak sample.
            </summary>
            <value>
               A <see cref="T:System.Boolean" /> value for the track peak as per the
               ReplayGain specification.
            </value>
        </member>
        <member name="P:TagLib.Tag.ReplayGainAlbumGain">
            <summary>
               Gets and sets the ReplayGain album gain in dB.
            </summary>
            <value>
               A <see cref="T:System.Boolean" /> value in dB for the album gain as
               per the ReplayGain specification.
            </value>
        </member>
        <member name="P:TagLib.Tag.ReplayGainAlbumPeak">
            <summary>
               Gets and sets the ReplayGain album peak sample.
            </summary>
            <value>
               A <see cref="T:System.Boolean" /> value for the album peak as per the
               ReplayGain specification.
            </value>
        </member>
        <member name="P:TagLib.Tag.InitialKey">
            <summary>
               Gets and sets the initial key of the song.
            </summary>
            <value>
               A <see cref="T:System.String" /> value for the initial key
               of the song.
            </value>
        </member>
        <member name="P:TagLib.Tag.RemixedBy">
            <summary>
               Gets and sets the remixer of the song.
            </summary>
            <value>
               A <see cref="T:System.String" /> value for the remixer
               of the song.
            </value>
        </member>
        <member name="P:TagLib.Tag.Publisher">
            <summary>
               Gets and sets the publisher of the song.
            </summary>
            <value>
               A <see cref="T:System.String" /> value for the publisher
               of the song.
            </value>
        </member>
        <member name="P:TagLib.Tag.ISRC">
            <summary>
               Gets and sets the ISRC (International Standard Recording Code) of the song.
            </summary>
            <value>
               A <see cref="T:System.String" /> value containing the ISRC of the song.
            </value>
        </member>
        <member name="P:TagLib.Tag.Length">
            <summary>
               Gets and sets the Length of the media represented
               by the current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> object containing the length of
               the media represented by the current instance or <see
               langword="null" /> if no value is present.
            </value>
            <remarks>
               <para>This field represents the label or length of the album the
               media belongs to. </para>
               <para>For example, "00:15:00".</para>
            </remarks>
        </member>
        <member name="P:TagLib.Tag.Pictures">
            <summary>
               Gets and sets a collection of pictures associated with
               the media represented by the current instance.
            </summary>
            <value>
               A <see cref="T:IPicture[]" /> containing a collection of
               pictures associated with the media represented by the
               current instance or an empty array if none are present.
            </value>
            <remarks>
               <para>Typically, this value is used to store an album
               cover or icon to use for the file, but it is capable of
               holding any type of image, including pictures of the
               band, the recording studio, the concert, etc.</para>
            </remarks>
        </member>
        <member name="P:TagLib.Tag.Artists">
            <summary>
               Gets and sets the same value as <see cref="P:TagLib.Tag.Performers"
               />.
            </summary>
            <value>
               The same value as <see cref="P:TagLib.Tag.Performers" />.
            </value>
            <remarks>
               This property exists to aleviate confusion. Use <see
               cref="P:TagLib.Tag.Performers" /> for track artists and <see
               cref="P:TagLib.Tag.AlbumArtists" /> for album artists.
            </remarks>
        </member>
        <member name="P:TagLib.Tag.FirstArtist">
            <summary>
               Gets the same value as <see cref="P:TagLib.Tag.FirstPerformer" />.
            </summary>
            <value>
               The same value as <see cref="P:TagLib.Tag.FirstPerformer" />.
            </value>
            <remarks>
               This property exists to aleviate confusion. Use <see
               cref="P:TagLib.Tag.FirstPerformer" /> for track artists and <see
               cref="P:TagLib.Tag.FirstAlbumArtist" /> for album artists.
            </remarks>
        </member>
        <member name="P:TagLib.Tag.FirstAlbumArtist">
            <summary>
               Gets the first value contained in <see
               cref="P:TagLib.Tag.AlbumArtists" />.
            </summary>
            <value>
               The first <see cref="T:System.String" /> object in <see
               cref="P:TagLib.Tag.AlbumArtists" />, or <see langword="null" /> is it
               contains no values.
            </value>
            <remarks>
               This property is provided for convenience. Use <see
               cref="P:TagLib.Tag.AlbumArtists" /> to set the value.
            </remarks>
        </member>
        <member name="P:TagLib.Tag.FirstAlbumArtistSort">
            <summary>
               Gets the first value contained in <see
               cref="P:TagLib.Tag.AlbumArtistsSort" />.
            </summary>
            <value>
               The first <see cref="T:System.String" /> object in <see
               cref="P:TagLib.Tag.AlbumArtistsSort" />, or <see langword="null" /> is it
               contains no values.
            </value>
            <remarks>
               This property is provided for convenience. Use <see
               cref="P:TagLib.Tag.AlbumArtistsSort" /> to set the value.
            </remarks>
        </member>
        <member name="P:TagLib.Tag.FirstPerformer">
            <summary>
               Gets the first value contained in <see
               cref="P:TagLib.Tag.Performers" />.
            </summary>
            <value>
               The first <see cref="T:System.String" /> object in <see
               cref="P:TagLib.Tag.Performers" />, or <see langword="null" /> is it
               contains no values.
            </value>
            <remarks>
               This property is provided for convenience. Use <see
               cref="P:TagLib.Tag.Performers" /> to set the value.
            </remarks>
        </member>
        <member name="P:TagLib.Tag.FirstPerformerSort">
            <summary>
               Gets the first value contained in <see
               cref="P:TagLib.Tag.PerformersSort" />.
            </summary>
            <value>
               The first <see cref="T:System.String" /> object in <see
               cref="P:TagLib.Tag.PerformersSort" />, or <see langword="null" /> is it
               contains no values.
            </value>
            <remarks>
               This property is provided for convenience. Use <see
               cref="P:TagLib.Tag.PerformersSort" /> to set the value.
            </remarks>
        </member>
        <member name="P:TagLib.Tag.FirstComposerSort">
            <summary>
               Gets the first value contained in <see
               cref="P:TagLib.Tag.ComposersSort" />.
            </summary>
            <value>
               The first <see cref="T:System.String" /> object in <see
               cref="P:TagLib.Tag.ComposersSort" />, or <see langword="null" /> is it
               contains no values.
            </value>
            <remarks>
               This property is provided for convenience. Use <see
               cref="P:TagLib.Tag.ComposersSort" /> to set the value.
            </remarks>
        </member>
        <member name="P:TagLib.Tag.FirstComposer">
            <summary>
               Gets the first value contained in <see
               cref="P:TagLib.Tag.Composers" />.
            </summary>
            <value>
               The first <see cref="T:System.String" /> object in <see
               cref="P:TagLib.Tag.Composers" />, or <see langword="null" /> is it
               contains no values.
            </value>
            <remarks>
               This property is provided for convenience. Use <see
               cref="P:TagLib.Tag.Composers" /> to set the value.
            </remarks>
        </member>
        <member name="P:TagLib.Tag.FirstGenre">
            <summary>
               Gets the first value contained in <see cref="P:TagLib.Tag.Genres" />.
            </summary>
            <value>
               The first <see cref="T:System.String" /> object in <see
               cref="P:TagLib.Tag.Genres" />, or <see langword="null" /> is it
               contains no values.
            </value>
            <remarks>
               This property is provided for convenience. Use <see
               cref="P:TagLib.Tag.Genres" /> to set the value.
            </remarks>
        </member>
        <member name="P:TagLib.Tag.JoinedArtists">
            <summary>
               Gets the same value as <see cref="P:TagLib.Tag.JoinedPerformers" />.
            </summary>
            <value>
               The same value as <see cref="P:TagLib.Tag.JoinedPerformers" />.
            </value>
            <remarks>
               This property exists to aleviate confusion. Use <see
               cref="P:TagLib.Tag.JoinedPerformers" /> for track artists and <see
               cref="P:TagLib.Tag.JoinedAlbumArtists" /> for album artists.
            </remarks>
        </member>
        <member name="P:TagLib.Tag.JoinedAlbumArtists">
            <summary>
               Gets a semicolon separated string containing the values
               in <see cref="P:TagLib.Tag.AlbumArtists" />.
            </summary>
            <value>
               A semicolon separated <see cref="T:System.String" /> object
               containing the values in <see cref="P:TagLib.Tag.AlbumArtists" />.
            </value>
            <remarks>
               This property is provided for convenience. Use <see
               cref="P:TagLib.Tag.AlbumArtists" /> to set the value.
            </remarks>
        </member>
        <member name="P:TagLib.Tag.JoinedPerformers">
            <summary>
               Gets a semicolon separated string containing the values
               in <see cref="P:TagLib.Tag.Performers" />.
            </summary>
            <value>
               A semicolon separated <see cref="T:System.String" /> object
               containing the values in <see cref="P:TagLib.Tag.Performers" />.
            </value>
            <remarks>
               This property is provided for convenience. Use <see
               cref="P:TagLib.Tag.Performers" /> to set the value.
            </remarks>
        </member>
        <member name="P:TagLib.Tag.JoinedPerformersSort">
            <summary>
               Gets a semicolon separated string containing the values
               in <see cref="P:TagLib.Tag.PerformersSort" />.
            </summary>
            <value>
               A semicolon separated <see cref="T:System.String" /> object
               containing the values in <see cref="P:TagLib.Tag.PerformersSort" />.
            </value>
            <remarks>
               This property is provided for convenience. Use <see
               cref="P:TagLib.Tag.PerformersSort" /> to set the value.
            </remarks>
        </member>
        <member name="P:TagLib.Tag.JoinedComposers">
            <summary>
               Gets a semicolon separated string containing the values
               in <see cref="P:TagLib.Tag.Composers" />.
            </summary>
            <value>
               A semicolon separated <see cref="T:System.String" /> object
               containing the values in <see cref="P:TagLib.Tag.Composers" />.
            </value>
            <remarks>
               This property is provided for convenience. Use <see
               cref="P:TagLib.Tag.Composers" /> to set the value.
            </remarks>
        </member>
        <member name="P:TagLib.Tag.JoinedGenres">
            <summary>
               Gets a semicolon separated string containing the values
               in <see cref="P:TagLib.Tag.Genres" />.
            </summary>
            <value>
               A semicolon separated <see cref="T:System.String" /> object
               containing the values in <see cref="P:TagLib.Tag.Genres" />.
            </value>
            <remarks>
               This property is provided for convenience. Use <see
               cref="P:TagLib.Tag.Genres" /> to set the value.
            </remarks>
        </member>
        <member name="M:TagLib.Tag.FirstInGroup(System.String[])">
            <summary>
               Gets the first string in an array.
            </summary>
            <param name="group">
               A <see cref="T:string[]" /> to get the first string from.
            </param>
            <returns>
               The first <see cref="T:System.String" /> object contained in
               <paramref name="group" />, or <see langword="null" /> if
               the array is <see langword="null" /> or empty.
            </returns>
        </member>
        <member name="M:TagLib.Tag.JoinGroup(System.String[])">
            <summary>
               Joins a array of strings into a single, semicolon
               separated, string.
            </summary>
            <param name="group">
               A <see cref="T:string[]" /> containing values to combine.
            </param>
            <returns>
               A semicolon separated <see cref="T:System.String" /> object
               containing the values from <paramref name="group" />.
            </returns>
        </member>
        <member name="P:TagLib.Tag.IsEmpty">
            <summary>
               Gets whether or not the current instance is empty.
            </summary>
            <value>
               <see langword="true" /> if the current instance does not
               any values. Otherwise <see langword="false" />.
            </value>
            <remarks>
               In the default implementation, this checks the values
               supported by <see cref="T:TagLib.Tag" />, but it may be extended
               by child classes to support other values.
            </remarks>
        </member>
        <member name="M:TagLib.Tag.Clear">
            <summary>
               Clears the values stored in the current instance.
            </summary>
            <remarks>
               The clearing procedure is format specific and should
               clear all values.
            </remarks>
        </member>
        <member name="M:TagLib.Tag.SetInfoTag">
            <summary>
               Set the Tags that represent the Tagger software 
               (TagLib#) itself.
            </summary>
            <remarks>
               This is typically a method to call just before 
               saving a tag.
            </remarks>
        </member>
        <member name="M:TagLib.Tag.Duplicate(TagLib.Tag,TagLib.Tag,System.Boolean)">
            <summary>
               Copies all standard values from one tag to another,
               optionally overwriting existing values.
            </summary>
            <param name="source">
               A <see cref="T:TagLib.Tag" /> object containing the source tag to
               copy the values from.
            </param>
            <param name="target">
               A <see cref="T:TagLib.Tag" /> object containing the target tag to
               copy values to.
            </param>
            <param name="overwrite">
               A <see cref="T:System.Boolean" /> specifying whether or not to copy
               values over existing one.
            </param>
            <remarks>
               <para>This method only copies the most basic values,
               those contained in this class, between tags. To copy
               format specific tags, or additional details, additional
               implementations need to be applied. For example, copying
               from one <see cref="T:TagLib.Id3v2.Tag" /> to another:
               <c>foreach (TagLib.Id3v2.Frame frame in old_tag)
               new_tag.AddFrame (frame);</c></para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="source" /> or <paramref name="target" />
               is <see langword="null" />.
            </exception>
        </member>
        <member name="M:TagLib.Tag.CopyTo(TagLib.Tag,System.Boolean)">
            <summary>
               Copies the values from the current instance to another
               <see cref="T:TagLib.Tag" />, optionally overwriting
               existing values.
            </summary>
            <param name="target">
               A <see cref="T:TagLib.Tag" /> object containing the target tag to
               copy values to.
            </param>
            <param name="overwrite">
               A <see cref="T:System.Boolean" /> specifying whether or not to copy
               values over existing one.
            </param>
            <remarks>
               <para>This method only copies the most basic values when
               copying between different tag formats, however, if
               <paramref name="target" /> is of the same type as the
               current instance, more advanced copying may be done.
               For example, <see cref="T:TagLib.Id3v2.Tag" /> will copy
               all of its frames to another tag.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="target" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:TagLib.Tag.IsNullOrLikeEmpty(System.String)">
            <summary>
               Checks if a <see cref="T:System.String" /> is <see langword="null"
               /> or contains only whitespace characters.
            </summary>
            <param name="value">
               A <see cref="T:System.String" /> object to check.
            </param>
            <returns>
               <see langword="true" /> if the string is <see
               langword="null" /> or contains only whitespace
               characters. Otherwise <see langword="false" />.
            </returns>
        </member>
        <member name="M:TagLib.Tag.IsNullOrLikeEmpty(System.String[])">
            <summary>
               Checks if all the strings in the array return <see
               langword="true" /> with <see
               cref="M:TagLib.Tag.IsNullOrLikeEmpty(System.String)" /> or if the array is
               <see langword="null" /> or is empty.
            </summary>
            <param name="value">
               A <see cref="T:string[]" /> to check the contents of.
            </param>
            <returns>
               <see langword="true" /> if the array is <see
               langword="null" /> or empty, or all elements return <see
               langword="true" /> for <see
               cref="M:TagLib.Tag.IsNullOrLikeEmpty(System.String)" />. Otherwise <see
               langword="false" />.
            </returns>
        </member>
        <member name="T:TagLib.Tiff.Arw.File">
            <summary>
               This class extends <see cref="T:TagLib.Tiff.File" /> to provide tagging
               for ARW image files.
            </summary>
        </member>
        <member name="P:TagLib.Tiff.Arw.File.Writeable">
            <summary>
               Indicates if tags can be written back to the current file or not
            </summary>
            <value>
               A <see cref="T:System.Boolean" /> which is true if tags can be written to the
               current file, otherwise false.
            </value>
        </member>
        <member name="M:TagLib.Tiff.Arw.File.#ctor(System.String,TagLib.ReadStyle)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Tiff.Arw.File" /> for a specified path in the local file
               system and specified read style.
            </summary>
            <param name="path">
               A <see cref="T:System.String" /> object containing the path of the
               file to use in the new instance.
            </param>
            <param name="propertiesStyle">
               A <see cref="T:TagLib.ReadStyle" /> value specifying at what level
               of accuracy to read the media properties, or <see
               cref="F:TagLib.ReadStyle.None" /> to ignore the properties.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="path" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:TagLib.Tiff.Arw.File.#ctor(System.String)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Tiff.Arw.File" /> for a specified path in the local file
               system.
            </summary>
            <param name="path">
               A <see cref="T:System.String" /> object containing the path of the
               file to use in the new instance.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="path" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:TagLib.Tiff.Arw.File.#ctor(TagLib.File.IFileAbstraction,TagLib.ReadStyle)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Tiff.Arw.File" /> for a specified file abstraction and
               specified read style.
            </summary>
            <param name="abstraction">
               A <see cref="T:TagLib.File.IFileAbstraction" /> object to use when
               reading from and writing to the file.
            </param>
            <param name="propertiesStyle">
               A <see cref="T:TagLib.ReadStyle" /> value specifying at what level
               of accuracy to read the media properties, or <see
               cref="F:TagLib.ReadStyle.None" /> to ignore the properties.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="abstraction" /> is <see langword="null"
               />.
            </exception>
        </member>
        <member name="M:TagLib.Tiff.Arw.File.#ctor(TagLib.File.IFileAbstraction)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Tiff.Arw.File" /> for a specified file abstraction.
            </summary>
            <param name="abstraction">
               A <see cref="T:TagLib.File.IFileAbstraction" /> object to use when
               reading from and writing to the file.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="abstraction" /> is <see langword="null"
               />.
            </exception>
        </member>
        <member name="M:TagLib.Tiff.Arw.File.Save">
            <summary>
               Saves the changes made in the current instance to the
               file it represents.
            </summary>
        </member>
        <member name="M:TagLib.Tiff.Arw.File.CreateCodec(System.Int32,System.Int32)">
            <summary>
               Create a codec that describes the photo properties.
            </summary>
            <returns>
               A <see cref="T:TagLib.Tiff.Codec" /> object.
            </returns>
        </member>
        <member name="T:TagLib.Tiff.BaseTiffFile">
            <summary>
               This class extends <see cref="T:TagLib.Image.File" /> to provide some basic behavior
               for Tiff based file formats.
            </summary>
        </member>
        <member name="P:TagLib.Tiff.BaseTiffFile.IsBigEndian">
            <summary>
               Indicates if the current file is in big endian or little endian format.
            </summary>
            <remarks>
               The method <see cref="M:TagLib.Tiff.BaseTiffFile.ReadHeader"/> must be called from a subclass to
               properly initialize this property.
            </remarks>
        </member>
        <member name="P:TagLib.Tiff.BaseTiffFile.Magic">
            <summary>
               The identifier used to recognize the file. This is 42 for most TIFF files.
            </summary>
        </member>
        <member name="M:TagLib.Tiff.BaseTiffFile.#ctor(System.String)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Tiff.File" /> for a specified path in the local file
               system.
            </summary>
            <param name="path">
               A <see cref="T:System.String" /> object containing the path of the
               file to use in the new instance.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="path" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:TagLib.Tiff.BaseTiffFile.#ctor(TagLib.File.IFileAbstraction)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Tiff.File" /> for a specified file abstraction.
            </summary>
            <param name="abstraction">
               A <see cref="T:TagLib.File.IFileAbstraction" /> object to use when
               reading from and writing to the file.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="abstraction" /> is <see langword="null"
               />.
            </exception>
        </member>
        <member name="M:TagLib.Tiff.BaseTiffFile.ReadHeader">
            <summary>
               Reads and validates the TIFF header at the current position.
            </summary>
            <returns>
               A <see cref="T:System.UInt32"/> with the offset value to the first
               IFD contained in the file.
            </returns>
            <remarks>
               This method should only be called, when the current read position is
               the beginning of the file.
            </remarks>
        </member>
        <member name="M:TagLib.Tiff.BaseTiffFile.ReadIFD(System.UInt32)">
            <summary>
               Reads IFDs starting from the given offset.
            </summary>
            <param name="offset">
               A <see cref="T:System.UInt32"/> with the IFD offset to start
               reading from.
            </param>
        </member>
        <member name="M:TagLib.Tiff.BaseTiffFile.ReadIFD(System.UInt32,System.Int32)">
            <summary>
               Reads a certain number of IFDs starting from the given offset.
            </summary>
            <param name="offset">
               A <see cref="T:System.UInt32"/> with the IFD offset to start
               reading from.
            </param>
            <param name="ifd_count">
               A <see cref="T:System.Int32"/> with the number of IFDs to read.
            </param>
        </member>
        <member name="M:TagLib.Tiff.BaseTiffFile.CreateIFDReader(TagLib.Tiff.BaseTiffFile,System.Boolean,TagLib.IFD.IFDStructure,System.Int64,System.UInt32,System.UInt32)">
            <summary>
               Creates an IFD reader to parse the file.
            </summary>
            <param name="file">
               A <see cref="T:TagLib.Tiff.File"/> to read from.
            </param>
            <param name="is_bigendian">
                A <see cref="T:System.Boolean"/>, it must be true, if the data of the IFD should be
                read as bigendian, otherwise false.
            </param>
            <param name="structure">
               A <see cref="T:TagLib.IFD.IFDStructure"/> that will be populated.
            </param>
            <param name="base_offset">
                A <see cref="T:System.Int64"/> value describing the base were the IFD offsets
                refer to. E.g. in Jpegs the IFD are located in an Segment and the offsets
                inside the IFD refer from the beginning of this segment. So <paramref
                name="base_offset"/> must contain the beginning of the segment.
            </param>
            <param name="ifd_offset">
                A <see cref="T:System.UInt32"/> value with the beginning of the IFD relative to
                <paramref name="base_offset"/>.
            </param>
            <param name="max_offset">
            	A <see cref="T:System.UInt32"/> value with maximal possible offset. This is to limit
                the size of the possible data;
            </param>
        </member>
        <member name="M:TagLib.Tiff.BaseTiffFile.RenderHeader(System.UInt32)">
            <summary>
               Renders a TIFF header with the given offset to the first IFD.
               The returned data has length 8.
            </summary>
            <param name="first_ifd_offset">
               A <see cref="T:System.UInt32"/> with the offset to the first IFD
               to be included in the header.
            </param>
            <returns>
               A <see cref="T:TagLib.ByteVector"/> with the rendered header of length 8.
            </returns>
        </member>
        <member name="T:TagLib.Tiff.Codec">
            <summary>
               A TIFF photo codec. Contains basic photo details.
            </summary>
        </member>
        <member name="P:TagLib.Tiff.Codec.Description">
            <summary>
               Gets a text description of the media represented by the
               current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> object containing a description
               of the media represented by the current instance.
            </value>
        </member>
        <member name="M:TagLib.Tiff.Codec.#ctor(System.Int32,System.Int32)">
            <summary>
               Constructs a new <see cref="T:TagLib.Tiff.Codec" /> with the given width
               and height.
            </summary>
            <param name="width">
               The width of the photo.
            </param>
            <param name="height">
               The height of the photo.
            </param>
            <returns>
               A new <see cref="T:TagLib.Tiff.Codec" /> instance.
            </returns>
        </member>
        <member name="M:TagLib.Tiff.Codec.#ctor(System.Int32,System.Int32,System.String)">
            <summary>
               Constructs a new <see cref="T:TagLib.Tiff.Codec" /> with the given width
               and height.
            </summary>
            <param name="width">
               The width of the photo.
            </param>
            <param name="height">
               The height of the photo.
            </param>
            <param name="description">
               The description of the photo type.
            </param>
            <returns>
               A new <see cref="T:TagLib.Tiff.Codec" /> instance.
            </returns>
        </member>
        <member name="T:TagLib.Tiff.Cr2.File">
            <summary>
               This class extends <see cref="T:TagLib.Tiff.BaseTiffFile" /> to provide tagging
               for CR2 image files.
            </summary>
        </member>
        <member name="F:TagLib.Tiff.Cr2.File.properties">
            <summary>
               The Properties of the image
            </summary>
        </member>
        <member name="P:TagLib.Tiff.Cr2.File.Properties">
            <summary>
               Gets the media properties of the file represented by the
               current instance.
            </summary>
            <value>
               A <see cref="T:TagLib.Properties" /> object containing the
               media properties of the file represented by the current
               instance.
            </value>
        </member>
        <member name="P:TagLib.Tiff.Cr2.File.Writeable">
            <summary>
               Indicates if tags can be written back to the current file or not
            </summary>
            <value>
               A <see cref="T:System.Boolean" /> which is true if tags can be written to the
               current file, otherwise false.
            </value>
        </member>
        <member name="M:TagLib.Tiff.Cr2.File.#ctor(System.String,TagLib.ReadStyle)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Tiff.Cr2.File" /> for a specified path in the local file
               system and specified read style.
            </summary>
            <param name="path">
               A <see cref="T:System.String" /> object containing the path of the
               file to use in the new instance.
            </param>
            <param name="propertiesStyle">
               A <see cref="T:TagLib.ReadStyle" /> value specifying at what level
               of accuracy to read the media properties, or <see
               cref="F:TagLib.ReadStyle.None" /> to ignore the properties.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="path" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:TagLib.Tiff.Cr2.File.#ctor(System.String)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Tiff.Cr2.File" /> for a specified path in the local file
               system.
            </summary>
            <param name="path">
               A <see cref="T:System.String" /> object containing the path of the
               file to use in the new instance.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="path" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:TagLib.Tiff.Cr2.File.#ctor(TagLib.File.IFileAbstraction,TagLib.ReadStyle)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Tiff.Cr2.File" /> for a specified file abstraction and
               specified read style.
            </summary>
            <param name="abstraction">
               A <see cref="T:TagLib.File.IFileAbstraction" /> object to use when
               reading from and writing to the file.
            </param>
            <param name="propertiesStyle">
               A <see cref="T:TagLib.ReadStyle" /> value specifying at what level
               of accuracy to read the media properties, or <see
               cref="F:TagLib.ReadStyle.None" /> to ignore the properties.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="abstraction" /> is <see langword="null"
               />.
            </exception>
        </member>
        <member name="M:TagLib.Tiff.Cr2.File.#ctor(TagLib.File.IFileAbstraction)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Tiff.Cr2.File" /> for a specified file abstraction.
            </summary>
            <param name="abstraction">
               A <see cref="T:TagLib.File.IFileAbstraction" /> object to use when
               reading from and writing to the file.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="abstraction" /> is <see langword="null"
               />.
            </exception>
        </member>
        <member name="M:TagLib.Tiff.Cr2.File.Save">
            <summary>
               Saves the changes made in the current instance to the
               file it represents.
            </summary>
        </member>
        <member name="M:TagLib.Tiff.Cr2.File.Read(TagLib.ReadStyle)">
            <summary>
               Reads the information from file with a specified read style.
            </summary>
            <param name="propertiesStyle">
               A <see cref="T:TagLib.ReadStyle" /> value specifying at what level
               of accuracy to read the media properties, or <see
               cref="F:TagLib.ReadStyle.None" /> to ignore the properties.
            </param>
        </member>
        <member name="M:TagLib.Tiff.Cr2.File.ReadFile">
            <summary>
               Parses the CR2 file
            </summary>
        </member>
        <member name="M:TagLib.Tiff.Cr2.File.ReadAdditionalCR2Header">
            <summary>
              Reads and validates the CR2 header started at the current position.
            </summary>
            <returns>
               A <see cref="T:System.UInt32"/> with the offset to the IFD with the RAW data.
            </returns>
        </member>
        <member name="M:TagLib.Tiff.Cr2.File.ExtractProperties">
            <summary>
               Attempts to extract the media properties of the main
               photo.
            </summary>
            <returns>
               A <see cref="P:TagLib.Tiff.Cr2.File.Properties" /> object with a best effort guess
               at the right values. When no guess at all can be made,
               <see langword="null" /> is returned.
            </returns>
        </member>
        <member name="T:TagLib.Tiff.Dng.File">
            <summary>
               This class extends <see cref="T:TagLib.Tiff.File" /> to provide tagging
               for DNG image files.
            </summary>
        </member>
        <member name="P:TagLib.Tiff.Dng.File.Writeable">
            <summary>
               Indicates if tags can be written back to the current file or not
            </summary>
            <value>
               A <see cref="T:System.Boolean" /> which is true if tags can be written to the
               current file, otherwise false.
            </value>
        </member>
        <member name="M:TagLib.Tiff.Dng.File.#ctor(System.String,TagLib.ReadStyle)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Tiff.Dng.File" /> for a specified path in the local file
               system and specified read style.
            </summary>
            <param name="path">
               A <see cref="T:System.String" /> object containing the path of the
               file to use in the new instance.
            </param>
            <param name="propertiesStyle">
               A <see cref="T:TagLib.ReadStyle" /> value specifying at what level
               of accuracy to read the media properties, or <see
               cref="F:TagLib.ReadStyle.None" /> to ignore the properties.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="path" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:TagLib.Tiff.Dng.File.#ctor(System.String)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Tiff.Dng.File" /> for a specified path in the local file
               system.
            </summary>
            <param name="path">
               A <see cref="T:System.String" /> object containing the path of the
               file to use in the new instance.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="path" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:TagLib.Tiff.Dng.File.#ctor(TagLib.File.IFileAbstraction,TagLib.ReadStyle)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Tiff.Dng.File" /> for a specified file abstraction and
               specified read style.
            </summary>
            <param name="abstraction">
               A <see cref="T:TagLib.File.IFileAbstraction" /> object to use when
               reading from and writing to the file.
            </param>
            <param name="propertiesStyle">
               A <see cref="T:TagLib.ReadStyle" /> value specifying at what level
               of accuracy to read the media properties, or <see
               cref="F:TagLib.ReadStyle.None" /> to ignore the properties.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="abstraction" /> is <see langword="null"
               />.
            </exception>
        </member>
        <member name="M:TagLib.Tiff.Dng.File.#ctor(TagLib.File.IFileAbstraction)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Tiff.Dng.File" /> for a specified file abstraction.
            </summary>
            <param name="abstraction">
               A <see cref="T:TagLib.File.IFileAbstraction" /> object to use when
               reading from and writing to the file.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="abstraction" /> is <see langword="null"
               />.
            </exception>
        </member>
        <member name="M:TagLib.Tiff.Dng.File.Save">
            <summary>
               Saves the changes made in the current instance to the
               file it represents.
            </summary>
        </member>
        <member name="M:TagLib.Tiff.Dng.File.ExtractProperties">
            <summary>
               Attempts to extract the media properties of the main
               photo.
            </summary>
            <returns>
               A <see cref="T:TagLib.Properties" /> object with a best effort guess
               at the right values. When no guess at all can be made,
               <see langword="null" /> is returned.
            </returns>
        </member>
        <member name="M:TagLib.Tiff.Dng.File.CreateCodec(System.Int32,System.Int32)">
            <summary>
               Create a codec that describes the photo properties.
            </summary>
            <returns>
               A <see cref="T:TagLib.Tiff.Codec" /> object.
            </returns>
        </member>
        <member name="T:TagLib.Tiff.File">
            <summary>
               This class extends <see cref="T:TagLib.Tiff.BaseTiffFile" /> to provide tagging
               and properties support for Tiff files.
            </summary>
        </member>
        <member name="F:TagLib.Tiff.File.properties">
            <summary>
               Contains the media properties.
            </summary>
        </member>
        <member name="M:TagLib.Tiff.File.#ctor(System.String,TagLib.ReadStyle)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Tiff.File" /> for a specified path in the local file
               system and specified read style.
            </summary>
            <param name="path">
               A <see cref="T:System.String" /> object containing the path of the
               file to use in the new instance.
            </param>
            <param name="propertiesStyle">
               A <see cref="T:TagLib.ReadStyle" /> value specifying at what level
               of accuracy to read the media properties, or <see
               cref="F:TagLib.ReadStyle.None" /> to ignore the properties.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="path" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:TagLib.Tiff.File.#ctor(System.String)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Tiff.File" /> for a specified path in the local file
               system.
            </summary>
            <param name="path">
               A <see cref="T:System.String" /> object containing the path of the
               file to use in the new instance.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="path" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:TagLib.Tiff.File.#ctor(TagLib.File.IFileAbstraction,TagLib.ReadStyle)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Tiff.File" /> for a specified file abstraction and
               specified read style.
            </summary>
            <param name="abstraction">
               A <see cref="T:TagLib.File.IFileAbstraction" /> object to use when
               reading from and writing to the file.
            </param>
            <param name="propertiesStyle">
               A <see cref="T:TagLib.ReadStyle" /> value specifying at what level
               of accuracy to read the media properties, or <see
               cref="F:TagLib.ReadStyle.None" /> to ignore the properties.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="abstraction" /> is <see langword="null"
               />.
            </exception>
        </member>
        <member name="M:TagLib.Tiff.File.#ctor(TagLib.File.IFileAbstraction)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Tiff.File" /> for a specified file abstraction.
            </summary>
            <param name="abstraction">
               A <see cref="T:TagLib.File.IFileAbstraction" /> object to use when
               reading from and writing to the file.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="abstraction" /> is <see langword="null"
               />.
            </exception>
        </member>
        <member name="P:TagLib.Tiff.File.Properties">
            <summary>
               Gets the media properties of the file represented by the
               current instance.
            </summary>
            <value>
               A <see cref="T:TagLib.Properties" /> object containing the
               media properties of the file represented by the current
               instance.
            </value>
        </member>
        <member name="M:TagLib.Tiff.File.Save">
            <summary>
               Saves the changes made in the current instance to the
               file it represents.
            </summary>
        </member>
        <member name="M:TagLib.Tiff.File.WriteFile">
            <summary>
               Render the whole file and write it back.
            </summary>
        </member>
        <member name="M:TagLib.Tiff.File.UpdateTags(TagLib.IFD.IFDTag)">
            <summary>
               Update the XMP stored in the Tiff IFD
            </summary>
            <param name="exif">
               A <see cref="T:TagLib.IFD.IFDTag"/> The Tiff IFD to update the entries
            </param>
        </member>
        <member name="M:TagLib.Tiff.File.Read(TagLib.ReadStyle)">
            <summary>
               Reads the file with a specified read style.
            </summary>
            <param name="propertiesStyle">
               A <see cref="T:TagLib.ReadStyle" /> value specifying at what level
               of accuracy to read the media properties, or <see
               cref="F:TagLib.ReadStyle.None" /> to ignore the properties.
            </param>
        </member>
        <member name="M:TagLib.Tiff.File.ExtractProperties">
            <summary>
               Attempts to extract the media properties of the main
               photo.
            </summary>
            <returns>
               A <see cref="P:TagLib.Tiff.File.Properties" /> object with a best effort guess
               at the right values. When no guess at all can be made,
               <see langword="null" /> is returned.
            </returns>
        </member>
        <member name="M:TagLib.Tiff.File.CreateCodec(System.Int32,System.Int32)">
            <summary>
               Create a codec that describes the photo properties.
            </summary>
            <returns>
               A <see cref="T:TagLib.Tiff.Codec" /> object.
            </returns>
        </member>
        <member name="T:TagLib.Tiff.Nef.File">
            <summary>
               This class extends <see cref="T:TagLib.Tiff.File" /> to provide tagging
               for NEF image files.
            </summary>
        </member>
        <member name="P:TagLib.Tiff.Nef.File.Writeable">
            <summary>
               Indicates if tags can be written back to the current file or not
            </summary>
            <value>
               A <see cref="T:System.Boolean" /> which is true if tags can be written to the
               current file, otherwise false.
            </value>
        </member>
        <member name="M:TagLib.Tiff.Nef.File.#ctor(System.String,TagLib.ReadStyle)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Tiff.Nef.File" /> for a specified path in the local file
               system and specified read style.
            </summary>
            <param name="path">
               A <see cref="T:System.String" /> object containing the path of the
               file to use in the new instance.
            </param>
            <param name="propertiesStyle">
               A <see cref="T:TagLib.ReadStyle" /> value specifying at what level
               of accuracy to read the media properties, or <see
               cref="F:TagLib.ReadStyle.None" /> to ignore the properties.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="path" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:TagLib.Tiff.Nef.File.#ctor(System.String)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Tiff.Nef.File" /> for a specified path in the local file
               system.
            </summary>
            <param name="path">
               A <see cref="T:System.String" /> object containing the path of the
               file to use in the new instance.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="path" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:TagLib.Tiff.Nef.File.#ctor(TagLib.File.IFileAbstraction,TagLib.ReadStyle)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Tiff.Nef.File" /> for a specified file abstraction and
               specified read style.
            </summary>
            <param name="abstraction">
               A <see cref="T:TagLib.File.IFileAbstraction" /> object to use when
               reading from and writing to the file.
            </param>
            <param name="propertiesStyle">
               A <see cref="T:TagLib.ReadStyle" /> value specifying at what level
               of accuracy to read the media properties, or <see
               cref="F:TagLib.ReadStyle.None" /> to ignore the properties.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="abstraction" /> is <see langword="null"
               />.
            </exception>
        </member>
        <member name="M:TagLib.Tiff.Nef.File.#ctor(TagLib.File.IFileAbstraction)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Tiff.Nef.File" /> for a specified file abstraction.
            </summary>
            <param name="abstraction">
               A <see cref="T:TagLib.File.IFileAbstraction" /> object to use when
               reading from and writing to the file.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="abstraction" /> is <see langword="null"
               />.
            </exception>
        </member>
        <member name="M:TagLib.Tiff.Nef.File.Save">
            <summary>
               Saves the changes made in the current instance to the
               file it represents.
            </summary>
        </member>
        <member name="M:TagLib.Tiff.Nef.File.CreateCodec(System.Int32,System.Int32)">
            <summary>
               Create a codec that describes the photo properties.
            </summary>
            <returns>
               A <see cref="T:TagLib.Tiff.Codec" /> object.
            </returns>
        </member>
        <member name="T:TagLib.Tiff.Pef.File">
            <summary>
               This class extends <see cref="T:TagLib.Tiff.BaseTiffFile" /> to provide tagging
               for PEF image files.
            </summary>
        </member>
        <member name="P:TagLib.Tiff.Pef.File.Writeable">
            <summary>
               Indicates if tags can be written back to the current file or not
            </summary>
            <value>
               A <see cref="T:System.Boolean" /> which is true if tags can be written to the
               current file, otherwise false.
            </value>
        </member>
        <member name="M:TagLib.Tiff.Pef.File.#ctor(System.String,TagLib.ReadStyle)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Tiff.Pef.File" /> for a specified path in the local file
               system and specified read style.
            </summary>
            <param name="path">
               A <see cref="T:System.String" /> object containing the path of the
               file to use in the new instance.
            </param>
            <param name="propertiesStyle">
               A <see cref="T:TagLib.ReadStyle" /> value specifying at what level
               of accuracy to read the media properties, or <see
               cref="F:TagLib.ReadStyle.None" /> to ignore the properties.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="path" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:TagLib.Tiff.Pef.File.#ctor(System.String)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Tiff.Pef.File" /> for a specified path in the local file
               system.
            </summary>
            <param name="path">
               A <see cref="T:System.String" /> object containing the path of the
               file to use in the new instance.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="path" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:TagLib.Tiff.Pef.File.#ctor(TagLib.File.IFileAbstraction,TagLib.ReadStyle)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Tiff.Pef.File" /> for a specified file abstraction and
               specified read style.
            </summary>
            <param name="abstraction">
               A <see cref="T:TagLib.File.IFileAbstraction" /> object to use when
               reading from and writing to the file.
            </param>
            <param name="propertiesStyle">
               A <see cref="T:TagLib.ReadStyle" /> value specifying at what level
               of accuracy to read the media properties, or <see
               cref="F:TagLib.ReadStyle.None" /> to ignore the properties.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="abstraction" /> is <see langword="null"
               />.
            </exception>
        </member>
        <member name="M:TagLib.Tiff.Pef.File.#ctor(TagLib.File.IFileAbstraction)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Tiff.Pef.File" /> for a specified file abstraction.
            </summary>
            <param name="abstraction">
               A <see cref="T:TagLib.File.IFileAbstraction" /> object to use when
               reading from and writing to the file.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="abstraction" /> is <see langword="null"
               />.
            </exception>
        </member>
        <member name="M:TagLib.Tiff.Pef.File.Save">
            <summary>
               Saves the changes made in the current instance to the
               file it represents.
            </summary>
        </member>
        <member name="M:TagLib.Tiff.Pef.File.CreateCodec(System.Int32,System.Int32)">
            <summary>
               Create a codec that describes the photo properties.
            </summary>
            <returns>
               A <see cref="T:TagLib.Tiff.Codec" /> object.
            </returns>
        </member>
        <member name="T:TagLib.Tiff.Rw2.File">
            <summary>
               This class extends <see cref="T:TagLib.Tiff.BaseTiffFile" /> to provide tagging
               for RW2 image files.
            </summary>
        </member>
        <member name="F:TagLib.Tiff.Rw2.File.properties">
            <summary>
               The Properties of the image
            </summary>
        </member>
        <member name="P:TagLib.Tiff.Rw2.File.Properties">
            <summary>
               Gets the media properties of the file represented by the
               current instance.
            </summary>
            <value>
               A <see cref="T:TagLib.Properties" /> object containing the
               media properties of the file represented by the current
               instance.
            </value>
        </member>
        <member name="P:TagLib.Tiff.Rw2.File.Writeable">
            <summary>
               Indicates if tags can be written back to the current file or not
            </summary>
            <value>
               A <see cref="T:System.Boolean" /> which is true if tags can be written to the
               current file, otherwise false.
            </value>
        </member>
        <member name="P:TagLib.Tiff.Rw2.File.JpgFromRaw">
            <summary>
                The JPEG file that's embedded in the RAW file.
            </summary>
        </member>
        <member name="M:TagLib.Tiff.Rw2.File.#ctor(System.String,TagLib.ReadStyle)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Tiff.Rw2.File" /> for a specified path in the local file
               system and specified read style.
            </summary>
            <param name="path">
               A <see cref="T:System.String" /> object containing the path of the
               file to use in the new instance.
            </param>
            <param name="propertiesStyle">
               A <see cref="T:TagLib.ReadStyle" /> value specifying at what level
               of accuracy to read the media properties, or <see
               cref="F:TagLib.ReadStyle.None" /> to ignore the properties.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="path" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:TagLib.Tiff.Rw2.File.#ctor(System.String)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Tiff.Rw2.File" /> for a specified path in the local file
               system.
            </summary>
            <param name="path">
               A <see cref="T:System.String" /> object containing the path of the
               file to use in the new instance.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="path" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:TagLib.Tiff.Rw2.File.#ctor(TagLib.File.IFileAbstraction,TagLib.ReadStyle)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Tiff.Rw2.File" /> for a specified file abstraction and
               specified read style.
            </summary>
            <param name="abstraction">
               A <see cref="T:TagLib.File.IFileAbstraction" /> object to use when
               reading from and writing to the file.
            </param>
            <param name="propertiesStyle">
               A <see cref="T:TagLib.ReadStyle" /> value specifying at what level
               of accuracy to read the media properties, or <see
               cref="F:TagLib.ReadStyle.None" /> to ignore the properties.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="abstraction" /> is <see langword="null"
               />.
            </exception>
        </member>
        <member name="M:TagLib.Tiff.Rw2.File.#ctor(TagLib.File.IFileAbstraction)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.Tiff.Rw2.File" /> for a specified file abstraction.
            </summary>
            <param name="abstraction">
               A <see cref="T:TagLib.File.IFileAbstraction" /> object to use when
               reading from and writing to the file.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="abstraction" /> is <see langword="null"
               />.
            </exception>
        </member>
        <member name="M:TagLib.Tiff.Rw2.File.Save">
            <summary>
               Saves the changes made in the current instance to the
               file it represents.
            </summary>
        </member>
        <member name="M:TagLib.Tiff.Rw2.File.GetTag(TagLib.TagTypes,System.Boolean)">
            <summary>
               Gets a tag of a specified type from the current instance,
               optionally creating a new tag if possible.
            </summary>
            <param name="type">
               A <see cref="T:TagLib.TagTypes" /> value indicating the
               type of tag to read.
            </param>
            <param name="create">
               A <see cref="T:System.Boolean" /> value specifying whether or not to
               try and create the tag if one is not found.
            </param>
            <returns>
               A <see cref="T:TagLib.Tag" /> object containing the tag that was
               found in or added to the current instance. If no
               matching tag was found and none was created, <see
               langword="null" /> is returned.
            </returns>
        </member>
        <member name="M:TagLib.Tiff.Rw2.File.Read(TagLib.ReadStyle)">
            <summary>
               Reads the information from file with a specified read style.
            </summary>
            <param name="propertiesStyle">
               A <see cref="T:TagLib.ReadStyle" /> value specifying at what level
               of accuracy to read the media properties, or <see
               cref="F:TagLib.ReadStyle.None" /> to ignore the properties.
            </param>
        </member>
        <member name="M:TagLib.Tiff.Rw2.File.ReadFile">
            <summary>
               Parses the RW2 file
            </summary>
        </member>
        <member name="M:TagLib.Tiff.Rw2.File.ReadAdditionalRW2Header">
            <summary>
              Reads and validates the RW2 header started at the current position.
            </summary>
            <returns>
               A <see cref="T:System.UInt32"/> with the offset to the IFD with the RAW data.
            </returns>
        </member>
        <member name="M:TagLib.Tiff.Rw2.File.ExtractProperties">
            <summary>
               Attempts to extract the media properties of the main
               photo.
            </summary>
            <returns>
               A <see cref="P:TagLib.Tiff.Rw2.File.Properties" /> object with a best effort guess
               at the right values. When no guess at all can be made,
               <see langword="null" /> is returned.
            </returns>
        </member>
        <member name="M:TagLib.Tiff.Rw2.File.CreateIFDReader(TagLib.Tiff.BaseTiffFile,System.Boolean,TagLib.IFD.IFDStructure,System.Int64,System.UInt32,System.UInt32)">
            <summary>
               Creates an IFD reader to parse the file.
            </summary>
            <param name="file">
               A <see cref="T:TagLib.Tiff.Rw2.File"/> to read from.
            </param>
            <param name="is_bigendian">
                A <see cref="T:System.Boolean"/>, it must be true, if the data of the IFD should be
                read as bigendian, otherwise false.
            </param>
            <param name="structure">
               A <see cref="T:TagLib.IFD.IFDStructure"/> that will be populated.
            </param>
            <param name="base_offset">
                A <see cref="T:System.Int64"/> value describing the base were the IFD offsets
                refer to. E.g. in Jpegs the IFD are located in an Segment and the offsets
                inside the IFD refer from the beginning of this segment. So <paramref
                name="base_offset"/> must contain the beginning of the segment.
            </param>
            <param name="ifd_offset">
                A <see cref="T:System.UInt32"/> value with the beginning of the IFD relative to
                <paramref name="base_offset"/>.
            </param>
            <param name="max_offset">
            	A <see cref="T:System.UInt32"/> value with maximal possible offset. This is to limit
                the size of the possible data;
            </param>
        </member>
        <member name="T:TagLib.Tiff.Rw2.IFDReader">
            <summary>
                Panasonic Rw2-specific IFD reader
            </summary>
        </member>
        <member name="M:TagLib.Tiff.Rw2.IFDReader.#ctor(TagLib.Tiff.BaseTiffFile,System.Boolean,TagLib.IFD.IFDStructure,System.Int64,System.UInt32,System.UInt32)">
            <summary>
               Constructor. Reads an IFD from given file, using the given endianness.
            </summary>
            <param name="file">
               A <see cref="T:TagLib.Tiff.Rw2.File"/> to read from.
            </param>
            <param name="is_bigendian">
                A <see cref="T:System.Boolean"/>, it must be true, if the data of the IFD should be
                read as bigendian, otherwise false.
            </param>
            <param name="structure">
               A <see cref="T:TagLib.IFD.IFDStructure"/> that will be populated.
            </param>
            <param name="base_offset">
                A <see cref="T:System.Int64"/> value describing the base were the IFD offsets
                refer to. E.g. in Jpegs the IFD are located in an Segment and the offsets
                inside the IFD refer from the beginning of this segment. So <paramref
                name="base_offset"/> must contain the beginning of the segment.
            </param>
            <param name="ifd_offset">
                A <see cref="T:System.UInt32"/> value with the beginning of the IFD relative to
                <paramref name="base_offset"/>.
            </param>
            <param name="max_offset">
            	A <see cref="T:System.UInt32"/> value with maximal possible offset. This is to limit
                the size of the possible data;
            </param>
        </member>
        <member name="M:TagLib.Tiff.Rw2.IFDReader.ParseIFDEntry(System.UInt16,System.UInt16,System.UInt32,System.Int64,System.UInt32)">
            <summary>
               Try to parse the given IFD entry, used to discover format-specific entries.
            </summary>
            <param name="tag">
               A <see cref="T:System.UInt16"/> with the tag of the entry.
            </param>
            <param name="type">
               A <see cref="T:System.UInt16"/> with the type of the entry.
            </param>
            <param name="count">
               A <see cref="T:System.UInt32"/> with the data count of the entry.
            </param>
            <param name="base_offset">
               A <see cref="T:System.Int64"/> with the base offset which every offsets in the
               IFD are relative to.
            </param>
            <param name="offset">
               A <see cref="T:System.UInt32"/> with the offset of the entry.
            </param>
            <returns>
               A <see cref="T:TagLib.IFD.IFDEntry"/> with the given parameters, or null if none was parsed, after
               which the normal TIFF parsing is used.
            </returns>
        </member>
        <member name="T:TagLib.Tiff.Rw2.IFDTag">
            <summary>
               Handles the weird structure of Panasonic metadata.
            </summary>
        </member>
        <member name="P:TagLib.Tiff.Rw2.IFDTag.ISOSpeedRatings">
            <summary>
               Gets the ISO speed the image, the current instance belongs
               to, was taken with.
            </summary>
            <value>
               A <see cref="T:System.Nullable"/> with the ISO speed as defined in ISO 12232.
            </value>
            <remarks>
               <para>Panasonic stores these in a somewhat unstandard location.</para>
            </remarks>
        </member>
        <member name="P:TagLib.Tiff.Rw2.IFDTag.FocalLengthIn35mmFilm">
            <summary>
               Gets the focal length the image, the current instance belongs
               to, was taken with, assuming a 35mm film camera.
            </summary>
            <value>
               A <see cref="T:System.Nullable"/> with the focal length in 35mm equivalent in millimeters.
            </value>
            <remarks>
               <para>Panasonic stores these in a somewhat unstandard location.</para>
            </remarks>
        </member>
        <member name="T:TagLib.UnsupportedFormatException">
             <summary>
                This class extends <see cref="T:System.Exception" /> and is used to
                indicate that a file or tag is stored in an unsupported format
                and cannot be read or written by the current implementation.
             </summary>
             <example>
                <para>Catching an exception when creating a <see
                cref="T:TagLib.File" />.</para>
                <code lang="C#">
             using System;
             using TagLib;
            
             public class ExceptionTest
             {
             	public static void Main ()
             	{
             		try {
             			File file = File.Create ("myfile.flv"); // Not supported, YET!
             		} catch (UnsupportedFormatException e) {
             			Console.WriteLine ("That file format is not supported: {0}", e.ToString ());
             		}
            	}
             }
                </code>
                <code lang="C++">
             #using &lt;System.dll>
             #using &lt;taglib-sharp.dll>
             
             using System;
             using TagLib;
            
             void main ()
             {
             	try {
             		File file = File::Create ("myfile.flv"); // Not supported, YET!
             	} catch (UnsupportedFormatException^ e) {
             		Console::WriteLine ("That file format is not supported: {0}", e);
             	}
             }
                </code>
                <code lang="VB">
             Imports System
             Imports TagLib
            
             Public Class ExceptionTest
             	Public Shared Sub Main ()
             		Try
             			file As File = File.Create ("myfile.flv") ' Not supported, YET!
             		Catch e As UnsupportedFormatException
             			Console.WriteLine ("That file format is not supported: {0}", e.ToString ());
             		End Try
            	End Sub
             End Class
                </code>
                <code lang="Boo">
             import System
             import TagLib
            
             try:
             	file As File = File.Create ("myfile.flv") # Not supported, YET!
             catch e as UnsupportedFormatException:
             	Console.WriteLine ("That file format is not supported: {0}", e.ToString ());
                </code>
             </example>
        </member>
        <member name="M:TagLib.UnsupportedFormatException.#ctor(System.String)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.UnsupportedFormatException" /> with a specified
               message.
            </summary>
            <param name="message">
               A <see cref="T:System.String" /> containing a message explaining
               the reason for the exception.
            </param>
        </member>
        <member name="M:TagLib.UnsupportedFormatException.#ctor">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.UnsupportedFormatException" /> with the default
               values.
            </summary>
        </member>
        <member name="M:TagLib.UnsupportedFormatException.#ctor(System.String,System.Exception)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.UnsupportedFormatException" /> with a specified
               message containing a specified exception.
            </summary>
            <param name="message">
               A <see cref="T:System.String" /> containing a message explaining
               the reason for the exception.
            </param>
            <param name="innerException">
               A <see cref="T:System.Exception" /> object to be contained in the
               new exception. For example, previously caught exception.
            </param>
        </member>
        <member name="M:TagLib.UnsupportedFormatException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.UnsupportedFormatException" /> from a specified
               serialization info and streaming context.
            </summary>
            <param name="info">
               A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object containing the
               serialized data to be used for the new instance.
            </param>
            <param name="context">
               A <see cref="T:System.Runtime.Serialization.StreamingContext" /> object containing the
               streaming context information for the new instance.
            </param>
            <remarks>
               This constructor is implemented because <see
               cref="T:TagLib.UnsupportedFormatException" /> implements the <see
               cref="T:System.Runtime.Serialization.ISerializable" /> interface.
            </remarks>
        </member>
        <member name="T:TagLib.WavPack.File">
            <summary>
               This class extends <see cref="T:TagLib.NonContainer.File" /> to
               provide tagging and properties support for WavPack files.
            </summary>
            <remarks>
               A <see cref="T:TagLib.Ape.Tag" /> will be added automatically to
               any file that doesn't contain one. This change does not effect
               the file and can be reversed using the following method:
               <code>file.RemoveTags (file.TagTypes &amp; ~file.TagTypesOnDisk);</code>
            </remarks>
        </member>
        <member name="F:TagLib.WavPack.File.header_block">
            <summary>
               Contains the block with the audio header.
            </summary>
        </member>
        <member name="M:TagLib.WavPack.File.#ctor(System.String,TagLib.ReadStyle)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.WavPack.File" /> for a specified path in the local file
               system and specified read style.
            </summary>
            <param name="path">
               A <see cref="T:System.String" /> object containing the path of the
               file to use in the new instance.
            </param>
            <param name="propertiesStyle">
               A <see cref="T:TagLib.ReadStyle" /> value specifying at what level
               of accuracy to read the media properties, or <see
               cref="F:TagLib.ReadStyle.None" /> to ignore the properties.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="path" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:TagLib.WavPack.File.#ctor(System.String)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.WavPack.File" /> for a specified path in the local file
               system with an average read style.
            </summary>
            <param name="path">
               A <see cref="T:System.String" /> object containing the path of the
               file to use in the new instance.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="path" /> is <see langword="null" />.
            </exception>
        </member>
        <member name="M:TagLib.WavPack.File.#ctor(TagLib.File.IFileAbstraction,TagLib.ReadStyle)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.WavPack.File" /> for a specified file abstraction and
               specified read style.
            </summary>
            <param name="abstraction">
               A <see cref="T:TagLib.File.IFileAbstraction" /> object to use when
               reading from and writing to the file.
            </param>
            <param name="propertiesStyle">
               A <see cref="T:TagLib.ReadStyle" /> value specifying at what level
               of accuracy to read the media properties, or <see
               cref="F:TagLib.ReadStyle.None" /> to ignore the properties.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="abstraction" /> is <see langword="null"
               />.
            </exception>
        </member>
        <member name="M:TagLib.WavPack.File.#ctor(TagLib.File.IFileAbstraction)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.WavPack.File" /> for a specified file abstraction with an
               average read style.
            </summary>
            <param name="abstraction">
               A <see cref="T:TagLib.File.IFileAbstraction" /> object to use when
               reading from and writing to the file.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="abstraction" /> is <see langword="null"
               />.
            </exception>
        </member>
        <member name="M:TagLib.WavPack.File.GetTag(TagLib.TagTypes,System.Boolean)">
            <summary>
               Gets a tag of a specified type from the current instance,
               optionally creating a new tag if possible.
            </summary>
            <param name="type">
               A <see cref="T:TagLib.TagTypes" /> value indicating the
               type of tag to read.
            </param>
            <param name="create">
               A <see cref="T:System.Boolean" /> value specifying whether or not to
               try and create the tag if one is not found.
            </param>
            <returns>
               A <see cref="T:TagLib.Tag" /> object containing the tag that was
               found in or added to the current instance. If no
               matching tag was found and none was created, <see
               langword="null" /> is returned.
            </returns>
            <remarks>
               If a <see cref="T:TagLib.Id3v2.Tag" /> is added to the
               current instance, it will be placed at the start of the
               file. On the other hand, <see cref="T:TagLib.Id3v1.Tag" />
               <see cref="T:TagLib.Ape.Tag" /> will be added to the end of
               the file. All other tag types will be ignored.
            </remarks>
        </member>
        <member name="M:TagLib.WavPack.File.ReadStart(System.Int64,TagLib.ReadStyle)">
            <summary>
               Reads format specific information at the start of the
               file.
            </summary>
            <param name="start">
               A <see cref="T:System.Int64" /> value containing the seek position
               at which the tags end and the media data begins.
            </param>
            <param name="propertiesStyle">
               A <see cref="T:TagLib.ReadStyle" /> value specifying at what level
               of accuracy to read the media properties, or <see
               cref="F:TagLib.ReadStyle.None" /> to ignore the properties.
            </param>
        </member>
        <member name="M:TagLib.WavPack.File.ReadEnd(System.Int64,TagLib.ReadStyle)">
            <summary>
               Reads format specific information at the end of the
               file.
            </summary>
            <param name="end">
               A <see cref="T:System.Int64" /> value containing the seek position
               at which the media data ends and the tags begin.
            </param>
            <param name="propertiesStyle">
               A <see cref="T:TagLib.ReadStyle" /> value specifying at what level
               of accuracy to read the media properties, or <see
               cref="F:TagLib.ReadStyle.None" /> to ignore the properties.
            </param>
        </member>
        <member name="M:TagLib.WavPack.File.ReadProperties(System.Int64,System.Int64,TagLib.ReadStyle)">
            <summary>
               Reads the audio properties from the file represented by
               the current instance.
            </summary>
            <param name="start">
               A <see cref="T:System.Int64" /> value containing the seek position
               at which the tags end and the media data begins.
            </param>
            <param name="end">
               A <see cref="T:System.Int64" /> value containing the seek position
               at which the media data ends and the tags begin.
            </param>
            <param name="propertiesStyle">
               A <see cref="T:TagLib.ReadStyle" /> value specifying at what level
               of accuracy to read the media properties, or <see
               cref="F:TagLib.ReadStyle.None" /> to ignore the properties.
            </param>
            <returns>
               A <see cref="T:TagLib.Properties" /> object describing the
               media properties of the file represented by the current
               instance.
            </returns>
        </member>
        <member name="T:TagLib.WavPack.StreamHeader">
            <summary>
               This struct implements <see cref="T:TagLib.IAudioCodec" /> to provide
               support for reading WavPack audio properties.
            </summary>
        </member>
        <member name="F:TagLib.WavPack.StreamHeader.stream_length">
            <summary>
               Contains the number of bytes in the stream.
            </summary>
        </member>
        <member name="F:TagLib.WavPack.StreamHeader.version">
            <summary>
               Contains the WavPack version.
            </summary>
        </member>
        <member name="F:TagLib.WavPack.StreamHeader.flags">
            <summary>
               Contains the flags.
            </summary>
        </member>
        <member name="F:TagLib.WavPack.StreamHeader.samples">
            <summary>
               Contains the sample count.
            </summary>
        </member>
        <member name="F:TagLib.WavPack.StreamHeader.Size">
            <summary>
               The size of a WavPack header.
            </summary>
        </member>
        <member name="F:TagLib.WavPack.StreamHeader.FileIdentifier">
            <summary>
               The identifier used to recognize a WavPack file.
            </summary>
            <value>
               "wvpk"
            </value>
        </member>
        <member name="M:TagLib.WavPack.StreamHeader.#ctor(TagLib.ByteVector,System.Int64)">
            <summary>
               Constructs and initializes a new instance of <see
               cref="T:TagLib.WavPack.StreamHeader" /> for a specified header block and
               stream length.
            </summary>
            <param name="data">
               A <see cref="T:TagLib.ByteVector" /> object containing the stream
               header data.
            </param>
            <param name="streamLength">
               A <see cref="T:System.Int64" /> value containing the length of the
               WavPack stream in bytes.
            </param>
            <exception cref="T:System.ArgumentNullException">
               <paramref name="data" /> is <see langword="null" />.
            </exception>
            <exception cref="T:TagLib.CorruptFileException">
               <paramref name="data" /> does not begin with <see
               cref="F:TagLib.WavPack.StreamHeader.FileIdentifier" /> or is less than <see cref="F:TagLib.WavPack.StreamHeader.Size"
               /> bytes long.
            </exception>
        </member>
        <member name="P:TagLib.WavPack.StreamHeader.Duration">
            <summary>
               Gets the duration of the media represented by the current
               instance.
            </summary>
            <value>
               A <see cref="T:System.TimeSpan" /> containing the duration of the
               media represented by the current instance.
            </value>
        </member>
        <member name="P:TagLib.WavPack.StreamHeader.MediaTypes">
            <summary>
               Gets the types of media represented by the current
               instance.
            </summary>
            <value>
               Always <see cref="F:TagLib.MediaTypes.Audio" />.
            </value>
        </member>
        <member name="P:TagLib.WavPack.StreamHeader.Description">
            <summary>
               Gets a text description of the media represented by the
               current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> object containing a description
               of the media represented by the current instance.
            </value>
        </member>
        <member name="P:TagLib.WavPack.StreamHeader.AudioBitrate">
            <summary>
               Gets the bitrate of the audio represented by the current
               instance.
            </summary>
            <value>
               A <see cref="T:System.Int32" /> value containing a bitrate of the
               audio represented by the current instance.
            </value>
        </member>
        <member name="P:TagLib.WavPack.StreamHeader.AudioSampleRate">
            <summary>
               Gets the sample rate of the audio represented by the
               current instance.
            </summary>
            <value>
               A <see cref="T:System.Int32" /> value containing the sample rate of
               the audio represented by the current instance.
            </value>
        </member>
        <member name="P:TagLib.WavPack.StreamHeader.AudioChannels">
            <summary>
               Gets the number of channels in the audio represented by
               the current instance.
            </summary>
            <value>
               A <see cref="T:System.Int32" /> value containing the number of
               channels in the audio represented by the current
               instance.
            </value>
        </member>
        <member name="P:TagLib.WavPack.StreamHeader.Version">
            <summary>
               Gets the WavPack version of the audio represented by the
               current instance.
            </summary>
            <value>
               A <see cref="T:System.Int32" /> value containing the WavPack version
               of the audio represented by the current instance.
            </value>
        </member>
        <member name="P:TagLib.WavPack.StreamHeader.BitsPerSample">
            <summary>
               Gets the number of bits per sample in the audio
               represented by the current instance.
            </summary>
            <value>
               A <see cref="T:System.Int32" /> value containing the number of bits
               per sample in the audio represented by the current
               instance.
            </value>
        </member>
        <member name="M:TagLib.WavPack.StreamHeader.GetHashCode">
            <summary>
               Generates a hash code for the current instance.
            </summary>
            <returns>
               A <see cref="T:System.Int32" /> value containing the hash code for
               the current instance.
            </returns>
        </member>
        <member name="M:TagLib.WavPack.StreamHeader.Equals(System.Object)">
            <summary>
               Checks whether or not the current instance is equal to
               another object.
            </summary>
            <param name="other">
               A <see cref="T:System.Object" /> to compare to the current
               instance.
            </param>
            <returns>
               A <see cref="T:System.Boolean" /> value indicating whether or not the
               current instance is equal to <paramref name="other" />.
            </returns>
            <seealso cref="M:System.IEquatable`1.Equals" />
        </member>
        <member name="M:TagLib.WavPack.StreamHeader.Equals(TagLib.WavPack.StreamHeader)">
            <summary>
               Checks whether or not the current instance is equal to
               another instance of <see cref="T:TagLib.WavPack.StreamHeader" />.
            </summary>
            <param name="other">
               A <see cref="T:TagLib.WavPack.StreamHeader" /> object to compare to the
               current instance.
            </param>
            <returns>
               A <see cref="T:System.Boolean" /> value indicating whether or not the
               current instance is equal to <paramref name="other" />.
            </returns>
            <seealso cref="M:System.IEquatable`1.Equals" />
        </member>
        <member name="M:TagLib.WavPack.StreamHeader.op_Equality(TagLib.WavPack.StreamHeader,TagLib.WavPack.StreamHeader)">
            <summary>
               Gets whether or not two instances of <see
               cref="T:TagLib.WavPack.StreamHeader" /> are equal to eachother.
            </summary>
            <param name="first">
               The first <see cref="T:TagLib.WavPack.StreamHeader" /> object to compare.
            </param>
            <param name="second">
               The second <see cref="T:TagLib.WavPack.StreamHeader" /> object to compare.
            </param>
            <returns>
               <see langword="true" /> if <paramref name="first" /> is
               equal to <paramref name="second" />. Otherwise, <see
               langword="false" />.
            </returns>
        </member>
        <member name="M:TagLib.WavPack.StreamHeader.op_Inequality(TagLib.WavPack.StreamHeader,TagLib.WavPack.StreamHeader)">
            <summary>
               Gets whether or not two instances of <see
               cref="T:TagLib.WavPack.StreamHeader" /> are unequal to eachother.
            </summary>
            <param name="first">
               The first <see cref="T:TagLib.WavPack.StreamHeader" /> object to compare.
            </param>
            <param name="second">
               The second <see cref="T:TagLib.WavPack.StreamHeader" /> object to compare.
            </param>
            <returns>
               <see langword="true" /> if <paramref name="first" /> is
               unequal to <paramref name="second" />. Otherwise, <see
               langword="false" />.
            </returns>
        </member>
        <member name="T:TagLib.Xmp.XmpNode">
            <summary>
               An <see cref="T:TagLib.Xmp.XmpNode"/> represents a node in the XMP document.
               This is any valid XMP element.
            </summary>
        </member>
        <member name="F:TagLib.Xmp.XmpNode.children">
            <value>
               The children of the current node
            </value>
        </member>
        <member name="F:TagLib.Xmp.XmpNode.qualifiers">
            <value>
               The qualifiers of the current node
            </value>
        </member>
        <member name="F:TagLib.Xmp.XmpNode.name">
            <value>
               The name of the current node
            </value>
        </member>
        <member name="P:TagLib.Xmp.XmpNode.Namespace">
            <value>
               The namespace the current instance belongs to
            </value>
        </member>
        <member name="P:TagLib.Xmp.XmpNode.Name">
            <value>
               The name of the current node instance
            </value>
        </member>
        <member name="P:TagLib.Xmp.XmpNode.Value">
            <value>
               The text value of the current node
            </value>
        </member>
        <member name="P:TagLib.Xmp.XmpNode.Type">
            <value>
               The type of the current node
            </value>
        </member>
        <member name="P:TagLib.Xmp.XmpNode.QualifierCount">
            <value>
               The number of qualifiers of the current instance
            </value>
        </member>
        <member name="P:TagLib.Xmp.XmpNode.Children">
            <value>
               The children of the current instance.
            </value>
        </member>
        <member name="M:TagLib.Xmp.XmpNode.#ctor(System.String,System.String)">
            <summary>
               Constructor.
            </summary>
            <param name="ns">
               A <see cref="T:System.String"/> with the namespace of the new instance.
            </param>
            <param name="name">
               A <see cref="T:System.String"/> with the name of the new instance.
            </param>
        </member>
        <member name="M:TagLib.Xmp.XmpNode.#ctor(System.String,System.String,System.String)">
            <summary>
               Constructor.
            </summary>
            <param name="ns">
               A <see cref="T:System.String"/> with the namespace of the new instance.
            </param>
            <param name="name">
               A <see cref="T:System.String"/> with the name of the new instance.
            </param>
            <param name="value">
               A <see cref="T:System.String"/> with the txt value of the new instance.
            </param>
        </member>
        <member name="M:TagLib.Xmp.XmpNode.AddChild(TagLib.Xmp.XmpNode)">
            <summary>
               Adds a node as child of the current node
            </summary>
            <param name="node">
               A <see cref="T:TagLib.Xmp.XmpNode"/> to be add as child
            </param>
        </member>
        <member name="M:TagLib.Xmp.XmpNode.RemoveChild(TagLib.Xmp.XmpNode)">
            <summary>
               Removes the given node as child of the current instance
            </summary>
            <param name="node">
               A <see cref="T:TagLib.Xmp.XmpNode"/> to remove as child
            </param>
        </member>
        <member name="M:TagLib.Xmp.XmpNode.GetChild(System.String,System.String)">
            <summary>
               Get a named child from the current node
            </summary>
            <param name="ns">
               The namespace of the child node.
            </param>
            <param name="name">
               The name of the child node.
            </param>
            <returns>
               A <see cref="T:TagLib.Xmp.XmpNode"/> with the given name and namespace.
            </returns>
        </member>
        <member name="M:TagLib.Xmp.XmpNode.AddQualifier(TagLib.Xmp.XmpNode)">
            <summary>
               Adds a node as qualifier of the current instance
            </summary>
            <param name="node">
               A <see cref="T:TagLib.Xmp.XmpNode"/> to add as qualifier
            </param>
        </member>
        <member name="M:TagLib.Xmp.XmpNode.GetQualifier(System.String,System.String)">
            <summary>
               Returns the qualifier associated with the given namespace <paramref name="ns"/>
               and name <paramref name="name"/>
            </summary>
            <param name="ns">
               A <see cref="T:System.String"/> with the namespace of the qualifier
            </param>
            <param name="name">
               A <see cref="T:System.String"/> with the name of the qualifier
            </param>
            <returns>
               A <see cref="T:TagLib.Xmp.XmpNode"/> with the qualifier
            </returns>
        </member>
        <member name="M:TagLib.Xmp.XmpNode.Dump">
            <summary>
               Print a debug output of the node.
            </summary>
        </member>
        <member name="M:TagLib.Xmp.XmpNode.Accept(TagLib.Xmp.XmpNodeVisitor)">
            <summary>
               Calls the Visitor for this node and every child node.
            </summary>
            <param name="visitor">
               A <see cref="T:TagLib.Xmp.XmpNodeVisitor"/> to access the node and the children.
            </param>
        </member>
        <member name="M:TagLib.Xmp.XmpNode.RenderInto(System.Xml.XmlNode)">
            <summary>
               Renders the current instance as child of the given node to the
               given <see cref="T:System.Xml.XmlNode"/>
            </summary>
            <param name="parent">
               A <see cref="T:System.Xml.XmlNode"/> to render the current instance as child of.
            </param>
        </member>
        <member name="P:TagLib.Xmp.XmpNode.IsReallySimpleType">
            <summary>
               Is this a node that we can transform into an attribute of the
               parent node? Yes if it has no qualifiers or children, nor is
               it part of a list.
            </summary>
        </member>
        <member name="P:TagLib.Xmp.XmpNode.IsRootNode">
            <summary>
               Is this the root node of the tree?
            </summary>
        </member>
        <member name="T:TagLib.Xmp.XmpNodeType">
            <summary>
               Denotes the type of a node.
            </summary>
        </member>
        <member name="F:TagLib.Xmp.XmpNodeType.Simple">
            <summary>
               Unstructured (simple) value node.
            </summary>
        </member>
        <member name="F:TagLib.Xmp.XmpNodeType.Struct">
            <summary>
               Structured value node.
            </summary>
        </member>
        <member name="F:TagLib.Xmp.XmpNodeType.Seq">
            <summary>
               Ordered array.
            </summary>
        </member>
        <member name="F:TagLib.Xmp.XmpNodeType.Alt">
            <summary>
               Language alternative.
            </summary>
        </member>
        <member name="F:TagLib.Xmp.XmpNodeType.Bag">
            <summary>
               Unordered structured value.
            </summary>
        </member>
        <member name="T:TagLib.Xmp.XmpNodeVisitor">
            <summary>
               A visitor that walks the XMP node tree. This can be used to
               perform cleanups of XMP data. See the Visitor pattern for
               more info if you don't know how to use this.
            </summary>
        </member>
        <member name="M:TagLib.Xmp.XmpNodeVisitor.Visit(TagLib.Xmp.XmpNode)">
            <summary>
               Visit an <see cref="T:TagLib.Xmp.XmpNode" />.
            </summary>
            <param name="node">
               The <see cref="T:TagLib.Xmp.XmpNode" /> that is being visited.
            </param>
        </member>
        <member name="T:TagLib.Xmp.XmpTag">
            <summary>
               Holds XMP (Extensible Metadata Platform) metadata.
            </summary>
        </member>
        <member name="F:TagLib.Xmp.XmpTag.ADOBE_X_NS">
            <summary>
               Adobe namespace
            </summary>
        </member>
        <member name="F:TagLib.Xmp.XmpTag.CRS_NS">
            <summary>
               Camera Raw Settings namespace
            </summary>
        </member>
        <member name="F:TagLib.Xmp.XmpTag.DC_NS">
            <summary>
               Dublin Core namespace
            </summary>
        </member>
        <member name="F:TagLib.Xmp.XmpTag.EXIF_NS">
            <summary>
               Exif namespace
            </summary>
        </member>
        <member name="F:TagLib.Xmp.XmpTag.EXIF_AUX_NS">
            <summary>
               Exif aux namespace
            </summary>
        </member>
        <member name="F:TagLib.Xmp.XmpTag.JOB_NS">
            <summary>
               JOB namespace
            </summary>
        </member>
        <member name="F:TagLib.Xmp.XmpTag.MS_PHOTO_NS">
            <summary>
               Microsoft Photo namespace
            </summary>
        </member>
        <member name="F:TagLib.Xmp.XmpTag.PHOTOSHOP_NS">
            <summary>
               Photoshop namespace
            </summary>
        </member>
        <member name="F:TagLib.Xmp.XmpTag.PRISM_NS">
            <summary>
               Prism namespace
            </summary>
        </member>
        <member name="F:TagLib.Xmp.XmpTag.RDF_NS">
            <summary>
               RDF namespace
            </summary>
        </member>
        <member name="F:TagLib.Xmp.XmpTag.STDIM_NS">
            <summary>
               STDIM namespace
            </summary>
        </member>
        <member name="F:TagLib.Xmp.XmpTag.TIFF_NS">
            <summary>
               TIFF namespace
            </summary>
        </member>
        <member name="F:TagLib.Xmp.XmpTag.XAP_NS">
            <summary>
               XAP (XMP's previous name) namespace
            </summary>
        </member>
        <member name="F:TagLib.Xmp.XmpTag.XAP_BJ_NS">
            <summary>
               XAP bj namespace
            </summary>
        </member>
        <member name="F:TagLib.Xmp.XmpTag.XAP_MM_NS">
            <summary>
               XAP mm namespace
            </summary>
        </member>
        <member name="F:TagLib.Xmp.XmpTag.XAP_RIGHTS_NS">
            <summary>
               XAP rights namespace
            </summary>
        </member>
        <member name="F:TagLib.Xmp.XmpTag.XML_NS">
            <summary>
               XML namespace
            </summary>
        </member>
        <member name="F:TagLib.Xmp.XmpTag.XMLNS_NS">
            <summary>
               XMLNS namespace
            </summary>
        </member>
        <member name="F:TagLib.Xmp.XmpTag.XMPTG_NS">
            <summary>
               XMP TPg (XMP Paged-Text) namespace
            </summary>
        </member>
        <member name="F:TagLib.Xmp.XmpTag.NamespacePrefixes">
            <summary>
               Mapping between full namespaces and their short prefix. Needs to be public for the unit test generator.
            </summary>
        </member>
        <member name="M:TagLib.Xmp.XmpTag.#ctor">
            <summary>
               Construct a new empty <see cref="T:TagLib.Xmp.XmpTag"/>.
            </summary>
        </member>
        <member name="M:TagLib.Xmp.XmpTag.#ctor(System.String,TagLib.File)">
            <summary>
               Construct a new <see cref="T:TagLib.Xmp.XmpTag"/>, using the data parsed from the given string.
            </summary>
            <param name="data">
               A <see cref="T:System.String"/> containing an XMP packet. This should be a valid
               XMP block.
            </param>
            <param name="file">
               The file that's currently being parsed, used for reporting corruptions.
            </param>
        </member>
        <member name="M:TagLib.Xmp.XmpTag.AcceptVisitors">
            <summary>
            Accept visitors to touch up the node tree.
            </summary>
        </member>
        <member name="P:TagLib.Xmp.XmpTag.TagTypes">
            <summary>
               Gets the tag types contained in the current instance.
            </summary>
            <value>
               Always <see cref="F:TagLib.TagTypes.XMP" />.
            </value>
        </member>
        <member name="P:TagLib.Xmp.XmpTag.NodeTree">
            <summary>
               Get the tree of <see cref="T:TagLib.Xmp.XmpNode" /> nodes. These contain the values
               parsed from the XMP file.
            </summary>
        </member>
        <member name="M:TagLib.Xmp.XmpTag.ReplaceFrom(TagLib.Xmp.XmpTag)">
            <summary>
               Replace the current tag with the given one.
            </summary>
            <param name="tag">
               The tag from which the data should be copied.
            </param>
        </member>
        <member name="M:TagLib.Xmp.XmpTag.Clear">
            <summary>
               Clears the values stored in the current instance.
            </summary>
        </member>
        <member name="M:TagLib.Xmp.XmpTag.FindNode(System.String,System.String)">
            <summary>
               Finds the node associated with the namespace <paramref name="ns"/> and the name
               <paramref name="name"/>.
            </summary>
            <param name="ns">
               A <see cref="T:System.String"/> with the namespace of the node.
            </param>
            <param name="name">
               A <see cref="T:System.String"/> with the name of the node.
            </param>
            <returns>
               A <see cref="T:TagLib.Xmp.XmpNode"/> with the found node, or <see langword="null"/>
               if no node was found.
            </returns>
        </member>
        <member name="M:TagLib.Xmp.XmpTag.GetTextNode(System.String,System.String)">
            <summary>
               Returns the text of the node associated with the namespace
               <paramref name="ns"/> and the name <paramref name="name"/>.
            </summary>
            <param name="ns">
               A <see cref="T:System.String"/> with the namespace of the node.
            </param>
            <param name="name">
               A <see cref="T:System.String"/> with the name of the node.
            </param>
            <returns>
               A <see cref="T:System.String"/> with the text of the node, or
               <see langword="null"/> if no such node exists, or if it is not
               a text node.
            </returns>
        </member>
        <member name="M:TagLib.Xmp.XmpTag.SetTextNode(System.String,System.String,System.String)">
            <summary>
               Creates a new text node associated with the namespace
               <paramref name="ns"/> and the name <paramref name="name"/>.
            </summary>
            <param name="ns">
               A <see cref="T:System.String"/> with the namespace of the node.
            </param>
            <param name="name">
               A <see cref="T:System.String"/> with the name of the node.
            </param>
            <param name="value">
               A <see cref="T:System.String"/> with the value for the new node.
               If <see langword="null"/> is given, a possibly existing node will
               be deleted.
            </param>
        </member>
        <member name="M:TagLib.Xmp.XmpTag.GetLangAltNode(System.String,System.String)">
            <summary>
               Searches for a node holding language alternatives. The return value
               is the value of the default language stored by the node. The node is
               identified by the namespace <paramref name="ns"/> and the name
               <paramref name="name"/>. If the default language is not set, an arbitrary
               one is chosen.
               It is also tried to return the value a simple text node, if no
               associated alt-node exists.
            </summary>
            <param name="ns">
               A <see cref="T:System.String"/> with the namespace of the node.
            </param>
            <param name="name">
               A <see cref="T:System.String"/> with the name of the node.
            </param>
            <returns>
               A <see cref="T:System.String"/> with the value stored as default language
               for the referenced node.
            </returns>
        </member>
        <member name="M:TagLib.Xmp.XmpTag.SetLangAltNode(System.String,System.String,System.String)">
            <summary>
               Stores a the given <paramref name="value"/> as the default language
               value for the alt-node associated with the namespace
               <paramref name="ns"/> and the name <paramref name="name"/>.
               All other alternatives set, are deleted by this method.
            </summary>
            <param name="ns">
               A <see cref="T:System.String"/> with the namespace of the node.
            </param>
            <param name="name">
               A <see cref="T:System.String"/> with the name of the node.
            </param>
            <param name="value">
               A <see cref="T:System.String"/> with the value for the default language
               to set. If <see langword="null"/> is given, a possibly existing node
               will be deleted.
            </param>
        </member>
        <member name="M:TagLib.Xmp.XmpTag.GetCollectionNode(System.String,System.String)">
            <summary>
               The method returns an array of <see cref="T:System.String"/> values
               which are the stored text of the child nodes of the node associated
               with the namespace <paramref name="ns"/> and the name <paramref name="name"/>.
            </summary>
            <param name="ns">
               A <see cref="T:System.String"/> with the namespace of the node.
            </param>
            <param name="name">
               A <see cref="T:System.String"/> with the name of the node.
            </param>
            <returns>
               A <see cref="T:System.String[]"/> with the text stored in the child nodes.
            </returns>
        </member>
        <member name="M:TagLib.Xmp.XmpTag.SetCollectionNode(System.String,System.String,System.String[],TagLib.Xmp.XmpNodeType)">
            <summary>
               Sets a <see cref="T:System.String[]"/> as texts to the children of the
               node associated with the namespace <paramref name="ns"/> and the name
               <paramref name="name"/>.
            </summary>
            <param name="ns">
               A <see cref="T:System.String"/> with the namespace of the node.
            </param>
            <param name="name">
               A <see cref="T:System.String"/> with the name of the node.
            </param>
            <param name="values">
               A <see cref="T:System.String[]"/> with the values to set for the children.
            </param>
            <param name="type">
               A <see cref="T:TagLib.Xmp.XmpNodeType"/> with the type of the parent node.
            </param>
        </member>
        <member name="M:TagLib.Xmp.XmpTag.GetRationalNode(System.String,System.String)">
            <summary>
               Returns the rational value of the node associated with the namespace
               <paramref name="ns"/> and the name <paramref name="name"/>.
            </summary>
            <param name="ns">
               A <see cref="T:System.String"/> with the namespace of the node.
            </param>
            <param name="name">
               A <see cref="T:System.String"/> with the name of the node.
            </param>
            <returns>
               A double? with the read value, or
               <see langword="null"/> if no such node exists, or if it is in wrong
               format.
            </returns>
            <remarks>
               Rational nodes only used in EXIF schema.
            </remarks>
        </member>
        <member name="M:TagLib.Xmp.XmpTag.SetRationalNode(System.String,System.String,System.Double)">
            <summary>
               Creates a new rational node with the namespace
               <paramref name="ns"/> and the name <paramref name="name"/>.
            </summary>
            <param name="ns">
               A <see cref="T:System.String"/> with the namespace of the node.
            </param>
            <param name="name">
               A <see cref="T:System.String"/> with the name of the node.
            </param>
            <param name="value">
               A <see cref="T:System.Double"/> with the value of the node.
            </param>
        </member>
        <member name="M:TagLib.Xmp.XmpTag.GetUIntNode(System.String,System.String)">
            <summary>
               Returns the unsigned integer value of the node associated with the
               namespace <paramref name="ns"/> and the name <paramref name="name"/>.
            </summary>
            <param name="ns">
               A <see cref="T:System.String"/> with the namespace of the node.
            </param>
            <param name="name">
               A <see cref="T:System.String"/> with the name of the node.
            </param>
            <returns>
               A uint? with the read value, or
               <see langword="null"/> if no such node exists, or if it is in wrong
               format.
            </returns>
        </member>
        <member name="M:TagLib.Xmp.XmpTag.Render">
            <summary>
               Renders the current instance to an XMP <see cref="T:System.String"/>.
            </summary>
            <returns>
               A <see cref="T:System.String"/> with the XMP structure.
            </returns>
        </member>
        <member name="M:TagLib.Xmp.XmpTag.EnsureNamespacePrefix(System.String)">
            <summary>
               Make sure there's a suitable prefix mapped for the given namespace URI.
            </summary>
            <param name="ns">
               A <see cref="T:System.String"/> with the namespace that will be rendered.
            </param>
        </member>
        <member name="P:TagLib.Xmp.XmpTag.Comment">
            <summary>
               Gets or sets the comment for the image described
               by the current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> containing the comment of the
               current instace.
            </value>
        </member>
        <member name="P:TagLib.Xmp.XmpTag.Keywords">
            <summary>
               Gets or sets the keywords for the image described
               by the current instance.
            </summary>
            <value>
               A <see cref="T:string[]" /> containing the keywords of the
               current instace.
            </value>
        </member>
        <member name="P:TagLib.Xmp.XmpTag.Rating">
            <summary>
               Gets or sets the rating for the image described
               by the current instance.
            </summary>
            <value>
               A <see cref="T:System.Nullable"/> containing the rating of the
               current instace.
            </value>
        </member>
        <member name="P:TagLib.Xmp.XmpTag.DateTime">
            <summary>
               Gets or sets the time when the image, the current instance
               belongs to, was taken.
            </summary>
            <value>
               A <see cref="T:System.Nullable"/> with the time the image was taken.
            </value>
        </member>
        <member name="P:TagLib.Xmp.XmpTag.Orientation">
            <summary>
               Gets or sets the orientation of the image described
               by the current instance.
            </summary>
            <value>
               A <see cref="T:TagLib.Image.ImageOrientation" /> containing the orientation of the
               image
            </value>
        </member>
        <member name="P:TagLib.Xmp.XmpTag.Software">
            <summary>
               Gets or sets the software the image, the current instance
               belongs to, was created with.
            </summary>
            <value>
               A <see cref="T:System.String" /> containing the name of the
               software the current instace was created with.
            </value>
        </member>
        <member name="P:TagLib.Xmp.XmpTag.Latitude">
            <summary>
               Gets or sets the latitude of the GPS coordinate the current
               image was taken.
            </summary>
            <value>
               A <see cref="T:System.Nullable"/> with the latitude ranging from -90.0
               to +90.0 degrees.
            </value>
        </member>
        <member name="P:TagLib.Xmp.XmpTag.Longitude">
            <summary>
               Gets or sets the longitude of the GPS coordinate the current
               image was taken.
            </summary>
            <value>
               A <see cref="T:System.Nullable"/> with the longitude ranging from -180.0
               to +180.0 degrees.
            </value>
        </member>
        <member name="P:TagLib.Xmp.XmpTag.Altitude">
            <summary>
               Gets or sets the altitude of the GPS coordinate the current
               image was taken. The unit is meter.
            </summary>
            <value>
               A <see cref="T:System.Nullable"/> with the altitude. A positive value
               is above sea level, a negative one below sea level. The unit is meter.
            </value>
        </member>
        <member name="P:TagLib.Xmp.XmpTag.ExposureTime">
            <summary>
               Gets the exposure time the image, the current instance belongs
               to, was taken with.
            </summary>
            <value>
               A <see cref="T:System.Nullable"/> with the exposure time in seconds.
            </value>
        </member>
        <member name="P:TagLib.Xmp.XmpTag.FNumber">
            <summary>
               Gets the FNumber the image, the current instance belongs
               to, was taken with.
            </summary>
            <value>
               A <see cref="T:System.Nullable"/> with the FNumber.
            </value>
            <remarks>
               Bibble wrongly tends to put this into tiff:FNumber so we
               use that as a fallback and correct it if needed.
            </remarks>
        </member>
        <member name="P:TagLib.Xmp.XmpTag.ISOSpeedRatings">
            <summary>
               Gets the ISO speed the image, the current instance belongs
               to, was taken with.
            </summary>
            <value>
               A <see cref="T:System.Nullable"/> with the ISO speed as defined in ISO 12232.
            </value>
            <remarks>
               Bibble writes ISOSpeedRating instead of ISOSpeedRatings.
            </remarks>
        </member>
        <member name="P:TagLib.Xmp.XmpTag.FocalLength">
            <summary>
               Gets the focal length the image, the current instance belongs
               to, was taken with.
            </summary>
            <value>
               A <see cref="T:System.Nullable"/> with the focal length in millimeters.
            </value>
        </member>
        <member name="P:TagLib.Xmp.XmpTag.FocalLengthIn35mmFilm">
            <summary>
               Gets the focal length the image, the current instance belongs
               to, was taken with, assuming a 35mm film camera.
            </summary>
            <value>
               A <see cref="T:System.Nullable"/> with the focal length in 35mm equivalent in millimeters.
            </value>
        </member>
        <member name="P:TagLib.Xmp.XmpTag.Make">
            <summary>
               Gets the manufacture of the recording equipment the image, the
               current instance belongs to, was taken with.
            </summary>
            <value>
               A <see cref="T:System.String" /> with the manufacture name.
            </value>
        </member>
        <member name="P:TagLib.Xmp.XmpTag.Model">
            <summary>
               Gets the model name of the recording equipment the image, the
               current instance belongs to, was taken with.
            </summary>
            <value>
               A <see cref="T:System.String" /> with the model name.
            </value>
        </member>
        <member name="P:TagLib.Xmp.XmpTag.Creator">
            <summary>
               Gets or sets the creator of the image.
            </summary>
            <value>
               A <see cref="T:System.String" /> with the name of the creator.
            </value>
        </member>
        <member name="P:TagLib.Xmp.XmpTag.Title">
            <summary>
               Gets and sets the title for the media described by the
               current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> object containing the title for
               the media described by the current instance or <see
               langword="null" /> if no value is present.
            </value>
        </member>
        <member name="P:TagLib.Xmp.XmpTag.Copyright">
            <summary>
               Gets and sets the copyright information for the media
               represented by the current instance.
            </summary>
            <value>
               A <see cref="T:System.String" /> object containing the copyright
               information for the media represented by the current
               instance or <see langword="null" /> if no value present.
            </value>
        </member>
    </members>
</doc>
