<#@ template hostspecific="false" language="C#" #>
<#@ import namespace="System.Linq" #>
<#@ output extension=".cs" #>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Cysharp.Text;

<#
const int maxKeyArguments = 4;
const int maxFormatArguments = 10;
#>
namespace YARG.Localization
{
    public static partial class Localize
    {
        #region Keys

<#
for (int keyCount = 2; keyCount <= maxKeyArguments; keyCount++)
{
    var types = Enumerable.Range(1, keyCount).Select(n => "T" + n);
    var arguments = types.Select(t => t.ToLower());
    var parameters = types.Zip(arguments, (t, a) => t + " " + a);
#>
        public static string MakeKey<<#= string.Join(", ", types) #>>(
            <#= string.Join(", ", parameters) #>)
        {
            return ZString.Concat(<#= string.Join(", '.', ", arguments) #>);
        }

        public static string Key<<#= string.Join(", ", types) #>>(
            <#= string.Join(", ", parameters) #>)
        {
            return Key(MakeKey(<#= string.Join(", ", arguments) #>));
        }

<#
}
#>
        #endregion

        #region Format

<#
for (int formatCount = 1; formatCount <= maxFormatArguments; formatCount++)
{
    var formatTypes = Enumerable.Range(1, formatCount).Select(n => "F" + n);
    var formatArguments = formatTypes.Select(t => t.ToLower());
    var formatParameters = formatTypes.Zip(formatArguments, (t, a) => t + " " + a);
#>
        public static string KeyFormat<<#= string.Join(", ", formatTypes) #>>(
            string key, <#= string.Join(", ", formatParameters) #>)
        {
            return ZString.Format(Key(key), <#= string.Join(", ", formatArguments) #>);
        }

<#
    for (int keyCount = 2; keyCount <= maxKeyArguments; keyCount++)
    {
        var keyTypes = Enumerable.Range(1, keyCount).Select(n => "K" + n);
        var keyArguments = keyTypes.Select(t => t.ToLower());
        var keyParameters = keyTypes.Zip(keyArguments, (t, a) => t + " " + a);
#>
        public static string KeyFormat<<#= string.Join(", ", keyTypes) #>, <#= string.Join(", ", formatTypes) #>>(
            (<#= string.Join(", ", keyParameters) #>) key, <#= string.Join(", ", formatParameters) #>)
        {
            return ZString.Format(Key(<#= string.Join(", ", keyArguments.Select(k => "key." + k)) #>),
                <#= string.Join(", ", formatArguments) #>);
        }

<#
    }
}
#>
        #endregion
    }
}